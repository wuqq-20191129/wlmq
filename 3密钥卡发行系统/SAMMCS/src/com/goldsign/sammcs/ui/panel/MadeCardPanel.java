
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GenIssueRequestPanel.java
 *
 * Created on 2011-8-3, 8:31:03
 */

package com.goldsign.sammcs.ui.panel;

import com.goldsign.csfrm.env.BaseConstant;
import com.goldsign.csfrm.ui.common.LengthLimitDocument;
import com.goldsign.csfrm.util.MessageShowUtil;
import com.goldsign.csfrm.util.StringUtil;
import com.goldsign.csfrm.util.UIUtil;
import com.goldsign.csfrm.vo.CallResult;
import com.goldsign.csfrm.vo.SelectOptionVo;
import com.goldsign.sammcs.application.Application;
import com.goldsign.sammcs.env.AppConstant;
import com.goldsign.sammcs.env.ConfigConstant;
import com.goldsign.sammcs.service.IMakeCardService;
import com.goldsign.sammcs.service.IOperateLogService;
import com.goldsign.sammcs.service.IPSamIssueService;
import com.goldsign.sammcs.service.impl.MakeCardService;
import com.goldsign.sammcs.service.impl.OperateLogService;
import com.goldsign.sammcs.util.ConfigUtil;
import com.goldsign.sammcs.util.PubUtil;
import com.goldsign.sammcs.vo.IssueVo;
import com.goldsign.sammcs.vo.KmsCfgParam;
import com.goldsign.sammcs.vo.MakeCardQueryVo;
import com.goldsign.sammcs.vo.MakeCardVo;
import com.goldsign.sammcs.vo.OperateLogVo;
import com.goldsign.sammcs.vo.PubFlagVo;
import com.goldsign.sammcs.vo.ReadOutInfVo;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JTable;
//import javax.swing.plaf.basic.BasicComboBoxUI;
import org.apache.log4j.Logger;
/**
 * 密钥卡制作
 * @author Administrator
 */
public class MadeCardPanel extends javax.swing.JPanel {
    
    private static Logger logger = Logger.getLogger(MadeCardPanel.class.getName());
    
    private JTable resultSetTableMain;
    
    private IPSamIssueService pSamIssueService;
    
    private IMakeCardService makeCardService;
    
    private IOperateLogService operateLogService;
    
    private OperateLogVo logVo;
    
    private boolean isConfirmCard;
    
    //生产单号            
    private static final int COLUMN_ORDER_NO_INDEX = 0;
    //SAM类型
    private static final int COLUMN_SAM_TYPE_DESC_INDEX = 1;
    //起始逻辑卡号
    private static final int COLUMN_START_LOGIC_NO_INDEX = 2;
    //生产数量
    private static final int COLUMN_ORDER_NUM_INDEX = 3;
    //完成数量
    private static final int COLUMN_FINISH_NUM_INDEX = 4;
    //完成标志
    private static final int COLUMN_FINISH_FLAG_NAME_INDEX = 5;
    //制卡人
    private static final int COLUMN_MAKE_CARD_OPER_INDEX = 6;
    //制卡时间
    private static final int COLUMN_MAKE_CARD_TIME_INDEX = 7;
    //备注
    private static final int COLUMN_REMARK_INDEX = 8;
    //审核人
    private static final int COLUMN_AUDIT_ORDER_OPER_INDEX = 9;
    //审核时间
    private static final int COLUMN_AUDIT_ORDER_TIME_INDEX = 10;

    
    /** Creates new form GenIssueRequestPanel */
    public MadeCardPanel() throws Exception {
        initComponents();
        makeCardService = new MakeCardService();
        operateLogService = new OperateLogService();
        pSamIssueService = ((Application)AppConstant.application).getpSamIssueService();
        initCon();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        mainSPn = new javax.swing.JScrollPane();
        jTextField5 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btQuery = new javax.swing.JButton();
        q_orderNoText = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        q_samTypeCBox = new javax.swing.JComboBox();
        q_finishFlagCBox = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        q_workTypeCBox = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        orderNoText = new javax.swing.JTextField();
        orderNumText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        beginLogicNoText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        curLogicNoText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        finishNumText = new javax.swing.JTextField();
        samTypeDescText = new javax.swing.JTextField();
        endLogicNoText = new javax.swing.JTextField();
        btCancel = new javax.swing.JButton();
        btWriteCard = new javax.swing.JButton();
        jLabelMadeInfo01 = new javax.swing.JLabel();
        jLabelMadeInfo02 = new javax.swing.JLabel();
        jLabelMadeInfo03 = new javax.swing.JLabel();
        jLabelMadeInfo04 = new javax.swing.JLabel();
        jLabelMadeInfo05 = new javax.swing.JLabel();
        btConfirm = new javax.swing.JButton();
        samTypeText = new javax.swing.JTextField();
        btCancelOrder = new javax.swing.JButton();
        makeCardOperText = new javax.swing.JTextField();

        setBackground(new java.awt.Color(254, 254, 254));
        setPreferredSize(new java.awt.Dimension(845, 589));

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(807, 74));

        jTextField5.setEditable(false);
        jTextField5.setBackground(new java.awt.Color(185, 227, 241));
        jTextField5.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        jTextField5.setForeground(new java.awt.Color(94, 55, 16));
        jTextField5.setText("   结果列表");
        jTextField5.setAlignmentX(0.0F);
        jTextField5.setAlignmentY(0.0F);
        jTextField5.setBorder(null);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTextField5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
            .add(mainSPn)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainSPn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(237, 247, 249));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(792, 105));

        btQuery.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btQuery.setForeground(new java.awt.Color(70, 95, 125));
        btQuery.setText("查询");
        btQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btQueryActionPerformed(evt);
            }
        });

        q_orderNoText.setDocument(new LengthLimitDocument(20,true,true));
        q_orderNoText.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        q_orderNoText.setForeground(new java.awt.Color(0, 39, 80));
        q_orderNoText.setPreferredSize(new java.awt.Dimension(6, 27));

        jTextField4.setEditable(false);
        jTextField4.setBackground(new java.awt.Color(185, 227, 241));
        jTextField4.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(94, 55, 16));
        jTextField4.setText("   查询条件");
        jTextField4.setAlignmentX(0.0F);
        jTextField4.setAlignmentY(0.0F);
        jTextField4.setBorder(null);

        jLabel2.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 39, 80));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("生产订单号：");

        jLabel5.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 39, 80));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("SAM卡类型：");

        jLabel1.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 39, 80));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("完成标志：");

        q_samTypeCBox.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        q_samTypeCBox.setForeground(new java.awt.Color(0, 39, 80));
        q_samTypeCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                q_samTypeCBoxActionPerformed(evt);
            }
        });

        q_finishFlagCBox.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        q_finishFlagCBox.setForeground(new java.awt.Color(0, 39, 80));
        q_finishFlagCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                q_finishFlagCBoxActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 39, 80));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("工作类型：");
        jLabel11.setToolTipText("");

        q_workTypeCBox.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        q_workTypeCBox.setForeground(new java.awt.Color(0, 39, 80));
        q_workTypeCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                q_workTypeCBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(25, 25, 25)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(q_orderNoText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(q_samTypeCBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 179, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(35, 35, 35)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .add(18, 18, 18)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(q_finishFlagCBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(26, 26, 26))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(q_workTypeCBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .add(jPanel2Layout.createSequentialGroup()
                .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 788, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(q_finishFlagCBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(btQuery))
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(q_orderNoText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(q_samTypeCBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(q_workTypeCBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel11.getAccessibleContext().setAccessibleName("工作类型：");

        jPanel3.setBackground(new java.awt.Color(237, 247, 249));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setForeground(new java.awt.Color(70, 95, 125));

        jLabel3.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 39, 80));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("SAM卡类型：");

        orderNoText.setEditable(false);
        orderNoText.setBackground(new java.awt.Color(204, 204, 204));
        orderNoText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        orderNoText.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        orderNumText.setEditable(false);
        orderNumText.setBackground(new java.awt.Color(204, 204, 204));
        orderNumText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        orderNumText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel9.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 39, 80));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("生产订单号：");

        jTextField6.setEditable(false);
        jTextField6.setBackground(new java.awt.Color(185, 227, 241));
        jTextField6.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        jTextField6.setForeground(new java.awt.Color(94, 55, 16));
        jTextField6.setText("   表单信息");
        jTextField6.setAlignmentX(0.0F);
        jTextField6.setAlignmentY(0.0F);
        jTextField6.setBorder(null);

        jLabel6.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 39, 80));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("生产数量：");

        jLabel7.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 39, 80));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("逻辑卡号范围：");

        beginLogicNoText.setEditable(false);
        beginLogicNoText.setBackground(new java.awt.Color(204, 204, 204));
        beginLogicNoText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        beginLogicNoText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        beginLogicNoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginLogicNoTextActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 39, 80));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("当前逻辑卡号：");

        curLogicNoText.setEditable(false);
        curLogicNoText.setBackground(new java.awt.Color(204, 204, 204));
        curLogicNoText.setDocument(new LengthLimitDocument(16,true,true));
        curLogicNoText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        curLogicNoText.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel10.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 39, 80));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("完成数量：");

        finishNumText.setEditable(false);
        finishNumText.setBackground(new java.awt.Color(204, 204, 204));
        finishNumText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        finishNumText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        samTypeDescText.setEditable(false);
        samTypeDescText.setBackground(new java.awt.Color(204, 204, 204));
        samTypeDescText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        samTypeDescText.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        endLogicNoText.setEditable(false);
        endLogicNoText.setBackground(new java.awt.Color(204, 204, 204));
        endLogicNoText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        endLogicNoText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        endLogicNoText.setToolTipText("");
        endLogicNoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endLogicNoTextActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jTextField6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 788, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(beginLogicNoText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                            .add(orderNoText)
                            .add(endLogicNoText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(curLogicNoText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 168, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jLabel10))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(samTypeDescText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 168, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(jLabel6)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(finishNumText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(orderNumText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(14, 14, 14)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jTextField6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(orderNumText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(samTypeDescText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, orderNoText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(beginLogicNoText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                        .add(endLogicNoText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(28, 28, 28))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(curLogicNoText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(finishNumText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        btCancel.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btCancel.setText("取消");
        btCancel.setEnabled(false);
        btCancel.setName(""); // NOI18N
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        btWriteCard.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btWriteCard.setText("发卡");
        btWriteCard.setName("btWriteCard"); // NOI18N
        btWriteCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btWriteCardActionPerformed(evt);
            }
        });

        jLabelMadeInfo01.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabelMadeInfo01.setForeground(new java.awt.Color(70, 95, 125));
        jLabelMadeInfo01.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLabelMadeInfo02.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabelMadeInfo02.setForeground(new java.awt.Color(255, 93, 2));
        jLabelMadeInfo02.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelMadeInfo03.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabelMadeInfo03.setForeground(new java.awt.Color(70, 95, 125));

        jLabelMadeInfo04.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabelMadeInfo04.setForeground(new java.awt.Color(255, 93, 2));
        jLabelMadeInfo04.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelMadeInfo05.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabelMadeInfo05.setForeground(new java.awt.Color(70, 95, 125));
        jLabelMadeInfo05.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        btConfirm.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btConfirm.setText("确定");
        btConfirm.setEnabled(false);
        btConfirm.setName("btMadeCard"); // NOI18N
        btConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmActionPerformed(evt);
            }
        });

        samTypeText.setEditable(false);
        samTypeText.setBackground(new java.awt.Color(204, 255, 204));
        samTypeText.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        samTypeText.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        btCancelOrder.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btCancelOrder.setText("结束订单");
        btCancelOrder.setName("btWriteCard"); // NOI18N
        btCancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelOrderActionPerformed(evt);
            }
        });

        makeCardOperText.setEditable(false);
        makeCardOperText.setBackground(new java.awt.Color(204, 255, 204));
        makeCardOperText.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        makeCardOperText.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 792, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 792, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(samTypeText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(54, 54, 54)
                                .add(btWriteCard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(jLabelMadeInfo01, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabelMadeInfo02, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(409, 409, 409)
                                .add(jLabelMadeInfo03, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 146, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabelMadeInfo04, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabelMadeInfo05, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(73, 73, 73)
                                .add(btConfirm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(82, 82, 82)
                                .add(btCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(65, 65, 65)
                                .add(btCancelOrder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(20, 20, 20)
                    .add(makeCardOperText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(899, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 226, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btWriteCard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btConfirm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(samTypeText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btCancelOrder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(57, 57, 57)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabelMadeInfo04, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabelMadeInfo05, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabelMadeInfo02, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabelMadeInfo01, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabelMadeInfo03, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(551, Short.MAX_VALUE)
                    .add(makeCardOperText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(95, 95, 95)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btQueryActionPerformed
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        
        doQuery();
        
        this.cleanTextField();
//        this.curLogicNoText.setText("");
//        this.curLogicNoText.setEnabled(true);
//        this.curLogicNoText.setEditable(false);
        
//        btWriteCard.setEnabled(true);
        btWriteCard.setEnabled(false);
        btConfirm.setEnabled(false);
        btCancel.setEnabled(false);
        btCancelOrder.setEnabled(false);
        //设置默认值
        isConfirmCard = false;
        
        
    }//GEN-LAST:event_btQueryActionPerformed

    //发卡操作 
    private void btWriteCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btWriteCardActionPerformed
            //清空提示信息
            MessageShowUtil.infoOpMsg("");
            btWriteCard.setEnabled(false);
            btConfirm.setEnabled(true);
            btCancel.setEnabled(true);
            btCancelOrder.setEnabled(false);
            
            //MessageShowUtil.warnOpMsg( "请放入密钥卡，含芯片的卡面朝上！");
            //logicNoInPutText.requestFocus();
            if(!doRead()){
                btConfirm.setEnabled(false);
                btCancel.setEnabled(false);
                btWriteCard.setEnabled(true);
            }
            
//        }
        
    }//GEN-LAST:event_btWriteCardActionPerformed

    //发卡后取消操作
    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        //清空手输逻辑卡号
        this.curLogicNoText.setText("");
        
        btWriteCard.setEnabled(true);
        btConfirm.setEnabled(false);
        btCancel.setEnabled(false);
        btCancelOrder.setEnabled(true);
        //设置默认值
        isConfirmCard = false;
        
    }//GEN-LAST:event_btCancelActionPerformed

    //发卡后确认操作 
    private void btConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmActionPerformed
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        if(doWrite()){//制卡成功后设置按键状态
            
            //判断订单是否为全部完成
            Object[] orderPlanValues = makeCardService.getOrderPlanData(orderNoText.getText().trim());
            boolean notAllComplete = this.isNotAllComplete((String)orderPlanValues[0]);
            String finishNumStr = (String)orderPlanValues[1];
            String makeCardOper = (String)orderPlanValues[3];
            String makeCardTime = (String)orderPlanValues[4];

            //页面更新完成数量
            finishNumText.setText(String.valueOf(finishNumStr));
            int row = resultSetTableMain.getSelectedRow();
            resultSetTableMain.setValueAt(finishNumStr, row, COLUMN_FINISH_NUM_INDEX);
            //更新制卡人、制卡时间
            resultSetTableMain.setValueAt(makeCardOper, row, COLUMN_MAKE_CARD_OPER_INDEX);
            resultSetTableMain.setValueAt(makeCardTime, row, COLUMN_MAKE_CARD_TIME_INDEX);
            String curLogNo = curLogicNoText.getText();
            //清空手输逻辑卡号
            this.curLogicNoText.setText("");
            //改为显示上一上逻辑卡号
            //this.logicNoInPutText.setText(curLogicNoText.getText().trim());


            if (notAllComplete) {   
                //页面更新完成标志为:部分完成
                resultSetTableMain.setValueAt(AppConstant.FINISH_FLAG_PART_COMPLETE_NAME, row, COLUMN_FINISH_FLAG_NAME_INDEX);
                //String curLogicNo = makeCardService.getCurLogicNo(orderNoText.getText().trim());
                //this.beginLogicNoText.setText(curLogicNo);
                this.curLogicNoText.setEditable(false);
                //继续点击发卡， 确定不可选
                btWriteCard.setEnabled(true);
                btConfirm.setEnabled(false);
                btCancel.setEnabled(false);
                btCancelOrder.setEnabled(true);
                //MessageShowUtil.warnOpMsg( "制作下一张卡，逻辑卡号为["+curLogicNo+"]！");
                MessageShowUtil.warnOpMsg( "逻辑卡号为"+curLogNo+"的密钥卡发行成功，请插入新的密钥卡，继续发行！");

            } else {
                
                //页面更新完成标志为：全已完成
                resultSetTableMain.setValueAt(AppConstant.FINISH_FLAG_ALL_COMPLETE_NAME, row, COLUMN_FINISH_FLAG_NAME_INDEX);
                this.curLogicNoText.setEditable(false);
                
                btWriteCard.setEnabled(false);
                btConfirm.setEnabled(false);
                btCancel.setEnabled(false);
                btCancelOrder.setEnabled(false);
                MessageShowUtil.warnOpMsg( "生产单制卡全部完成！");
            }
        }
    }//GEN-LAST:event_btConfirmActionPerformed

    private void btCancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelOrderActionPerformed
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        MakeCardVo makeCardVo = getWriteCardParam();
        if (checkParamBeforeCancelOrder(makeCardVo)) {
            int confirmValue = MessageShowUtil.confirmInfoMsg("请确认是否结束订单？",  BaseConstant.YES_NO_OPTION);
            if (confirmValue==1 || confirmValue==-1) {//是：0   否：1   关闭：-1
                    return;
            }
            if (doCancelOrder(makeCardVo.getOrderNo())) {
                int row = resultSetTableMain.getSelectedRow();
                //页面更新完成标志为：全已完成
                resultSetTableMain.setValueAt(AppConstant.FINISH_FLAG_ALL_COMPLETE_NAME, row, COLUMN_FINISH_FLAG_NAME_INDEX);
                //如果页面完成数量为空，更新完成数量为0
//                if (null == resultSetTableMain.getValueAt(row,COLUMN_FINISH_NUM_INDEX)) {
//                    finishNumText.setText(String.valueOf("0"));
//                    resultSetTableMain.setValueAt("0", row, COLUMN_FINISH_NUM_INDEX);
//                }
                
                //取订单信息
                Object[] orderPlanValues = makeCardService.getOrderPlanData(orderNoText.getText().trim());
                String finishNumStr = (String)orderPlanValues[1];
                String makeCardOper = (String)orderPlanValues[3];
                String makeCardTime = (String)orderPlanValues[4];

                //页面更新完成数量
                finishNumText.setText(String.valueOf(finishNumStr));
                resultSetTableMain.setValueAt(finishNumStr, row, COLUMN_FINISH_NUM_INDEX);
                //更新制卡人、制卡时间
                resultSetTableMain.setValueAt(makeCardOper, row, COLUMN_MAKE_CARD_OPER_INDEX);
                resultSetTableMain.setValueAt(makeCardTime, row, COLUMN_MAKE_CARD_TIME_INDEX);
                        
                
                btWriteCard.setEnabled(false);
                btCancelOrder.setEnabled(false);
                MessageShowUtil.alertInfoMsg( "结束订单成功！");
            } else {
                btCancelOrder.setEnabled(true);
                MessageShowUtil.alertErrorMsg( "结束订单失败！");
            }
            
        }
        //设置默认值
        isConfirmCard = false;
        
    }//GEN-LAST:event_btCancelOrderActionPerformed

    private void q_samTypeCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_q_samTypeCBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_q_samTypeCBoxActionPerformed

    private void q_finishFlagCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_q_finishFlagCBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_q_finishFlagCBoxActionPerformed

    private void endLogicNoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endLogicNoTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_endLogicNoTextActionPerformed

    private void beginLogicNoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginLogicNoTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_beginLogicNoTextActionPerformed

    private void q_workTypeCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_q_workTypeCBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_q_workTypeCBoxActionPerformed

    
    /**
     * 查询
     * 
     */
    private void doQuery(){
        MakeCardQueryVo queryVo = getQueryVo();
        
        //查询
        List<Object[]> cards = makeCardService.getMakeCards(queryVo);
        
        //生成列表
        genMainResultSetTable(cards);
        
        MessageShowUtil.infoOpMsg("成功查询"+cards.size()+"条记录！");
    }
    private boolean doRead(){
        //1.检测数据库连接和加密机连接是否正常
        if(AppConstant.dbcpHelper.checkDBConnect()){
            setCommuStatus(true);
        }else {
            setCommuStatus(false);
            MessageShowUtil.errorOpMsg( "网络异常，请联系管理员，点击确认按钮后，系统3秒后自动退出！");
            JOptionPane.showMessageDialog(BaseConstant.mainFrame, "网络异常，请联系管理员，点击确认按钮后，系统3秒后自动退出！");
            try {
                Thread.sleep(3000);
            } catch (InterruptedException ex) {
                java.util.logging.Logger.getLogger(MadeCardPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.exit(0);
        }
        //2.检查加密机通讯状态
        if (!openKmsConnection()) {
                //更新加密机通讯状态
                setKMSStatus(false);
                MessageShowUtil.errorOpMsg( "加密机通讯连接不成功，请检查设备是否正确连接！");
                MessageShowUtil.alertErrorMsg( "加密机通讯连接不成功，请检查设备是否正确连接！");
                return false;
        } else {
            //更新加密机通讯状态
            setKMSStatus(true);
        }
        CallResult callResult = pSamIssueService.read();
        //查看卡状态
        if (!callResult.isSuccess()) {
            
            if (AppConstant.KMS_PLUGIN_CARD_CODE.equals(callResult.getCode())) {//F5: 读写器打开失败
                MessageShowUtil.alertErrorMsg("读写器打开失败！");
                return false;
            } else if (AppConstant.KMS_BAUD_RATE_FAILED_CODE.equals(callResult.getCode())) {//02: 波特率设置失败
                MessageShowUtil.alertErrorMsg("波特率设置失败，读写器功能异常！");
                return false;
            } else if (AppConstant.KMS_CARD_NOT_FOUND_CODE.equals(callResult.getCode())) {//03: 卡复位失败（寻不到卡或卡没有插好）
                MessageShowUtil.alertErrorMsg("卡复位失败（寻不到卡或卡没有插好），请重新插卡，含芯片的卡面朝上！");
                return false;
            } else if (AppConstant.KMS_ACHIEVE_MICROCHIP_FAILED_CODE.equals(callResult.getCode())) {//A0： PSAM获取芯片号失败
                MessageShowUtil.alertErrorMsg("PSAM获取芯片号失败，该卡是坏卡！");
                return false;
            }else if (AppConstant.KMS_MF0015_CODE.equals(callResult.getCode())) {// "01" MF 0015获取失败,空白卡
                MessageShowUtil.alertErrorMsg("该卡是空白卡或异型卡！");
                return false;
            }
        }
        
        ReadOutInfVo readOutInfVo = (ReadOutInfVo)callResult.getObjs().get(0);
        String curLogicalNo = (String) readOutInfVo.getPsamCardNo();
        String issueState = (String) readOutInfVo.getIssueState();
        curLogicNoText.setText(curLogicalNo);
        curLogicNoText.setEditable(false);
        
        
        if(curLogicalNo.compareTo(beginLogicNoText.getText())<0 
                || curLogicalNo.compareTo(endLogicNoText.getText())>0){
            MessageShowUtil.errorOpMsg( "当前逻辑卡号: "+curLogicalNo+" 不在工作单的逻辑卡号范围内，不能发卡！");
            MessageShowUtil.alertErrorMsg( "当前逻辑卡号: "+curLogicalNo+" 不在工作单的逻辑卡号范围内，不能发卡！");
            btCancelOrder.setEnabled(true);
            btWriteCard.setEnabled(true);
            return false;
        }
        //20190917 limingjin
        if(orderNoText.getText().startsWith("SCDD")){
            if("01".equals(issueState)){
                MessageShowUtil.errorOpMsg( "当前逻辑卡号: "+curLogicalNo+" 已经发行！");
                MessageShowUtil.alertErrorMsg( "当前逻辑卡号: "+curLogicalNo+" 已经发行！");
                btCancelOrder.setEnabled(true);
                btWriteCard.setEnabled(true);
                return false;
            }
        }
        return true;
    }
    
    private boolean doWrite() {
        
        String phyNo = "";
        //20160126 add by mqf
        String cardProducerCode = "";
        MakeCardVo makeCardVo = getWriteCardParam();
        String logicNoNow = makeCardVo.getCurLogicNo();
        if (!checkParam(makeCardVo)) {
            return false;
        }
        
        //1.检查数据库是否连通；
        if(!AppConstant.dbcpHelper.checkDBConnect()){
            setCommuStatus(false);
            MessageShowUtil.errorOpMsg( "网络异常，请联系管理员，点击确认按钮后，系统3秒后自动退出！");
            JOptionPane.showMessageDialog(BaseConstant.mainFrame, "网络异常，请联系管理员，点击确认按钮后，系统3秒后自动退出！");
            try {
                Thread.sleep(3000);
            } catch (InterruptedException ex) {
                java.util.logging.Logger.getLogger(MadeCardPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.exit(0);
        }else{
            setCommuStatus(true);
        }
        //2.检查加密机是否连通；
        if (!openKmsConnection()) {
                //更新加密机通讯状态
                setKMSStatus(false);
                MessageShowUtil.errorOpMsg( "加密机通讯连接不成功，请检查设备是否正确连接！");
                MessageShowUtil.alertErrorMsg( "加密机通讯连接不成功，请检查设备是否正确连接！");
                return false;
        } else {
            //更新加密机通讯状态
            setKMSStatus(true);
        }
        
       
        //3.检查生成订单是否完成
        if (!makeCardService.checkOrderPlan(makeCardVo.getOrderNo())) {
                MessageShowUtil.alertErrorMsg( "工作单的完成标志为全部完成！不能制卡！");
                return false;
            }
        //20190917 limingjin
        if(makeCardVo.getOrderNo().startsWith("SCDD")){
            //4.检查当前逻辑卡号是否已经在密钥卡发行明细表中
            if (makeCardService.issueDetailIsExist(makeCardVo.getCurLogicNo())) {
                logger.info("当前逻辑卡号["+makeCardVo.getCurLogicNo()+"]在密钥卡发行明细表中已存在！");

                MessageShowUtil.alertErrorMsg( "当前逻辑卡号["+makeCardVo.getCurLogicNo()+"]在密钥卡发行明细表中已存在！");
                //继续发行下一个逻辑卡号
                return true;
            }
        }
        //5.读卡
        CallResult callResult = pSamIssueService.read();
        //5.1读卡成功
        if(callResult.isSuccess()){
            ReadOutInfVo readOutInfVo = (ReadOutInfVo)callResult.getObjs().get(0);
            String issueState = (String) readOutInfVo.getIssueState();//是否已经制卡标志
            String logicNoRead = (String) readOutInfVo.getPsamCardNo();//获取Sam卡逻辑卡号
            //判断逻辑卡号是否一致
            if(!logicNoNow.equals(logicNoRead)){
                MessageShowUtil.errorOpMsg( "界面上“当前逻辑卡号”与读写器读出的逻辑卡号不一致，不能发卡！");
                MessageShowUtil.alertErrorMsg( "界面上“当前逻辑卡号”与读写器读出的逻辑卡号不一致，不能发卡！");
                return false;
            }
            //20190917 limingjin
            if(makeCardVo.getOrderNo().startsWith("SCDD")){
                //判断是否是已发行卡
                if ("01".endsWith(issueState)) {
                    logger.info("当前密钥卡已发行，不能制卡！");
                    MessageShowUtil.errorOpMsg( "当前密钥卡已发行，不能制卡！");
                    MessageShowUtil.alertErrorMsg( "当前密钥卡已发行，不能制卡！");
                    return false;
                }
            }
            //发卡操作
            logger.info("准备写卡，逻辑号为"+makeCardVo.getCurLogicNo());
            
            //写操作日志，包括文件和数据库
            logVo = new OperateLogVo();
            logVo.setOperId(BaseConstant.user.getAccount());
            logVo.setModuleId("7101");
            logVo.setOperType(AppConstant.OPRT_LOG_OPER_TYPE_READY_WRITE_CARD_NAME); //"准备写卡"
            //modified by lijia
            //logVo.setDescription("准备写卡，逻辑号为"+makeCardVo.getCurLogicNo());
            logVo.setDescription("准备写卡，逻辑号为"+makeCardVo.getCurLogicNo());
            operateLogService.insertOperaterLogs(logVo);//插入操作

             //写卡
//            phyNo = issue(makeCardVo);
            //20160126 modify by mqf
            IssueVo issueVo = issue(makeCardVo);
            try {
                phyNo = issueVo.getPsamCardPhyNo();
            }catch(Throwable e){
                MessageShowUtil.errorOpMsg( "写卡失败！请确认是否正确插卡！");
                MessageShowUtil.alertErrorMsg("写卡失败！请确认是否正确插卡！");
                return false;
            }
            
            cardProducerCode = issueVo.getCardProducerCode();
            
            //插入数据库
            try {
                if(makeCardService.writeMakeCard(makeCardVo,phyNo,cardProducerCode,BaseConstant.user.getAccount())){
                    if (!StringUtil.isEmpty(phyNo)) {
//                        MessageShowUtil.alertInfoMsg("写卡更新数据库成功！");
                        MessageShowUtil.alertInfoMsg("写卡成功！");
                    } else {
                        MessageShowUtil.alertErrorMsg("写卡失败！更新库存为坏卡！");
                    }
                    //logger.info("更新库存信息，逻辑卡号["+makeCardVo.getCurLogicNo()+"[插入数据库成功,物理卡号为["+phyNo+"]");
                    logger.info("更新库存信息，逻辑卡号["+makeCardVo.getCurLogicNo()+"[插入数据库成功,物理卡号为["+phyNo+"]");
                    //数据库日志
                    logVo = new OperateLogVo();
                    logVo.setOperId(BaseConstant.user.getAccount());
                    logVo.setModuleId("7101");
                    logVo.setOperType(AppConstant.OPRT_LOG_OPER_TYPE_WRITE_DB_NAME);
                    //logVo.setDescription("更新库存信息，逻辑卡号["+makeCardVo.getCurLogicNo()+"[插入数据库成功,物理卡号为["+phyNo+"]");
                    logVo.setDescription("更新库存信息，逻辑卡号["+makeCardVo.getCurLogicNo()+"[插入数据库成功,物理卡号为["+phyNo+"]");
                    operateLogService.insertOperaterLogs(logVo);//插入操作
                    
                    return true;
                }else{
                    String phyNoMsg = "";
                    if (!StringUtil.isEmpty(phyNo)) {
                        phyNoMsg="写卡成功，";
                    } else {
                        phyNoMsg="写卡失败，";
                    }
                    //插入数据库异常时，写到本地文件
                    try {
                        File file = makeCardService.writeLocalFile(makeCardVo,phyNo,cardProducerCode);
                        if(file.exists()){
                            MessageShowUtil.alertInfoMsg( phyNoMsg+"更新库存信息失败,密钥卡发卡数据写入本地备份文件！");
                        }else{
                            logger.info(phyNoMsg+"更新库存信息失败！");
                            MessageShowUtil.errorOpMsg(phyNoMsg+"更新库存信息失败！");
                            MessageShowUtil.alertErrorMsg(phyNoMsg+"更新库存信息失败！");
                        }
                    } catch (IOException ex) {
                        logger.error(ex);
                    }

                    return false;
                }
            } catch (SQLException ex) {
                logger.error(ex);
            }
            
        }else{ //5.2读卡失败
            if (AppConstant.KMS_PLUGIN_CARD_CODE.equals(callResult.getCode())) {//F5: 读写器打开失败
                MessageShowUtil.alertErrorMsg("读写器打开失败！");
                return false;
            } else if (AppConstant.KMS_BAUD_RATE_FAILED_CODE.equals(callResult.getCode())) {//02: 波特率设置失败
                MessageShowUtil.alertErrorMsg("波特率设置失败，读写器功能异常！");
                return false;
            } else if (AppConstant.KMS_CARD_NOT_FOUND_CODE.equals(callResult.getCode())) {//03: 卡复位失败（寻不到卡或卡没有插好）
                MessageShowUtil.alertErrorMsg("卡复位失败（寻不到卡或卡没有插好），请重新插卡，含芯片的卡面朝上！");
                return false;
            } else if (AppConstant.KMS_ACHIEVE_MICROCHIP_FAILED_CODE.equals(callResult.getCode())) {//A0： PSAM获取芯片号失败
                MessageShowUtil.alertErrorMsg("PSAM获取芯片号失败，该卡是坏卡！");
                return false;
            }else{
                MessageShowUtil.alertErrorMsg("PSAM卡读取失败，未知原因！");
                return false;
            }
        }
        
        return false;
        
    }
    
    private Boolean doCancelOrder(String orderNo) {
        try {
            return makeCardService.cancelOrder(orderNo,BaseConstant.user.getAccount());
            
         } catch (SQLException ex) {
                logger.error(ex);
        }
        return false;
    }
    
    /**
     * 根据结果集，生成列表
     *
     * @param result
     */
    private void genMainResultSetTable(List<Object[]> result) {
        //列名称
//        String[] columnNames = {"生产单号", "SAM类型", "起始逻辑卡号", "生产数量", "备注", "审核人", "审核时间","完成数量","完成标志","制卡人","制卡时间"};
        String[] columnNames = {"生产单号", "工作类型","SAM类型", "起始逻辑卡号", "生产数量", "完成数量","完成标志","制卡人","制卡时间","备注", "审核人", "审核时间"};
        
        //列宽度
//        int[] columnSize = {170, 150, 150, 100, 150, 60, 150, 100, 100, 60, 150};
        int[] columnSize = {170,100, 150, 150, 100, 100, 100, 60, 150, 150, 60, 150};
        
        //生成列表
        resultSetTableMain = UIUtil.genResultSetTable(this.mainSPn, result, columnNames, columnSize);
        //添加单击事件
        resultSetTableMain.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e) {
                    if(e.getClickCount()==1){//点击几次，这里是单击事件
                        setFormValuesOnclick();        
                    }
            }
        });
    }
    
    /*
     * 点击列表记录后回填表单jPanel3
     */
    private void setFormValuesOnclick(){
        //1.选取订单
        //2.判断当前用户与制卡人是否一致 不一致，退出；一致，发卡
        //3.显示生产订单号、SAM卡类型、生产数量、逻辑卡号范围、完成数量
        //4.点击“发卡”，检查（读卡器是否连接、是否放卡、是否是空白卡），读取逻辑卡号，并回显
        //5.点击“确定”，进行写卡操作。
        
        int row=resultSetTableMain.getSelectedRow();  
        
        String orderNo = resultSetTableMain.getValueAt(row,COLUMN_ORDER_NO_INDEX).toString();
        String orderNum = resultSetTableMain.getValueAt(row,COLUMN_ORDER_NUM_INDEX).toString();
        String startLogicNo = resultSetTableMain.getValueAt(row,COLUMN_START_LOGIC_NO_INDEX).toString();
        if(startLogicNo.length()!=16){
            MessageShowUtil.errorOpMsg( "该生产订单的起始逻辑卡号有误，长度不是16位！");
            MessageShowUtil.alertErrorMsg( "该生产订单的起始逻辑卡号有误，长度不是16位！");
            return ;
        }
        if(startLogicNo.charAt(8)!= 'A' && startLogicNo.charAt(8)!= 'B' ){
            MessageShowUtil.errorOpMsg( "该生产订单的逻辑卡号有误，第8位不为'A'或'B'，起始位为第0位！");
            MessageShowUtil.alertErrorMsg( "该生产订单的逻辑卡号有误，第8位不为'A'或'B'，起始位为第0位！");
            return ;
        }
        String endLogicNo = calculateEndLogicalNo(startLogicNo,orderNum,9);
        String samTypeStr = resultSetTableMain.getValueAt(row,COLUMN_SAM_TYPE_DESC_INDEX).toString();
        
        this.orderNoText.setText(orderNo);//得到所在行的第一个列的值，作为下面事件传递的参数
        this.orderNumText.setText(orderNum);
        this.endLogicNoText.setText(endLogicNo);
        this.beginLogicNoText.setText(startLogicNo);
        if (resultSetTableMain.getValueAt(row,COLUMN_FINISH_NUM_INDEX) != null) {
            finishNumText.setText(resultSetTableMain.getValueAt(row,COLUMN_FINISH_NUM_INDEX).toString());
        } else {
            finishNumText.setText("0");
        }
        this.samTypeDescText.setText(samTypeStr);
        
        
        this.curLogicNoText.setText("");
        orderNoText.setEditable(false);
        orderNumText.setEditable(false);
        samTypeDescText.setEditable(false);
        finishNumText.setEditable(false);
        beginLogicNoText.setEditable(false);
        endLogicNoText.setEditable(false);
        curLogicNoText.setEditable(false);
        
        btConfirm.setEnabled(false);
        btCancel.setEnabled(false);
        //设置默认值
        isConfirmCard = false;
        
        //判断订单是否为全部完成
        Object[] orderPlanValues = makeCardService.getOrderPlanData(orderNoText.getText().trim());
//        boolean notAllComplete = (Boolean)orderPlanValues[0];
        boolean notAllComplete = this.isNotAllComplete((String)orderPlanValues[0]);
        String samType = (String)orderPlanValues[2];
        String makeCardOper = (String)orderPlanValues[3];
        samTypeText.setText(samType);//sam卡类型
        makeCardOperText.setText(makeCardOper);
        
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        
        if (!notAllComplete) {
            btWriteCard.setEnabled(false);
            btCancelOrder.setEnabled(false);
            MessageShowUtil.alertErrorMsg( "生产单的完成标志为全部完成！不能制卡！");
            return;
        }
        
        if (!StringUtil.isEmpty(makeCardOper)) {
            if (!makeCardOper.equals(BaseConstant.user.getAccount())) {
                btWriteCard.setEnabled(false);
                btCancelOrder.setEnabled(false);
                MessageShowUtil.alertErrorMsg( "当前用户与制卡人不一致！不能制卡！");
                return;
            }
        } else {
            
        }
        //String curLogicNo = makeCardService.getCurLogicNo(orderNoText.getText().trim());
        //this.curLogicNoText.setText(curLogicNo);
        //this.logicNoInPutText.setEnabled(true);
        //this.logicNoInPutText.setEditable(true);
        btWriteCard.setEnabled(true);
        btCancelOrder.setEnabled(true);
        
        MessageShowUtil.warnOpMsg( "请放入密钥卡，含芯片的卡面朝上！");
        MessageShowUtil.alertWarnMsg( "请放入密钥卡，含芯片的卡面朝上！");
        
    }
    /**
     * 
     * @param startLogicalNo 起始逻辑卡号
     * @param orderNum       生产数量
     * @param letterPosition 字母所在位置
     * @return endLogicNo    终止逻辑卡号
     */
    private String calculateEndLogicalNo(String startLogicalNo, String orderNum, int letterPosition){
        
        String endLogicNo = "";
        String subStartLogicNo = "1"+startLogicalNo.substring(letterPosition);
        int calculateNo = Integer.parseInt(subStartLogicNo)+Integer.parseInt(orderNum)-1;
        endLogicNo = startLogicalNo.substring(0,letterPosition)+String.valueOf(calculateNo).substring(1);
        return endLogicNo;
    }
    /**
     * 初始化下拉
     *
     */
    private void initCon() throws Exception {
        //定制化按钮效果
        PubUtil util = new PubUtil();
        Vector samTypes = util.getTableFlags("w_acc_tk.w_ic_sam_type", "sam_type_code", "sam_type_desc");
        this.q_samTypeCBox.addItem(new SelectOptionVo("",""));
        for(Object obj : samTypes) {
            PubFlagVo v = (PubFlagVo)obj;
            this.q_samTypeCBox.addItem(new SelectOptionVo(v.getCode(),v.getCodeText()));
        }
        
        this.q_finishFlagCBox.addItem(new SelectOptionVo("",""));
        this.q_finishFlagCBox.addItem(new SelectOptionVo(AppConstant.FINISH_FLAG_ALL_NOT_COMPLETE, "全未完成"));
        this.q_finishFlagCBox.addItem(new SelectOptionVo(AppConstant.FINISH_FLAG_PART_COMPLETE, "部分完成"));
        this.q_finishFlagCBox.addItem(new SelectOptionVo(AppConstant.FINISH_FLAG_ALL_COMPLETE, "全已完成"));
        //20190918 limingjin
        this.q_workTypeCBox.addItem(new SelectOptionVo("",""));
        this.q_workTypeCBox.addItem(new SelectOptionVo(AppConstant.WORK_TYPE_ISSUE, "发行"));
        this.q_workTypeCBox.addItem(new SelectOptionVo(AppConstant.WORK_TYPE_RESET, "重置"));
        
        //设置隐藏文本框，存放SAM卡类型代码、制卡人
        samTypeText.setVisible(false);
        makeCardOperText.setVisible(false);
        
        this.curLogicNoText.setEditable(false);
        btWriteCard.setEnabled(false);
        btConfirm.setEnabled(false);
        btCancel.setEnabled(false);
        btCancelOrder.setEnabled(false);
        
        isConfirmCard = false;
    }
    
    private MakeCardQueryVo getQueryVo() {
        MakeCardQueryVo queryVo = new MakeCardQueryVo();
        queryVo.setOrderNo(this.q_orderNoText.getText().trim()); 
        
        SelectOptionVo samTypeOptionVo = (SelectOptionVo)q_samTypeCBox.getSelectedItem();
        queryVo.setSamType(samTypeOptionVo.getValue());
        
        SelectOptionVo finishFlagOptionVo = (SelectOptionVo)q_finishFlagCBox.getSelectedItem();
        queryVo.setFinishFlag(finishFlagOptionVo.getValue());
        //20190918 limingjin
        SelectOptionVo workTypeOptionVo = (SelectOptionVo)q_workTypeCBox.getSelectedItem();
        queryVo.setWorkType(workTypeOptionVo.getValue());
        
        return queryVo;
        
    }
    
    public boolean isKmsConnection(){
        InetAddress address; 
        boolean isIpReachable = false;
        return false;
    }
    public boolean openKmsConnection() {
        String kmsIp = ConfigUtil.getConfigValue(ConfigConstant.KmsCommuTag, 
                ConfigConstant.KmsCommuKmIp);
        String kmsPort = ConfigUtil.getConfigValue(ConfigConstant.KmsCommuTag, 
                ConfigConstant.KmsCommuKmPort);
        String kmsPin = ConfigUtil.getConfigValue(ConfigConstant.KmsCommuTag, 
                ConfigConstant.KmsCommuKmPin);
        //add 20140312 author、Issue都用到keyVerstion参数
        String keyVerstion = ConfigUtil.getConfigValue(ConfigConstant.SamIssueTag, 
                ConfigConstant.SamIssueKeyVerstion);
        
        KmsCfgParam param = new KmsCfgParam();
        param.setKmsIp(kmsIp);
        param.setKmsPort(kmsPort);
        param.setKmsPin(kmsPin);
        param.setKmsKeyVerstion(keyVerstion);
        
        CallResult callResult = pSamIssueService.author(param);
        if (!callResult.isSuccess()) {
            MessageShowUtil.infoOpMsg(callResult.getMsg());
            return false;
        }
        
        CallResult connect_Result = pSamIssueService.isKMSConnected(param);
        if (!connect_Result.isSuccess()) {
            String connectCode = connect_Result.getCode();
            String msg = "";
            if("E0".equals(connectCode)){
                msg = "socket建立失败（网络不通）";
            }else if("E1".equals(connectCode)){
                msg = "网络数据发送失败";
            }else if("E2".equals(connectCode)){
                msg = "网络数据接收失败";
            }else if("E3".equals(connectCode)){
                msg = "通讯状态非正常";
            }else if("A1".equals(connectCode)){
                msg = "获取版本失败（无回复， 本机不在白名单内）";
            }else{
                msg = "未知原因！";
            }
            MessageShowUtil.errorOpMsg(msg);
            return false;
        }else {
            return true;
        }
    }  
    
    
    public IssueVo issue(MakeCardVo makeCardVo) {

        String keyVerstion = ConfigUtil.getConfigValue(ConfigConstant.SamIssueTag, 
                ConfigConstant.SamIssueKeyVerstion);
        String psamCardVersion = ConfigUtil.getConfigValue(ConfigConstant.SamIssueTag, 
                ConfigConstant.SamIssuePsamCardVersion);
        String keyIndex = ConfigUtil.getConfigValue(ConfigConstant.SamIssueTag, 
                ConfigConstant.SamIssueKeyIndex);
        String issuerId = ConfigUtil.getConfigValue(ConfigConstant.SamIssueTag, 
                ConfigConstant.SamIssueIssuerId);
        String receiverId = ConfigUtil.getConfigValue(ConfigConstant.SamIssueTag, 
                ConfigConstant.SamIssueReceiverId);
        String startDate = ConfigUtil.getConfigValue(ConfigConstant.SamIssueTag, 
                ConfigConstant.SamIssueStartDate);
        String validDate = ConfigUtil.getConfigValue(ConfigConstant.SamIssueTag, 
                ConfigConstant.SamIssueValidDate);
        
        IssueVo issueVo = new IssueVo();
        issueVo.setKeyVerstion(keyVerstion); //"00"
        //modified by lijia
        //issueVo.setPsamCardNo(makeCardVo.getCurLogicNo().toUpperCase()); //转换为大写
        issueVo.setPsamCardNo(makeCardVo.getCurLogicNo().toUpperCase()); //转换为大写
        issueVo.setPsamCardVersion(psamCardVersion); //"00"
        issueVo.setPsamCardType(makeCardVo.getSamType()); //"00"
        issueVo.setKeyIndex(keyIndex); //"01"
        issueVo.setIssuerId(issuerId); //"4100073100000000"
        issueVo.setReceiverId(receiverId); //"4100073100000000"
        issueVo.setStartDate(startDate); //"20131001"
        issueVo.setValidDate(validDate); //"20231001"
        
        CallResult issueResult = pSamIssueService.issue(issueVo);
        
        if(issueResult.isSuccess()){
            IssueVo issueVoRet = (IssueVo) issueResult.getObj();
//            return issueVoRet.getPsamCardPhyNo();
            //20160126 modify by mqf
            return issueVoRet;
        } else {    
            MessageShowUtil.infoOpMsg(issueResult.getMsg());
        }
        return null;
    }
    
    private MakeCardVo getWriteCardParam() {
        
        MakeCardVo makeCardVo = new MakeCardVo();
       
        makeCardVo.setOrderNo(orderNoText.getText().trim());
        
        makeCardVo.setSamType(samTypeText.getText());
        makeCardVo.setSamType("01");
        
        makeCardVo.setMakeCardOper(makeCardOperText.getText());
              
        makeCardVo.setCurLogicNo(curLogicNoText.getText().trim());
        
        makeCardVo.setStartLogicNo(beginLogicNoText.getText().trim());
        makeCardVo.setEndLogicNo(endLogicNoText.getText().trim());
        makeCardVo.setOrderNum(orderNumText.getText().trim());
        makeCardVo.setFinishNum(finishNumText.getText().trim());
        
        return makeCardVo;
        
    }
    
    /*
     * 表单检验提示
     */
    public boolean checkParam(MakeCardVo makeCardVo) {
        if(StringUtil.isEmpty(makeCardVo.getSamType())){
            MessageShowUtil.errorOpMsg("SAM卡类型不能为空！");
            MessageShowUtil.alertErrorMsg("SAM卡类型不能为空！");
            return false;
        }
        if(StringUtil.isEmpty(makeCardVo.getCurLogicNo())){
            MessageShowUtil.errorOpMsg( "当前逻辑卡号不能为空！");
            MessageShowUtil.alertErrorMsg( "当前逻辑卡号不能为空！");
            //curLogicNoText.requestFocus();
            return false;
        }
        
        return true;
    }
    
    public boolean checkParamBeforeCancelOrder(MakeCardVo makeCardVo) {
        if(StringUtil.isEmpty(makeCardVo.getOrderNo())){
            MessageShowUtil.alertErrorMsg( "生产订单号不能为空！");
            return false;
        }
        if(StringUtil.isEmpty(makeCardVo.getSamType())){
            MessageShowUtil.alertErrorMsg( "SAM卡类型不能为空！");
            return false;
        }
        
        return true;
    }
    
    /**
     * 设置加密机通讯 状态栏
     * @param kMSStatus 
     */
    private void setKMSStatus(boolean kMSStatus) {
        String[] vars = new String[]{AppConstant.STATUS_BAR_KMS_STATUS};
        AppConstant.KMS_STATUS = kMSStatus;
        boolean[] statuses = new boolean[]{AppConstant.KMS_STATUS};
        //更新连接状态栏
        setSBarStatus(vars,statuses);
    }
    
    /**
     * 设置通讯状态 状态栏
     * @param kMSStatus 
     */
    private void setCommuStatus(boolean commuStatus) {
        String[] vars = new String[]{AppConstant.STATUS_BAR_COMMU_STATUS};
        AppConstant.COMMU_STATUS = commuStatus;
        boolean[] statuses = new boolean[]{AppConstant.COMMU_STATUS};
        //更新连接状态栏
        setSBarStatus(vars,statuses);
    }
    
    /**
     * 设置状态栏状态
     * 正常、警告
     * @param vars
     * @param statuses 
     */
    private void setSBarStatus(String[] vars, boolean[] statuses) {
        int len = vars.length;
        for (int i = 0; i < len; i++) {
            if (statuses[i]) {
                BaseConstant.publicPanel.setOpLink(vars[i], BaseConstant.STATUS_BAR_STATUS_COLOR_ON);
            } else {
                BaseConstant.publicPanel.setOpLinkError(vars[i], BaseConstant.STATUS_BAR_STATUS_COLOR_OFF);
            }
        }
    }
    
    public void cleanTextField() {
        
        orderNoText.setText("");
        orderNumText.setText("");
        finishNumText.setText("");
        beginLogicNoText.setText("");
        endLogicNoText.setText("");
        curLogicNoText.setText("");
        samTypeDescText.setText("");
        samTypeText.setText("");
        makeCardOperText.setText("");
    }
    
    private boolean isNotAllComplete(String finishFlag) {
        boolean notAllComplete = false;
        if (!AppConstant.FINISH_FLAG_ALL_COMPLETE.equals(finishFlag)) {
                    notAllComplete = true;
        } else {
                    notAllComplete = false;
        } 
        return notAllComplete;
}
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField beginLogicNoText;
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btCancelOrder;
    private javax.swing.JButton btConfirm;
    private javax.swing.JButton btQuery;
    private javax.swing.JButton btWriteCard;
    private javax.swing.JTextField curLogicNoText;
    private javax.swing.JTextField endLogicNoText;
    private javax.swing.JTextField finishNumText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelMadeInfo01;
    private javax.swing.JLabel jLabelMadeInfo02;
    private javax.swing.JLabel jLabelMadeInfo03;
    private javax.swing.JLabel jLabelMadeInfo04;
    private javax.swing.JLabel jLabelMadeInfo05;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JScrollPane mainSPn;
    private javax.swing.JTextField makeCardOperText;
    private javax.swing.JTextField orderNoText;
    private javax.swing.JTextField orderNumText;
    private javax.swing.JComboBox q_finishFlagCBox;
    private javax.swing.JTextField q_orderNoText;
    private javax.swing.JComboBox q_samTypeCBox;
    private javax.swing.JComboBox q_workTypeCBox;
    private javax.swing.JTextField samTypeDescText;
    private javax.swing.JTextField samTypeText;
    // End of variables declaration//GEN-END:variables

}
