
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GenIssueRequestPanel.java
 *
 * Created on 2011-8-3, 8:31:03
 */

package com.goldsign.sammcs.ui.panel;

import com.goldsign.csfrm.env.BaseConstant;
import com.goldsign.csfrm.util.MessageShowUtil;
import com.goldsign.csfrm.vo.CallResult;
import com.goldsign.sammcs.application.Application;
import com.goldsign.sammcs.env.AppConstant;
import com.goldsign.sammcs.env.ConfigConstant;
import com.goldsign.sammcs.service.IMakeCardService;
import com.goldsign.sammcs.service.IPSamIssueService;
import com.goldsign.sammcs.service.impl.MakeCardService;
import com.goldsign.sammcs.util.ConfigUtil;
import com.goldsign.sammcs.vo.KmsCfgParam;
import com.goldsign.sammcs.vo.ReadOutInfVo;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.List;
import org.apache.log4j.Logger;
/**
 * 密钥卡分析
 * @author Administrator
 */
public class CardAnalysisPanel extends javax.swing.JPanel {
    
    private static Logger logger = Logger.getLogger(CardAnalysisPanel.class.getName());
    
    private IPSamIssueService pSamIssueService;
    
    private IMakeCardService makeCardService;
    
    
    
    /** Creates new form GenIssueRequestPanel */
    public CardAnalysisPanel() throws Exception {
        initComponents();
        makeCardService = new MakeCardService();
        pSamIssueService = ((Application)AppConstant.application).getpSamIssueService();
        initCon();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField5 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        analysisTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        btQuery = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();

        setBackground(new java.awt.Color(254, 254, 254));
        setPreferredSize(new java.awt.Dimension(845, 589));

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(807, 74));

        jTextField5.setEditable(false);
        jTextField5.setBackground(new java.awt.Color(185, 227, 241));
        jTextField5.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        jTextField5.setForeground(new java.awt.Color(94, 55, 16));
        jTextField5.setText("   分析结果");
        jTextField5.setAlignmentX(0.0F);
        jTextField5.setAlignmentY(0.0F);
        jTextField5.setBorder(null);
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        analysisTextArea.setColumns(20);
        analysisTextArea.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        analysisTextArea.setRows(5);
        jScrollPane1.setViewportView(analysisTextArea);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTextField5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
            .add(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(237, 247, 249));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(792, 105));

        btQuery.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btQuery.setForeground(new java.awt.Color(70, 95, 125));
        btQuery.setText("分析");
        btQuery.setToolTipText("");
        btQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btQueryActionPerformed(evt);
            }
        });

        jTextField4.setEditable(false);
        jTextField4.setBackground(new java.awt.Color(185, 227, 241));
        jTextField4.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(94, 55, 16));
        jTextField4.setText("   票卡分析");
        jTextField4.setAlignmentX(0.0F);
        jTextField4.setAlignmentY(0.0F);
        jTextField4.setBorder(null);
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 788, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(344, 344, 344)
                        .add(btQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 26, Short.MAX_VALUE)
                .add(btQuery)
                .add(18, 18, 18))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 792, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 455, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btQueryActionPerformed
        doQuery();
        
        
    }//GEN-LAST:event_btQueryActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    
    /**
     * 查询
     * 
     */
    private void doQuery(){
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        
        StringBuffer resultBuf = new StringBuffer("");
        SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        analysisTextArea.setText("");
        //变换文字颜色
        if (analysisTextArea.getForeground().equals(Color.blue)) {
            analysisTextArea.setForeground(Color.black);
        } else {
            analysisTextArea.setForeground(Color.blue);
        }
        
        //打开加密机端口
        if (!openKmsConnection()) {
            //更新加密机通讯状态
            setKMSStatus(false);

            MessageShowUtil.errorOpMsg( "加密机通讯连接不成功，请检查设备是否正确连接！");
            MessageShowUtil.alertErrorMsg( "加密机通讯连接不成功，请检查设备是否正确连接！");
            return;
        } else {
            //更新加密机通讯状态
            setKMSStatus(true);
        }
        //读卡判断是否为已发行
        CallResult callResult = pSamIssueService.read();
        
        if (callResult.isSuccess()) {
            ReadOutInfVo readOutInfVo = (ReadOutInfVo)callResult.getObj();
            String issueState = (String) readOutInfVo.getIssueState();//是否已经制卡标志
            String psamCardNo = readOutInfVo.getPsamCardNo();
            if ("01".endsWith(issueState)) {
                logger.info("当前密钥卡已发行,，逻辑卡号为："+psamCardNo);
                resultBuf.append(f.format(new java.util.Date())).append(": ").append("该卡已发行，逻辑卡号为：").append(psamCardNo);
            }else{
                resultBuf.append(f.format(new java.util.Date())).append(": ").append("该卡未发行，逻辑卡号为：").append(psamCardNo);
            }
            analysisTextArea.setText(resultBuf.toString());
        } else {
            if (AppConstant.KMS_PLUGIN_CARD_CODE.equals(callResult.getCode())) {//"F5"  读写器打开失败
                resultBuf.append(f.format(new java.util.Date())).append(": ").append("读写器打开失败！");
                analysisTextArea.setText(resultBuf.toString());
            }else if (AppConstant.KMS_CARD_NOT_FOUND_CODE.equals(callResult.getCode())) {//"03" 卡复位失败（寻不到卡或卡没有插好）  
                resultBuf.append(f.format(new java.util.Date())).append(": ").append("卡复位失败(寻不到卡或卡没有插好)！");
                analysisTextArea.setText(resultBuf.toString());
            }else if (AppConstant.KMS_BAUD_RATE_FAILED_CODE.equals(callResult.getCode())) {// "02" 波特率设置失败 
                resultBuf.append(f.format(new java.util.Date())).append(": ").append("波特率设置失败！");
                analysisTextArea.setText(resultBuf.toString());
            }else if (AppConstant.KMS_MF0015_CODE.equals(callResult.getCode())) {// "01" MF 0015获取失败,空白卡
                resultBuf.append(f.format(new java.util.Date())).append(": ").append("该卡是空白卡或异型卡！");
                analysisTextArea.setText(resultBuf.toString());
            }else if (AppConstant.KMS_ACHIEVE_MICROCHIP_FAILED_CODE.equals(callResult.getCode())) {//"A0" PSAM获取芯片号失败
                resultBuf.append(f.format(new java.util.Date())).append(": ").append("PSAM获取芯片号失败,是坏卡！");
                analysisTextArea.setText(resultBuf.toString());
            }else {
                MessageShowUtil.errorOpMsg("请检查是否已插卡，含芯片的卡面朝上。");
            }  
            
        }
        
    }
    
    
    /**
     * 根据结果集，生成列表
     *
     * @param result
     */
    private void genMainResultSetTable(List<Object[]> result) {
        
    }
    
    private void setFormValuesOnclick(){
        
       
    }
    
    
    /**
     * 初始化下拉
     *
     */
    private void initCon() throws Exception {
 
    }
    
    
    public boolean openKmsConnection() {
        String kmsIp = ConfigUtil.getConfigValue(ConfigConstant.KmsCommuTag, 
                ConfigConstant.KmsCommuKmIp);
        String kmsPort = ConfigUtil.getConfigValue(ConfigConstant.KmsCommuTag, 
                ConfigConstant.KmsCommuKmPort);
        String kmsPin = ConfigUtil.getConfigValue(ConfigConstant.KmsCommuTag, 
                ConfigConstant.KmsCommuKmPin);
        //add 20140312 author、Issue都用到keyVerstion参数
        String keyVerstion = ConfigUtil.getConfigValue(ConfigConstant.SamIssueTag, 
                ConfigConstant.SamIssueKeyVerstion);
        
        KmsCfgParam param = new KmsCfgParam();
        param.setKmsIp(kmsIp);
        param.setKmsPort(kmsPort);
        param.setKmsPin(kmsPin);
        param.setKmsKeyVerstion(keyVerstion);
        
        CallResult callResult = pSamIssueService.author(param);
        if (!callResult.isSuccess()) {
            MessageShowUtil.infoOpMsg(callResult.getMsg());
            return false;
        }
        CallResult connect_Result = pSamIssueService.isKMSConnected(param);
        if (!connect_Result.isSuccess()) {
            String connectCode = connect_Result.getCode();
            String msg = "";
            if("E0".equals(connectCode)){
                msg = "socket建立失败（网络不通）";
            }else if("E1".equals(connectCode)){
                msg = "网络数据发送失败";
            }else if("E2".equals(connectCode)){
                msg = "网络数据接收失败";
            }else if("E3".equals(connectCode)){
                msg = "通讯状态非正常";
            }else if("A1".equals(connectCode)){
                msg = "获取版本失败（无回复， 本机不在白名单内）";
            }else{
                msg = "未知原因！";
            }
            MessageShowUtil.errorOpMsg(msg);
            return false;
        }else {
            return true;
        }
    }  
    
    
    
    /**
     * 设置加密机通讯 状态栏
     * @param kMSStatus 
     */
    private void setKMSStatus(boolean kMSStatus) {
        String[] vars = new String[]{AppConstant.STATUS_BAR_KMS_STATUS};
        AppConstant.KMS_STATUS = kMSStatus;
        boolean[] statuses = new boolean[]{AppConstant.KMS_STATUS};
        //更新连接状态栏
        setSBarStatus(vars,statuses);
    }
    
    /**
     * 设置状态栏状态
     * 正常、警告
     * @param vars
     * @param statuses 
     */
    private void setSBarStatus(String[] vars, boolean[] statuses) {
        int len = vars.length;
        for (int i = 0; i < len; i++) {
            if (statuses[i]) {
                BaseConstant.publicPanel.setOpLink(vars[i], BaseConstant.STATUS_BAR_STATUS_COLOR_ON);
            } else {
                BaseConstant.publicPanel.setOpLinkError(vars[i], BaseConstant.STATUS_BAR_STATUS_COLOR_OFF);
            }
        }
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea analysisTextArea;
    private javax.swing.JButton btQuery;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

}
