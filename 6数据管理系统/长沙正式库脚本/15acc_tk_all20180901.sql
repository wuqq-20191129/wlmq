-----------------------------------------
-- Export file for user ACC_TK         --
-- Created by ACC on 2018/9/2, 2:16:47 --
-----------------------------------------

set define off
spool 15acc_tk_all20180901.log

prompt
prompt Creating table ICCS_OPERATOR
prompt ============================
prompt
create table ACC_TK.ICCS_OPERATOR
(
  oper_id      CHAR(6) not null,
  passwd       CHAR(18),
  oper_name    VARCHAR2(8),
  oper_type    CHAR(1),
  login_flag   CHAR(1),
  expired_date DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.ICCS_OPERATOR to ACC_TK_APP;
grant select on ACC_TK.ICCS_OPERATOR to ACC_TK_DEV;
grant select on ACC_TK.ICCS_OPERATOR to ACC_TK_RPT;

prompt
prompt Creating table IC_AREA_CARD_CODE_64a5f712
prompt =========================================
prompt
create table ACC_TK.IC_AREA_CARD_CODE_64a5f712
(
  water_no        NUMBER(20),
  storage_id      CHAR(4) not null,
  area_id         CHAR(2) not null,
  ic_main_type    CHAR(2) not null,
  ic_sub_type     CHAR(2) not null,
  card_num        INTEGER not null,
  card_money      INTEGER default 0 not null,
  valid_date      CHAR(10),
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  flag            CHAR(1) default '0' not null,
  exit_line_id    VARCHAR2(2) default '',
  exit_station_id VARCHAR2(3) default '',
  mode1           VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_AREA_CARD_CODE_64a5f712 to ACC_TK_APP;
grant select on ACC_TK.IC_AREA_CARD_CODE_64a5f712 to ACC_TK_DEV;
grant select on ACC_TK.IC_AREA_CARD_CODE_64a5f712 to ACC_TK_RPT;

prompt
prompt Creating table IC_AREA_CARD_CODE_b7ad5f09
prompt =========================================
prompt
create table ACC_TK.IC_AREA_CARD_CODE_b7ad5f09
(
  water_no        NUMBER(20),
  storage_id      CHAR(4) not null,
  area_id         CHAR(2) not null,
  ic_main_type    VARCHAR2(2) not null,
  ic_sub_type     CHAR(2) not null,
  card_num        INTEGER not null,
  card_money      INTEGER default 0 not null,
  valid_date      CHAR(10),
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  flag            CHAR(1) default '0' not null,
  exit_line_id    VARCHAR2(2) default '',
  exit_station_id VARCHAR2(3) default '',
  mode1           VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_AREA_CARD_CODE_b7ad5f09 to ACC_TK_APP;
grant select on ACC_TK.IC_AREA_CARD_CODE_b7ad5f09 to ACC_TK_DEV;
grant select on ACC_TK.IC_AREA_CARD_CODE_b7ad5f09 to ACC_TK_RPT;

prompt
prompt Creating table IC_BC_LOGIC_NO
prompt =============================
prompt
create table ACC_TK.IC_BC_LOGIC_NO
(
  bill_no            VARCHAR2(12) not null,
  bill_date          DATE,
  batch_no           VARCHAR2(6),
  year               VARCHAR2(4),
  produce_factory_id VARCHAR2(3),
  start_logicno      VARCHAR2(20),
  blank_card_type    VARCHAR2(2),
  qty                INTEGER,
  end_logicno        VARCHAR2(20),
  record_flag        CHAR(1),
  form_maker         CHAR(10),
  verify_date        DATE,
  verify_person      CHAR(10),
  remark             VARCHAR2(256),
  is_used            CHAR(1) default 0
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on column ACC_TK.IC_BC_LOGIC_NO.blank_card_type
  is '0 单程票 1 普通储值票 2 空发卡号';
comment on column ACC_TK.IC_BC_LOGIC_NO.is_used
  is '0 未使用，1已使用';
grant select, insert, update, delete on ACC_TK.IC_BC_LOGIC_NO to ACC_TK_APP;
grant select on ACC_TK.IC_BC_LOGIC_NO to ACC_TK_DEV;
grant select on ACC_TK.IC_BC_LOGIC_NO to ACC_TK_RPT;

prompt
prompt Creating table IC_CARD_SUB_TYPE_ALL
prompt ===================================
prompt
create table ACC_TK.IC_CARD_SUB_TYPE_ALL
(
  ic_card_sub_type_id   VARCHAR2(3),
  ic_card_sub_type_name VARCHAR2(10)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_CARD_SUB_TYPE_ALL to ACC_TK_APP;
grant select on ACC_TK.IC_CARD_SUB_TYPE_ALL to ACC_TK_DEV;
grant select on ACC_TK.IC_CARD_SUB_TYPE_ALL to ACC_TK_RPT;

prompt
prompt Creating table IC_CFG_CLEAR_TABLE
prompt =================================
prompt
create table ACC_TK.IC_CFG_CLEAR_TABLE
(
  origin_table_name VARCHAR2(30) not null,
  ab_name           VARCHAR2(30) not null,
  keep_days         INTEGER,
  divide_recd_count INTEGER,
  clear_flag        INTEGER,
  create_sql        VARCHAR2(2000),
  table_columns     VARCHAR2(400),
  recd_type         VARCHAR2(3),
  deal_type         VARCHAR2(1),
  date_type         VARCHAR2(15)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_CFG_CLEAR_TABLE
  is '表数据清理配置表';
alter table ACC_TK.IC_CFG_CLEAR_TABLE
  add constraint PK_IC_CFG_CLEAR_TABLE primary key (ORIGIN_TABLE_NAME)
  using index 
  tablespace TBS_ST_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_CFG_CLEAR_TABLE to ACC_TK_APP;
grant select on ACC_TK.IC_CFG_CLEAR_TABLE to ACC_TK_DEV;
grant select on ACC_TK.IC_CFG_CLEAR_TABLE to ACC_TK_RPT;

prompt
prompt Creating table IC_CFG_DUMP
prompt ==========================
prompt
create table ACC_TK.IC_CFG_DUMP
(
  config_name  VARCHAR2(100) not null,
  config_value VARCHAR2(100),
  remark       VARCHAR2(200)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
alter table ACC_TK.IC_CFG_DUMP
  add constraint PK_IC_CFG_DUMP primary key (CONFIG_NAME)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_CFG_DUMP to ACC_TK_APP;
grant select on ACC_TK.IC_CFG_DUMP to ACC_TK_DEV;
grant select on ACC_TK.IC_CFG_DUMP to ACC_TK_RPT;

prompt
prompt Creating table IC_CFG_DUMP_COMMON
prompt =================================
prompt
create table ACC_TK.IC_CFG_DUMP_COMMON
(
  transfer_id      VARCHAR2(3),
  transfer_id_item VARCHAR2(3),
  transfer_type    VARCHAR2(1),
  config_name      VARCHAR2(100),
  config_value     VARCHAR2(550),
  remark           VARCHAR2(250)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_CFG_DUMP_COMMON to ACC_TK_APP;
grant select on ACC_TK.IC_CFG_DUMP_COMMON to ACC_TK_DEV;
grant select on ACC_TK.IC_CFG_DUMP_COMMON to ACC_TK_RPT;

prompt
prompt Creating table IC_CFG_DUMP_DATE
prompt ===============================
prompt
create table ACC_TK.IC_CFG_DUMP_DATE
(
  table_name VARCHAR2(100) not null,
  maxdate    DATE not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_CFG_DUMP_DATE to ACC_TK_APP;
grant select on ACC_TK.IC_CFG_DUMP_DATE to ACC_TK_DEV;
grant select on ACC_TK.IC_CFG_DUMP_DATE to ACC_TK_RPT;

prompt
prompt Creating table IC_CFG_DUMP_TIMER
prompt ================================
prompt
create table ACC_TK.IC_CFG_DUMP_TIMER
(
  runserver      VARCHAR2(100),
  runpro         VARCHAR2(100),
  runparam       VARCHAR2(100),
  runtime        VARCHAR2(100),
  datasource     VARCHAR2(50),
  threadinterval INTEGER,
  remark         VARCHAR2(200)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_CFG_DUMP_TIMER to ACC_TK_APP;
grant select on ACC_TK.IC_CFG_DUMP_TIMER to ACC_TK_DEV;
grant select on ACC_TK.IC_CFG_DUMP_TIMER to ACC_TK_RPT;

prompt
prompt Creating table IC_CHK_STORAGE
prompt =============================
prompt
create table ACC_TK.IC_CHK_STORAGE
(
  check_bill_no CHAR(12) not null,
  check_person  CHAR(10),
  check_date    DATE,
  verify_date   DATE,
  verify_person CHAR(10),
  record_flag   CHAR(1) not null,
  locked        CHAR(1) default '0' not null,
  in_locked     CHAR(1) default '0'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_CHK_STORAGE to ACC_TK_APP;
grant select on ACC_TK.IC_CHK_STORAGE to ACC_TK_DEV;
grant select on ACC_TK.IC_CHK_STORAGE to ACC_TK_RPT;

prompt
prompt Creating table IC_CHK_STORAGE_DETAIL
prompt ====================================
prompt
create table ACC_TK.IC_CHK_STORAGE_DETAIL
(
  water_no        NUMBER(20),
  check_bill_no   CHAR(12) not null,
  storage_id      CHAR(4) not null,
  area_id         CHAR(2) not null,
  chest_id        CHAR(3),
  storey_id       CHAR(2),
  base_id         CHAR(2),
  box_id          CHAR(14),
  ic_main_type    CHAR(2) not null,
  ic_sub_type     CHAR(2) not null,
  station_id      VARCHAR2(3),
  card_money      INTEGER,
  sys_amount      INTEGER not null,
  real_amount     INTEGER not null,
  line_id         VARCHAR2(2),
  product_date    DATE,
  exit_line_id    VARCHAR2(2) default '',
  exit_station_id VARCHAR2(3) default '',
  model           VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_CHK_STORAGE_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_CHK_STORAGE_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_CHK_STORAGE_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_CHK_STORAGE_DETAIL_CARD
prompt =========================================
prompt
create table ACC_TK.IC_CHK_STORAGE_DETAIL_CARD
(
  water_no         INTEGER not null,
  check_bill_no    CHAR(12),
  storage_id       CHAR(4),
  area_id          CHAR(2),
  chest_id         CHAR(3),
  storey_id        CHAR(2),
  base_id          CHAR(2),
  box_id           CHAR(14),
  ic_main_type     CHAR(2),
  ic_sub_type      CHAR(2),
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_CHK_STORAGE_DETAIL_CARD to ACC_TK_APP;
grant select on ACC_TK.IC_CHK_STORAGE_DETAIL_CARD to ACC_TK_DEV;
grant select on ACC_TK.IC_CHK_STORAGE_DETAIL_CARD to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_ADJUST_REASON
prompt ===================================
prompt
create table ACC_TK.IC_COD_ADJUST_REASON
(
  adjust_id     VARCHAR2(2) not null,
  adjust_reason VARCHAR2(20)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_COD_ADJUST_REASON to ACC_TK_APP;
grant select on ACC_TK.IC_COD_ADJUST_REASON to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_ADJUST_REASON to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_AREA
prompt ==========================
prompt
create table ACC_TK.IC_COD_AREA
(
  storage_id CHAR(4) not null,
  area_id    CHAR(2) not null,
  area_name  VARCHAR2(20) not null,
  real_num   INTEGER,
  upper_num  INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_AREA to ACC_TK_APP;
grant select on ACC_TK.IC_COD_AREA to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_AREA to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_AREA_86f1844b
prompt ===================================
prompt
create table ACC_TK.IC_COD_AREA_86f1844b
(
  storage_id CHAR(4) not null,
  area_id    CHAR(2) not null,
  area_name  CHAR(20) not null,
  real_num   INTEGER,
  upper_num  INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_AREA_86f1844b to ACC_TK_APP;
grant select on ACC_TK.IC_COD_AREA_86f1844b to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_AREA_86f1844b to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_BASE
prompt ==========================
prompt
create table ACC_TK.IC_COD_BASE
(
  storage_id  CHAR(4) not null,
  area_id     CHAR(2) not null,
  chest_id    CHAR(3) not null,
  storey_id   CHAR(2) not null,
  base_id     CHAR(2) not null,
  base_name   VARCHAR2(20),
  max_box_num INTEGER,
  real_num    INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_BASE to ACC_TK_APP;
grant select on ACC_TK.IC_COD_BASE to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_BASE to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_BASE_dec50eb6
prompt ===================================
prompt
create table ACC_TK.IC_COD_BASE_dec50eb6
(
  storage_id  CHAR(4) not null,
  area_id     CHAR(2) not null,
  chest_id    CHAR(3) not null,
  storey_id   CHAR(2) not null,
  base_id     CHAR(2) not null,
  base_name   CHAR(20),
  max_box_num INTEGER,
  real_num    INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_BASE_dec50eb6 to ACC_TK_APP;
grant select on ACC_TK.IC_COD_BASE_dec50eb6 to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_BASE_dec50eb6 to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_BILL_TYPE
prompt ===============================
prompt
create table ACC_TK.IC_COD_BILL_TYPE
(
  bill_type_id      CHAR(2) not null,
  bill_main_type_id CHAR(2),
  bill_name         VARCHAR2(20)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_BILL_TYPE to ACC_TK_APP;
grant select on ACC_TK.IC_COD_BILL_TYPE to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_BILL_TYPE to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_BORROW_UNIT
prompt =================================
prompt
create table ACC_TK.IC_COD_BORROW_UNIT
(
  unit_id   CHAR(3) not null,
  unit_name VARCHAR2(50)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_BORROW_UNIT to ACC_TK_APP;
grant select on ACC_TK.IC_COD_BORROW_UNIT to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_BORROW_UNIT to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_BOX_DETAIL
prompt ================================
prompt
create table ACC_TK.IC_COD_BOX_DETAIL
(
  box_id           CHAR(14) not null,
  start_logical_id VARCHAR2(20) not null,
  end_logical_id   VARCHAR2(20) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_BOX_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_COD_BOX_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_BOX_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_BOX_DETAIL_4b07be91
prompt =========================================
prompt
create table ACC_TK.IC_COD_BOX_DETAIL_4b07be91
(
  box_id           CHAR(14) not null,
  start_logical_id CHAR(20) not null,
  end_logical_id   CHAR(20) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_BOX_DETAIL_4b07be91 to ACC_TK_APP;
grant select on ACC_TK.IC_COD_BOX_DETAIL_4b07be91 to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_BOX_DETAIL_4b07be91 to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_BOX_INFO
prompt ==============================
prompt
create table ACC_TK.IC_COD_BOX_INFO
(
  box_id          CHAR(14) not null,
  box_type        VARCHAR2(2) not null,
  ic_main_type    VARCHAR2(2) not null,
  ic_sub_type     VARCHAR2(2) not null,
  card_num        INTEGER,
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  vaild_date      VARCHAR2(10),
  card_money      INTEGER,
  flag            CHAR(1) default '0' not null,
  exit_line_id    VARCHAR2(2) default '',
  exit_station_id VARCHAR2(3) default '',
  model           VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_BOX_INFO to ACC_TK_APP;
grant select on ACC_TK.IC_COD_BOX_INFO to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_BOX_INFO to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_BOX_INFO_05a63ca9
prompt =======================================
prompt
create table ACC_TK.IC_COD_BOX_INFO_05a63ca9
(
  box_id          CHAR(14) not null,
  box_type        VARCHAR2(2) not null,
  ic_main_type    VARCHAR2(2) not null,
  ic_sub_type     VARCHAR2(2) not null,
  card_num        INTEGER,
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  vaild_date      DATE,
  card_money      INTEGER,
  flag            CHAR(1) default '0' not null,
  exit_line_id    VARCHAR2(2) default '',
  exit_station_id VARCHAR2(3) default '',
  model           VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_BOX_INFO_05a63ca9 to ACC_TK_APP;
grant select on ACC_TK.IC_COD_BOX_INFO_05a63ca9 to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_BOX_INFO_05a63ca9 to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_BOX_INFO_4b980183
prompt =======================================
prompt
create table ACC_TK.IC_COD_BOX_INFO_4b980183
(
  box_id          CHAR(14) not null,
  box_type        CHAR(2) not null,
  ic_main_type    CHAR(2) not null,
  ic_sub_type     CHAR(2) not null,
  card_num        INTEGER,
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  vaild_date      DATE,
  card_money      INTEGER,
  flag            CHAR(1) default '0' not null,
  exit_line_id    VARCHAR2(2) default '',
  exit_station_id VARCHAR2(3) default '',
  model           VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_BOX_INFO_4b980183 to ACC_TK_APP;
grant select on ACC_TK.IC_COD_BOX_INFO_4b980183 to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_BOX_INFO_4b980183 to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_CARD_MAIN_TYPE
prompt ====================================
prompt
create table ACC_TK.IC_COD_CARD_MAIN_TYPE
(
  ic_main_type VARCHAR2(2) not null,
  ic_main_desc VARCHAR2(30)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_CARD_MAIN_TYPE to ACC_TK_APP;
grant select on ACC_TK.IC_COD_CARD_MAIN_TYPE to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_CARD_MAIN_TYPE to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_CARD_MAIN_TYPE_ALL
prompt ========================================
prompt
create table ACC_TK.IC_COD_CARD_MAIN_TYPE_ALL
(
  ic_main_type VARCHAR2(2) not null,
  ic_main_desc VARCHAR2(30)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_COD_CARD_MAIN_TYPE_ALL
  add constraint IC_CARD_MAIN_TYPE_ALL_001 primary key (IC_MAIN_TYPE)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_CARD_MAIN_TYPE_ALL to ACC_TK_APP;
grant select on ACC_TK.IC_COD_CARD_MAIN_TYPE_ALL to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_CARD_MAIN_TYPE_ALL to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_CARD_MAIN_TYPE_e16fc342
prompt =============================================
prompt
create table ACC_TK.IC_COD_CARD_MAIN_TYPE_e16fc342
(
  ic_main_type CHAR(2) not null,
  ic_main_desc VARCHAR2(30)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_CARD_MAIN_TYPE_e16fc342 to ACC_TK_APP;
grant select on ACC_TK.IC_COD_CARD_MAIN_TYPE_e16fc342 to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_CARD_MAIN_TYPE_e16fc342 to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_CARD_SUB_TYPE
prompt ===================================
prompt
create table ACC_TK.IC_COD_CARD_SUB_TYPE
(
  ic_main_type VARCHAR2(2) not null,
  ic_sub_type  VARCHAR2(2) not null,
  ic_sub_desc  VARCHAR2(30)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_CARD_SUB_TYPE to ACC_TK_APP;
grant select on ACC_TK.IC_COD_CARD_SUB_TYPE to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_CARD_SUB_TYPE to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_CARD_SUB_TYPE_16a6c74e
prompt ============================================
prompt
create table ACC_TK.IC_COD_CARD_SUB_TYPE_16a6c74e
(
  ic_main_type CHAR(2) not null,
  ic_sub_type  CHAR(2) not null,
  ic_sub_desc  VARCHAR2(30)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_CARD_SUB_TYPE_16a6c74e to ACC_TK_APP;
grant select on ACC_TK.IC_COD_CARD_SUB_TYPE_16a6c74e to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_CARD_SUB_TYPE_16a6c74e to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_CARD_SUB_TYPE_ALL
prompt =======================================
prompt
create table ACC_TK.IC_COD_CARD_SUB_TYPE_ALL
(
  ic_main_type VARCHAR2(2) not null,
  ic_sub_type  VARCHAR2(2) not null,
  ic_sub_desc  VARCHAR2(30)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_COD_CARD_SUB_TYPE_ALL
  add constraint IC_CARD_SUB_TYPE_ALL_001 primary key (IC_SUB_TYPE, IC_MAIN_TYPE)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_CARD_SUB_TYPE_ALL to ACC_TK_APP;
grant select on ACC_TK.IC_COD_CARD_SUB_TYPE_ALL to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_CARD_SUB_TYPE_ALL to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_CARD_TYPE_CONTRAST
prompt ========================================
prompt
create table ACC_TK.IC_COD_CARD_TYPE_CONTRAST
(
  card_main_type VARCHAR2(2) not null,
  card_sub_type  VARCHAR2(2) not null,
  ic_main_type   VARCHAR2(2) not null,
  ic_sub_type    VARCHAR2(2) not null,
  box_unit       INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_CARD_TYPE_CONTRAST to ACC_TK_APP;
grant select on ACC_TK.IC_COD_CARD_TYPE_CONTRAST to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_CARD_TYPE_CONTRAST to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_CHEST
prompt ===========================
prompt
create table ACC_TK.IC_COD_CHEST
(
  storage_id   CHAR(4) not null,
  area_id      CHAR(2) not null,
  chest_id     CHAR(3) not null,
  chest_name   VARCHAR2(30),
  storey_num   INTEGER,
  ic_main_type VARCHAR2(2),
  ic_sub_type  VARCHAR2(2),
  full_flag    CHAR(1),
  card_money   INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_CHEST to ACC_TK_APP;
grant select on ACC_TK.IC_COD_CHEST to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_CHEST to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_CHEST_352f63fe
prompt ====================================
prompt
create table ACC_TK.IC_COD_CHEST_352f63fe
(
  storage_id   CHAR(4) not null,
  area_id      CHAR(2) not null,
  chest_id     CHAR(3) not null,
  chest_name   CHAR(20),
  storey_num   INTEGER,
  ic_main_type CHAR(2),
  ic_sub_type  CHAR(2),
  full_flag    CHAR(1),
  card_money   INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_CHEST_352f63fe to ACC_TK_APP;
grant select on ACC_TK.IC_COD_CHEST_352f63fe to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_CHEST_352f63fe to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_DIFF_REASON
prompt =================================
prompt
create table ACC_TK.IC_COD_DIFF_REASON
(
  diff_id   CHAR(2) not null,
  diff_desc VARCHAR2(20) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_DIFF_REASON to ACC_TK_APP;
grant select on ACC_TK.IC_COD_DIFF_REASON to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_DIFF_REASON to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_ES_WORK_TYPE
prompt ==================================
prompt
create table ACC_TK.IC_COD_ES_WORK_TYPE
(
  es_worktype_id   CHAR(2) not null,
  es_worktype_name CHAR(50)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_ES_WORK_TYPE to ACC_TK_APP;
grant select on ACC_TK.IC_COD_ES_WORK_TYPE to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_ES_WORK_TYPE to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_FACTORY
prompt =============================
prompt
create table ACC_TK.IC_COD_FACTORY
(
  factory_code        CHAR(2) not null,
  factory_name        VARCHAR2(50),
  factory_description VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_FACTORY to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_COD_FACTORY to ACC_TK_APP;
grant select on ACC_TK.IC_COD_FACTORY to ACC_TK_DEV;

prompt
prompt Creating table IC_COD_HANDIN_TYPE
prompt =================================
prompt
create table ACC_TK.IC_COD_HANDIN_TYPE
(
  handintype_id   CHAR(2) not null,
  handintype_name VARCHAR2(20)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
alter table ACC_TK.IC_COD_HANDIN_TYPE
  add constraint PK_IC_COD_HANDIN_TYPE primary key (HANDINTYPE_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_COD_HANDIN_TYPE to ACC_TK_APP;
grant select on ACC_TK.IC_COD_HANDIN_TYPE to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_HANDIN_TYPE to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_IN_OUT
prompt ============================
prompt
create table ACC_TK.IC_COD_IN_OUT
(
  reason_id       CHAR(2) not null,
  reason_describe VARCHAR2(20) not null,
  in_out_flag     CHAR(1) not null,
  es_worktype_id  CHAR(2),
  in_out_desc     VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_IN_OUT to ACC_TK_APP;
grant select on ACC_TK.IC_COD_IN_OUT to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_IN_OUT to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_LINE
prompt ==========================
prompt
create table ACC_TK.IC_COD_LINE
(
  line_id   CHAR(2) not null,
  line_name VARCHAR2(50)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_LINE to ACC_TK_APP;
grant select on ACC_TK.IC_COD_LINE to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_LINE to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_STATION
prompt =============================
prompt
create table ACC_TK.IC_COD_STATION
(
  line_id      VARCHAR2(2) not null,
  station_id   VARCHAR2(3) not null,
  chinese_name VARCHAR2(20)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_STATION to ACC_TK_APP;
grant select on ACC_TK.IC_COD_STATION to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_STATION to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_STATION_CONTRAST
prompt ======================================
prompt
create table ACC_TK.IC_COD_STATION_CONTRAST
(
  line_code    VARCHAR2(2) not null,
  station_code VARCHAR2(3) not null,
  line_id      VARCHAR2(2),
  station_id   VARCHAR2(3)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_STATION_CONTRAST to ACC_TK_APP;
grant select on ACC_TK.IC_COD_STATION_CONTRAST to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_STATION_CONTRAST to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_STORAGE
prompt =============================
prompt
create table ACC_TK.IC_COD_STORAGE
(
  storage_id      CHAR(4) not null,
  storage_name    CHAR(18),
  storage_address CHAR(20),
  record_flag     CHAR(1)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_STORAGE to ACC_TK_APP;
grant select on ACC_TK.IC_COD_STORAGE to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_STORAGE to ACC_TK_RPT;

prompt
prompt Creating table IC_COD_STORAGE_LINE
prompt ==================================
prompt
create table ACC_TK.IC_COD_STORAGE_LINE
(
  storage_id CHAR(4) not null,
  line_id    VARCHAR2(2) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_COD_STORAGE_LINE
  is '仓库线路对照表';
grant select, insert, update, delete on ACC_TK.IC_COD_STORAGE_LINE to ACC_TK_APP;
grant select on ACC_TK.IC_COD_STORAGE_LINE to ACC_TK_DEV;

prompt
prompt Creating table IC_COD_STOREY
prompt ============================
prompt
create table ACC_TK.IC_COD_STOREY
(
  storage_id  CHAR(4) not null,
  area_id     CHAR(2) not null,
  chest_id    CHAR(3) not null,
  storey_id   CHAR(2) not null,
  storey_name CHAR(20),
  base_num    INTEGER,
  full_flag   CHAR(1)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_COD_STOREY to ACC_TK_APP;
grant select on ACC_TK.IC_COD_STOREY to ACC_TK_DEV;
grant select on ACC_TK.IC_COD_STOREY to ACC_TK_RPT;

prompt
prompt Creating table IC_ECP_OPRTLOG
prompt =============================
prompt
create table ACC_TK.IC_ECP_OPRTLOG
(
  water_no     NUMBER(18) not null,
  oper_id      VARCHAR2(10),
  oprt_time    DATE,
  oprt_content VARCHAR2(256),
  oprt_result  CHAR(1)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_ECP_OPRTLOG
  is '员工卡打印系统日志表';
comment on column ACC_TK.IC_ECP_OPRTLOG.water_no
  is '流水';
comment on column ACC_TK.IC_ECP_OPRTLOG.oper_id
  is '操作员ID';
comment on column ACC_TK.IC_ECP_OPRTLOG.oprt_time
  is '操作时间';
comment on column ACC_TK.IC_ECP_OPRTLOG.oprt_content
  is '操作说明';
comment on column ACC_TK.IC_ECP_OPRTLOG.oprt_result
  is '操作结果';
alter table ACC_TK.IC_ECP_OPRTLOG
  add primary key (WATER_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ECP_OPRTLOG to ACC_TK_APP;
grant select on ACC_TK.IC_ECP_OPRTLOG to ACC_TK_DEV;

prompt
prompt Creating table IC_ECP_PRINT_LIST
prompt ================================
prompt
create table ACC_TK.IC_ECP_PRINT_LIST
(
  id            VARCHAR2(8) not null,
  name          VARCHAR2(30),
  gender        CHAR(1) default 1,
  identity_id   VARCHAR2(20) default 00000000000000000 not null,
  identity_type VARCHAR2(2),
  card_type     VARCHAR2(4),
  photo_name    VARCHAR2(100),
  print_oper    VARCHAR2(20),
  print_time    DATE,
  issue_time    DATE,
  remark        VARCHAR2(100),
  department    VARCHAR2(2),
  position      VARCHAR2(2),
  logical_id    VARCHAR2(20) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_ECP_PRINT_LIST
  is '员工卡打印系统打印记录表-员工卡';
comment on column ACC_TK.IC_ECP_PRINT_LIST.name
  is '姓名';
comment on column ACC_TK.IC_ECP_PRINT_LIST.gender
  is '性别';
comment on column ACC_TK.IC_ECP_PRINT_LIST.identity_id
  is '证件号';
comment on column ACC_TK.IC_ECP_PRINT_LIST.identity_type
  is '证件类型1:身份证,2:学生证,3:军人证,4:老人,5:员工,9:其他';
comment on column ACC_TK.IC_ECP_PRINT_LIST.card_type
  is '票卡类型';
comment on column ACC_TK.IC_ECP_PRINT_LIST.photo_name
  is '相片名称';
comment on column ACC_TK.IC_ECP_PRINT_LIST.print_oper
  is '操作员';
comment on column ACC_TK.IC_ECP_PRINT_LIST.print_time
  is '打印时间';
comment on column ACC_TK.IC_ECP_PRINT_LIST.issue_time
  is '发证日期';
comment on column ACC_TK.IC_ECP_PRINT_LIST.remark
  is '备注';
comment on column ACC_TK.IC_ECP_PRINT_LIST.department
  is '单位';
comment on column ACC_TK.IC_ECP_PRINT_LIST.position
  is '职务';
comment on column ACC_TK.IC_ECP_PRINT_LIST.logical_id
  is '逻辑卡号';
alter table ACC_TK.IC_ECP_PRINT_LIST
  add primary key (ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ECP_PRINT_LIST to ACC_TK_APP;
grant select on ACC_TK.IC_ECP_PRINT_LIST to ACC_TK_DEV;

prompt
prompt Creating table IC_ECP_PUB_FLAG
prompt ==============================
prompt
create table ACC_TK.IC_ECP_PUB_FLAG
(
  type        VARCHAR2(50) not null,
  code        VARCHAR2(20) not null,
  code_text   VARCHAR2(50),
  description VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_ECP_PUB_FLAG
  is '员工卡打印系统配置表';
comment on column ACC_TK.IC_ECP_PUB_FLAG.type
  is '类型代码';
comment on column ACC_TK.IC_ECP_PUB_FLAG.code
  is '代码';
comment on column ACC_TK.IC_ECP_PUB_FLAG.code_text
  is '代码描述';
comment on column ACC_TK.IC_ECP_PUB_FLAG.description
  is '类型描述';
grant select, insert, update, delete on ACC_TK.IC_ECP_PUB_FLAG to ACC_TK_APP;
grant select on ACC_TK.IC_ECP_PUB_FLAG to ACC_TK_DEV;

prompt
prompt Creating table IC_ECP_SYS_VERSION
prompt =================================
prompt
create table ACC_TK.IC_ECP_SYS_VERSION
(
  version_no  VARCHAR2(10) not null,
  operator_id VARCHAR2(10),
  valid_date  CHAR(10),
  del_desc    VARCHAR2(255),
  update_desc VARCHAR2(255),
  add_desc    VARCHAR2(255),
  note        VARCHAR2(255)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_ECP_SYS_VERSION
  is '员工卡打印系统版本记录表';
comment on column ACC_TK.IC_ECP_SYS_VERSION.version_no
  is '版本号';
comment on column ACC_TK.IC_ECP_SYS_VERSION.operator_id
  is '操作员';
comment on column ACC_TK.IC_ECP_SYS_VERSION.valid_date
  is '更新日期';
comment on column ACC_TK.IC_ECP_SYS_VERSION.del_desc
  is '删除描述';
comment on column ACC_TK.IC_ECP_SYS_VERSION.update_desc
  is '更新描述';
comment on column ACC_TK.IC_ECP_SYS_VERSION.add_desc
  is '增加描述';
comment on column ACC_TK.IC_ECP_SYS_VERSION.note
  is '登记';
grant select, insert, update, delete on ACC_TK.IC_ECP_SYS_VERSION to ACC_TK_APP;
grant select on ACC_TK.IC_ECP_SYS_VERSION to ACC_TK_DEV;

prompt
prompt Creating table IC_ERR_CARD_REPEAT
prompt =================================
prompt
create table ACC_TK.IC_ERR_CARD_REPEAT
(
  b_serial_no VARCHAR2(8) not null,
  e_serial_no VARCHAR2(8) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
alter table ACC_TK.IC_ERR_CARD_REPEAT
  add constraint IC_CARD_REPEAT_PK primary key (B_SERIAL_NO, E_SERIAL_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_ERR_CARD_REPEAT to ACC_TK_APP;
grant select on ACC_TK.IC_ERR_CARD_REPEAT to ACC_TK_DEV;
grant select on ACC_TK.IC_ERR_CARD_REPEAT to ACC_TK_RPT;

prompt
prompt Creating type UT_IC_CARDMAIN
prompt ============================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_IC_CARDMAIN"                                          as object(ic_main_type char(2));
/
grant execute on ACC_TK.UT_IC_CARDMAIN to ACC_TK_APP;


prompt
prompt Creating type UT_IC_CARDSUB
prompt ===========================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_IC_CARDSUB"                                          as object(ic_sub_type char(2));
/
grant execute on ACC_TK.UT_IC_CARDSUB to ACC_TK_APP;


prompt
prompt Creating type UT_LINE
prompt =====================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_LINE"                                          as object(line_code char(2));
/
grant execute on ACC_TK.UT_LINE to ACC_TK_APP;


prompt
prompt Creating type UT_STATION
prompt ========================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_STATION"                                          as object(station_code char(2));
/
grant execute on ACC_TK.UT_STATION to ACC_TK_APP;


prompt
prompt Creating table IC_ERR_CARD_REPEAT_DETAIL
prompt ========================================
prompt
create table ACC_TK.IC_ERR_CARD_REPEAT_DETAIL
(
  logi_id        CHAR(20),
  card_main_type UT_IC_CARDMAIN,
  card_sub_type  UT_IC_CARDSUB,
  req_no         CHAR(10),
  phy_id         CHAR(20),
  print_id       CHAR(16),
  manu_time      DATE,
  card_money     NUMBER(12,2),
  peri_avadate   DATE,
  kdc_version    CHAR(2),
  hdl_time       DATE,
  order_no       CHAR(14),
  status_flag    CHAR(2),
  card_type      CHAR(3),
  line_code      UT_LINE,
  station_code   UT_STATION,
  card_start_ava CHAR(8)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ERR_CARD_REPEAT_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_ERR_CARD_REPEAT_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_ERR_CARD_REPEAT_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_AGAIN_INFO
prompt ===============================
prompt
create table ACC_TK.IC_ES_AGAIN_INFO
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11),
  insert_time        DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_ES_AGAIN_INFO
  is 'ES单程票重编码记录表';
alter table ACC_TK.IC_ES_AGAIN_INFO
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_AGAIN_INFO to ACC_TK_APP;
grant select on ACC_TK.IC_ES_AGAIN_INFO to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_AGAIN_INFO to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_AGAIN_INFO000001
prompt =====================================
prompt
create table ACC_TK.IC_ES_AGAIN_INFO000001
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_AGAIN_INFO000001
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_ES_AGAIN_INFO000001 to ACC_ST_DEV;
grant select, insert, update, delete on ACC_TK.IC_ES_AGAIN_INFO000001 to ACC_TK_APP;
grant select on ACC_TK.IC_ES_AGAIN_INFO000001 to ACC_TK_DEV;

prompt
prompt Creating table IC_ES_AGAIN_INFO_BUF
prompt ===================================
prompt
create table ACC_TK.IC_ES_AGAIN_INFO_BUF
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_AGAIN_INFO_BUF
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_AGAIN_INFO_BUF to ACC_TK_APP;
grant select on ACC_TK.IC_ES_AGAIN_INFO_BUF to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_AGAIN_INFO_BUF to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_AGAIN_INFO_SVT
prompt ===================================
prompt
create table ACC_TK.IC_ES_AGAIN_INFO_SVT
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11),
  insert_time        DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_ES_AGAIN_INFO_SVT
  is 'ES储值票重编码记录表';
alter table ACC_TK.IC_ES_AGAIN_INFO_SVT
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_AGAIN_INFO_SVT to ACC_ST_APP;
grant select on ACC_TK.IC_ES_AGAIN_INFO_SVT to ACC_ST_DEV;
grant select on ACC_TK.IC_ES_AGAIN_INFO_SVT to ACC_ST_RPT;
grant select, insert, update, delete on ACC_TK.IC_ES_AGAIN_INFO_SVT to ACC_TK_APP;
grant select on ACC_TK.IC_ES_AGAIN_INFO_SVT to ACC_TK_DEV;

prompt
prompt Creating table IC_ES_BCP_CONFIG
prompt ===============================
prompt
create table ACC_TK.IC_ES_BCP_CONFIG
(
  server   VARCHAR2(50) not null,
  db       VARCHAR2(50) not null,
  account  VARCHAR2(20) not null,
  password VARCHAR2(100) not null,
  enc_flag VARCHAR2(1) default '0' not null,
  remark   VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_BCP_CONFIG to ACC_TK_APP;
grant select on ACC_TK.IC_ES_BCP_CONFIG to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_BCP_CONFIG to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_CFG_SYS
prompt ============================
prompt
create table ACC_TK.IC_ES_CFG_SYS
(
  sender_code  VARCHAR2(10),
  city_code    VARCHAR2(10),
  busi_code    VARCHAR2(10),
  card_version VARCHAR2(10),
  app_version  VARCHAR2(10),
  key_version  VARCHAR2(10)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_CFG_SYS to ACC_TK_APP;
grant select on ACC_TK.IC_ES_CFG_SYS to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_CFG_SYS to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_FILE_AUDIT
prompt ===============================
prompt
create table ACC_TK.IC_ES_FILE_AUDIT
(
  water_no      NUMBER(18),
  device_id     VARCHAR2(6) not null,
  file_name     VARCHAR2(30) not null,
  status        VARCHAR2(1) not null,
  info_time     DATE not null,
  info_operator VARCHAR2(10)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_FILE_AUDIT to ACC_TK_APP;
grant select on ACC_TK.IC_ES_FILE_AUDIT to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_FILE_AUDIT to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_FILE_ERROR
prompt ===============================
prompt
create table ACC_TK.IC_ES_FILE_ERROR
(
  water_no      NUMBER(18),
  device_id     VARCHAR2(6) not null,
  file_name     VARCHAR2(30) not null,
  error_code    VARCHAR2(2) not null,
  gen_time      DATE not null,
  info_flag     VARCHAR2(1) not null,
  info_time     DATE,
  info_operator VARCHAR2(10),
  remark        VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_FILE_ERROR to ACC_TK_APP;
grant select on ACC_TK.IC_ES_FILE_ERROR to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_FILE_ERROR to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_HUNCH_INFO
prompt ===============================
prompt
create table ACC_TK.IC_ES_HUNCH_INFO
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  line_code          CHAR(2) default '00',
  station_code       CHAR(2) default '00',
  card_start_ava     CHAR(8) default '00000000',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11),
  insert_time        DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_HUNCH_INFO
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_ES_HUNCH_INFO to ACC_ONLINE_DEV;
grant select on ACC_TK.IC_ES_HUNCH_INFO to ACC_ST_APP;
grant select on ACC_TK.IC_ES_HUNCH_INFO to ACC_ST_DEV;
grant select on ACC_TK.IC_ES_HUNCH_INFO to ACC_ST_RPT;
grant select, insert, update, delete on ACC_TK.IC_ES_HUNCH_INFO to ACC_TK_APP;
grant select on ACC_TK.IC_ES_HUNCH_INFO to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_HUNCH_INFO to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_HUNCH_INFO000001
prompt =====================================
prompt
create table ACC_TK.IC_ES_HUNCH_INFO000001
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  line_code          CHAR(2) default '00',
  station_code       CHAR(2) default '00',
  card_start_ava     CHAR(8) default '00000000',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_HUNCH_INFO000001
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_ES_HUNCH_INFO000001 to ACC_ST_DEV;
grant select, insert, update, delete on ACC_TK.IC_ES_HUNCH_INFO000001 to ACC_TK_APP;
grant select on ACC_TK.IC_ES_HUNCH_INFO000001 to ACC_TK_DEV;

prompt
prompt Creating table IC_ES_HUNCH_INFO_BUF
prompt ===================================
prompt
create table ACC_TK.IC_ES_HUNCH_INFO_BUF
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  line_code          CHAR(2) default '00',
  station_code       CHAR(2) default '00',
  card_start_ava     CHAR(8) default '00000000',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_HUNCH_INFO_BUF
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_ES_HUNCH_INFO_BUF to ACC_ONLINE_DEV;
grant select on ACC_TK.IC_ES_HUNCH_INFO_BUF to ACC_ST_APP;
grant select on ACC_TK.IC_ES_HUNCH_INFO_BUF to ACC_ST_DEV;
grant select on ACC_TK.IC_ES_HUNCH_INFO_BUF to ACC_ST_RPT;
grant select, insert, update, delete on ACC_TK.IC_ES_HUNCH_INFO_BUF to ACC_TK_APP;
grant select on ACC_TK.IC_ES_HUNCH_INFO_BUF to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_HUNCH_INFO_BUF to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_INFO_FILE
prompt ==============================
prompt
create table ACC_TK.IC_ES_INFO_FILE
(
  water_no    NUMBER(18),
  device_id   VARCHAR2(6) not null,
  file_name   VARCHAR2(30) not null,
  status      VARCHAR2(1) not null,
  info_time   DATE not null,
  update_time DATE,
  operator    VARCHAR2(10)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_INFO_FILE to ACC_TK_APP;
grant select on ACC_TK.IC_ES_INFO_FILE to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_INFO_FILE to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_INITI_INFO
prompt ===============================
prompt
create table ACC_TK.IC_ES_INITI_INFO
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_INITI_INFO
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_ES_INITI_INFO to ACC_ONLINE_DEV;
grant select on ACC_TK.IC_ES_INITI_INFO to ACC_ST_APP;
grant select on ACC_TK.IC_ES_INITI_INFO to ACC_ST_DEV;
grant select on ACC_TK.IC_ES_INITI_INFO to ACC_ST_RPT;
grant select, insert, update, delete on ACC_TK.IC_ES_INITI_INFO to ACC_TK_APP;
grant select on ACC_TK.IC_ES_INITI_INFO to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_INITI_INFO to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_INITI_INFO000001
prompt =====================================
prompt
create table ACC_TK.IC_ES_INITI_INFO000001
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_INITI_INFO000001
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_ES_INITI_INFO000001 to ACC_ST_DEV;
grant select, insert, update, delete on ACC_TK.IC_ES_INITI_INFO000001 to ACC_TK_APP;
grant select on ACC_TK.IC_ES_INITI_INFO000001 to ACC_TK_DEV;

prompt
prompt Creating table IC_ES_INITI_INFO_BUF
prompt ===================================
prompt
create table ACC_TK.IC_ES_INITI_INFO_BUF
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_INITI_INFO_BUF
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_INITI_INFO_BUF to ACC_TK_APP;
grant select on ACC_TK.IC_ES_INITI_INFO_BUF to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_INITI_INFO_BUF to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_LEGAL_DEVTYPE
prompt ==================================
prompt
create table ACC_TK.IC_ES_LEGAL_DEVTYPE
(
  dev_type_id CHAR(2)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_LEGAL_DEVTYPE to ACC_TK_APP;
grant select on ACC_TK.IC_ES_LEGAL_DEVTYPE to ACC_TK_DEV;

prompt
prompt Creating table IC_ES_LOGOUT_INFO
prompt ================================
prompt
create table ACC_TK.IC_ES_LOGOUT_INFO
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_LOGOUT_INFO
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_LOGOUT_INFO to ACC_TK_APP;
grant select on ACC_TK.IC_ES_LOGOUT_INFO to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_LOGOUT_INFO to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_LOGOUT_INFO000001
prompt ======================================
prompt
create table ACC_TK.IC_ES_LOGOUT_INFO000001
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_LOGOUT_INFO000001
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_ES_LOGOUT_INFO000001 to ACC_ST_DEV;
grant select, insert, update, delete on ACC_TK.IC_ES_LOGOUT_INFO000001 to ACC_TK_APP;
grant select on ACC_TK.IC_ES_LOGOUT_INFO000001 to ACC_TK_DEV;

prompt
prompt Creating table IC_ES_LOGOUT_INFO_BUF
prompt ====================================
prompt
create table ACC_TK.IC_ES_LOGOUT_INFO_BUF
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     CHAR(2),
  card_sub_type      CHAR(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_LOGOUT_INFO_BUF
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_LOGOUT_INFO_BUF to ACC_TK_APP;
grant select on ACC_TK.IC_ES_LOGOUT_INFO_BUF to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_LOGOUT_INFO_BUF to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_ORDER_NUM_CHANGE
prompt =====================================
prompt
create table ACC_TK.IC_ES_ORDER_NUM_CHANGE
(
  water_no           NUMBER(18) not null,
  file_name          VARCHAR2(30) not null,
  order_no           VARCHAR2(14) not null,
  fini_pronum_reset  INTEGER not null,
  fini_pronum_before INTEGER not null,
  reset_time         DATE not null,
  remark             VARCHAR2(200)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
alter table ACC_TK.IC_ES_ORDER_NUM_CHANGE
  add primary key (WATER_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_ES_ORDER_NUM_CHANGE to ACC_TK_APP;
grant select on ACC_TK.IC_ES_ORDER_NUM_CHANGE to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_ORDER_NUM_CHANGE to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_PDU_REPEAT_LOGIC
prompt =====================================
prompt
create table ACC_TK.IC_ES_PDU_REPEAT_LOGIC
(
  logic_id          CHAR(20) not null,
  card_main_type    CHAR(2),
  card_sub_type     CHAR(2),
  req_no            CHAR(10),
  phy_id            CHAR(20) not null,
  print_id          CHAR(20) not null,
  manu_time         DATE,
  card_money        NUMBER(12,2),
  peri_avadate      DATE,
  kdc_version       CHAR(2),
  hdl_time          DATE,
  order_no          CHAR(14) not null,
  status_flag       CHAR(2),
  card_type         CHAR(3) default '001',
  card_ava_days     VARCHAR2(10) default '000',
  exit_line_code    VARCHAR2(2) default '00',
  exit_station_code VARCHAR2(2) default '00',
  modal             VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_PDU_REPEAT_LOGIC to ACC_TK_APP;
grant select on ACC_TK.IC_ES_PDU_REPEAT_LOGIC to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_PDU_REPEAT_LOGIC to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_ROLE
prompt =========================
prompt
create table ACC_TK.IC_ES_ROLE
(
  sys_group_id VARCHAR2(4) not null,
  group_level  VARCHAR2(2) not null,
  remark       VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_ROLE
  add primary key (SYS_GROUP_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_ROLE to ACC_TK_APP;
grant select on ACC_TK.IC_ES_ROLE to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_ROLE to ACC_TK_RPT;

prompt
prompt Creating table IC_ES_STATUS
prompt ===========================
prompt
create table ACC_TK.IC_ES_STATUS
(
  device_id   VARCHAR2(6) not null,
  operator_id VARCHAR2(10) not null,
  status_time VARCHAR2(20) not null,
  status      VARCHAR2(4) not null,
  remark      VARCHAR2(30)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ES_STATUS
  add primary key (DEVICE_ID, STATUS_TIME, STATUS)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ES_STATUS to ACC_TK_APP;
grant select on ACC_TK.IC_ES_STATUS to ACC_TK_DEV;
grant select on ACC_TK.IC_ES_STATUS to ACC_TK_RPT;

prompt
prompt Creating table IC_ET_ISSUE
prompt ==========================
prompt
create table ACC_TK.IC_ET_ISSUE
(
  employee_id         VARCHAR2(10) not null,
  employee_name       VARCHAR2(10),
  gender              CHAR(1) default 0,
  logical_id          VARCHAR2(20) not null,
  phy_id              VARCHAR2(20),
  print_id            VARCHAR2(16),
  make_oper           VARCHAR2(10),
  make_time           DATE,
  return_oper         VARCHAR2(10),
  return_time         DATE,
  use_state           CHAR(1),
  remark              VARCHAR2(256),
  employee_position   VARCHAR2(2),
  employee_department VARCHAR2(2),
  update_oper         VARCHAR2(10),
  update_time         DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_ET_ISSUE
  is '员工发行系统记录表';
comment on column ACC_TK.IC_ET_ISSUE.update_oper
  is '更新操作员';
comment on column ACC_TK.IC_ET_ISSUE.update_time
  is '更新时间';
alter table ACC_TK.IC_ET_ISSUE
  add primary key (EMPLOYEE_ID, LOGICAL_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ET_ISSUE to ACC_TK_APP;
grant select on ACC_TK.IC_ET_ISSUE to ACC_TK_DEV;
grant select on ACC_TK.IC_ET_ISSUE to ACC_TK_RPT;

prompt
prompt Creating table IC_ET_OPRTLOG
prompt ============================
prompt
create table ACC_TK.IC_ET_OPRTLOG
(
  water_no     NUMBER(18) not null,
  oper_id      VARCHAR2(10),
  oprt_time    DATE,
  oprt_content VARCHAR2(256),
  oprt_result  CHAR(1)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_ET_OPRTLOG
  add primary key (WATER_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_ET_OPRTLOG to ACC_TK_APP;
grant select on ACC_TK.IC_ET_OPRTLOG to ACC_TK_DEV;
grant select on ACC_TK.IC_ET_OPRTLOG to ACC_TK_RPT;

prompt
prompt Creating table IC_ET_PUB_FLAG
prompt =============================
prompt
create table ACC_TK.IC_ET_PUB_FLAG
(
  type        VARCHAR2(50) not null,
  code        VARCHAR2(20) not null,
  code_text   VARCHAR2(50),
  description VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_ET_PUB_FLAG to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_ET_PUB_FLAG to ACC_TK_APP;
grant select on ACC_TK.IC_ET_PUB_FLAG to ACC_TK_DEV;
grant select on ACC_TK.IC_ET_PUB_FLAG to ACC_TK_RPT;

prompt
prompt Creating table IC_ET_SYS_VERSION
prompt ================================
prompt
create table ACC_TK.IC_ET_SYS_VERSION
(
  version_no  VARCHAR2(10) not null,
  operator_id VARCHAR2(10),
  valid_date  CHAR(10),
  del_desc    VARCHAR2(255),
  update_desc VARCHAR2(255),
  add_desc    VARCHAR2(255),
  note        VARCHAR2(255)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_ET_SYS_VERSION
  is '员工票发行系统版本记录表';
comment on column ACC_TK.IC_ET_SYS_VERSION.version_no
  is '版本号';
comment on column ACC_TK.IC_ET_SYS_VERSION.operator_id
  is '操作员';
comment on column ACC_TK.IC_ET_SYS_VERSION.valid_date
  is '更新日期';
comment on column ACC_TK.IC_ET_SYS_VERSION.del_desc
  is '删除描述';
comment on column ACC_TK.IC_ET_SYS_VERSION.update_desc
  is '更新描述';
comment on column ACC_TK.IC_ET_SYS_VERSION.add_desc
  is '增加描述';
comment on column ACC_TK.IC_ET_SYS_VERSION.note
  is '登记';
grant select on ACC_TK.IC_ET_SYS_VERSION to ACC_TK_DEV;

prompt
prompt Creating table IC_IDX_HISTORY
prompt =============================
prompt
create table ACC_TK.IC_IDX_HISTORY
(
  his_table         VARCHAR2(40) not null,
  origin_table_name VARCHAR2(30),
  begin_recd        CHAR(10),
  end_recd          CHAR(10),
  begin_time        VARCHAR2(20),
  end_time          VARCHAR2(20),
  recd_count        INTEGER,
  recd_type         VARCHAR2(3)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_IDX_HISTORY
  is '中间统计表数据历史索引表';
alter table ACC_TK.IC_IDX_HISTORY
  add constraint PK_IC_IDX_HISTORY primary key (HIS_TABLE)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_IDX_HISTORY to ACC_ONLINE_DEV;
grant select on ACC_TK.IC_IDX_HISTORY to ACC_ST_APP;
grant select on ACC_TK.IC_IDX_HISTORY to ACC_ST_DEV;
grant select on ACC_TK.IC_IDX_HISTORY to ACC_ST_RPT;
grant select, insert, update, delete on ACC_TK.IC_IDX_HISTORY to ACC_TK_APP;
grant select on ACC_TK.IC_IDX_HISTORY to ACC_TK_DEV;
grant select on ACC_TK.IC_IDX_HISTORY to ACC_TK_RPT;

prompt
prompt Creating table IC_INF_INCOMEDEP_HANDIN
prompt ======================================
prompt
create table ACC_TK.IC_INF_INCOMEDEP_HANDIN
(
  dept_id       VARCHAR2(2) not null,
  handintype_id VARCHAR2(2) not null,
  quantity      NUMBER(38) not null,
  reportdate    DATE not null,
  tickettype_id VARCHAR2(4) not null,
  value         NUMBER(20,2) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_INF_INCOMEDEP_HANDIN to ACC_TK_APP;
grant select on ACC_TK.IC_INF_INCOMEDEP_HANDIN to ACC_TK_DEV;
grant select on ACC_TK.IC_INF_INCOMEDEP_HANDIN to ACC_TK_RPT;

prompt
prompt Creating table IC_INF_LOGICAL_SECTION
prompt =====================================
prompt
create table ACC_TK.IC_INF_LOGICAL_SECTION
(
  start_logical_id VARCHAR2(20) not null,
  end_logical_id   VARCHAR2(20) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_INF_LOGICAL_SECTION to ACC_TK_APP;
grant select on ACC_TK.IC_INF_LOGICAL_SECTION to ACC_TK_DEV;
grant select on ACC_TK.IC_INF_LOGICAL_SECTION to ACC_TK_RPT;

prompt
prompt Creating table IC_INF_STATION_HANDIN
prompt ====================================
prompt
create table ACC_TK.IC_INF_STATION_HANDIN
(
  dept_id            VARCHAR2(4),
  handintype_id      VARCHAR2(2),
  idend              VARCHAR2(20),
  idstart            VARCHAR2(20),
  isabandon          VARCHAR2(1),
  quantity           NUMBER(20),
  remark             VARCHAR2(1024),
  reportdate         DATE,
  tickettype_id      VARCHAR2(4),
  value              NUMBER(20),
  createtime         DATE,
  in_flag            CHAR(1) default 0 not null,
  in_store_detail_no NUMBER(18)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on column ACC_TK.IC_INF_STATION_HANDIN.in_flag
  is '0 未入库 1 已入库 2入库已审核';
grant select, insert, update, delete on ACC_TK.IC_INF_STATION_HANDIN to ACC_TK_APP;
grant select on ACC_TK.IC_INF_STATION_HANDIN to ACC_TK_DEV;
grant select on ACC_TK.IC_INF_STATION_HANDIN to ACC_TK_RPT;

prompt
prompt Creating table IC_INF_STATION_HANDIN_cdf437ca
prompt =============================================
prompt
create table ACC_TK.IC_INF_STATION_HANDIN_cdf437ca
(
  dept_id       VARCHAR2(4),
  handintype_id VARCHAR2(2),
  idend         NUMBER(38,2),
  idstart       NUMBER(38,2),
  isabandon     NUMBER(1),
  quantity      NUMBER(38,2),
  remark        VARCHAR2(1024),
  reportdate    DATE,
  tickettype_id VARCHAR2(4),
  value         NUMBER(20,2),
  createtime    DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_INF_STATION_HANDIN_cdf437ca to ACC_TK_APP;
grant select on ACC_TK.IC_INF_STATION_HANDIN_cdf437ca to ACC_TK_DEV;
grant select on ACC_TK.IC_INF_STATION_HANDIN_cdf437ca to ACC_TK_RPT;

prompt
prompt Creating table IC_INF_STATION_SALE
prompt ==================================
prompt
create table ACC_TK.IC_INF_STATION_SALE
(
  dept_id       VARCHAR2(4),
  tickettype_id VARCHAR2(4),
  value         NUMBER(20,2),
  salenum       NUMBER(20,2),
  returnnum     NUMBER(20,2),
  currenttotal  NUMBER(20,2),
  reportdate    DATE,
  storage_id    CHAR(4)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_INF_STATION_SALE to ACC_TK_APP;
grant select on ACC_TK.IC_INF_STATION_SALE to ACC_TK_DEV;
grant select on ACC_TK.IC_INF_STATION_SALE to ACC_TK_RPT;

prompt
prompt Creating table IC_INF_TICKET_MAPPING
prompt ====================================
prompt
create table ACC_TK.IC_INF_TICKET_MAPPING
(
  tickettype_id    NUMBER(38) not null,
  ic_tickettype_id NUMBER(38)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_INF_TICKET_MAPPING to ACC_TK_APP;
grant select on ACC_TK.IC_INF_TICKET_MAPPING to ACC_TK_DEV;
grant select on ACC_TK.IC_INF_TICKET_MAPPING to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_ACCESS_PLACE
prompt =================================
prompt
create table ACC_TK.IC_IN_ACCESS_PLACE
(
  storage_id   CHAR(4) not null,
  area_id      CHAR(2) not null,
  ic_main_type VARCHAR2(2) not null,
  ic_sub_type  VARCHAR2(2) not null,
  put_place    VARCHAR2(20),
  get_place    VARCHAR2(20),
  card_money   INTEGER default 0 not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_ACCESS_PLACE to ACC_TK_APP;
grant select on ACC_TK.IC_IN_ACCESS_PLACE to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_ACCESS_PLACE to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_ACCESS_PLACE_2e5dabc0
prompt ==========================================
prompt
create table ACC_TK.IC_IN_ACCESS_PLACE_2e5dabc0
(
  storage_id   CHAR(4) not null,
  area_id      CHAR(2) not null,
  ic_main_type VARCHAR2(2) not null,
  ic_sub_type  VARCHAR2(1) not null,
  put_place    VARCHAR2(20),
  get_place    VARCHAR2(20),
  card_money   INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_ACCESS_PLACE_2e5dabc0 to ACC_TK_APP;
grant select on ACC_TK.IC_IN_ACCESS_PLACE_2e5dabc0 to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_ACCESS_PLACE_2e5dabc0 to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_ACCESS_PLACE_c12d825e
prompt ==========================================
prompt
create table ACC_TK.IC_IN_ACCESS_PLACE_c12d825e
(
  storage_id   CHAR(4) not null,
  area_id      CHAR(2) not null,
  ic_main_type CHAR(2) not null,
  ic_sub_type  CHAR(2) not null,
  put_place    CHAR(20),
  get_place    CHAR(20),
  card_money   INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_ACCESS_PLACE_c12d825e to ACC_TK_APP;
grant select on ACC_TK.IC_IN_ACCESS_PLACE_c12d825e to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_ACCESS_PLACE_c12d825e to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_ADD_NEW_CARD
prompt =================================
prompt
create table ACC_TK.IC_IN_ADD_NEW_CARD
(
  water_no         NUMBER(18),
  in_bill_no       VARCHAR2(12) not null,
  storage_id       VARCHAR2(4) not null,
  area_id          VARCHAR2(2) not null,
  ic_main_type     VARCHAR2(2) not null,
  ic_sub_type      VARCHAR2(2) not null,
  card_money       INTEGER default 0 not null,
  start_logical_id VARCHAR2(20) not null,
  end_logical_id   VARCHAR2(20) not null,
  in_num           INTEGER not null,
  in_flag          CHAR(1) default '0' not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_ADD_NEW_CARD to ACC_TK_APP;
grant select on ACC_TK.IC_IN_ADD_NEW_CARD to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_ADD_NEW_CARD to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_BILL_BOX_ID
prompt ================================
prompt
create table ACC_TK.IC_IN_BILL_BOX_ID
(
  box_card_type    CHAR(2) not null,
  current_int_no   INTEGER,
  current_datetime CHAR(8) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_BILL_BOX_ID to ACC_TK_APP;
grant select on ACC_TK.IC_IN_BILL_BOX_ID to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_BILL_BOX_ID to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_OUT_DIFF
prompt =============================
prompt
create table ACC_TK.IC_IN_OUT_DIFF
(
  out_num         INTEGER default 0 not null,
  valid_num       INTEGER default 0 not null,
  real_balance    INTEGER default 0 not null,
  man_useless_num INTEGER default 0 not null,
  cancel_few_num  INTEGER default 0 not null,
  cancel_more_num INTEGER default 0 not null,
  lost_num        INTEGER default 0 not null,
  out_in_diff     INTEGER default 0 not null,
  in_bill_date    DATE,
  in_bill_no      CHAR(12) not null,
  out_bill_no     CHAR(12) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_OUT_DIFF to ACC_TK_APP;
grant select on ACC_TK.IC_IN_OUT_DIFF to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_OUT_DIFF to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_OUT_DIFF_PRODUCE
prompt =====================================
prompt
create table ACC_TK.IC_IN_OUT_DIFF_PRODUCE
(
  in_bill_no      CHAR(12) not null,
  out_bill_no     CHAR(12) not null,
  out_num         INTEGER not null,
  valid_num       INTEGER not null,
  es_useless_num  INTEGER not null,
  man_useless_num INTEGER not null,
  lost_num        INTEGER not null,
  system_balance  INTEGER,
  real_balance    INTEGER not null,
  out_in_diff     INTEGER not null,
  remark          VARCHAR2(256),
  record_flag     CHAR(1) not null,
  in_bill_date    DATE,
  diff_id         CHAR(2) default '00' not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_OUT_DIFF_PRODUCE to ACC_TK_APP;
grant select on ACC_TK.IC_IN_OUT_DIFF_PRODUCE to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_OUT_DIFF_PRODUCE to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_RETURN_BILL
prompt ================================
prompt
create table ACC_TK.IC_IN_RETURN_BILL
(
  bill_no       CHAR(12) not null,
  in_bill_no    CHAR(12),
  lend_bill_no  CHAR(12),
  return_man    CHAR(10),
  receive_man   CHAR(10),
  bill_date     DATE,
  unit_id       CHAR(3),
  record_flag   CHAR(1),
  verify_date   DATE,
  verify_person CHAR(10),
  remark        VARCHAR2(256),
  delete_flag   CHAR(1) default '0'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_RETURN_BILL to ACC_TK_APP;
grant select on ACC_TK.IC_IN_RETURN_BILL to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_RETURN_BILL to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_RETURN_BILL_DETAIL
prompt =======================================
prompt
create table ACC_TK.IC_IN_RETURN_BILL_DETAIL
(
  water_no         INTEGER not null,
  lend_water_no    NUMBER(20),
  bill_no          CHAR(12),
  storage_id       CHAR(4) not null,
  area_id          CHAR(2) not null,
  ic_main_type     CHAR(2) not null,
  ic_sub_type      CHAR(2) not null,
  return_quantity  INTEGER,
  card_money       INTEGER default 0,
  valid_date       DATE,
  line_id          VARCHAR2(2),
  station_id       VARCHAR2(3),
  start_box_id     CHAR(14),
  end_box_id       CHAR(14),
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20),
  box_flag         VARCHAR2(1) default '0' not null,
  exit_line_id     VARCHAR2(2) default '',
  exit_station_id  VARCHAR2(3) default '',
  model            VARCHAR2(3) default '000',
  not_quantity     INTEGER default 0,
  lost_quantity    INTEGER default 0,
  sum_quantity     INTEGER default 0,
  notback_quantity INTEGER default 0,
  delete_flag      CHAR(1) default '0'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_RETURN_BILL_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_IN_RETURN_BILL_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_RETURN_BILL_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_RETURN_RECD
prompt ================================
prompt
create table ACC_TK.IC_IN_RETURN_RECD
(
  reason_id   CHAR(2),
  line_id     VARCHAR2(2),
  station_id  VARCHAR2(3),
  report_date DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_IN_RETURN_RECD to ACC_TK_APP;
grant select on ACC_TK.IC_IN_RETURN_RECD to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_RETURN_RECD to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_STATION_STOCKS
prompt ===================================
prompt
create table ACC_TK.IC_IN_STATION_STOCKS
(
  line_id      CHAR(2) not null,
  station_id   CHAR(3) not null,
  ic_main_type CHAR(2) not null,
  ic_sub_type  CHAR(2) not null,
  real_num     INTEGER,
  low_num      INTEGER,
  upper_num    INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_IN_STATION_STOCKS to ACC_TK_APP;
grant select on ACC_TK.IC_IN_STATION_STOCKS to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_STATION_STOCKS to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_STATION_UP_CONVERT
prompt =======================================
prompt
create table ACC_TK.IC_IN_STATION_UP_CONVERT
(
  tickettype_id NUMBER(38),
  ic_main_type  VARCHAR2(2),
  ic_sub_type   VARCHAR2(2),
  area_id       CHAR(2)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_STATION_UP_CONVERT to ACC_TK_APP;
grant select on ACC_TK.IC_IN_STATION_UP_CONVERT to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_STATION_UP_CONVERT to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_STORE_BILL
prompt ===============================
prompt
create table ACC_TK.IC_IN_STORE_BILL
(
  bill_no         CHAR(12) not null,
  bill_date       DATE,
  form_maker      CHAR(10),
  hand_man        CHAR(10),
  administer      CHAR(10),
  accounter       CHAR(10),
  related_bill_no CHAR(12),
  record_flag     CHAR(1),
  verify_date     DATE,
  verify_person   CHAR(10),
  remark          VARCHAR2(256),
  his_table       VARCHAR2(20)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_STORE_BILL to ACC_TK_APP;
grant select on ACC_TK.IC_IN_STORE_BILL to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_STORE_BILL to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_STORE_DETAIL
prompt =================================
prompt
create table ACC_TK.IC_IN_STORE_DETAIL
(
  water_no           NUMBER(18),
  bill_no            CHAR(12) not null,
  reason_id          VARCHAR2(2) not null,
  storage_id         VARCHAR2(4) not null,
  area_id            VARCHAR2(2) not null,
  ic_main_type       VARCHAR2(2) not null,
  ic_sub_type        VARCHAR2(2) not null,
  in_num             INTEGER not null,
  detail_place       VARCHAR2(50),
  start_box_id       VARCHAR2(14),
  end_box_id         VARCHAR2(14),
  start_logical_id   VARCHAR2(20),
  end_logical_id     VARCHAR2(20),
  valid_date         DATE,
  card_money         INTEGER default 0,
  line_id            VARCHAR2(2),
  station_id         VARCHAR2(3),
  use_flag           CHAR(1),
  report_date        DATE,
  tickettype_id      NUMBER(38),
  card_ava_days      VARCHAR2(10) default '000',
  line_id_reclaim    VARCHAR2(2),
  station_id_reclaim VARCHAR2(3),
  exit_line_id       VARCHAR2(2) default '',
  exit_station_id    VARCHAR2(3) default '',
  model              VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_IN_STORE_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_IN_STORE_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_IN_STORE_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_IN_STORE_DETAIL000001
prompt =======================================
prompt
create table ACC_TK.IC_IN_STORE_DETAIL000001
(
  water_no           NUMBER(18),
  bill_no            CHAR(12) not null,
  reason_id          VARCHAR2(2) not null,
  storage_id         VARCHAR2(4) not null,
  area_id            VARCHAR2(2) not null,
  ic_main_type       VARCHAR2(2) not null,
  ic_sub_type        VARCHAR2(2) not null,
  in_num             INTEGER not null,
  detail_place       VARCHAR2(50),
  start_box_id       VARCHAR2(14),
  end_box_id         VARCHAR2(14),
  start_logical_id   VARCHAR2(20),
  end_logical_id     VARCHAR2(20),
  valid_date         DATE,
  card_money         INTEGER default 0,
  line_id            VARCHAR2(2),
  station_id         VARCHAR2(3),
  use_flag           CHAR(1),
  report_date        DATE,
  tickettype_id      NUMBER(38),
  card_ava_days      VARCHAR2(10) default '000',
  line_id_reclaim    VARCHAR2(2),
  station_id_reclaim VARCHAR2(3),
  exit_line_id       VARCHAR2(2) default '',
  exit_station_id    VARCHAR2(3) default '',
  model              VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_IN_STORE_DETAIL000001 to ACC_ST_DEV;
grant select, insert, update, delete on ACC_TK.IC_IN_STORE_DETAIL000001 to ACC_TK_APP;
grant select on ACC_TK.IC_IN_STORE_DETAIL000001 to ACC_TK_DEV;

prompt
prompt Creating table IC_LOG_CLEAR_TABLE
prompt =================================
prompt
create table ACC_TK.IC_LOG_CLEAR_TABLE
(
  origin_table_name    VARCHAR2(30),
  dest_table_name      VARCHAR2(30),
  begin_bill_no        VARCHAR2(10),
  begin_clear_datetime CHAR(19),
  end_clear_datetime   CHAR(19),
  spent_time           VARCHAR2(8),
  clear_recd_count     NUMBER,
  err_discribe         VARCHAR2(1000),
  sql_label            VARCHAR2(1500),
  end_bill_no          VARCHAR2(10)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_LOG_CLEAR_TABLE to ACC_TK_APP;
grant select on ACC_TK.IC_LOG_CLEAR_TABLE to ACC_TK_DEV;
grant select on ACC_TK.IC_LOG_CLEAR_TABLE to ACC_TK_RPT;

prompt
prompt Creating type UT_BILLNO
prompt =======================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_BILLNO"                                          as object(related_bill_no char(12));
/
grant execute on ACC_TK.UT_BILLNO to ACC_TK_APP;


prompt
prompt Creating table IC_LOG_PDU_BILL_ADJUST
prompt =====================================
prompt
create table ACC_TK.IC_LOG_PDU_BILL_ADJUST
(
  water_no              NUMBER(18) not null,
  order_no              CHAR(14),
  plan_bill_no          UT_BILLNO,
  hdl_flag              CHAR(1),
  fini_pronum           INTEGER,
  fini_pronum_modified  INTEGER,
  detail_total          INTEGER,
  detail_total_modified INTEGER,
  finish_flag           CHAR(1),
  finish_flag_modified  CHAR(1),
  modify_time           DATE,
  modify_man            VARCHAR2(20),
  modify_result         VARCHAR2(250)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_LOG_PDU_BILL_ADJUST to ACC_TK_APP;
grant select on ACC_TK.IC_LOG_PDU_BILL_ADJUST to ACC_TK_DEV;
grant select on ACC_TK.IC_LOG_PDU_BILL_ADJUST to ACC_TK_RPT;

prompt
prompt Creating table IC_LOG_TRANSFER
prompt ==============================
prompt
create table ACC_TK.IC_LOG_TRANSFER
(
  water_no          NUMBER(18),
  op_time           DATE,
  op_type           VARCHAR2(1),
  trans_key_value   VARCHAR2(100),
  trans_result      VARCHAR2(1),
  trans_count       INTEGER,
  source_table      VARCHAR2(100),
  destination_table VARCHAR2(100),
  remark            VARCHAR2(250)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_LOG_TRANSFER to ACC_TK_APP;
grant select on ACC_TK.IC_LOG_TRANSFER to ACC_TK_DEV;
grant select on ACC_TK.IC_LOG_TRANSFER to ACC_TK_RPT;

prompt
prompt Creating table IC_MB_INITI_INFO
prompt ===============================
prompt
create table ACC_TK.IC_MB_INITI_INFO
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_MB_INITI_INFO
  add constraint PK_IC_MB_INITI_INFO primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_MB_INITI_INFO to ACC_ST_APP;
grant select on ACC_TK.IC_MB_INITI_INFO to ACC_ST_DEV;
grant select, insert, update, delete on ACC_TK.IC_MB_INITI_INFO to ACC_TK_APP;
grant select on ACC_TK.IC_MB_INITI_INFO to ACC_TK_DEV;

prompt
prompt Creating table IC_MB_INITI_INFO000001
prompt =====================================
prompt
create table ACC_TK.IC_MB_INITI_INFO000001
(
  logical_id         VARCHAR2(20) not null,
  card_main_type     VARCHAR2(2),
  card_sub_type      VARCHAR2(2),
  req_no             CHAR(10),
  phy_id             VARCHAR2(20) not null,
  print_id           VARCHAR2(20) not null,
  manu_time          DATE,
  card_money         NUMBER(12,2),
  peri_avadate       DATE,
  kdc_version        CHAR(2),
  hdl_time           DATE,
  order_no           CHAR(14) not null,
  status_flag        CHAR(2),
  card_type          CHAR(3) default '001',
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_code     VARCHAR2(2) default '00',
  exit_station_code  VARCHAR2(2) default '00',
  model              VARCHAR2(3) default '000',
  card_producer_code VARCHAR2(4) default '0000',
  phone_no           VARCHAR2(11)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_MB_INITI_INFO000001
  add primary key (ORDER_NO, LOGICAL_ID, PHY_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_MB_INITI_INFO000001 to ACC_ST_DEV;

prompt
prompt Creating table IC_MB_PDU_ORDER_FORM
prompt ===================================
prompt
create table ACC_TK.IC_MB_PDU_ORDER_FORM
(
  order_no       CHAR(14) not null,
  es_worktype_id VARCHAR2(2),
  draw_num       INTEGER,
  fini_pronum    INTEGER,
  surplus_num    INTEGER,
  trashy_num     INTEGER,
  hdl_flag       VARCHAR2(1) not null,
  achieve_time   DATE not null,
  order_memo     VARCHAR2(256)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_MB_PDU_ORDER_FORM to ACC_TK_APP;
grant select on ACC_TK.IC_MB_PDU_ORDER_FORM to ACC_TK_DEV;

prompt
prompt Creating table IC_OUT_ADJUST_BILL
prompt =================================
prompt
create table ACC_TK.IC_OUT_ADJUST_BILL
(
  bill_no       CHAR(12) not null,
  out_bill_no   CHAR(12),
  operator      CHAR(10) not null,
  administer    CHAR(100),
  bill_date     DATE,
  record_flag   CHAR(1),
  verify_date   DATE,
  verify_person CHAR(10),
  remark        VARCHAR2(256)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_ADJUST_BILL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_ADJUST_BILL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_ADJUST_BILL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_ADJUST_BILL_DETAIL
prompt ========================================
prompt
create table ACC_TK.IC_OUT_ADJUST_BILL_DETAIL
(
  water_no         NUMBER(18),
  bill_no          CHAR(12) not null,
  storage_id       CHAR(4) not null,
  area_id          CHAR(2) not null,
  ic_main_type     CHAR(2) not null,
  ic_sub_type      CHAR(2) not null,
  draw_quantity    INTEGER,
  real_quantity    INTEGER,
  error_quantity   INTEGER,
  vaild_date       DATE,
  card_money       INTEGER,
  line_id          VARCHAR2(2),
  station_id       VARCHAR2(3),
  start_box_id     CHAR(14),
  end_box_id       CHAR(14),
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20),
  adjust_id        CHAR(2) not null,
  storey_id        CHAR(2),
  base_id          CHAR(2),
  chest_id         CHAR(3),
  exit_line_id     VARCHAR2(2) default '',
  exit_station_id  VARCHAR2(3) default '',
  model            VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_ADJUST_BILL_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_ADJUST_BILL_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_ADJUST_BILL_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_BILL
prompt ==========================
prompt
create table ACC_TK.IC_OUT_BILL
(
  bill_no            CHAR(12) not null,
  form_maker         CHAR(25),
  bill_date          DATE,
  drawer             VARCHAR2(50),
  administer         VARCHAR2(25),
  accounter          VARCHAR2(25),
  distribute_bill_no CHAR(12),
  record_flag        CHAR(1),
  verify_date        DATE,
  verify_person      CHAR(10),
  remark             VARCHAR2(256),
  bill_type          CHAR(2),
  in_flag            CHAR(1) default '0'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_BILL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_BILL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_BILL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_BILL_DETAIL
prompt =================================
prompt
create table ACC_TK.IC_OUT_BILL_DETAIL
(
  water_no           NUMBER(18),
  bill_no            CHAR(12) not null,
  reason_id          CHAR(2) not null,
  storage_id         CHAR(4) not null,
  area_id            CHAR(2) not null,
  ic_main_type       VARCHAR2(2) not null,
  ic_sub_type        VARCHAR2(2) not null,
  out_num            INTEGER not null,
  vaild_date         DATE,
  card_money         INTEGER,
  line_id            VARCHAR2(2),
  station_id         VARCHAR2(3),
  card_type          VARCHAR2(3),
  es_worktype_id     CHAR(2),
  make_num           INTEGER default 0,
  card_money_produce INTEGER default 0,
  temp_id            VARCHAR2(100),
  vaild_date_produce DATE,
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_id       VARCHAR2(2) default '',
  exit_station_id    VARCHAR2(3) default '',
  model              VARCHAR2(3) default '000',
  sale_flag          VARCHAR2(2),
  test_flag          VARCHAR2(2),
  order_type         CHAR(1) default '1'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_BILL_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_BILL_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_BILL_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_BILL_DETAIL_BOX
prompt =====================================
prompt
create table ACC_TK.IC_OUT_BILL_DETAIL_BOX
(
  water_no_pk      NUMBER(18) not null,
  water_no         VARCHAR2(18) not null,
  bill_no          VARCHAR2(12) not null,
  detail_place     VARCHAR2(50) not null,
  start_box_id     VARCHAR2(14) not null,
  end_box_id       VARCHAR2(14) not null,
  start_logical_id VARCHAR2(20) not null,
  end_logical_id   VARCHAR2(20) not null,
  section_num      INTEGER default 0 not null,
  produce_date     DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_BILL_DETAIL_BOX to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_BILL_DETAIL_BOX to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_BILL_DETAIL_BOX to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_BILL_DETAIL_ff827513
prompt ==========================================
prompt
create table ACC_TK.IC_OUT_BILL_DETAIL_ff827513
(
  water_no           NUMBER(18),
  bill_no            CHAR(12) not null,
  reason_id          CHAR(2) not null,
  storage_id         CHAR(4) not null,
  area_id            CHAR(2) not null,
  ic_main_type       VARCHAR2(2) not null,
  ic_sub_type        VARCHAR2(2) not null,
  out_num            INTEGER not null,
  vaild_date         DATE,
  card_money         INTEGER,
  line_id            VARCHAR2(2),
  station_id         VARCHAR2(3),
  card_type          CHAR(3),
  es_worktype_id     CHAR(2),
  make_num           INTEGER default 0,
  card_money_produce INTEGER default 0,
  temp_id            VARCHAR2(100),
  vaild_date_produce DATE,
  card_ava_days      VARCHAR2(3) default '000',
  exit_line_id       VARCHAR2(2) default '',
  exit_station_id    VARCHAR2(3) default '',
  model              VARCHAR2(3) default '000',
  sale_flag          VARCHAR2(2),
  test_flag          VARCHAR2(2)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_BILL_DETAIL_ff827513 to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_BILL_DETAIL_ff827513 to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_BILL_DETAIL_ff827513 to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_CANCEL_PLAN
prompt =================================
prompt
create table ACC_TK.IC_OUT_CANCEL_PLAN
(
  bill_no       CHAR(12) not null,
  out_bill_no   CHAR(12),
  bill_date     DATE,
  form_maker    VARCHAR2(10),
  operator      VARCHAR2(50),
  verify_person VARCHAR2(10),
  execute_date  DATE,
  verify_date   DATE,
  record_flag   CHAR(1),
  remark        CHAR(256)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_CANCEL_PLAN to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_CANCEL_PLAN to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_CANCEL_PLAN to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_CANCEL_PLAN_DETAIL
prompt ========================================
prompt
create table ACC_TK.IC_OUT_CANCEL_PLAN_DETAIL
(
  water_no           NUMBER(18) not null,
  bill_no            CHAR(12),
  es_worktype_id     CHAR(2),
  storage_id         CHAR(4),
  area_id            CHAR(2),
  ic_main_type       CHAR(2),
  ic_sub_type        CHAR(2),
  card_money         INTEGER,
  vaild_date         DATE,
  line_id            CHAR(2),
  station_id         CHAR(3),
  draw_quantity      INTEGER,
  make_quantity      INTEGER,
  machine_no         VARCHAR2(4),
  card_type          CHAR(3),
  reason_id          CHAR(2),
  card_money_produce INTEGER default 0,
  exit_line_id       VARCHAR2(2) default '',
  exit_station_id    VARCHAR2(3) default '',
  model              VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_CANCEL_PLAN_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_CANCEL_PLAN_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_CANCEL_PLAN_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_DATE_PLAN
prompt ===============================
prompt
create table ACC_TK.IC_OUT_DATE_PLAN
(
  bill_no       CHAR(12) not null,
  out_bill_no   CHAR(12),
  bill_date     DATE,
  form_maker    CHAR(10) not null,
  operator      CHAR(10) not null,
  verify_person CHAR(10),
  execute_date  DATE,
  verify_date   DATE,
  record_flag   CHAR(1),
  remark        CHAR(256)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_DATE_PLAN to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_DATE_PLAN to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_DATE_PLAN to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_DATE_PLAN_DETAIL
prompt ======================================
prompt
create table ACC_TK.IC_OUT_DATE_PLAN_DETAIL
(
  water_no           NUMBER(18),
  bill_no            CHAR(12) not null,
  es_worktype_id     CHAR(2),
  storage_id         CHAR(4),
  area_id            CHAR(2),
  ic_main_type       CHAR(2),
  ic_sub_type        CHAR(2),
  card_money         INTEGER,
  vaild_date         DATE,
  line_id            VARCHAR2(2),
  station_id         VARCHAR2(3),
  draw_quantity      INTEGER,
  make_quantity      INTEGER,
  machine_no         VARCHAR2(4),
  card_type          VARCHAR2(3),
  reason_id          CHAR(2),
  card_money_produce INTEGER default 0,
  card_ava_days      VARCHAR2(10) default '000',
  exit_line_id       VARCHAR2(2) default '',
  exit_station_id    VARCHAR2(3) default '',
  model              VARCHAR2(3) default '000',
  sale_flag          VARCHAR2(2),
  test_flag          VARCHAR2(2),
  order_type         CHAR(1) default '1'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_OUT_DATE_PLAN_DETAIL to ACC_ST_DEV;
grant select, insert, update, delete on ACC_TK.IC_OUT_DATE_PLAN_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_DATE_PLAN_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_DATE_PLAN_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_DATE_PLAN_DETA_6d338200
prompt =============================================
prompt
create table ACC_TK.IC_OUT_DATE_PLAN_DETA_6d338200
(
  water_no           NUMBER(18),
  bill_no            CHAR(12) not null,
  es_worktype_id     CHAR(2),
  storage_id         CHAR(4),
  area_id            CHAR(2),
  ic_main_type       CHAR(2),
  ic_sub_type        CHAR(2),
  card_money         INTEGER,
  vaild_date         DATE,
  line_id            VARCHAR2(2),
  station_id         VARCHAR2(3),
  draw_quantity      INTEGER,
  make_quantity      INTEGER,
  machine_no         VARCHAR2(4),
  card_type          CHAR(3),
  reason_id          CHAR(2),
  card_money_produce INTEGER default 0,
  card_ava_days      VARCHAR2(3) default '000',
  exit_line_id       VARCHAR2(2) default '',
  exit_station_id    VARCHAR2(3) default '',
  model              VARCHAR2(3) default '000',
  sale_flag          VARCHAR2(2),
  test_flag          VARCHAR2(2)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_DATE_PLAN_DETA_6d338200 to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_DATE_PLAN_DETA_6d338200 to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_DATE_PLAN_DETA_6d338200 to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_DISTRIBUTE_BILL
prompt =====================================
prompt
create table ACC_TK.IC_OUT_DISTRIBUTE_BILL
(
  bill_no                 CHAR(12) not null,
  distribute_plan_bill_no CHAR(12),
  out_bill_no             CHAR(12),
  receive_unit            VARCHAR2(10),
  distribute_man          VARCHAR2(20),
  receive_man             VARCHAR2(20),
  bill_date               DATE,
  grant_flag              CHAR(1),
  record_flag             CHAR(1),
  verify_date             DATE,
  verify_person           VARCHAR2(10),
  remark                  VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_DISTRIBUTE_BILL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_BILL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_BILL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_DISTRIBUTE_BIL_26bf6da9
prompt =============================================
prompt
create table ACC_TK.IC_OUT_DISTRIBUTE_BIL_26bf6da9
(
  bill_no                 CHAR(12) not null,
  distribute_plan_bill_no CHAR(12),
  out_bill_no             CHAR(12),
  receive_unit            VARCHAR2(10),
  distribute_man          VARCHAR2(10),
  receive_man             VARCHAR2(10),
  bill_date               DATE,
  grant_flag              CHAR(1),
  record_flag             CHAR(1),
  verify_date             DATE,
  verify_person           CHAR(10),
  remark                  VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_DISTRIBUTE_BIL_26bf6da9 to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_BIL_26bf6da9 to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_BIL_26bf6da9 to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_DISTRIBUTE_DATA
prompt =====================================
prompt
create table ACC_TK.IC_OUT_DISTRIBUTE_DATA
(
  water_no        NUMBER(18) not null,
  line_id         VARCHAR2(2),
  ticket_id       VARCHAR2(4),
  card_money      NUMBER(38,2),
  valid_date      VARCHAR2(8),
  model           CHAR(3),
  entry_station   VARCHAR2(4),
  exit_station    VARCHAR2(4),
  distribute_num  INTEGER,
  distribute_time VARCHAR2(14),
  flag            CHAR(1) default '0'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, update on ACC_TK.IC_OUT_DISTRIBUTE_DATA to ACC_COMMU_APP;
grant select, insert, update, delete on ACC_TK.IC_OUT_DISTRIBUTE_DATA to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_DATA to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_DATA to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_DISTRIBUTE_DETAIL
prompt =======================================
prompt
create table ACC_TK.IC_OUT_DISTRIBUTE_DETAIL
(
  water_no              NUMBER(18),
  bill_no               CHAR(12) not null,
  ic_main_type          CHAR(2) not null,
  ic_sub_type           CHAR(2) not null,
  distribute_quantity   NUMBER,
  card_money            NUMBER,
  valid_date            DATE,
  line_id               VARCHAR2(2),
  station_id            VARCHAR2(3),
  temp_id               VARCHAR2(100),
  distribute_line_id    VARCHAR2(2),
  distribute_station_id VARCHAR2(3),
  exit_line_id          VARCHAR2(2) default '',
  exit_station_id       VARCHAR2(3) default '',
  model                 VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_DISTRIBUTE_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_DISTRIBUTE_DTL_BOX
prompt ========================================
prompt
create table ACC_TK.IC_OUT_DISTRIBUTE_DTL_BOX
(
  water_no_pk      NUMBER(18),
  water_no         VARCHAR2(18) not null,
  bill_no          CHAR(12) not null,
  detail_place     VARCHAR2(50) not null,
  start_box_id     CHAR(14) not null,
  end_box_id       CHAR(14) not null,
  start_logical_id VARCHAR2(20) not null,
  end_logical_id   VARCHAR2(20) not null,
  section_num      INTEGER default 0 not null,
  produce_date     DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_DISTRIBUTE_DTL_BOX to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_DTL_BOX to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_DTL_BOX to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_DISTRIBUTE_PLAN_BILL
prompt ==========================================
prompt
create table ACC_TK.IC_OUT_DISTRIBUTE_PLAN_BILL
(
  bill_no            CHAR(12) not null,
  out_bill_no        CHAR(12) not null,
  distribute_bill_no CHAR(12) not null,
  form_maker         CHAR(10) not null,
  bill_date          DATE not null,
  record_flag        CHAR(1) not null,
  verify_date        DATE,
  verify_person      CHAR(10),
  receive_unit       CHAR(10),
  distribute_man     CHAR(10),
  receive_man        CHAR(10),
  remark             VARCHAR2(400)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_DISTRIBUTE_PLAN_BILL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_PLAN_BILL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_PLAN_BILL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_DISTRIBUTE_PLAN_DTL
prompt =========================================
prompt
create table ACC_TK.IC_OUT_DISTRIBUTE_PLAN_DTL
(
  water_no              INTEGER not null,
  distribute_line_id    VARCHAR2(2),
  distribute_station_id VARCHAR2(3),
  ic_main_type          VARCHAR2(2),
  ic_sub_type           VARCHAR2(2),
  bill_no               VARCHAR2(12),
  distribute_quantity   INTEGER,
  card_money            INTEGER,
  vaild_date            DATE,
  restrict_flag         CHAR(1),
  storage_id            CHAR(4),
  area_id               CHAR(2),
  start_logical_id      VARCHAR2(20),
  end_logical_id        VARCHAR2(20),
  reason_id             CHAR(2),
  box_id                VARCHAR2(14),
  line_id               VARCHAR2(2),
  station_id            VARCHAR2(3),
  exit_line_id          VARCHAR2(2) default '',
  exit_station_id       VARCHAR2(3) default '',
  model                 VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_DISTRIBUTE_PLAN_DTL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_PLAN_DTL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_DISTRIBUTE_PLAN_DTL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_LEND_BILL
prompt ===============================
prompt
create table ACC_TK.IC_OUT_LEND_BILL
(
  bill_no        CHAR(12) not null,
  out_bill_no    CHAR(12) not null,
  distribute_man CHAR(10),
  receive_man    CHAR(10),
  bill_date      DATE,
  unit_id        CHAR(3),
  return_flag    CHAR(1),
  verify_person  CHAR(10),
  verify_date    DATE,
  record_flag    CHAR(1),
  remark         VARCHAR2(256)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_LEND_BILL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_LEND_BILL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_LEND_BILL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_LEND_BILL_DETAIL
prompt ======================================
prompt
create table ACC_TK.IC_OUT_LEND_BILL_DETAIL
(
  water_no         NUMBER(18) not null,
  bill_no          CHAR(12),
  storage_id       CHAR(4) not null,
  area_id          CHAR(2) not null,
  ic_main_type     VARCHAR2(2) not null,
  ic_sub_type      VARCHAR2(2) not null,
  lend_quantity    INTEGER,
  card_money       INTEGER,
  vaild_date       DATE,
  line_id          CHAR(2),
  station_id       VARCHAR2(3),
  start_box_id     CHAR(14),
  end_box_id       CHAR(14),
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20),
  card_type        CHAR(3),
  remark           VARCHAR2(256),
  reasion_id       CHAR(2),
  exit_line_id     VARCHAR2(2) default '',
  exit_station_id  VARCHAR2(3) default '',
  model            VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_LEND_BILL_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_LEND_BILL_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_LEND_BILL_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_LEND_BILL_DETA_c18381a5
prompt =============================================
prompt
create table ACC_TK.IC_OUT_LEND_BILL_DETA_c18381a5
(
  water_no         NUMBER(18) not null,
  bill_no          CHAR(12),
  storage_id       CHAR(4) not null,
  area_id          CHAR(2) not null,
  ic_main_type     CHAR(2) not null,
  ic_sub_type      CHAR(2) not null,
  lend_quantity    INTEGER,
  card_money       INTEGER,
  vaild_date       DATE,
  line_id          CHAR(2),
  station_id       VARCHAR2(3),
  start_box_id     CHAR(14),
  end_box_id       CHAR(14),
  start_logical_id CHAR(20),
  end_logical_id   CHAR(20),
  card_type        CHAR(3),
  remark           VARCHAR2(256),
  reasion_id       CHAR(2),
  exit_line_id     VARCHAR2(2) default '',
  exit_station_id  VARCHAR2(3) default '',
  model            VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_LEND_BILL_DETA_c18381a5 to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_LEND_BILL_DETA_c18381a5 to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_LEND_BILL_DETA_c18381a5 to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_ORDER_FORM_SERIAL
prompt =======================================
prompt
create table ACC_TK.IC_OUT_ORDER_FORM_SERIAL
(
  card_main_type VARCHAR2(2) not null,
  card_sub_type  VARCHAR2(2) not null,
  card_type      VARCHAR2(3) default '000' not null,
  serial_no      CHAR(8)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_ORDER_FORM_SERIAL to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_ORDER_FORM_SERIAL to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_ORDER_FORM_SERIAL to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_ORDER_FORM_SER_200ecc84
prompt =============================================
prompt
create table ACC_TK.IC_OUT_ORDER_FORM_SER_200ecc84
(
  card_main_type CHAR(2) not null,
  card_sub_type  CHAR(2) not null,
  card_type      CHAR(3) default '000' not null,
  serial_no      CHAR(8)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_ORDER_FORM_SER_200ecc84 to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_ORDER_FORM_SER_200ecc84 to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_ORDER_FORM_SER_200ecc84 to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_ORDER_FORM_SER_727330b4
prompt =============================================
prompt
create table ACC_TK.IC_OUT_ORDER_FORM_SER_727330b4
(
  card_main_type VARCHAR2(2) not null,
  card_sub_type  VARCHAR2(1) not null,
  card_type      VARCHAR2(3) default '000' not null,
  serial_no      CHAR(8)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_OUT_ORDER_FORM_SER_727330b4 to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_ORDER_FORM_SER_727330b4 to ACC_TK_DEV;
grant select on ACC_TK.IC_OUT_ORDER_FORM_SER_727330b4 to ACC_TK_RPT;

prompt
prompt Creating table IC_OUT_TICKET_MOVE
prompt =================================
prompt
create table ACC_TK.IC_OUT_TICKET_MOVE
(
  bill_no          CHAR(12) not null,
  form_maker       VARCHAR2(10) not null,
  bill_date        DATE not null,
  record_flag      CHAR(1) not null,
  verify_date      DATE,
  verify_person    VARCHAR2(10),
  distribute_man   VARCHAR2(10),
  receive_unit     VARCHAR2(10),
  receive_man      VARCHAR2(10),
  remark           VARCHAR2(400),
  ic_main_type     VARCHAR2(2),
  ic_sub_type      VARCHAR2(2),
  card_money       INTEGER,
  out_storage_id   CHAR(4),
  out_area_id      CHAR(2),
  in_storage_id    CHAR(4),
  in_area_id       CHAR(2),
  quantity         INTEGER,
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20),
  start_box_id     VARCHAR2(14),
  end_box_id       VARCHAR2(14),
  out_bill_no      CHAR(12),
  in_bill_no       CHAR(12),
  valid_date       DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_OUT_TICKET_MOVE to ACC_TK_APP;
grant select on ACC_TK.IC_OUT_TICKET_MOVE to ACC_TK_DEV;

prompt
prompt Creating table IC_PDU_BILL_ADJUST_CARD
prompt ======================================
prompt
create table ACC_TK.IC_PDU_BILL_ADJUST_CARD
(
  water_no     NUMBER(18) not null,
  plan_bill_no UT_BILLNO not null,
  order_no     CHAR(14) not null,
  logic_id     CHAR(20) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PDU_BILL_ADJUST_CARD to ACC_TK_APP;
grant select on ACC_TK.IC_PDU_BILL_ADJUST_CARD to ACC_TK_DEV;
grant select on ACC_TK.IC_PDU_BILL_ADJUST_CARD to ACC_TK_RPT;

prompt
prompt Creating table IC_PDU_CARD_ONE_MANY
prompt ===================================
prompt
create table ACC_TK.IC_PDU_CARD_ONE_MANY
(
  ic_main_type CHAR(2) not null,
  ic_sub_type  CHAR(2) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
alter table ACC_TK.IC_PDU_CARD_ONE_MANY
  add constraint PK_IC_PDU_CARD_ONE_MANY primary key (IC_MAIN_TYPE, IC_SUB_TYPE)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_PDU_CARD_ONE_MANY to ACC_TK_APP;
grant select on ACC_TK.IC_PDU_CARD_ONE_MANY to ACC_TK_DEV;
grant select on ACC_TK.IC_PDU_CARD_ONE_MANY to ACC_TK_RPT;

prompt
prompt Creating table IC_PDU_ORDER_FORM
prompt ================================
prompt
create table ACC_TK.IC_PDU_ORDER_FORM
(
  order_no          CHAR(14) not null,
  es_operator_id    VARCHAR2(8),
  es_worktype_id    VARCHAR2(2),
  card_main_code    VARCHAR2(2),
  card_sub_code     VARCHAR2(2),
  card_per_ava      DATE,
  card_mon          INTEGER,
  burse_uplimit     INTEGER,
  b_req_no          VARCHAR2(10),
  e_req_no          VARCHAR2(10),
  b_serial_no       VARCHAR2(8),
  e_serial_no       VARCHAR2(8),
  logic_id_date     VARCHAR2(8),
  pro_num           INTEGER not null,
  city_id           VARCHAR2(4),
  tra_id            VARCHAR2(4),
  kd_version        VARCHAR2(4),
  draw_num          INTEGER,
  fini_pronum       INTEGER,
  surplus_num       INTEGER,
  trashy_num        INTEGER,
  es_serial_no      VARCHAR2(10),
  es_samno          VARCHAR2(16),
  hdl_flag          VARCHAR2(1) not null,
  achieve_time      DATE not null,
  oper_id           VARCHAR2(8) not null,
  gen_time          DATE,
  order_type        VARCHAR2(1) not null,
  order_memo        VARCHAR2(256),
  card_type         VARCHAR2(3) default '000',
  fetch_flag        VARCHAR2(1) default '0',
  station_flag      VARCHAR2(1) default '0',
  line_code         VARCHAR2(2) default '00',
  station_code      VARCHAR2(2) default '00',
  cardstartava      VARCHAR2(8) default '00000000',
  card_ava_days     VARCHAR2(10) default '000',
  exit_line_code    VARCHAR2(2) default '00',
  exit_station_code VARCHAR2(2) default '00',
  model             VARCHAR2(3) default '000',
  max_recharge_val  VARCHAR2(6),
  sale_flag         VARCHAR2(2),
  test_flag         VARCHAR2(2)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_PDU_ORDER_FORM to ACC_ONLINE_DEV;
grant select on ACC_TK.IC_PDU_ORDER_FORM to ACC_ST_APP;
grant select on ACC_TK.IC_PDU_ORDER_FORM to ACC_ST_DEV;
grant select on ACC_TK.IC_PDU_ORDER_FORM to ACC_ST_RPT;
grant select, insert, update, delete on ACC_TK.IC_PDU_ORDER_FORM to ACC_TK_APP;
grant select on ACC_TK.IC_PDU_ORDER_FORM to ACC_TK_DEV;
grant select on ACC_TK.IC_PDU_ORDER_FORM to ACC_TK_RPT;

prompt
prompt Creating table IC_PDU_PLAN_ORDER_MAPPING
prompt ========================================
prompt
create table ACC_TK.IC_PDU_PLAN_ORDER_MAPPING
(
  plan_bill_no CHAR(12) not null,
  order_no     CHAR(14) not null,
  finish_flag  CHAR(1) default '0',
  out_bill_no  VARCHAR2(12),
  out_water_no CHAR(18),
  detail_total INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select on ACC_TK.IC_PDU_PLAN_ORDER_MAPPING to ACC_ST_DEV;
grant select, insert, update, delete on ACC_TK.IC_PDU_PLAN_ORDER_MAPPING to ACC_TK_APP;
grant select on ACC_TK.IC_PDU_PLAN_ORDER_MAPPING to ACC_TK_DEV;
grant select on ACC_TK.IC_PDU_PLAN_ORDER_MAPPING to ACC_TK_RPT;

prompt
prompt Creating table IC_PDU_PRODUCE_BILL
prompt ==================================
prompt
create table ACC_TK.IC_PDU_PRODUCE_BILL
(
  bill_no         VARCHAR2(12) not null,
  out_bill_no     VARCHAR2(12),
  draw_total      INTEGER,
  es_worktype_id  CHAR(2) not null,
  es_useless_num  INTEGER not null,
  man_useless_num INTEGER not null,
  lost_num        INTEGER not null,
  system_balance  INTEGER not null,
  real_balance    INTEGER not null,
  hand_man        VARCHAR2(10),
  receive_man     VARCHAR2(10),
  bill_date       DATE not null,
  record_flag     CHAR(1) not null,
  verify_date     DATE,
  verify_person   VARCHAR2(10),
  remarks         VARCHAR2(1020),
  in_flag         CHAR(1) default '0',
  es_operator     VARCHAR2(10),
  diff_id         VARCHAR2(2) default '00' not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PDU_PRODUCE_BILL to ACC_TK_APP;
grant select on ACC_TK.IC_PDU_PRODUCE_BILL to ACC_TK_DEV;
grant select on ACC_TK.IC_PDU_PRODUCE_BILL to ACC_TK_RPT;

prompt
prompt Creating table IC_PDU_PRODUCE_BILL_DETAIL
prompt =========================================
prompt
create table ACC_TK.IC_PDU_PRODUCE_BILL_DETAIL
(
  water_no        NUMBER(18),
  bill_no         CHAR(12),
  ic_main_type    VARCHAR2(2),
  ic_sub_type     VARCHAR2(2),
  card_money      INTEGER default 0,
  vaild_date      DATE,
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  draw_quantity   INTEGER,
  start_box_id    CHAR(14),
  end_box_id      CHAR(14),
  machine_no      CHAR(4),
  card_ava_days   VARCHAR2(10) default '000',
  exit_line_id    VARCHAR2(2) default '00',
  exit_station_id VARCHAR2(3) default '00',
  model           VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PDU_PRODUCE_BILL_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_PDU_PRODUCE_BILL_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_PDU_PRODUCE_BILL_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_PDU_PRODUCE_BILL_D_dbc21ca6
prompt =============================================
prompt
create table ACC_TK.IC_PDU_PRODUCE_BILL_D_dbc21ca6
(
  water_no        NUMBER(18),
  bill_no         CHAR(12),
  ic_main_type    CHAR(2),
  ic_sub_type     CHAR(2),
  card_money      INTEGER default 0,
  vaild_date      DATE,
  line_id         CHAR(2),
  station_id      VARCHAR2(3),
  draw_quantity   INTEGER,
  start_box_id    CHAR(14),
  end_box_id      CHAR(14),
  machine_no      CHAR(4),
  card_ava_days   VARCHAR2(3) default '000',
  exit_line_id    VARCHAR2(2) default '00',
  exit_station_id VARCHAR2(3) default '00',
  model           VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PDU_PRODUCE_BILL_D_dbc21ca6 to ACC_TK_APP;
grant select on ACC_TK.IC_PDU_PRODUCE_BILL_D_dbc21ca6 to ACC_TK_DEV;
grant select on ACC_TK.IC_PDU_PRODUCE_BILL_D_dbc21ca6 to ACC_TK_RPT;

prompt
prompt Creating table IC_PDU_REPEAT_LOGIC
prompt ==================================
prompt
create table ACC_TK.IC_PDU_REPEAT_LOGIC
(
  logi_id        CHAR(20) not null,
  card_main_type UT_IC_CARDMAIN,
  card_sub_type  UT_IC_CARDSUB,
  req_no         CHAR(10),
  phy_id         CHAR(20) not null,
  prin_id        CHAR(16) not null,
  manu_time      DATE,
  card_money     NUMBER(12,2),
  peri_avadate   DATE,
  kdc_version    CHAR(4),
  hdl_time       DATE,
  order_no       CHAR(14) not null,
  status_flag    CHAR(2),
  card_type      CHAR(3) default '001'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PDU_REPEAT_LOGIC to ACC_TK_APP;
grant select on ACC_TK.IC_PDU_REPEAT_LOGIC to ACC_TK_DEV;
grant select on ACC_TK.IC_PDU_REPEAT_LOGIC to ACC_TK_RPT;

prompt
prompt Creating table IC_PDU_USELESS_DETAIL
prompt ====================================
prompt
create table ACC_TK.IC_PDU_USELESS_DETAIL
(
  bill_no         VARCHAR2(12) not null,
  order_no        VARCHAR2(14),
  card_no         VARCHAR2(20),
  card_type       VARCHAR2(1) not null,
  ic_main_type    VARCHAR2(2),
  ic_sub_type     VARCHAR2(2),
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  card_money      INTEGER default 0 not null,
  valid_date      DATE,
  machine_no      VARCHAR2(8),
  flag            VARCHAR2(1),
  phy_id          VARCHAR2(20),
  exit_line_id    VARCHAR2(2) default '',
  exit_station_id VARCHAR2(3) default '',
  model           VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PDU_USELESS_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_PDU_USELESS_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_PDU_USELESS_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_ABANDON_TICKET_PARA
prompt =========================================
prompt
create table ACC_TK.IC_PRM_ABANDON_TICKET_PARA
(
  water_no    NUMBER(20) not null,
  report_date DATE not null,
  line_id     VARCHAR2(2) not null,
  station_id  VARCHAR2(3) not null,
  remark      VARCHAR2(256)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.IC_PRM_ABANDON_TICKET_PARA to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_ABANDON_TICKET_PARA to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_ABANDON_TICKET_PARA to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_BILL_CURRENT_DATE
prompt =======================================
prompt
create table ACC_TK.IC_PRM_BILL_CURRENT_DATE
(
  bill_year INTEGER not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PRM_BILL_CURRENT_DATE to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_BILL_CURRENT_DATE to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_BILL_CURRENT_DATE to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_BILL_CURRENT_FLOW
prompt =======================================
prompt
create table ACC_TK.IC_PRM_BILL_CURRENT_FLOW
(
  bill_main_type_id CHAR(2) not null,
  current_no        CHAR(16),
  current_int_no    INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PRM_BILL_CURRENT_FLOW to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_BILL_CURRENT_FLOW to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_BILL_CURRENT_FLOW to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_BILL_CURR_FLOW_TMP
prompt ========================================
prompt
create table ACC_TK.IC_PRM_BILL_CURR_FLOW_TMP
(
  bill_main_type_id CHAR(2) not null,
  current_no        CHAR(16),
  current_int_no    INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PRM_BILL_CURR_FLOW_TMP to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_BILL_CURR_FLOW_TMP to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_BILL_CURR_FLOW_TMP to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_CARD_MAIN
prompt ===============================
prompt
create table ACC_TK.IC_PRM_CARD_MAIN
(
  card_main_id   CHAR(2) not null,
  version_no     CHAR(10) not null,
  card_main_name VARCHAR2(30),
  record_flag    CHAR(1) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, delete on ACC_TK.IC_PRM_CARD_MAIN to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_PRM_CARD_MAIN to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_CARD_MAIN to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_CARD_MAIN to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_CARD_MAIN_BAK
prompt ===================================
prompt
create table ACC_TK.IC_PRM_CARD_MAIN_BAK
(
  card_main_id   CHAR(2) not null,
  version_no     CHAR(10) not null,
  card_main_name VARCHAR2(30),
  record_flag    CHAR(1) not null,
  insert_date    DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, delete on ACC_TK.IC_PRM_CARD_MAIN_BAK to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_PRM_CARD_MAIN_BAK to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_CARD_MAIN_BAK to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_CARD_MAIN_BAK to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_CARD_SUB
prompt ==============================
prompt
create table ACC_TK.IC_PRM_CARD_SUB
(
  card_sub_id      CHAR(2) not null,
  card_main_id     CHAR(2) not null,
  card_sub_name    VARCHAR2(30),
  record_flag      CHAR(1) not null,
  version_no       CHAR(10) not null,
  card_sub_name_en VARCHAR2(60)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, delete on ACC_TK.IC_PRM_CARD_SUB to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_PRM_CARD_SUB to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_CARD_SUB to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_CARD_SUB to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_CARD_SUB_BAK
prompt ==================================
prompt
create table ACC_TK.IC_PRM_CARD_SUB_BAK
(
  card_sub_id      CHAR(2) not null,
  card_main_id     CHAR(2) not null,
  card_sub_name    VARCHAR2(30),
  record_flag      CHAR(1) not null,
  version_no       CHAR(10) not null,
  card_sub_name_en VARCHAR2(60),
  insert_date      DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, delete on ACC_TK.IC_PRM_CARD_SUB_BAK to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_PRM_CARD_SUB_BAK to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_CARD_SUB_BAK to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_CARD_SUB_BAK to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_CURRENT_LOGIC_NO
prompt ======================================
prompt
create table ACC_TK.IC_PRM_CURRENT_LOGIC_NO
(
  id             NUMBER(12) not null,
  bill_no        VARCHAR2(12) not null,
  current_no     VARCHAR2(8),
  current_int_no INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_PRM_CURRENT_LOGIC_NO
  add constraint PK_IC_PRM_CURRENT_LOGIC_NO primary key (ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PRM_CURRENT_LOGIC_NO to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_CURRENT_LOGIC_NO to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_CURRENT_LOGIC_NO to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_DEV_CODE
prompt ==============================
prompt
create table ACC_TK.IC_PRM_DEV_CODE
(
  line_id      VARCHAR2(2) not null,
  station_id   VARCHAR2(2) not null,
  dev_type_id  VARCHAR2(2) not null,
  device_id    VARCHAR2(3) not null,
  csc_num      INTEGER,
  array_id     VARCHAR2(3),
  concourse_id VARCHAR2(3),
  ip_address   VARCHAR2(15),
  store_id     VARCHAR2(5),
  dev_serial   VARCHAR2(20),
  record_flag  VARCHAR2(1) not null,
  version_no   VARCHAR2(10) not null,
  config_date  DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, delete on ACC_TK.IC_PRM_DEV_CODE to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_PRM_DEV_CODE to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_DEV_CODE to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_DEV_CODE to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_DEV_CODE_BAK
prompt ==================================
prompt
create table ACC_TK.IC_PRM_DEV_CODE_BAK
(
  line_id      VARCHAR2(2) not null,
  station_id   VARCHAR2(2) not null,
  dev_type_id  VARCHAR2(2) not null,
  device_id    VARCHAR2(3) not null,
  csc_num      INTEGER,
  array_id     VARCHAR2(3),
  concourse_id VARCHAR2(3),
  ip_address   VARCHAR2(15),
  store_id     VARCHAR2(5),
  dev_serial   VARCHAR2(20),
  record_flag  VARCHAR2(1) not null,
  version_no   VARCHAR2(10) not null,
  config_date  DATE,
  insert_date  DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );
grant select, insert, delete on ACC_TK.IC_PRM_DEV_CODE_BAK to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_PRM_DEV_CODE_BAK to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_DEV_CODE_BAK to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_DEV_CODE_BAK to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_DISTRIBUTE_CIRCLE
prompt =======================================
prompt
create table ACC_TK.IC_PRM_DISTRIBUTE_CIRCLE
(
  ic_main_type VARCHAR2(2) not null,
  ic_sub_type  VARCHAR2(2) not null,
  circle       INTEGER,
  remark       VARCHAR2(256)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_PRM_DISTRIBUTE_CIRCLE
  add constraint PK_IC_PRM_DISTRIBUTE_CIRCLE primary key (IC_MAIN_TYPE, IC_SUB_TYPE)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PRM_DISTRIBUTE_CIRCLE to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_DISTRIBUTE_CIRCLE to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_DISTRIBUTE_CIRCLE to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_DISTRIBUTE_PARAM
prompt ======================================
prompt
create table ACC_TK.IC_PRM_DISTRIBUTE_PARAM
(
  line_id       VARCHAR2(2) not null,
  station_id    VARCHAR2(3) not null,
  tvm_store_num INTEGER,
  tvm_num       INTEGER,
  reverve_num   INTEGER,
  remark        VARCHAR2(256)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_PRM_DISTRIBUTE_PARAM
  add constraint PK_IC_PRM_DISTRIBUTE_PARAM primary key (LINE_ID, STATION_ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PRM_DISTRIBUTE_PARAM to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_DISTRIBUTE_PARAM to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_DISTRIBUTE_PARAM to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_DISTRIBUTE_RESERVE
prompt ========================================
prompt
create table ACC_TK.IC_PRM_DISTRIBUTE_RESERVE
(
  line_id      VARCHAR2(2),
  station_id   VARCHAR2(3),
  ic_main_type VARCHAR2(2),
  ic_sub_type  VARCHAR2(2),
  card_money   INTEGER,
  reverve_num  INTEGER,
  remark       VARCHAR2(256)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PRM_DISTRIBUTE_RESERVE to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_DISTRIBUTE_RESERVE to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_DISTRIBUTE_RESERVE to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_LINE
prompt ==========================
prompt
create table ACC_TK.IC_PRM_LINE
(
  line_id     CHAR(2) not null,
  version_no  CHAR(10) not null,
  line_name   VARCHAR2(50) not null,
  record_flag CHAR(1) not null,
  lcc_ip      VARCHAR2(15),
  lcc_line_id CHAR(2),
  sequence    CHAR(2) default '00' not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, delete on ACC_TK.IC_PRM_LINE to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_PRM_LINE to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_LINE to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_LINE to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_LINE_BAK
prompt ==============================
prompt
create table ACC_TK.IC_PRM_LINE_BAK
(
  line_id     CHAR(2) not null,
  version_no  CHAR(10) not null,
  line_name   VARCHAR2(50) not null,
  record_flag CHAR(1) not null,
  lcc_ip      VARCHAR2(15),
  lcc_line_id CHAR(2),
  sequence    CHAR(2) default '00' not null,
  insert_date DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, delete on ACC_TK.IC_PRM_LINE_BAK to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_PRM_LINE_BAK to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_LINE_BAK to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_LINE_BAK to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_REPORT_STORAGELIST
prompt ========================================
prompt
create table ACC_TK.IC_PRM_REPORT_STORAGELIST
(
  info_id      NUMBER(18),
  input_date   DATE not null,
  ic_main_type CHAR(2) not null,
  ic_sub_type  CHAR(2) not null,
  card_money   INTEGER not null,
  store_dept   INTEGER not null,
  station_dept INTEGER not null,
  income_dept  INTEGER not null,
  other_dept   INTEGER not null,
  remark       VARCHAR2(256),
  storage_id   CHAR(4)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PRM_REPORT_STORAGELIST to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_REPORT_STORAGELIST to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_REPORT_STORAGELIST to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_STATION
prompt =============================
prompt
create table ACC_TK.IC_PRM_STATION
(
  line_id        CHAR(2) not null,
  station_id     CHAR(2) not null,
  chinese_name   VARCHAR2(20),
  english_name   VARCHAR2(50),
  sc_ip          VARCHAR2(15),
  contc_id       CHAR(2),
  record_flag    CHAR(1) not null,
  lcc_ip         CHAR(15),
  version_no     CHAR(10) not null,
  sequence       CHAR(2) default '00',
  belong_line_id CHAR(2) default '00'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, delete on ACC_TK.IC_PRM_STATION to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_PRM_STATION to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_STATION to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_STATION to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_STATION_BAK
prompt =================================
prompt
create table ACC_TK.IC_PRM_STATION_BAK
(
  line_id        CHAR(2) not null,
  station_id     CHAR(2) not null,
  chinese_name   VARCHAR2(20),
  english_name   VARCHAR2(50),
  sc_ip          VARCHAR2(15),
  contc_id       CHAR(2),
  record_flag    CHAR(1) not null,
  lcc_ip         CHAR(15),
  version_no     CHAR(10) not null,
  sequence       CHAR(2) default '00',
  belong_line_id CHAR(2) default '00',
  insert_date    DATE
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, delete on ACC_TK.IC_PRM_STATION_BAK to ACC_ST_APP;
grant select, insert, update, delete on ACC_TK.IC_PRM_STATION_BAK to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_STATION_BAK to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_STATION_BAK to ACC_TK_RPT;

prompt
prompt Creating type UT_REMARK
prompt =======================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_REMARK"                                          as object(remark char(256));
/
grant execute on ACC_TK.UT_REMARK to ACC_TK_APP;


prompt
prompt Creating table IC_PRM_TOKEN_LOSS_PARA
prompt =====================================
prompt
create table ACC_TK.IC_PRM_TOKEN_LOSS_PARA
(
  water_no     NUMBER(20) not null,
  report_date  DATE not null,
  store_num    INTEGER default 0 not null,
  useless_num  INTEGER default 0 not null,
  new_num      INTEGER default 0 not null,
  ic_main_type UT_IC_CARDMAIN,
  ic_sub_type  UT_IC_CARDSUB,
  not_in_num   INTEGER default 0 not null,
  remark       UT_REMARK,
  para_flag    CHAR(1)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_PRM_TOKEN_LOSS_PARA
  add constraint PK_IC_TOCKEN_PARA primary key (WATER_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PRM_TOKEN_LOSS_PARA to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_TOKEN_LOSS_PARA to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_TOKEN_LOSS_PARA to ACC_TK_RPT;

prompt
prompt Creating table IC_PRM_TOKEN_PARA
prompt ================================
prompt
create table ACC_TK.IC_PRM_TOKEN_PARA
(
  water_no     NUMBER(20) not null,
  rpt_date     DATE not null,
  store_num    INTEGER default 0 not null,
  useless_num  INTEGER default 0 not null,
  new_num      INTEGER default 0 not null,
  ic_main_type VARCHAR2(2),
  ic_sub_type  VARCHAR2(2),
  not_in_num   INTEGER not null,
  remark       VARCHAR2(200),
  para_flag    VARCHAR2(1),
  storage_id   CHAR(4)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_PRM_TOKEN_PARA to ACC_TK_APP;
grant select on ACC_TK.IC_PRM_TOKEN_PARA to ACC_TK_DEV;
grant select on ACC_TK.IC_PRM_TOKEN_PARA to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_IN_MAKE
prompt =============================
prompt
create table ACC_TK.IC_SAM_IN_MAKE
(
  order_no         VARCHAR2(20) not null,
  issue_order_no   VARCHAR2(20) not null,
  sam_type         VARCHAR2(2) not null,
  start_logic_no   VARCHAR2(20),
  order_num        INTEGER,
  in_stock_oper    VARCHAR2(10) not null,
  in_stock_time    DATE not null,
  get_card_oper    VARCHAR2(50),
  order_state      VARCHAR2(2),
  audit_order_oper VARCHAR2(10),
  audit_order_time DATE,
  remark           VARCHAR2(512)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_IN_MAKE
  is '卡制作入库';
comment on column ACC_TK.IC_SAM_IN_MAKE.order_no
  is '入库单号';
comment on column ACC_TK.IC_SAM_IN_MAKE.issue_order_no
  is '发行出库单号';
comment on column ACC_TK.IC_SAM_IN_MAKE.sam_type
  is 'SAM类型';
comment on column ACC_TK.IC_SAM_IN_MAKE.start_logic_no
  is '起始逻辑卡号';
comment on column ACC_TK.IC_SAM_IN_MAKE.order_num
  is '连续卡数量';
comment on column ACC_TK.IC_SAM_IN_MAKE.in_stock_oper
  is '入库人员';
comment on column ACC_TK.IC_SAM_IN_MAKE.in_stock_time
  is '入库时间';
comment on column ACC_TK.IC_SAM_IN_MAKE.get_card_oper
  is '领卡人';
comment on column ACC_TK.IC_SAM_IN_MAKE.order_state
  is '单据状态  0:未审核,1:已审核';
comment on column ACC_TK.IC_SAM_IN_MAKE.audit_order_oper
  is '审核人';
comment on column ACC_TK.IC_SAM_IN_MAKE.audit_order_time
  is '审核时间';
comment on column ACC_TK.IC_SAM_IN_MAKE.remark
  is '备注';
alter table ACC_TK.IC_SAM_IN_MAKE
  add constraint PK_IC_SAM_IN_MAKE primary key (ORDER_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_SAM_IN_MAKE to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_IN_MAKE to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_IN_MAKE to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_TYPE
prompt ==========================
prompt
create table ACC_TK.IC_SAM_TYPE
(
  sam_type_code       VARCHAR2(2) not null,
  sam_type_desc       VARCHAR2(30) not null,
  pdu_warn_threshhold INTEGER not null,
  remark              VARCHAR2(512),
  ety_warn_threshhold INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_TYPE
  is '卡类型表';
comment on column ACC_TK.IC_SAM_TYPE.sam_type_code
  is '类型代码';
comment on column ACC_TK.IC_SAM_TYPE.sam_type_desc
  is '类型名称';
comment on column ACC_TK.IC_SAM_TYPE.pdu_warn_threshhold
  is '成品卡预警阀值';
comment on column ACC_TK.IC_SAM_TYPE.remark
  is '备注';
comment on column ACC_TK.IC_SAM_TYPE.ety_warn_threshhold
  is '空白卡预警阀值';
alter table ACC_TK.IC_SAM_TYPE
  add constraint IC_SAM_TYPE_PK primary key (SAM_TYPE_CODE)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_SAM_TYPE to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_TYPE to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_TYPE to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_IN_NEW
prompt ============================
prompt
create table ACC_TK.IC_SAM_IN_NEW
(
  order_no         VARCHAR2(20) not null,
  start_logic_no   VARCHAR2(20) not null,
  order_num        INTEGER not null,
  get_card_oper    VARCHAR2(50),
  in_stock_time    DATE not null,
  in_stock_oper    VARCHAR2(10) not null,
  order_state      VARCHAR2(2) default 0 not null,
  audit_order_oper VARCHAR2(10),
  audit_order_time DATE,
  remark           VARCHAR2(512),
  sam_type         VARCHAR2(2) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_IN_NEW
  is '空白卡入库';
comment on column ACC_TK.IC_SAM_IN_NEW.order_no
  is '入库单号';
comment on column ACC_TK.IC_SAM_IN_NEW.start_logic_no
  is '起始逻辑卡号';
comment on column ACC_TK.IC_SAM_IN_NEW.order_num
  is '连续卡数量';
comment on column ACC_TK.IC_SAM_IN_NEW.get_card_oper
  is '领卡人员';
comment on column ACC_TK.IC_SAM_IN_NEW.in_stock_time
  is '入库时间';
comment on column ACC_TK.IC_SAM_IN_NEW.in_stock_oper
  is '入库人员';
comment on column ACC_TK.IC_SAM_IN_NEW.order_state
  is '单据状态 0:未审核,1:已审核';
comment on column ACC_TK.IC_SAM_IN_NEW.audit_order_oper
  is '审单人';
comment on column ACC_TK.IC_SAM_IN_NEW.audit_order_time
  is '审核时间';
comment on column ACC_TK.IC_SAM_IN_NEW.remark
  is '备注';
comment on column ACC_TK.IC_SAM_IN_NEW.sam_type
  is 'SAM类型';
alter table ACC_TK.IC_SAM_IN_NEW
  add constraint PK_IC_SAM_IN_NEW primary key (ORDER_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_SAM_IN_NEW
  add constraint IC_SAM_TYPE_IN_NEW_FK foreign key (SAM_TYPE)
  references ACC_TK.IC_SAM_TYPE (SAM_TYPE_CODE);
grant select, insert, update, delete on ACC_TK.IC_SAM_IN_NEW to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_IN_NEW to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_IN_NEW to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_LINE_ES
prompt =============================
prompt
create table ACC_TK.IC_SAM_LINE_ES
(
  line_es_code VARCHAR2(2) not null,
  line_es_desc VARCHAR2(50),
  type         VARCHAR2(2),
  remark       VARCHAR2(512)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_LINE_ES
  is '线路(ES)';
comment on column ACC_TK.IC_SAM_LINE_ES.line_es_code
  is '线路（ES)代码';
comment on column ACC_TK.IC_SAM_LINE_ES.line_es_desc
  is '线路（ES)名称';
comment on column ACC_TK.IC_SAM_LINE_ES.type
  is '类型 00:线路,01:ES';
comment on column ACC_TK.IC_SAM_LINE_ES.remark
  is '备注';
alter table ACC_TK.IC_SAM_LINE_ES
  add constraint PK_IC_SAM_LINE_ES primary key (LINE_ES_CODE)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_SAM_LINE_ES to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_LINE_ES to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_LINE_ES to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_IN_RECYCLE
prompt ================================
prompt
create table ACC_TK.IC_SAM_IN_RECYCLE
(
  order_no         VARCHAR2(20) not null,
  line_es          VARCHAR2(2) not null,
  sam_type         VARCHAR2(2) not null,
  start_logic_no   VARCHAR2(20),
  order_num        INTEGER,
  in_stock_oper    VARCHAR2(10) not null,
  in_stock_time    DATE not null,
  get_card_oper    VARCHAR2(50),
  is_bad           VARCHAR2(2) not null,
  order_state      VARCHAR2(2) not null,
  audit_order_oper VARCHAR2(10),
  audit_order_time DATE,
  remark           VARCHAR2(512)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_IN_RECYCLE
  is '回收入库';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.order_no
  is '入库单号';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.line_es
  is '线路（ES）';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.sam_type
  is 'SAM类型';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.start_logic_no
  is '起始逻辑卡号';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.order_num
  is '连续卡数量';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.in_stock_oper
  is '入库人员';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.in_stock_time
  is '入库时间';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.get_card_oper
  is '领卡人';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.is_bad
  is '是否损坏 0:坏卡,1:好卡';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.order_state
  is '单据状态 0:未审核,1:已审核';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.audit_order_oper
  is '审核人';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.audit_order_time
  is '审核时间';
comment on column ACC_TK.IC_SAM_IN_RECYCLE.remark
  is '备注';
alter table ACC_TK.IC_SAM_IN_RECYCLE
  add constraint PK_IC_SAM_IN_RECYCLE primary key (ORDER_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_SAM_IN_RECYCLE
  add constraint IC_LINE_ES_RECYCLE_IN_FK foreign key (LINE_ES)
  references ACC_TK.IC_SAM_LINE_ES (LINE_ES_CODE);
grant select, insert, update, delete on ACC_TK.IC_SAM_IN_RECYCLE to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_IN_RECYCLE to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_IN_RECYCLE to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_ISSUE_DETAIL
prompt ==================================
prompt
create table ACC_TK.IC_SAM_ISSUE_DETAIL
(
  order_no           VARCHAR2(20),
  sam_type           VARCHAR2(2),
  logic_no           VARCHAR2(20),
  make_card_oper     VARCHAR2(10),
  make_card_time     DATE,
  make_result        CHAR(1),
  remark             VARCHAR2(512),
  card_producer_code VARCHAR2(4) default '0000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_SAM_ISSUE_DETAIL to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_ISSUE_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_ISSUE_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_LOGIC_NOS
prompt ===============================
prompt
create table ACC_TK.IC_SAM_LOGIC_NOS
(
  order_no       VARCHAR2(20),
  start_logic_no VARCHAR2(20),
  end_logic_no   VARCHAR2(20)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_LOGIC_NOS
  is '逻辑卡号段(单号)';
comment on column ACC_TK.IC_SAM_LOGIC_NOS.order_no
  is '单号';
comment on column ACC_TK.IC_SAM_LOGIC_NOS.start_logic_no
  is '起始逻辑卡号';
comment on column ACC_TK.IC_SAM_LOGIC_NOS.end_logic_no
  is '结束逻辑卡号';
grant select, insert, update, delete on ACC_TK.IC_SAM_LOGIC_NOS to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_LOGIC_NOS to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_LOGIC_NOS to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_OPER_LOGGING
prompt ==================================
prompt
create table ACC_TK.IC_SAM_OPER_LOGGING
(
  serialno    NUMBER(18),
  operator_id VARCHAR2(8) not null,
  op_time     DATE not null,
  module_id   VARCHAR2(6) not null,
  oper_type   VARCHAR2(50) not null,
  description VARCHAR2(200),
  sys_type    VARCHAR2(2) default 0
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_OPER_LOGGING
  is '密钥管理系统操作日志表';
comment on column ACC_TK.IC_SAM_OPER_LOGGING.serialno
  is '流水号';
comment on column ACC_TK.IC_SAM_OPER_LOGGING.operator_id
  is '操作员';
comment on column ACC_TK.IC_SAM_OPER_LOGGING.op_time
  is '操作时间';
comment on column ACC_TK.IC_SAM_OPER_LOGGING.module_id
  is '模块';
comment on column ACC_TK.IC_SAM_OPER_LOGGING.oper_type
  is '操作类型';
comment on column ACC_TK.IC_SAM_OPER_LOGGING.description
  is '描述';
comment on column ACC_TK.IC_SAM_OPER_LOGGING.sys_type
  is '系统类别 0:密钥管理系统 1:密钥发行系统';
grant select, insert, update, delete on ACC_TK.IC_SAM_OPER_LOGGING to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_OPER_LOGGING to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_OPER_LOGGING to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_ORDER_PLAN
prompt ================================
prompt
create table ACC_TK.IC_SAM_ORDER_PLAN
(
  order_no         VARCHAR2(20) not null,
  sam_type         VARCHAR2(2) not null,
  order_num        INTEGER not null,
  make_order_oper  VARCHAR2(10) not null,
  make_order_time  DATE not null,
  order_state      VARCHAR2(2) default 0 not null,
  start_logic_no   VARCHAR2(20),
  audit_order_oper VARCHAR2(10),
  audit_order_time DATE,
  finish_num       INTEGER,
  make_card_oper   VARCHAR2(10),
  make_card_time   DATE,
  remark           VARCHAR2(512),
  finish_flag      VARCHAR2(2) default 0 not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_ORDER_PLAN
  is '生产工作单';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.order_no
  is '生产单号';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.sam_type
  is 'SAM类型';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.order_num
  is '生产数量';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.make_order_oper
  is '制单人';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.make_order_time
  is '制单时间';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.order_state
  is '单据状态 0:未审核,1:已审核';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.start_logic_no
  is '起始逻辑卡号';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.audit_order_oper
  is '审单人';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.audit_order_time
  is '审核时间';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.finish_num
  is '完成数量';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.make_card_oper
  is '制卡人';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.make_card_time
  is '制卡时间';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.remark
  is '备注';
comment on column ACC_TK.IC_SAM_ORDER_PLAN.finish_flag
  is '完成标志 0:全未完成,1:部分完成,2:全已完成';
alter table ACC_TK.IC_SAM_ORDER_PLAN
  add constraint PK_IC_SAM_ORDER_PLAN primary key (ORDER_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_SAM_ORDER_PLAN
  add constraint IC_SAM_TYPE_ORDER_PLAN_FK foreign key (SAM_TYPE)
  references ACC_TK.IC_SAM_TYPE (SAM_TYPE_CODE);
grant select, insert, update, delete on ACC_TK.IC_SAM_ORDER_PLAN to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_ORDER_PLAN to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_ORDER_PLAN to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_ORDER_WATER
prompt =================================
prompt
create table ACC_TK.IC_SAM_ORDER_WATER
(
  order_type  VARCHAR2(4),
  order_date  DATE,
  order_water INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_ORDER_WATER
  is '单据流水号表';
comment on column ACC_TK.IC_SAM_ORDER_WATER.order_type
  is '单据类型';
comment on column ACC_TK.IC_SAM_ORDER_WATER.order_date
  is '单据日期';
comment on column ACC_TK.IC_SAM_ORDER_WATER.order_water
  is '单据流水';
grant select, insert, update, delete on ACC_TK.IC_SAM_ORDER_WATER to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_ORDER_WATER to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_ORDER_WATER to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_OUT_DISTRIBUTE
prompt ====================================
prompt
create table ACC_TK.IC_SAM_OUT_DISTRIBUTE
(
  order_no         VARCHAR2(20) not null,
  sam_type         VARCHAR2(2) not null,
  start_logic_no   VARCHAR2(20),
  order_num        INTEGER,
  out_stock_oper   VARCHAR2(10) not null,
  out_stock_time   DATE not null,
  line_es          VARCHAR2(2) not null,
  order_state      VARCHAR2(2) not null,
  audit_order_oper VARCHAR2(10),
  audit_order_time DATE,
  remark           VARCHAR2(512),
  get_card_oper    VARCHAR2(50)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_OUT_DISTRIBUTE
  is '分发出库';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.order_no
  is '出库单号';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.sam_type
  is 'SAM类型';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.start_logic_no
  is '起始逻辑卡号';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.order_num
  is '分发卡数量';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.out_stock_oper
  is '出库人员';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.out_stock_time
  is '出库时间';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.line_es
  is '线路（ES)';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.order_state
  is '单据状态';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.audit_order_oper
  is '审核人';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.audit_order_time
  is '审核时间';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.remark
  is '备注';
comment on column ACC_TK.IC_SAM_OUT_DISTRIBUTE.get_card_oper
  is '领卡人';
alter table ACC_TK.IC_SAM_OUT_DISTRIBUTE
  add constraint PK_IC_SAM_OUT_DISTRIBUTE primary key (ORDER_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_SAM_OUT_DISTRIBUTE
  add constraint IC_LINE_ES_DISTRIBUTE_OUT_FK foreign key (LINE_ES)
  references ACC_TK.IC_SAM_LINE_ES (LINE_ES_CODE);
grant select, insert, update, delete on ACC_TK.IC_SAM_OUT_DISTRIBUTE to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_OUT_DISTRIBUTE to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_OUT_DISTRIBUTE to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_OUT_ISSUE
prompt ===============================
prompt
create table ACC_TK.IC_SAM_OUT_ISSUE
(
  order_no         VARCHAR2(20) not null,
  pdu_order_no     VARCHAR2(20) not null,
  out_stock_oper   VARCHAR2(10) not null,
  out_stock_time   DATE not null,
  get_card_oper    VARCHAR2(50),
  order_state      VARCHAR2(2) not null,
  sam_type         VARCHAR2(2) not null,
  start_logic_no   VARCHAR2(20),
  order_num        INTEGER,
  audit_order_oper VARCHAR2(10),
  audit_order_time DATE,
  in_stock_state   VARCHAR2(2),
  remark           VARCHAR2(512)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_OUT_ISSUE
  is '发行出库';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.order_no
  is '出库单号';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.pdu_order_no
  is '生产工作单';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.out_stock_oper
  is '出库人员';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.out_stock_time
  is '出库时间';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.get_card_oper
  is '领卡人';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.order_state
  is '单据状态 0:未审核,1:已审核';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.sam_type
  is 'SAM类型';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.start_logic_no
  is '起始逻辑卡号';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.order_num
  is '发行卡数量';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.audit_order_oper
  is '审核人';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.audit_order_time
  is '审核时间';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.in_stock_state
  is '回库状态  0:全未回库,1:部分回库,2:全已回库';
comment on column ACC_TK.IC_SAM_OUT_ISSUE.remark
  is '备注';
alter table ACC_TK.IC_SAM_OUT_ISSUE
  add constraint PK_IC_SAM_OUT_ISSUE primary key (ORDER_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_SAM_OUT_ISSUE to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_OUT_ISSUE to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_OUT_ISSUE to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_PUB_FLAG
prompt ==============================
prompt
create table ACC_TK.IC_SAM_PUB_FLAG
(
  type        INTEGER not null,
  code        VARCHAR2(50) not null,
  code_text   VARCHAR2(50),
  description VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_PUB_FLAG
  is '员工发行系统参数表';
comment on column ACC_TK.IC_SAM_PUB_FLAG.type
  is '类型';
comment on column ACC_TK.IC_SAM_PUB_FLAG.code
  is '代码';
comment on column ACC_TK.IC_SAM_PUB_FLAG.code_text
  is '状态值';
comment on column ACC_TK.IC_SAM_PUB_FLAG.description
  is '描述';
grant select, insert, update, delete on ACC_TK.IC_SAM_PUB_FLAG to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_PUB_FLAG to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_PUB_FLAG to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_STOCK
prompt ===========================
prompt
create table ACC_TK.IC_SAM_STOCK
(
  sam_type           VARCHAR2(2) not null,
  logic_no           VARCHAR2(20) not null,
  phy_no             VARCHAR2(20),
  print_no           VARCHAR2(20),
  distribute_place   VARCHAR2(2),
  produce_type       VARCHAR2(2) default 00 not null,
  stock_state        VARCHAR2(2) default 00 not null,
  is_instock         VARCHAR2(2) default 1 not null,
  is_bad             VARCHAR2(2) default 1 not null,
  remark             VARCHAR2(512),
  card_producer_code VARCHAR2(4) default '0000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SAM_STOCK
  is '卡库存';
comment on column ACC_TK.IC_SAM_STOCK.sam_type
  is 'SAM类型';
comment on column ACC_TK.IC_SAM_STOCK.logic_no
  is '逻辑卡号';
comment on column ACC_TK.IC_SAM_STOCK.phy_no
  is '物理卡号';
comment on column ACC_TK.IC_SAM_STOCK.print_no
  is '卡面号';
comment on column ACC_TK.IC_SAM_STOCK.distribute_place
  is '分发地方';
comment on column ACC_TK.IC_SAM_STOCK.produce_type
  is '产品类型 00:空白卡,01:成品卡';
comment on column ACC_TK.IC_SAM_STOCK.stock_state
  is '库存状态 00:空白卡入库,01:生产计划单,02:卡发行出库,03:成品卡入库,04:卡分发出库,05:卡回收入库,06:卡制作';
comment on column ACC_TK.IC_SAM_STOCK.is_instock
  is '是否在库 0:出库,1:在库';
comment on column ACC_TK.IC_SAM_STOCK.is_bad
  is '是否损坏 0:坏卡,1:好卡';
comment on column ACC_TK.IC_SAM_STOCK.remark
  is '备注';
alter table ACC_TK.IC_SAM_STOCK
  add constraint PK_IC_SAM_STOCK primary key (LOGIC_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_SAM_STOCK
  add constraint IC_SAM_TYPE_STOCK_FK foreign key (SAM_TYPE)
  references ACC_TK.IC_SAM_TYPE (SAM_TYPE_CODE);
grant select, insert, update, delete on ACC_TK.IC_SAM_STOCK to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_STOCK to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_STOCK to ACC_TK_RPT;

prompt
prompt Creating table IC_SAM_SYS_VERSION
prompt =================================
prompt
create table ACC_TK.IC_SAM_SYS_VERSION
(
  version_no  VARCHAR2(10) not null,
  operator_id VARCHAR2(10),
  valid_date  CHAR(10),
  del_desc    VARCHAR2(255),
  update_desc VARCHAR2(255),
  add_desc    VARCHAR2(255),
  note        VARCHAR2(255)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table ACC_TK.IC_SAM_SYS_VERSION
  add constraint IC_SAM_VERSION_PK_1 primary key (VERSION_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_SAM_SYS_VERSION to ACC_TK_APP;
grant select on ACC_TK.IC_SAM_SYS_VERSION to ACC_TK_DEV;
grant select on ACC_TK.IC_SAM_SYS_VERSION to ACC_TK_RPT;

prompt
prompt Creating table IC_SCP_OPRTLOG
prompt =============================
prompt
create table ACC_TK.IC_SCP_OPRTLOG
(
  water_no     NUMBER(18) not null,
  oper_id      VARCHAR2(10),
  oprt_time    DATE,
  oprt_content VARCHAR2(256),
  oprt_result  CHAR(1)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SCP_OPRTLOG
  is '票面打印系统日志表';
comment on column ACC_TK.IC_SCP_OPRTLOG.water_no
  is '流水';
comment on column ACC_TK.IC_SCP_OPRTLOG.oper_id
  is '操作员ID';
comment on column ACC_TK.IC_SCP_OPRTLOG.oprt_time
  is '操作时间';
comment on column ACC_TK.IC_SCP_OPRTLOG.oprt_content
  is '操作说明';
comment on column ACC_TK.IC_SCP_OPRTLOG.oprt_result
  is '操作结果';
alter table ACC_TK.IC_SCP_OPRTLOG
  add primary key (WATER_NO)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_SCP_OPRTLOG to ACC_TK_APP;
grant select on ACC_TK.IC_SCP_OPRTLOG to ACC_TK_DEV;
grant select on ACC_TK.IC_SCP_OPRTLOG to ACC_TK_RPT;

prompt
prompt Creating table IC_SCP_PRINT_LIST
prompt ================================
prompt
create table ACC_TK.IC_SCP_PRINT_LIST
(
  id            VARCHAR2(8) not null,
  name          VARCHAR2(30),
  gender        CHAR(1) default 1,
  identity_id   VARCHAR2(20) default 00000000000000000 not null,
  identity_type VARCHAR2(2),
  card_type     VARCHAR2(4),
  photo_name    VARCHAR2(100),
  print_oper    VARCHAR2(20),
  print_time    DATE,
  issue_time    DATE,
  remark        VARCHAR2(100),
  department    VARCHAR2(50),
  position      VARCHAR2(2),
  logical_id    VARCHAR2(2)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SCP_PRINT_LIST
  is '票面打印系统打印记录表';
comment on column ACC_TK.IC_SCP_PRINT_LIST.name
  is '姓名';
comment on column ACC_TK.IC_SCP_PRINT_LIST.gender
  is '性别';
comment on column ACC_TK.IC_SCP_PRINT_LIST.identity_id
  is '证件号';
comment on column ACC_TK.IC_SCP_PRINT_LIST.identity_type
  is '证件类型1:身份证,2:学生证,3:军人证,4:其他';
comment on column ACC_TK.IC_SCP_PRINT_LIST.card_type
  is '票卡类型';
comment on column ACC_TK.IC_SCP_PRINT_LIST.photo_name
  is '相片名称';
comment on column ACC_TK.IC_SCP_PRINT_LIST.print_oper
  is '操作员';
comment on column ACC_TK.IC_SCP_PRINT_LIST.print_time
  is '打印时间';
comment on column ACC_TK.IC_SCP_PRINT_LIST.issue_time
  is '发证日期';
comment on column ACC_TK.IC_SCP_PRINT_LIST.remark
  is '备注';
comment on column ACC_TK.IC_SCP_PRINT_LIST.department
  is '单位';
alter table ACC_TK.IC_SCP_PRINT_LIST
  add primary key (ID)
  using index 
  tablespace TBS_TK_DATA
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_SCP_PRINT_LIST to ACC_TK_APP;
grant select on ACC_TK.IC_SCP_PRINT_LIST to ACC_TK_DEV;
grant select on ACC_TK.IC_SCP_PRINT_LIST to ACC_TK_RPT;

prompt
prompt Creating table IC_SCP_PUB_FLAG
prompt ==============================
prompt
create table ACC_TK.IC_SCP_PUB_FLAG
(
  type        VARCHAR2(50) not null,
  code        VARCHAR2(20) not null,
  code_text   VARCHAR2(50),
  description VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SCP_PUB_FLAG
  is '票面打印系统配置表';
comment on column ACC_TK.IC_SCP_PUB_FLAG.type
  is '类型代码';
comment on column ACC_TK.IC_SCP_PUB_FLAG.code
  is '代码';
comment on column ACC_TK.IC_SCP_PUB_FLAG.code_text
  is '代码描述';
comment on column ACC_TK.IC_SCP_PUB_FLAG.description
  is '类型描述';
grant select, insert, update, delete on ACC_TK.IC_SCP_PUB_FLAG to ACC_TK_APP;
grant select on ACC_TK.IC_SCP_PUB_FLAG to ACC_TK_DEV;
grant select on ACC_TK.IC_SCP_PUB_FLAG to ACC_TK_RPT;

prompt
prompt Creating table IC_SCP_SYS_VERSION
prompt =================================
prompt
create table ACC_TK.IC_SCP_SYS_VERSION
(
  version_no  VARCHAR2(10) not null,
  operator_id VARCHAR2(10),
  valid_date  CHAR(10),
  del_desc    VARCHAR2(255),
  update_desc VARCHAR2(255),
  add_desc    VARCHAR2(255),
  note        VARCHAR2(255)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table ACC_TK.IC_SCP_SYS_VERSION
  is '票面打印系统版本记录表';
comment on column ACC_TK.IC_SCP_SYS_VERSION.version_no
  is '版本号';
comment on column ACC_TK.IC_SCP_SYS_VERSION.operator_id
  is '操作员';
comment on column ACC_TK.IC_SCP_SYS_VERSION.valid_date
  is '更新日期';
comment on column ACC_TK.IC_SCP_SYS_VERSION.del_desc
  is '删除描述';
comment on column ACC_TK.IC_SCP_SYS_VERSION.update_desc
  is '更新描述';
comment on column ACC_TK.IC_SCP_SYS_VERSION.add_desc
  is '增加描述';
comment on column ACC_TK.IC_SCP_SYS_VERSION.note
  is '登记';
grant select, insert, update, delete on ACC_TK.IC_SCP_SYS_VERSION to ACC_TK_APP;
grant select on ACC_TK.IC_SCP_SYS_VERSION to ACC_TK_DEV;
grant select on ACC_TK.IC_SCP_SYS_VERSION to ACC_TK_RPT;

prompt
prompt Creating table IC_STAT_OUT
prompt ==========================
prompt
create table ACC_TK.IC_STAT_OUT
(
  bill_no         CHAR(12) not null,
  verify_date     DATE not null,
  reason_id       CHAR(2) not null,
  storage_id      CHAR(4) not null,
  area_id         CHAR(2) not null,
  ic_main_type    CHAR(2) not null,
  ic_sub_type     CHAR(2) not null,
  out_num         INTEGER not null,
  vaild_date      DATE,
  card_money      INTEGER default 0,
  line_id         CHAR(2),
  station_id      CHAR(2),
  card_ava_days   VARCHAR2(10) default '000',
  exit_line_id    VARCHAR2(2) default '',
  exit_station_id VARCHAR2(3) default '',
  model           VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_STAT_OUT to ACC_TK_APP;
grant select on ACC_TK.IC_STAT_OUT to ACC_TK_DEV;
grant select on ACC_TK.IC_STAT_OUT to ACC_TK_RPT;

prompt
prompt Creating table IC_STS_AREA_CARD
prompt ===============================
prompt
create table ACC_TK.IC_STS_AREA_CARD
(
  water_no        NUMBER(20),
  storage_id      CHAR(4) not null,
  area_id         CHAR(2) not null,
  ic_main_type    VARCHAR2(2) not null,
  ic_sub_type     VARCHAR2(2) not null,
  card_num        INTEGER not null,
  card_money      INTEGER default 0 not null,
  valid_date      VARCHAR2(10),
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  flag            CHAR(1) default '0' not null,
  exit_line_id    VARCHAR2(2) default '',
  exit_station_id VARCHAR2(3) default '',
  model           VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_STS_AREA_CARD to ACC_TK_APP;
grant select on ACC_TK.IC_STS_AREA_CARD to ACC_TK_DEV;
grant select on ACC_TK.IC_STS_AREA_CARD to ACC_TK_RPT;

prompt
prompt Creating table IC_STS_IN
prompt ========================
prompt
create table ACC_TK.IC_STS_IN
(
  bill_no            CHAR(12) not null,
  verify_date        DATE not null,
  reason_id          CHAR(2) not null,
  storage_id         CHAR(4) not null,
  area_id            CHAR(2) not null,
  ic_main_type       CHAR(2) not null,
  ic_sub_type        CHAR(2) not null,
  in_num             INTEGER not null,
  valid_date         DATE,
  card_money         INTEGER not null,
  line_id            CHAR(2),
  station_id         VARCHAR2(2),
  related_bill_no    CHAR(12),
  card_ava_days      VARCHAR2(10) default '000',
  line_id_reclaim    VARCHAR2(2),
  station_id_reclaim VARCHAR2(3),
  exit_line_id       VARCHAR2(2) default '',
  exit_station_id    VARCHAR2(3) default '',
  model              VARCHAR2(3) default '000'
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_STS_IN to ACC_TK_APP;
grant select on ACC_TK.IC_STS_IN to ACC_TK_DEV;
grant select on ACC_TK.IC_STS_IN to ACC_TK_RPT;

prompt
prompt Creating table IC_STS_STORAGE
prompt =============================
prompt
create table ACC_TK.IC_STS_STORAGE
(
  storage_id   CHAR(4) not null,
  area_id      CHAR(2),
  chest_id     CHAR(3),
  storey_id    CHAR(2),
  base_id      CHAR(2),
  box_id       CHAR(14),
  product_date DATE,
  card_num     INTEGER
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_STS_STORAGE to ACC_TK_APP;
grant select on ACC_TK.IC_STS_STORAGE to ACC_TK_DEV;
grant select on ACC_TK.IC_STS_STORAGE to ACC_TK_RPT;

prompt
prompt Creating table IC_SYS_VERSION
prompt =============================
prompt
create table ACC_TK.IC_SYS_VERSION
(
  version_no  VARCHAR2(10) not null,
  operator_id VARCHAR2(10),
  valid_date  CHAR(10),
  del_desc    VARCHAR2(255),
  update_desc VARCHAR2(255),
  add_desc    VARCHAR2(255),
  note        VARCHAR2(255)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.IC_SYS_VERSION to ACC_TK_APP;
grant select on ACC_TK.IC_SYS_VERSION to ACC_TK_DEV;
grant select on ACC_TK.IC_SYS_VERSION to ACC_TK_RPT;

prompt
prompt Creating table OPER_LOGGING
prompt ===========================
prompt
create table ACC_TK.OPER_LOGGING
(
  serialno    NUMBER(18),
  operator_id CHAR(8) not null,
  op_time     DATE not null,
  module_id   CHAR(6) not null,
  oper_type   VARCHAR2(50) not null,
  description VARCHAR2(200)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.OPER_LOGGING to ACC_TK_APP;
grant select on ACC_TK.OPER_LOGGING to ACC_TK_DEV;
grant select on ACC_TK.OPER_LOGGING to ACC_TK_RPT;

prompt
prompt Creating table PARAM_OPER_LOG
prompt =============================
prompt
create table ACC_TK.PARAM_OPER_LOG
(
  id            NUMBER(10),
  operator_id   CHAR(8) not null,
  op_time       DATE not null,
  param_type_id CHAR(4) not null,
  oper_type     VARCHAR2(50) not null,
  description   VARCHAR2(200) not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255;
grant select, insert, update, delete on ACC_TK.PARAM_OPER_LOG to ACC_TK_APP;
grant select on ACC_TK.PARAM_OPER_LOG to ACC_TK_DEV;
grant select on ACC_TK.PARAM_OPER_LOG to ACC_TK_RPT;

prompt
prompt Creating table PUB_FLAG
prompt =======================
prompt
create table ACC_TK.PUB_FLAG
(
  type        INTEGER not null,
  code        VARCHAR2(50) not null,
  code_text   VARCHAR2(50),
  description VARCHAR2(100)
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.PUB_FLAG to ACC_TK_APP;
grant select on ACC_TK.PUB_FLAG to ACC_TK_DEV;
grant select on ACC_TK.PUB_FLAG to ACC_TK_RPT;

prompt
prompt Creating table STATION_CODE_98bc4a1d
prompt ====================================
prompt
create table ACC_TK.STATION_CODE_98bc4a1d
(
  line_id        CHAR(2) not null,
  station_id     CHAR(3) not null,
  chinese_name   VARCHAR2(20),
  english_name   VARCHAR2(50),
  sc_ip          VARCHAR2(15),
  contc_id       CHAR(2),
  record_flag    CHAR(1) not null,
  lcc_ip         CHAR(15),
  version_no     CHAR(10) not null,
  sequence       CHAR(2) default '00' not null,
  belong_line_id CHAR(2) default '00' not null
)
tablespace TBS_TK_DATA
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
grant select, insert, update, delete on ACC_TK.STATION_CODE_98bc4a1d to ACC_TK_APP;
grant select on ACC_TK.STATION_CODE_98bc4a1d to ACC_TK_DEV;
grant select on ACC_TK.STATION_CODE_98bc4a1d to ACC_TK_RPT;

prompt
prompt Creating table T#IC_AREA_CARD_CODE
prompt ==================================
prompt
create global temporary table ACC_TK.T#IC_AREA_CARD_CODE
(
  storage_id      CHAR(4) not null,
  area_id         VARCHAR2(2) not null,
  ic_main_type    VARCHAR2(2) not null,
  ic_sub_type     VARCHAR2(2) not null,
  card_num        INTEGER not null,
  card_money      INTEGER default 0,
  valid_date      VARCHAR2(10),
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  exit_line_id    VARCHAR2(2),
  exit_station_id VARCHAR2(3),
  model           VARCHAR2(3),
  flag            CHAR(1) default '0' not null
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_AREA_CARD_CODE to ACC_TK_APP;
grant select on ACC_TK.T#IC_AREA_CARD_CODE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_AREA_CARD_CODE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_AREA_CODE
prompt =============================
prompt
create global temporary table ACC_TK.T#IC_AREA_CODE
(
  storage_id VARCHAR2(4) not null,
  area_id    VARCHAR2(2) not null,
  card_num   INTEGER not null
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_AREA_CODE to ACC_TK_APP;
grant select on ACC_TK.T#IC_AREA_CODE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_AREA_CODE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_BALANCE_START_END
prompt =====================================
prompt
create global temporary table ACC_TK.T#IC_BALANCE_START_END
(
  start_logi_id CHAR(20) not null,
  end_logi_id   CHAR(20) not null,
  num           INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_BALANCE_START_END to ACC_TK_APP;
grant select on ACC_TK.T#IC_BALANCE_START_END to ACC_TK_DEV;
grant select on ACC_TK.T#IC_BALANCE_START_END to ACC_TK_RPT;

prompt
prompt Creating table T#IC_BOX
prompt =======================
prompt
create global temporary table ACC_TK.T#IC_BOX
(
  storage_id   VARCHAR2(4) not null,
  area_id      VARCHAR2(2) not null,
  ic_main_type VARCHAR2(2) not null,
  ic_sub_type  VARCHAR2(2) not null,
  card_money   INTEGER default 0,
  box_id       VARCHAR2(14) not null,
  in_num       INTEGER not null,
  detail_place VARCHAR2(50)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_BOX to ACC_TK_APP;
grant select on ACC_TK.T#IC_BOX to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_BOX to ACC_TK_RPT;

prompt
prompt Creating table T#IC_BOX_ID
prompt ==========================
prompt
create global temporary table ACC_TK.T#IC_BOX_ID
(
  storage_id       CHAR(4) not null,
  area_id          CHAR(2) not null,
  ic_main_type     CHAR(2) not null,
  ic_sub_type      CHAR(2) not null,
  card_money       INTEGER not null,
  box_id           CHAR(14),
  start_logical_id CHAR(20),
  end_logical_id   CHAR(20),
  in_num           INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_BOX_ID to ACC_TK_APP;
grant select on ACC_TK.T#IC_BOX_ID to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_BOX_ID to ACC_TK_RPT;

prompt
prompt Creating table T#IC_CARDINFO
prompt ============================
prompt
create global temporary table ACC_TK.T#IC_CARDINFO
(
  bill      VARCHAR2(12),
  boxid     VARCHAR2(14),
  startcard VARCHAR2(20),
  endcard   VARCHAR2(20)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_CARDINFO to ACC_TK_APP;
grant select on ACC_TK.T#IC_CARDINFO to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_CARDINFO to ACC_TK_RPT;

prompt
prompt Creating table T#IC_CHECKDETAIL
prompt ===============================
prompt
create global temporary table ACC_TK.T#IC_CHECKDETAIL
(
  bill     VARCHAR2(12),
  boxid    VARCHAR2(14),
  maintype CHAR(2),
  subtype  CHAR(2),
  num      INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_CHECKDETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_CHECKDETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_CHECKDETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_CHECK_DETAIL_TMP_RPT
prompt ========================================
prompt
create global temporary table ACC_TK.T#IC_CHECK_DETAIL_TMP_RPT
(
  check_bill_no    CHAR(12) not null,
  box_id           CHAR(14),
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20),
  ic_main_type     VARCHAR2(2) not null,
  ic_sub_type      VARCHAR2(2) not null,
  ic_sub_desc      VARCHAR2(30),
  card_money       INTEGER,
  line_id          VARCHAR2(2),
  station_id       VARCHAR2(3),
  station_name     VARCHAR2(30),
  verify_date      DATE
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_CHECK_DETAIL_TMP_RPT to ACC_TK_APP;
grant select on ACC_TK.T#IC_CHECK_DETAIL_TMP_RPT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_CHECK_DETAIL_TMP_RPT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_CHECK_STORAGE_DETAIL
prompt ========================================
prompt
create global temporary table ACC_TK.T#IC_CHECK_STORAGE_DETAIL
(
  storage_id       VARCHAR2(4) not null,
  area_id          VARCHAR2(2) not null,
  chest_id         VARCHAR2(3),
  storey_id        VARCHAR2(2),
  base_id          VARCHAR2(2),
  box_id           VARCHAR2(16),
  ic_main_type     VARCHAR2(2) not null,
  ic_sub_type      VARCHAR2(2) not null,
  in_num           INTEGER not null,
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20),
  card_money       INTEGER,
  detail_place     VARCHAR2(20),
  line_id          VARCHAR2(2),
  station_id       VARCHAR2(3),
  valid_date       DATE,
  exit_line_id     VARCHAR2(2),
  exit_station_id  VARCHAR2(3),
  model            VARCHAR2(3)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_CHECK_STORAGE_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_CHECK_STORAGE_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_CHECK_STORAGE_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_CHECK_TMP_RPT
prompt =================================
prompt
create global temporary table ACC_TK.T#IC_CHECK_TMP_RPT
(
  check_date    DATE,
  check_person  VARCHAR2(10),
  verify_person VARCHAR2(10),
  check_bill_no CHAR(12) not null,
  area_id       CHAR(2) not null,
  area_name     VARCHAR2(20),
  ic_main_type  VARCHAR2(2) not null,
  ic_sub_type   VARCHAR2(2) not null,
  ic_sub_desc   VARCHAR2(20),
  card_money    INTEGER,
  sys_amount    INTEGER not null,
  real_amount   INTEGER not null,
  line_id       VARCHAR2(2),
  station_id    VARCHAR2(3),
  station_name  VARCHAR2(30)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_CHECK_TMP_RPT to ACC_TK_APP;
grant select on ACC_TK.T#IC_CHECK_TMP_RPT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_CHECK_TMP_RPT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_CIRCLE
prompt ==========================
prompt
create global temporary table ACC_TK.T#IC_CIRCLE
(
  tickettype_id NUMBER(38),
  circle        INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_CIRCLE to ACC_TK_APP;
grant select on ACC_TK.T#IC_CIRCLE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_CIRCLE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_COMMEN_TEMP_GROUP
prompt =====================================
prompt
create global temporary table ACC_TK.T#IC_COMMEN_TEMP_GROUP
(
  bill_no            CHAR(12) not null,
  bill_date          DATE,
  form_maker         VARCHAR2(50),
  drawer             VARCHAR2(50),
  administer         VARCHAR2(25),
  accounter          VARCHAR2(25),
  verify_person      VARCHAR2(10),
  verify_date        DATE,
  distribute_bill_no CHAR(12),
  remarks            VARCHAR2(400),
  record_flag        CHAR(1),
  bill_type          CHAR(2),
  reason_id          CHAR(2) not null,
  storage_id         CHAR(4) not null,
  area_id            CHAR(2) not null,
  ic_main_type       VARCHAR2(2) not null,
  ic_sub_type        VARCHAR2(2) not null,
  out_num            INTEGER not null,
  vaild_date         DATE,
  card_money         INTEGER,
  line_id            VARCHAR2(2),
  station_id         VARCHAR2(3),
  card_type          CHAR(3),
  es_worktype_id     CHAR(2),
  make_num           INTEGER default 0,
  card_money_produce INTEGER default 0,
  detail_place       VARCHAR2(50),
  start_box_id       CHAR(14),
  end_box_id         CHAR(14),
  start_logical_id   VARCHAR2(20),
  end_logical_id     VARCHAR2(20),
  section_num        INTEGER default 0 not null,
  reason_describe    VARCHAR2(20),
  area_name          CHAR(20),
  chinese_name       VARCHAR2(20),
  card_type_name     VARCHAR2(100),
  ic_sub_desc        VARCHAR2(30)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_COMMEN_TEMP_GROUP to ACC_TK_APP;
grant select on ACC_TK.T#IC_COMMEN_TEMP_GROUP to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_COMMEN_TEMP_GROUP to ACC_TK_RPT;

prompt
prompt Creating table T#IC_COMMEN_TEMP_RESULT
prompt ======================================
prompt
create global temporary table ACC_TK.T#IC_COMMEN_TEMP_RESULT
(
  bill_no            CHAR(12) not null,
  bill_date          DATE,
  form_maker         VARCHAR2(50),
  drawer             VARCHAR2(50),
  administer         VARCHAR2(25),
  accounter          VARCHAR2(25),
  verify_person      VARCHAR2(10),
  verify_date        DATE,
  distribute_bill_no CHAR(12),
  remarks            VARCHAR2(400),
  record_flag        CHAR(1),
  bill_type          VARCHAR2(2),
  reason_id          CHAR(2) not null,
  storage_id         CHAR(4) not null,
  area_id            CHAR(2) not null,
  ic_main_type       VARCHAR2(2) not null,
  ic_sub_type        VARCHAR2(2) not null,
  out_num            INTEGER not null,
  vaild_date         DATE,
  card_money         INTEGER,
  line_id            VARCHAR2(2),
  station_id         VARCHAR2(3),
  card_type          CHAR(3),
  es_worktype_id     CHAR(2),
  make_num           INTEGER default 0,
  card_money_produce INTEGER default 0,
  detail_place       VARCHAR2(50),
  start_box_id       CHAR(14),
  end_box_id         CHAR(14),
  start_logical_id   VARCHAR2(20),
  end_logical_id     VARCHAR2(20),
  section_num        INTEGER default 0 not null,
  reason_describe    VARCHAR2(20),
  area_name          CHAR(20),
  chinese_name       VARCHAR2(20),
  card_type_name     VARCHAR2(100),
  ic_sub_desc        VARCHAR2(30)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_COMMEN_TEMP_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_COMMEN_TEMP_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_COMMEN_TEMP_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ES_INFO
prompt ===========================
prompt
create global temporary table ACC_TK.T#IC_ES_INFO
(
  logi_id  CHAR(20) not null,
  order_no CHAR(14) not null
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ES_INFO to ACC_TK_APP;
grant select on ACC_TK.T#IC_ES_INFO to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ES_INFO to ACC_TK_RPT;

prompt
prompt Creating table T#IC_GET_RESULT
prompt ==============================
prompt
create global temporary table ACC_TK.T#IC_GET_RESULT
(
  bill_no               CHAR(12),
  ic_main_type          CHAR(2),
  ic_sub_type           CHAR(2),
  distribute_quantity   INTEGER,
  card_money            INTEGER,
  vaild_date            DATE,
  line_id               VARCHAR2(2),
  station_id            VARCHAR2(3),
  exit_line_id          VARCHAR2(2),
  exit_station_id       VARCHAR2(3),
  model                 VARCHAR2(3),
  distribute_line_id    VARCHAR2(2),
  distribute_station_id VARCHAR2(3),
  detail_place          VARCHAR2(50),
  start_box_id          CHAR(14),
  end_box_id            CHAR(14),
  start_logical_id      VARCHAR2(20),
  end_logical_id        VARCHAR2(20),
  section_num           INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_GET_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_GET_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_GET_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_HANDIN_DETAIL
prompt =================================
prompt
create global temporary table ACC_TK.T#IC_HANDIN_DETAIL
(
  operator_name VARCHAR2(20),
  reportdate    DATE,
  ic_sub_type   VARCHAR2(2),
  ic_sub_desc   VARCHAR2(30),
  idstart       NUMBER(38,2),
  deposit       VARCHAR2(6),
  value         NUMBER(20,2),
  chinese_name  VARCHAR2(20)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_HANDIN_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_HANDIN_DETAIL_CR
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_HANDIN_DETAIL_CR
(
  row_id       INTEGER,
  line_id      INTEGER,
  sub_type     INTEGER,
  hand_up_date VARCHAR2(10),
  deposit      NUMBER(10,2),
  remain_value NUMBER(10,2),
  station_id   INTEGER,
  station_name VARCHAR2(50)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL_CR to ACC_TK_APP;
grant select on ACC_TK.T#IC_HANDIN_DETAIL_CR to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL_CR to ACC_TK_RPT;

prompt
prompt Creating table T#IC_HANDIN_DETAIL_LR
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_HANDIN_DETAIL_LR
(
  row_id       INTEGER,
  line_id      INTEGER,
  sub_type     INTEGER,
  hand_up_date VARCHAR2(10),
  deposit      NUMBER(10,2),
  remain_value NUMBER(10,2),
  station_id   INTEGER,
  station_name VARCHAR2(50)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL_LR to ACC_TK_APP;
grant select on ACC_TK.T#IC_HANDIN_DETAIL_LR to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL_LR to ACC_TK_RPT;

prompt
prompt Creating table T#IC_HANDIN_DETAIL_OM
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_HANDIN_DETAIL_OM
(
  row_id       INTEGER,
  line_id      INTEGER,
  sub_type     INTEGER,
  hand_up_date VARCHAR2(10),
  deposit      NUMBER(10,2),
  remain_value NUMBER(10,2),
  station_id   INTEGER,
  station_name VARCHAR2(50)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL_OM to ACC_TK_APP;
grant select on ACC_TK.T#IC_HANDIN_DETAIL_OM to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL_OM to ACC_TK_RPT;

prompt
prompt Creating table T#IC_HANDIN_DETAIL_RETURN
prompt ========================================
prompt
create global temporary table ACC_TK.T#IC_HANDIN_DETAIL_RETURN
(
  row_id          INTEGER,
  line_id         INTEGER,
  sub_type_cr     VARCHAR2(20),
  hand_up_date_cr VARCHAR2(10),
  deposit_cr      VARCHAR2(20),
  remain_value_cr VARCHAR2(20),
  station_id_cr   INTEGER,
  station_name_cr VARCHAR2(50),
  sub_type_xs     VARCHAR2(20),
  hand_up_date_xs VARCHAR2(10),
  deposit_xs      VARCHAR2(20),
  remain_value_xs VARCHAR2(20),
  station_id_xs   INTEGER,
  station_name_xs VARCHAR2(50),
  sub_type_lr     VARCHAR2(20),
  hand_up_date_lr VARCHAR2(10),
  deposit_lr      VARCHAR2(20),
  remain_value_lr VARCHAR2(20),
  station_id_lr   INTEGER,
  station_name_lr VARCHAR2(50),
  sub_type_om     VARCHAR2(20),
  hand_up_date_om VARCHAR2(10),
  deposit_om      VARCHAR2(20),
  remain_value_om VARCHAR2(20),
  station_id_om   INTEGER,
  station_name_om VARCHAR2(50)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL_RETURN to ACC_TK_APP;
grant select on ACC_TK.T#IC_HANDIN_DETAIL_RETURN to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL_RETURN to ACC_TK_RPT;

prompt
prompt Creating table T#IC_HANDIN_DETAIL_XS
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_HANDIN_DETAIL_XS
(
  row_id       INTEGER,
  line_id      INTEGER,
  sub_type     INTEGER,
  hand_up_date VARCHAR2(10),
  deposit      NUMBER(10,2),
  remain_value NUMBER(10,2),
  station_id   INTEGER,
  station_name VARCHAR2(50)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL_XS to ACC_TK_APP;
grant select on ACC_TK.T#IC_HANDIN_DETAIL_XS to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_DETAIL_XS to ACC_TK_RPT;

prompt
prompt Creating table T#IC_HANDIN_MONTH
prompt ================================
prompt
create global temporary table ACC_TK.T#IC_HANDIN_MONTH
(
  line_id            INTEGER,
  line_name          VARCHAR2(50),
  deposit_cr         NUMBER(10,2),
  remain_value_cr    NUMBER(10,2),
  deposit_xs         NUMBER(10,2),
  remain_value_xs    NUMBER(10,2),
  deposit_lr         NUMBER(10,2),
  remain_value_lr    NUMBER(10,2),
  deposit_om         NUMBER(10,2),
  remain_value_om    NUMBER(10,2),
  deposit_total      NUMBER(10,2),
  remain_value_total NUMBER(10,2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_MONTH to ACC_TK_APP;
grant select on ACC_TK.T#IC_HANDIN_MONTH to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_HANDIN_MONTH to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ID
prompt ======================
prompt
create global temporary table ACC_TK.T#IC_ID
(
  no               NUMBER(18),
  storage_id       VARCHAR2(4) not null,
  area_id          VARCHAR2(2) not null,
  ic_main_type     VARCHAR2(2) not null,
  ic_sub_type      VARCHAR2(2) not null,
  card_money       INTEGER not null,
  in_num           INTEGER not null,
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ID to ACC_TK_APP;
grant select on ACC_TK.T#IC_ID to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ID to ACC_TK_RPT;

prompt
prompt Creating table T#IC_IN_AREA_CARD_CODE
prompt =====================================
prompt
create global temporary table ACC_TK.T#IC_IN_AREA_CARD_CODE
(
  storage_id      CHAR(4) not null,
  area_id         CHAR(2) not null,
  ic_main_type    CHAR(2) not null,
  ic_sub_type     CHAR(2) not null,
  card_num        INTEGER not null,
  card_money      INTEGER default 0,
  valid_date      CHAR(10),
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  exit_line_id    VARCHAR2(2),
  exit_station_id VARCHAR2(3),
  model           VARCHAR2(3),
  flag            CHAR(1) default '0' not null
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AREA_CARD_CODE to ACC_TK_APP;
grant select on ACC_TK.T#IC_IN_AREA_CARD_CODE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AREA_CARD_CODE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_IN_AREA_CODE
prompt ================================
prompt
create global temporary table ACC_TK.T#IC_IN_AREA_CODE
(
  storage_id CHAR(4) not null,
  area_id    CHAR(2) not null,
  card_num   INTEGER not null
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AREA_CODE to ACC_TK_APP;
grant select on ACC_TK.T#IC_IN_AREA_CODE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AREA_CODE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_IN_AUDIT_QR_AREA_CARD
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_IN_AUDIT_QR_AREA_CARD
(
  storage_id      CHAR(4) not null,
  area_id         CHAR(2) not null,
  ic_main_type    VARCHAR2(2) not null,
  ic_sub_type     VARCHAR2(2) not null,
  card_num        INTEGER not null,
  card_money      INTEGER default 0,
  valid_date      CHAR(10),
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  exit_line_id    VARCHAR2(2),
  exit_station_id VARCHAR2(3),
  model           VARCHAR2(3),
  flag            CHAR(1) default '0' not null
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AUDIT_QR_AREA_CARD to ACC_TK_APP;
grant select on ACC_TK.T#IC_IN_AUDIT_QR_AREA_CARD to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AUDIT_QR_AREA_CARD to ACC_TK_RPT;

prompt
prompt Creating table T#IC_IN_AUDIT_QR_AREA_CODE
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_IN_AUDIT_QR_AREA_CODE
(
  storage_id CHAR(4) not null,
  area_id    CHAR(2) not null,
  card_num   INTEGER not null
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AUDIT_QR_AREA_CODE to ACC_TK_APP;
grant select on ACC_TK.T#IC_IN_AUDIT_QR_AREA_CODE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AUDIT_QR_AREA_CODE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_IN_AUDIT_QR_BOX
prompt ===================================
prompt
create global temporary table ACC_TK.T#IC_IN_AUDIT_QR_BOX
(
  storage_id   CHAR(4) not null,
  area_id      CHAR(2) not null,
  ic_main_type CHAR(2) not null,
  ic_sub_type  CHAR(2) not null,
  card_money   INTEGER default 0,
  box_id       CHAR(14) not null,
  in_num       INTEGER not null,
  detail_place VARCHAR2(50)
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AUDIT_QR_BOX to ACC_TK_APP;
grant select on ACC_TK.T#IC_IN_AUDIT_QR_BOX to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AUDIT_QR_BOX to ACC_TK_RPT;

prompt
prompt Creating table T#IC_IN_AUDIT_QR_CARD_CODE
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_IN_AUDIT_QR_CARD_CODE
(
  storage_id      CHAR(4) not null,
  area_id         CHAR(2) not null,
  ic_main_type    VARCHAR2(2) not null,
  ic_sub_type     VARCHAR2(2) not null,
  card_num        INTEGER not null,
  card_money      INTEGER default 0,
  valid_date      CHAR(10),
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  exit_line_id    VARCHAR2(2),
  exit_station_id VARCHAR2(3),
  model           VARCHAR2(3),
  flag            CHAR(1) default '0' not null
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AUDIT_QR_CARD_CODE to ACC_TK_APP;
grant select on ACC_TK.T#IC_IN_AUDIT_QR_CARD_CODE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AUDIT_QR_CARD_CODE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_IN_AUDIT_QR_STORE_DETAIL
prompt ============================================
prompt
create global temporary table ACC_TK.T#IC_IN_AUDIT_QR_STORE_DETAIL
(
  water_no         NUMBER(18),
  bill_no          CHAR(12) not null,
  reason_id        CHAR(2) not null,
  storage_id       CHAR(4) not null,
  area_id          CHAR(2) not null,
  ic_main_type     CHAR(2) not null,
  ic_sub_type      CHAR(2) not null,
  in_num           INTEGER not null,
  detail_place     VARCHAR2(50),
  start_box_id     CHAR(14),
  end_box_id       CHAR(14),
  start_logical_id CHAR(16),
  end_logical_id   CHAR(16),
  valid_date       DATE,
  card_money       INTEGER default 0,
  line_id          VARCHAR2(2),
  station_id       VARCHAR2(3),
  exit_line_id     VARCHAR2(2),
  exit_station_id  VARCHAR2(3),
  model            VARCHAR2(3),
  use_flag         CHAR(1)
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AUDIT_QR_STORE_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_IN_AUDIT_QR_STORE_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_IN_AUDIT_QR_STORE_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_IN_CARD_CODE
prompt ================================
prompt
create global temporary table ACC_TK.T#IC_IN_CARD_CODE
(
  storage_id      CHAR(4) not null,
  area_id         CHAR(2) not null,
  ic_main_type    CHAR(2) not null,
  ic_sub_type     CHAR(2) not null,
  card_num        INTEGER not null,
  card_money      INTEGER default 0,
  valid_date      CHAR(10),
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  exit_line_id    VARCHAR2(2),
  exit_station_id VARCHAR2(3),
  model           VARCHAR2(3),
  flag            CHAR(1) default '0' not null
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_IN_CARD_CODE to ACC_TK_APP;
grant select on ACC_TK.T#IC_IN_CARD_CODE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_IN_CARD_CODE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_IN_DETAIL
prompt =============================
prompt
create global temporary table ACC_TK.T#IC_IN_DETAIL
(
  bill_no          CHAR(12) not null,
  reason_id        VARCHAR2(2),
  storage_id       CHAR(4),
  area_id          CHAR(2),
  ic_main_type     VARCHAR2(2),
  ic_sub_type      VARCHAR2(2),
  in_num           INTEGER not null,
  start_box_id     CHAR(14),
  end_box_id       CHAR(14),
  valid_date       DATE,
  card_money       INTEGER,
  line_id          VARCHAR2(2),
  station_id       VARCHAR2(3),
  use_flag         CHAR(1) not null,
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20),
  card_ava_days    VARCHAR2(10),
  exit_line_id     VARCHAR2(2),
  exit_station_id  VARCHAR2(3),
  model            VARCHAR2(3)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_IN_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_IN_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_IN_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_IN_NUM
prompt ==========================
prompt
create global temporary table ACC_TK.T#IC_IN_NUM
(
  storage_id CHAR(4),
  area_id    CHAR(2),
  in_num     INTEGER not null
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_IN_NUM to ACC_TK_APP;
grant select on ACC_TK.T#IC_IN_NUM to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_IN_NUM to ACC_TK_RPT;

prompt
prompt Creating table T#IC_IN_STORE_DETAIL
prompt ===================================
prompt
create global temporary table ACC_TK.T#IC_IN_STORE_DETAIL
(
  water_no         NUMBER(18),
  bill_no          CHAR(12) not null,
  reason_id        CHAR(2) not null,
  storage_id       CHAR(4) not null,
  area_id          CHAR(2) not null,
  ic_main_type     CHAR(2) not null,
  ic_sub_type      CHAR(2) not null,
  in_num           INTEGER not null,
  detail_place     VARCHAR2(50),
  start_box_id     CHAR(14),
  end_box_id       CHAR(14),
  start_logical_id CHAR(20),
  end_logical_id   CHAR(20),
  valid_date       DATE,
  card_money       INTEGER default 0,
  line_id          VARCHAR2(2),
  station_id       VARCHAR2(3),
  exit_line_id     VARCHAR2(2),
  exit_station_id  VARCHAR2(3),
  model            VARCHAR2(3),
  use_flag         CHAR(1)
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_IN_STORE_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_IN_STORE_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_IN_STORE_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_LEND_TEMP_RESULT
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_LEND_TEMP_RESULT
(
  bill_no             CHAR(12) not null,
  out_bill_no         CHAR(12),
  distribute_man      CHAR(10),
  receive_man         CHAR(10),
  bill_date           DATE,
  unit_id             CHAR(3),
  return_flag         CHAR(1),
  verify_person       CHAR(10),
  verify_date         DATE,
  record_flag         CHAR(1),
  remarks             VARCHAR2(300),
  storage_id          CHAR(4),
  area_id             CHAR(2),
  ic_main_type        CHAR(2),
  ic_sub_type         CHAR(2),
  lend_quantity       INTEGER,
  card_money          INTEGER,
  vaild_date          DATE,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    VARCHAR2(20),
  end_logical_id      VARCHAR2(20),
  card_type           CHAR(3),
  section_num         INTEGER,
  unit_name           VARCHAR2(50),
  area_name           CHAR(20),
  chinese_name        VARCHAR2(20),
  card_type_name      VARCHAR2(20),
  ic_sub_desc         VARCHAR2(30),
  exit_line_id        VARCHAR2(2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_LEND_TEMP_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_LEND_TEMP_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_LEND_TEMP_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_LINEDISTRI_DETAIL_CARD
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_LINEDISTRI_DETAIL_CARD
(
  line_id        VARCHAR2(2),
  borrow_unit_id VARCHAR2(2),
  station_id     VARCHAR2(3),
  ic_main_type   VARCHAR2(2),
  ic_sub_type    VARCHAR2(3),
  ic_sub_des     VARCHAR2(30),
  num            INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_LINEDISTRI_DETAIL_CARD to ACC_TK_APP;
grant select on ACC_TK.T#IC_LINEDISTRI_DETAIL_CARD to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_LINEDISTRI_DETAIL_CARD to ACC_TK_RPT;

prompt
prompt Creating table T#IC_LINEDISTRI_DETAIL_MONEY
prompt ===========================================
prompt
create global temporary table ACC_TK.T#IC_LINEDISTRI_DETAIL_MONEY
(
  line_id        VARCHAR2(2),
  borrow_unit_id VARCHAR2(2),
  station_id     VARCHAR2(3),
  ic_main_type   VARCHAR2(2),
  ic_sub_type    VARCHAR2(3),
  ic_sub_des     VARCHAR2(30),
  card_money     VARCHAR2(30),
  num            INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_LINEDISTRI_DETAIL_MONEY to ACC_TK_APP;
grant select on ACC_TK.T#IC_LINEDISTRI_DETAIL_MONEY to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_LINEDISTRI_DETAIL_MONEY to ACC_TK_RPT;

prompt
prompt Creating table T#IC_LINEDISTRI_RESULT
prompt =====================================
prompt
create global temporary table ACC_TK.T#IC_LINEDISTRI_RESULT
(
  line_id    VARCHAR2(2),
  line_name  VARCHAR2(30),
  card_money VARCHAR2(30),
  num        INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_LINEDISTRI_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_LINEDISTRI_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_LINEDISTRI_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_LINE_ID_NAME
prompt ================================
prompt
create global temporary table ACC_TK.T#IC_LINE_ID_NAME
(
  line_id   INTEGER,
  line_name VARCHAR2(20)
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_LINE_ID_NAME to ACC_TK_APP;
grant select on ACC_TK.T#IC_LINE_ID_NAME to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_LINE_ID_NAME to ACC_TK_RPT;

prompt
prompt Creating table T#IC_LOGI_BOX
prompt ============================
prompt
create global temporary table ACC_TK.T#IC_LOGI_BOX
(
  water_no         NUMBER(20),
  start_box_id     CHAR(14),
  end_box_id       CHAR(14),
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20),
  in_num           INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_LOGI_BOX to ACC_TK_APP;
grant select on ACC_TK.T#IC_LOGI_BOX to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_LOGI_BOX to ACC_TK_RPT;

prompt
prompt Creating table T#IC_LOSS
prompt ========================
prompt
create global temporary table ACC_TK.T#IC_LOSS
(
  dept_id       NUMBER(38),
  tickettype_id NUMBER(38),
  ticketvalue   NUMBER(20,2),
  currenttotal  NUMBER(20,2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_LOSS to ACC_TK_APP;
grant select on ACC_TK.T#IC_LOSS to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_LOSS to ACC_TK_RPT;

prompt
prompt Creating table T#IC_LOST_CARDINFO
prompt =================================
prompt
create global temporary table ACC_TK.T#IC_LOST_CARDINFO
(
  bill_no       VARCHAR2(12),
  order_no      VARCHAR2(14),
  card_no       VARCHAR2(20),
  cardtype      VARCHAR2(1),
  icmaintype    VARCHAR2(2),
  icsubtype     CHAR(2),
  lineid        VARCHAR2(4),
  stationid     VARCHAR2(4),
  exitlineid    VARCHAR2(4),
  exitstationid VARCHAR2(4),
  model         VARCHAR2(3),
  premoney      INTEGER,
  validdate     DATE,
  machineno     VARCHAR2(8),
  flag          VARCHAR2(1)
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_LOST_CARDINFO to ACC_TK_APP;
grant select on ACC_TK.T#IC_LOST_CARDINFO to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_LOST_CARDINFO to ACC_TK_RPT;

prompt
prompt Creating table T#IC_OT_BUY_CARD
prompt ===============================
prompt
create global temporary table ACC_TK.T#IC_OT_BUY_CARD
(
  ic_main_type VARCHAR2(3),
  ic_sub_type  VARCHAR2(3)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_OT_BUY_CARD to ACC_TK_APP;
grant select on ACC_TK.T#IC_OT_BUY_CARD to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_OT_BUY_CARD to ACC_TK_RPT;

prompt
prompt Creating table T#IC_OT_BUY_RESULT_ACCUMULATE
prompt ============================================
prompt
create global temporary table ACC_TK.T#IC_OT_BUY_RESULT_ACCUMULATE
(
  ic_main_type     VARCHAR2(3),
  ic_sub_type      VARCHAR2(3),
  rpt_date         VARCHAR2(20),
  num              INTEGER,
  ic_sub_type_desc VARCHAR2(30),
  rpt_year         VARCHAR2(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_OT_BUY_RESULT_ACCUMULATE to ACC_TK_APP;
grant select on ACC_TK.T#IC_OT_BUY_RESULT_ACCUMULATE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_OT_BUY_RESULT_ACCUMULATE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_OT_BUY_RESULT_TOTAL
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_OT_BUY_RESULT_TOTAL
(
  ic_main_type     VARCHAR2(3),
  ic_sub_type      VARCHAR2(3),
  rpt_date         VARCHAR2(20),
  num              INTEGER,
  ic_sub_type_desc VARCHAR2(30),
  rpt_year         VARCHAR2(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_OT_BUY_RESULT_TOTAL to ACC_TK_APP;
grant select on ACC_TK.T#IC_OT_BUY_RESULT_TOTAL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_OT_BUY_RESULT_TOTAL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_OT_BUY_YEAR
prompt ===============================
prompt
create global temporary table ACC_TK.T#IC_OT_BUY_YEAR
(
  year VARCHAR2(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_OT_BUY_YEAR to ACC_TK_APP;
grant select on ACC_TK.T#IC_OT_BUY_YEAR to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_OT_BUY_YEAR to ACC_TK_RPT;

prompt
prompt Creating table T#IC_OUT_DETAIL
prompt ==============================
prompt
create global temporary table ACC_TK.T#IC_OUT_DETAIL
(
  reason_id    CHAR(2) not null,
  storage_id   CHAR(4) not null,
  area_id      CHAR(2) not null,
  ic_main_type CHAR(2),
  ic_sub_type  CHAR(2),
  card_money   INTEGER,
  out_num      INTEGER not null
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_OUT_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_OUT_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_OUT_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_PDU_ORDER_FORM
prompt ==================================
prompt
create global temporary table ACC_TK.T#IC_PDU_ORDER_FORM
(
  order_no          CHAR(14) not null,
  card_main_code    VARCHAR2(2),
  card_sub_code     VARCHAR2(2),
  card_per_ava      DATE,
  card_mon          NUMBER(18),
  draw_num          INTEGER,
  fini_pronum       INTEGER,
  surplus_num       INTEGER,
  trashy_num        INTEGER,
  es_samno          VARCHAR2(20),
  line_code         VARCHAR2(2),
  station_code      VARCHAR2(2),
  card_ava_days     VARCHAR2(10),
  exit_line_code    VARCHAR2(2),
  exit_station_code VARCHAR2(2),
  model             VARCHAR2(3)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_PDU_ORDER_FORM to ACC_TK_APP;
grant select on ACC_TK.T#IC_PDU_ORDER_FORM to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_PDU_ORDER_FORM to ACC_TK_RPT;

prompt
prompt Creating table T#IC_PDU_PLAN_ORDER_MAPPING
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_PDU_PLAN_ORDER_MAPPING
(
  plan_bill_no CHAR(12) not null,
  order_no     CHAR(14) not null,
  finish_flag  CHAR(1),
  out_bill_no  CHAR(12),
  out_water_no VARCHAR2(18)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_PDU_PLAN_ORDER_MAPPING to ACC_TK_APP;
grant select on ACC_TK.T#IC_PDU_PLAN_ORDER_MAPPING to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_PDU_PLAN_ORDER_MAPPING to ACC_TK_RPT;

prompt
prompt Creating table T#IC_PDU_PRODUCE_BILL_DETAIL
prompt ===========================================
prompt
create global temporary table ACC_TK.T#IC_PDU_PRODUCE_BILL_DETAIL
(
  bill_no             CHAR(12) not null,
  ic_main_type        VARCHAR2(2),
  ic_sub_type         VARCHAR2(2),
  card_money          INTEGER,
  vaild_date          DATE,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(2),
  draw_quantity       INTEGER,
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  machine_no          VARCHAR2(4),
  es_samno            VARCHAR2(20),
  afc_main_type       VARCHAR2(2),
  afc_sub_type        VARCHAR2(2),
  afc_line_id         VARCHAR2(2),
  afc_station_id      VARCHAR2(2),
  order_no            CHAR(14),
  out_bill_no         CHAR(12),
  out_water_no        VARCHAR2(18),
  card_ava_days       VARCHAR2(10),
  exit_line_id        VARCHAR2(2),
  exit_station_id     VARCHAR2(2),
  modal               VARCHAR2(3),
  afc_exit_line_id    VARCHAR2(2),
  afc_exit_station_id VARCHAR2(2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_PDU_PRODUCE_BILL_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_PDU_PRODUCE_BILL_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_PDU_PRODUCE_BILL_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_PDU_RESULT_DETAIL
prompt =====================================
prompt
create global temporary table ACC_TK.T#IC_PDU_RESULT_DETAIL
(
  bill_no             CHAR(12) not null,
  ic_main_type        VARCHAR2(2),
  ic_sub_type         VARCHAR2(2),
  card_money          INTEGER,
  vaild_date          DATE,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(2),
  draw_quantity       INTEGER,
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  machine_no          VARCHAR2(4),
  es_samno            CHAR(16),
  afc_main_type       CHAR(2),
  afc_sub_type        CHAR(2),
  afc_line_id         VARCHAR2(2),
  afc_station_id      CHAR(2),
  order_no            CHAR(14),
  out_bill_no         CHAR(12),
  out_water_no        VARCHAR2(18),
  card_ava_days       VARCHAR2(10),
  exit_line_id        VARCHAR2(2),
  exit_station_id     VARCHAR2(3),
  modal               VARCHAR2(3),
  afc_exit_line_id    VARCHAR2(2),
  afc_exit_station_id VARCHAR2(2),
  n                   INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_PDU_RESULT_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_PDU_RESULT_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_PDU_RESULT_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_PLAN_CARD_TYPE
prompt ==================================
prompt
create global temporary table ACC_TK.T#IC_PLAN_CARD_TYPE
(
  card_type      VARCHAR2(3),
  card_type_name VARCHAR2(100)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_PLAN_CARD_TYPE to ACC_TK_APP;
grant select on ACC_TK.T#IC_PLAN_CARD_TYPE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_PLAN_CARD_TYPE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_QUERY_CARD_BOX
prompt ==================================
prompt
create global temporary table ACC_TK.T#IC_QUERY_CARD_BOX
(
  box_id VARCHAR2(14)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_QUERY_CARD_BOX to ACC_TK_APP;
grant select on ACC_TK.T#IC_QUERY_CARD_BOX to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_QUERY_CARD_BOX to ACC_TK_RPT;

prompt
prompt Creating table T#IC_QUERY_CARD_RESULT
prompt =====================================
prompt
create global temporary table ACC_TK.T#IC_QUERY_CARD_RESULT
(
  bill_no         VARCHAR2(20),
  reason_id       CHAR(2),
  storage_id      CHAR(4),
  area_id         CHAR(2),
  detail_place    VARCHAR2(50),
  start_box_id    CHAR(14),
  end_box_id      CHAR(14),
  form_maker      VARCHAR2(25),
  verify_person   CHAR(10),
  verify_date     DATE,
  type            INTEGER,
  reason_id_text  VARCHAR2(100),
  storage_id_text VARCHAR2(100),
  area_id_text    VARCHAR2(100),
  water_no        VARCHAR2(18)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_QUERY_CARD_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_QUERY_CARD_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_QUERY_CARD_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_QUERY_UNCHECK_BILL_RESULT
prompt =============================================
prompt
create global temporary table ACC_TK.T#IC_QUERY_UNCHECK_BILL_RESULT
(
  bill_no     CHAR(12) not null,
  bill_name   VARCHAR2(250),
  bill_date   DATE,
  record_flag CHAR(1),
  storage_id  CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_QUERY_UNCHECK_BILL_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_QUERY_UNCHECK_BILL_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_QUERY_UNCHECK_BILL_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_IN_DETAIL_QR
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_IN_DETAIL_QR
(
  water_no         NUMBER(18) not null,
  verify_date      DATE default to_date('2099-01-01','yyyy-mm-dd'),
  in_num           INTEGER not null,
  area_id          CHAR(2) not null,
  detail_place     VARCHAR2(50) not null,
  start_box_id     CHAR(14) not null,
  end_box_id       CHAR(14) not null,
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20),
  valid_date       DATE,
  card_money       INTEGER not null,
  ic_main_type     CHAR(2) not null,
  ic_sub_type      CHAR(2) not null,
  station_id       VARCHAR2(3) not null,
  exit_station_id  VARCHAR2(3),
  model            VARCHAR2(3),
  storage_id       CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_IN_DETAIL_QR to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_IN_DETAIL_QR to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_IN_DETAIL_QR to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_IN_RESULT_QR
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_IN_RESULT_QR
(
  water_no            NUMBER(18),
  verify_date         DATE,
  in_num              INTEGER,
  area_id             CHAR(2),
  area_name           VARCHAR2(30),
  detail_place        VARCHAR2(50),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    VARCHAR2(20),
  end_logical_id      VARCHAR2(20),
  valid_date          DATE,
  card_money          INTEGER,
  ic_main_type        VARCHAR2(2),
  ic_sub_type         VARCHAR2(2),
  ic_sub_desc         VARCHAR2(30),
  station_id          VARCHAR2(3),
  station_name        VARCHAR2(30),
  exit_station_id     VARCHAR2(3),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  storage_id          CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_IN_RESULT_QR to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_IN_RESULT_QR to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_IN_RESULT_QR to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_DIS_PL_RESULT
prompt ============================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RESULT
(
  bill_no                 CHAR(12) not null,
  out_bill_no             CHAR(12),
  distribute_bill_no      CHAR(12),
  form_maker              CHAR(10),
  bill_date               DATE,
  record_flag             CHAR(1),
  verify_date             DATE,
  verify_person           CHAR(10),
  receive_unit            CHAR(10),
  distribute_man          CHAR(10),
  receive_man             CHAR(10),
  remark                  VARCHAR2(400),
  distribute_line_id      VARCHAR2(2),
  distribute_station_id   VARCHAR2(3),
  ic_main_type            CHAR(2),
  ic_sub_type             CHAR(2),
  distribute_quantity     INTEGER,
  card_money              INTEGER,
  vaild_date              DATE,
  restrict_flag           CHAR(1),
  storage_id              CHAR(4),
  area_id                 CHAR(2),
  start_logical_id        VARCHAR2(20),
  end_logical_id          VARCHAR2(20),
  reason_id               CHAR(2),
  box_id                  CHAR(14),
  line_id                 VARCHAR2(2),
  station_id              VARCHAR2(3),
  exit_station_id         VARCHAR2(4),
  exit_stationid_name     VARCHAR2(20),
  model                   VARCHAR2(3),
  mode_name               VARCHAR2(20),
  restrict_flag_name      VARCHAR2(100),
  area_name               CHAR(20),
  chinese_name            VARCHAR2(20),
  distribute_chinese_name VARCHAR2(20),
  ic_sub_desc             VARCHAR2(30),
  section_num             INTEGER default 0
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_DIS_PL_RS_GP
prompt ===========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RS_GP
(
  bill_no                 CHAR(12) not null,
  out_bill_no             CHAR(12),
  distribute_bill_no      CHAR(12),
  form_maker              CHAR(10),
  bill_date               DATE,
  record_flag             CHAR(1),
  verify_date             DATE,
  verify_person           CHAR(10),
  receive_unit            CHAR(10),
  distribute_man          CHAR(10),
  receive_man             CHAR(10),
  remark                  VARCHAR2(400),
  distribute_line_id      VARCHAR2(2),
  distribute_station_id   VARCHAR2(3),
  ic_main_type            CHAR(2),
  ic_sub_type             CHAR(2),
  distribute_quantity     INTEGER,
  card_money              INTEGER,
  vaild_date              DATE,
  restrict_flag           CHAR(1),
  storage_id              CHAR(4),
  area_id                 CHAR(2),
  start_logical_id        VARCHAR2(20),
  end_logical_id          VARCHAR2(20),
  reason_id               CHAR(2),
  box_id                  CHAR(14),
  line_id                 VARCHAR2(2),
  station_id              VARCHAR2(3),
  exit_station_id         VARCHAR2(4),
  exit_stationid_name     VARCHAR2(20),
  model                   VARCHAR2(3),
  mode_name               VARCHAR2(20),
  restrict_flag_name      VARCHAR2(100),
  area_name               CHAR(20),
  chinese_name            VARCHAR2(20),
  distribute_chinese_name VARCHAR2(20),
  ic_sub_desc             VARCHAR2(30),
  section_num             INTEGER default 0
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RS_GP to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RS_GP to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RS_GP to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_DIS_PL_RS_SUM
prompt ============================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RS_SUM
(
  ic_main_type    CHAR(2),
  ic_sub_type     CHAR(2),
  card_money      INTEGER,
  vaild_date      DATE,
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  exit_station_id VARCHAR2(4),
  model           VARCHAR2(3),
  section_num     INTEGER default 0
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RS_SUM to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RS_SUM to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_DIS_PL_RS_SUM to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_DIS_RESULT
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_DIS_RESULT
(
  bill_no                 CHAR(12),
  distribute_plan_bill_no CHAR(12),
  out_bill_no             CHAR(12),
  receive_unit            VARCHAR2(10),
  distribute_man          VARCHAR2(20),
  receive_man             VARCHAR2(20),
  bill_date               DATE,
  verify_date             DATE,
  verify_person           CHAR(10),
  remark                  VARCHAR2(100),
  ic_main_type            CHAR(2),
  ic_sub_type             CHAR(2),
  distribute_quantity     INTEGER,
  card_money              INTEGER,
  valid_date              DATE,
  line_id                 VARCHAR2(2),
  station_id              VARCHAR2(3),
  exit_station_id         VARCHAR2(3),
  exit_stationid_name     VARCHAR2(20),
  model                   VARCHAR2(3),
  mode_name               VARCHAR2(20),
  distribute_line_id      VARCHAR2(2),
  distribute_station_id   VARCHAR2(3),
  detail_place            VARCHAR2(50),
  start_box_id            CHAR(14),
  end_box_id              CHAR(14),
  start_logical_id        VARCHAR2(20),
  end_logical_id          VARCHAR2(20),
  section_num             INTEGER,
  produce_date            DATE,
  chinese_name            VARCHAR2(20),
  distribute_chinese_name VARCHAR2(20),
  ic_sub_desc             VARCHAR2(30),
  reason_id               CHAR(2),
  exit_line_id            VARCHAR2(2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_DIS_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_DIS_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_DIS_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_DIS_RESULT_GP
prompt ============================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_DIS_RESULT_GP
(
  bill_no                 CHAR(12),
  distribute_plan_bill_no CHAR(12),
  out_bill_no             CHAR(12),
  receive_unit            VARCHAR2(10),
  distribute_man          VARCHAR2(20),
  receive_man             VARCHAR2(20),
  bill_date               DATE,
  verify_date             DATE,
  verify_person           CHAR(10),
  remark                  VARCHAR2(100),
  ic_main_type            CHAR(2),
  ic_sub_type             CHAR(2),
  distribute_quantity     INTEGER,
  card_money              INTEGER,
  valid_date              DATE,
  line_id                 VARCHAR2(2),
  station_id              VARCHAR2(3),
  exit_station_id         VARCHAR2(3),
  exit_stationid_name     VARCHAR2(20),
  model                   VARCHAR2(3),
  mode_name               VARCHAR2(20),
  distribute_line_id      VARCHAR2(2),
  distribute_station_id   VARCHAR2(3),
  detail_place            VARCHAR2(50),
  start_box_id            CHAR(14),
  end_box_id              CHAR(14),
  start_logical_id        VARCHAR2(20),
  end_logical_id          VARCHAR2(20),
  section_num             INTEGER,
  produce_date            DATE,
  chinese_name            VARCHAR2(20),
  distribute_chinese_name VARCHAR2(20),
  ic_sub_desc             VARCHAR2(30),
  reason_id               CHAR(2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_DIS_RESULT_GP to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_DIS_RESULT_GP to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_DIS_RESULT_GP to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_PC_RS
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_PC_RS
(
  verify_date         DATE,
  ic_main_type        CHAR(2) not null,
  ic_sub_type         CHAR(2) not null,
  out_num             INTEGER not null,
  vaild_date          DATE,
  card_money          INTEGER,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  detail_place        VARCHAR2(50),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    CHAR(16),
  end_logical_id      CHAR(16),
  section_num         INTEGER,
  produce_date        DATE,
  chinese_name        VARCHAR2(20),
  ic_sub_desc         VARCHAR2(30)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_PC_RS to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_PC_RS to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_PC_RS to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_PC_RS_COMBINE
prompt ============================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_PC_RS_COMBINE
(
  verify_date         DATE,
  ic_main_type        CHAR(2) not null,
  ic_sub_type         CHAR(2) not null,
  out_num             INTEGER not null,
  vaild_date          DATE,
  card_money          INTEGER,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  detail_place        VARCHAR2(50),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    CHAR(16),
  end_logical_id      CHAR(16),
  section_num         INTEGER,
  produce_date        DATE,
  chinese_name        VARCHAR2(20),
  ic_sub_desc         VARCHAR2(30),
  n                   INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_PC_RS_COMBINE to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_PC_RS_COMBINE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_PC_RS_COMBINE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_PC_RS_END
prompt ========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_PC_RS_END
(
  verify_date         DATE,
  ic_main_type        CHAR(2) not null,
  ic_sub_type         CHAR(2) not null,
  out_num             INTEGER not null,
  vaild_date          DATE,
  card_money          INTEGER,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  detail_place        VARCHAR2(50),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    CHAR(16),
  end_logical_id      CHAR(16),
  section_num         INTEGER,
  produce_date        DATE,
  chinese_name        VARCHAR2(20),
  ic_sub_desc         VARCHAR2(30),
  n                   INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_PC_RS_END to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_PC_RS_END to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_PC_RS_END to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_PC_RS_START
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_PC_RS_START
(
  verify_date         DATE,
  ic_main_type        CHAR(2) not null,
  ic_sub_type         CHAR(2) not null,
  out_num             INTEGER not null,
  vaild_date          DATE,
  card_money          INTEGER,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  detail_place        VARCHAR2(50),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    CHAR(16),
  end_logical_id      CHAR(16),
  section_num         INTEGER,
  produce_date        DATE,
  chinese_name        VARCHAR2(20),
  ic_sub_desc         VARCHAR2(30),
  n                   INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_PC_RS_START to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_PC_RS_START to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_PC_RS_START to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_QC_RS
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_QC_RS
(
  verify_date         DATE,
  ic_main_type        CHAR(2) not null,
  ic_sub_type         CHAR(2) not null,
  out_num             INTEGER not null,
  vaild_date          DATE,
  card_money          INTEGER,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  detail_place        VARCHAR2(50),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    VARCHAR2(20),
  end_logical_id      VARCHAR2(20),
  section_num         INTEGER,
  produce_date        DATE,
  chinese_name        VARCHAR2(20),
  ic_sub_desc         VARCHAR2(30)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_QC_RS to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_QC_RS to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_QC_RS to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_QC_RS_COMBINE
prompt ============================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_QC_RS_COMBINE
(
  verify_date         DATE,
  ic_main_type        CHAR(2) not null,
  ic_sub_type         CHAR(2) not null,
  out_num             INTEGER not null,
  vaild_date          DATE,
  card_money          INTEGER,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  detail_place        VARCHAR2(50),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    VARCHAR2(20),
  end_logical_id      VARCHAR2(20),
  section_num         INTEGER,
  produce_date        DATE,
  chinese_name        VARCHAR2(20),
  ic_sub_desc         VARCHAR2(30),
  n                   INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_QC_RS_COMBINE to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_QC_RS_COMBINE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_QC_RS_COMBINE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_QC_RS_END
prompt ========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_QC_RS_END
(
  verify_date         DATE,
  ic_main_type        CHAR(2) not null,
  ic_sub_type         CHAR(2) not null,
  out_num             INTEGER not null,
  vaild_date          DATE,
  card_money          INTEGER,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  detail_place        VARCHAR2(50),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    VARCHAR2(20),
  end_logical_id      VARCHAR2(20),
  section_num         INTEGER,
  produce_date        DATE,
  chinese_name        VARCHAR2(20),
  ic_sub_desc         VARCHAR2(30),
  n                   INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_QC_RS_END to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_QC_RS_END to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_QC_RS_END to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BL_OUT_QC_RS_START
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BL_OUT_QC_RS_START
(
  verify_date         DATE,
  ic_main_type        CHAR(2) not null,
  ic_sub_type         CHAR(2) not null,
  out_num             INTEGER not null,
  vaild_date          DATE,
  card_money          INTEGER,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  detail_place        VARCHAR2(50),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    VARCHAR2(20),
  end_logical_id      VARCHAR2(20),
  section_num         INTEGER,
  produce_date        DATE,
  chinese_name        VARCHAR2(20),
  ic_sub_desc         VARCHAR2(30),
  n                   INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_QC_RS_START to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BL_OUT_QC_RS_START to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BL_OUT_QC_RS_START to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BORROW_LEND_BILL
prompt ========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BORROW_LEND_BILL
(
  bill_no            CHAR(12),
  lend_water_no      INTEGER,
  storage_id         VARCHAR2(4),
  area_id            VARCHAR2(4),
  ic_main_type       VARCHAR2(4),
  ic_sub_type        VARCHAR2(4),
  unit_id            VARCHAR2(3),
  lend_quantity      INTEGER,
  return_flag        VARCHAR2(1),
  verify_date        DATE,
  return_quantity    INTEGER,
  not_quantity       INTEGER,
  lost_quantity      INTEGER,
  return_verify_date DATE,
  type               VARCHAR2(1),
  name_storage_id    VARCHAR2(50),
  name_area_id       VARCHAR2(50),
  name_ic_main_type  VARCHAR2(50),
  name_ic_sub_type   VARCHAR2(50),
  name_unit_id       VARCHAR2(50),
  name_return_flag   VARCHAR2(50)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BORROW_LEND_BILL to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BORROW_LEND_BILL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BORROW_LEND_BILL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BORROW_LEND_BILL_TEMP
prompt =============================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BORROW_LEND_BILL_TEMP
(
  out_bill_no   CHAR(12),
  lend_water_no INTEGER,
  storage_id    VARCHAR2(4),
  area_id       VARCHAR2(4),
  ic_main_type  VARCHAR2(4),
  ic_sub_type   VARCHAR2(4),
  lend_quantity INTEGER,
  verify_date   DATE
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BORROW_LEND_BILL_TEMP to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BORROW_LEND_BILL_TEMP to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BORROW_LEND_BILL_TEMP to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BORROW_RESULT
prompt =====================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BORROW_RESULT
(
  bill_no            CHAR(12),
  lend_water_no      INTEGER,
  storage_id         VARCHAR2(4),
  area_id            VARCHAR2(4),
  ic_main_type       VARCHAR2(4),
  ic_sub_type        VARCHAR2(4),
  unit_id            VARCHAR2(3),
  lend_quantity      INTEGER,
  return_flag        VARCHAR2(1),
  verify_date        DATE,
  return_quantity    INTEGER,
  not_quantity       INTEGER,
  lost_quantity      INTEGER,
  return_verify_date DATE,
  type               VARCHAR2(1),
  name_storage_id    VARCHAR2(50),
  name_area_id       VARCHAR2(50),
  name_ic_main_type  VARCHAR2(50),
  name_ic_sub_type   VARCHAR2(50),
  name_unit_id       VARCHAR2(50),
  name_return_flag   VARCHAR2(50)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BORROW_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BORROW_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BORROW_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BORROW_RETURN_BILL
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BORROW_RETURN_BILL
(
  lend_bill_no    CHAR(12) not null,
  lend_water_no   INTEGER,
  ic_main_type    CHAR(2),
  ic_sub_type     CHAR(2),
  return_quantity INTEGER,
  not_quantity    INTEGER,
  lost_quantity   INTEGER,
  verify_date     DATE
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BORROW_RETURN_BILL to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BORROW_RETURN_BILL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BORROW_RETURN_BILL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_BORROW_RETURN_NAME
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_BORROW_RETURN_NAME
(
  return_flag      VARCHAR2(1),
  name_return_flag VARCHAR2(50)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BORROW_RETURN_NAME to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_BORROW_RETURN_NAME to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_BORROW_RETURN_NAME to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_CHECK_RPT
prompt =================================
prompt
create global temporary table ACC_TK.T#IC_RCT_CHECK_RPT
(
  areaid      CHAR(2),
  area_name   VARCHAR2(30),
  maintype    CHAR(2),
  subtype     CHAR(2),
  typename    VARCHAR2(20),
  check_date  VARCHAR2(16),
  sys_amount  INTEGER,
  real_amount INTEGER,
  cardmoney   INTEGER,
  storage_id  CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_CHECK_RPT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_CHECK_RPT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_CHECK_RPT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_CT_DETAIL
prompt =================================
prompt
create global temporary table ACC_TK.T#IC_RCT_CT_DETAIL
(
  storage_id       VARCHAR2(5),
  area_id          VARCHAR2(5),
  area_name        VARCHAR2(30),
  ticket_main_type VARCHAR2(2),
  ticket_sub_type  VARCHAR2(5),
  ticket_sub_des   VARCHAR2(30),
  card_money       INTEGER,
  valid_date       VARCHAR2(12),
  station_id       VARCHAR2(4),
  exit_station_id  VARCHAR2(4),
  model            VARCHAR2(3),
  out_bill_no      VARCHAR2(20),
  reason_id        VARCHAR2(5),
  reason_des       VARCHAR2(20),
  num              INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_CT_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_CT_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_CT_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_CT_IN_RESULT
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_RCT_CT_IN_RESULT
(
  storage_id           VARCHAR2(5),
  area_id              VARCHAR2(5),
  area_name            VARCHAR2(30),
  ticket_main_type     VARCHAR2(2),
  ticket_sub_type      VARCHAR2(5),
  ticket_sub_des       VARCHAR2(30),
  card_money           INTEGER,
  valid_date           VARCHAR2(12),
  station_id           VARCHAR2(4),
  chinese_name         VARCHAR2(16),
  station_id_reclaim   VARCHAR2(4),
  station_reclaim_name VARCHAR2(20),
  exit_station_id      VARCHAR2(4),
  exit_stationid_name  VARCHAR2(20),
  model                VARCHAR2(3),
  mode_name            VARCHAR2(20),
  in_bill_no           VARCHAR2(20),
  reason_id            VARCHAR2(5),
  reason_des           VARCHAR2(20),
  num                  INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_CT_IN_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_CT_IN_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_CT_IN_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_CT_RESULT
prompt =================================
prompt
create global temporary table ACC_TK.T#IC_RCT_CT_RESULT
(
  storage_id          VARCHAR2(5),
  area_id             VARCHAR2(5),
  area_name           VARCHAR2(30),
  ticket_main_type    VARCHAR2(2),
  ticket_sub_type     VARCHAR2(5),
  ticket_sub_des      VARCHAR2(30),
  card_money          INTEGER,
  valid_date          VARCHAR2(12),
  station_id          VARCHAR2(4),
  station_name        VARCHAR2(16),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  out_bill_no         VARCHAR2(20),
  reason_id           VARCHAR2(5),
  reason_des          VARCHAR2(20),
  num                 INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_CT_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_CT_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_CT_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_IN_EXCHANGE_RESULT
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_IN_EXCHANGE_RESULT
(
  index1           NUMBER(18),
  billno           VARCHAR2(12),
  reason_des       VARCHAR2(30),
  area_id          VARCHAR2(2),
  area_name        VARCHAR2(30),
  ticket_main_type VARCHAR2(2),
  ticket_sub_type  VARCHAR2(5),
  ticket_sub_des   VARCHAR2(30),
  hand_man         VARCHAR2(50),
  ticket_man       VARCHAR2(20),
  num              INTEGER,
  storage_id       CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_IN_EXCHANGE_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_IN_EXCHANGE_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_IN_EXCHANGE_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_OUTINDIFF_RESULT
prompt ========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_OUTINDIFF_RESULT
(
  area_id_name   VARCHAR2(20),
  card_type_name VARCHAR2(30),
  bill_no        VARCHAR2(12),
  draw_quantity  INTEGER,
  real_quantity  INTEGER,
  err_quantity   INTEGER,
  adjust_id      CHAR(2),
  adjust_reason  VARCHAR2(20),
  operator       VARCHAR2(10),
  verify_date    VARCHAR2(8),
  storage_id     VARCHAR2(4),
  area_id        VARCHAR2(4),
  ic_main_type   VARCHAR2(2),
  ic_sub_type    VARCHAR2(2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUTINDIFF_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_OUTINDIFF_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUTINDIFF_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_OUTINDIFF_STORE_IN
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_OUTINDIFF_STORE_IN
(
  bill_no      VARCHAR2(12),
  storage_id   VARCHAR2(4),
  area_id      VARCHAR2(4),
  ic_main_type VARCHAR2(2),
  ic_sub_type  VARCHAR2(2),
  num          INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUTINDIFF_STORE_IN to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_OUTINDIFF_STORE_IN to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUTINDIFF_STORE_IN to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_OUTINDIFF_STORE_OUT
prompt ===========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_OUTINDIFF_STORE_OUT
(
  bill_no      VARCHAR2(12),
  storage_id   VARCHAR2(4),
  area_id      VARCHAR2(4),
  ic_main_type VARCHAR2(2),
  ic_sub_type  VARCHAR2(2),
  num          INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUTINDIFF_STORE_OUT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_OUTINDIFF_STORE_OUT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUTINDIFF_STORE_OUT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_OUTINDIFF_TMP_RESULT
prompt ============================================
prompt
create global temporary table ACC_TK.T#IC_RCT_OUTINDIFF_TMP_RESULT
(
  storage_id  VARCHAR2(4),
  area_id     VARCHAR2(4),
  area_name   VARCHAR2(30),
  maintype    VARCHAR2(2),
  subtype     VARCHAR2(2),
  typename    VARCHAR2(30),
  bill_no     VARCHAR2(12),
  outnum      INTEGER,
  realnum     INTEGER,
  errnum      INTEGER,
  adjust_id   CHAR(2),
  reason      VARCHAR2(20),
  operator    VARCHAR2(10),
  verify_date VARCHAR2(8)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUTINDIFF_TMP_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_OUTINDIFF_TMP_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUTINDIFF_TMP_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_OUTINDIFF_TOTAL
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_RCT_OUTINDIFF_TOTAL
(
  begin_day      VARCHAR2(10),
  end_day        VARCHAR2(10),
  operator_name  VARCHAR2(16),
  storage_name   VARCHAR2(30),
  area_id_name   VARCHAR2(20),
  card_type_name VARCHAR2(30),
  bill_no        VARCHAR2(12),
  draw_quantity  INTEGER,
  real_quantity  INTEGER,
  err_quantity   INTEGER,
  adjust_reason  VARCHAR2(20),
  operator       VARCHAR2(10),
  verify_date    VARCHAR2(8),
  storage_id     VARCHAR2(4),
  area_id        VARCHAR2(4),
  ic_main_type   VARCHAR2(2),
  ic_sub_type    VARCHAR2(2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUTINDIFF_TOTAL to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_OUTINDIFF_TOTAL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUTINDIFF_TOTAL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_OUT_EXCHANGE_RESULT
prompt ===========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_OUT_EXCHANGE_RESULT
(
  index1           NUMBER(18),
  billno           VARCHAR2(12),
  reason_des       VARCHAR2(30),
  area_id          VARCHAR2(2),
  area_name        VARCHAR2(30),
  ticket_main_type VARCHAR2(2),
  ticket_sub_type  VARCHAR2(5),
  ticket_sub_des   VARCHAR2(30),
  hand_man         VARCHAR2(50),
  ticket_man       VARCHAR2(20),
  num              INTEGER,
  storage_id       CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUT_EXCHANGE_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_OUT_EXCHANGE_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_OUT_EXCHANGE_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_PRODUCE
prompt ===============================
prompt
create global temporary table ACC_TK.T#IC_RCT_PRODUCE
(
  cardmaintype CHAR(2),
  cardsubtype  CHAR(2),
  typename     VARCHAR2(20),
  make_count1  INTEGER,
  make_count2  INTEGER,
  make_count3  INTEGER,
  con_count1   INTEGER,
  con_count2   INTEGER,
  call_count1  INTEGER,
  call_count2  INTEGER,
  call_count3  INTEGER,
  wash_count   INTEGER,
  make_count4  INTEGER,
  storage_id   CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_PRODUCE to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_PRODUCE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_PRODUCE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_PRODUCE_WASH
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_RCT_PRODUCE_WASH
(
  billno     VARCHAR2(12),
  storage_id VARCHAR2(4),
  maintype   VARCHAR2(2),
  subtype    VARCHAR2(2),
  typename   VARCHAR2(16),
  num        INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_PRODUCE_WASH to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_PRODUCE_WASH to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_PRODUCE_WASH to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_SIGN_CARD_PRODUCE
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_SIGN_CARD_PRODUCE
(
  produce_datetime VARCHAR2(8),
  ic_main_type     VARCHAR2(2),
  ic_sub_type      VARCHAR2(2),
  ic_sub_desc      VARCHAR2(30),
  apply_name       VARCHAR2(8),
  apply_sex_code   VARCHAR2(1),
  apply_sex        VARCHAR2(2),
  tel_no           VARCHAR2(16),
  identity_id      CHAR(18),
  logical_id       VARCHAR2(20),
  remark           VARCHAR2(256)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_SIGN_CARD_PRODUCE to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_SIGN_CARD_PRODUCE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_SIGN_CARD_PRODUCE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGELIST_DEL
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGELIST_DEL
(
  card_main_type VARCHAR2(2),
  card_id        VARCHAR2(2),
  card_money     INTEGER,
  num            INTEGER,
  storage_id     CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_DEL to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGELIST_DEL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_DEL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGELIST_IN
prompt ======================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGELIST_IN
(
  bill_no      VARCHAR2(12),
  area_id      VARCHAR2(4),
  ic_main_type VARCHAR2(4),
  ic_sub_type  VARCHAR2(4),
  card_money   INTEGER,
  in_num       INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_IN to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGELIST_IN to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_IN to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGELIST_LEND
prompt ========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGELIST_LEND
(
  ic_main_type VARCHAR2(4),
  ic_sub_type  VARCHAR2(4),
  card_money   INTEGER,
  out_num      INTEGER,
  storage_id   CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_LEND to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGELIST_LEND to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_LEND to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGELIST_REMARK_RS
prompt =============================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGELIST_REMARK_RS
(
  storage_id VARCHAR2(4),
  input_date DATE,
  remark     VARCHAR2(200)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_REMARK_RS to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGELIST_REMARK_RS to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_REMARK_RS to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGELIST_RESULT
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGELIST_RESULT
(
  storage_id     VARCHAR2(4),
  area_id        VARCHAR2(2),
  area_name      VARCHAR2(30),
  card_main_type VARCHAR2(2),
  card_id        VARCHAR2(2),
  card_name      VARCHAR2(30),
  card_money     INTEGER,
  num            INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGELIST_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGELIST_RETURN
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGELIST_RETURN
(
  ic_main_type VARCHAR2(4),
  ic_sub_type  VARCHAR2(4),
  card_money   INTEGER,
  in_num       INTEGER,
  storage_id   CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_RETURN to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGELIST_RETURN to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_RETURN to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGELIST_TEMP
prompt ========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGELIST_TEMP
(
  storage_id     VARCHAR2(4),
  area_id        VARCHAR2(3),
  card_main_type VARCHAR2(2),
  card_id        VARCHAR2(2),
  card_money     INTEGER,
  num            INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_TEMP to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGELIST_TEMP to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_TEMP to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGELIST_TOTAL
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGELIST_TOTAL
(
  ic_main_type     VARCHAR2(4),
  ic_sub_type      VARCHAR2(4),
  ic_sub_type_desc VARCHAR2(50),
  card_money       INTEGER,
  total_num        INTEGER,
  storage_id       CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_TOTAL to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGELIST_TOTAL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGELIST_TOTAL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGE_LIST_SUB_RS
prompt ===========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGE_LIST_SUB_RS
(
  storage_id          VARCHAR2(4),
  area_id             VARCHAR2(30),
  area_name           VARCHAR2(30),
  main_type           VARCHAR2(2),
  sub_type            VARCHAR2(2),
  card_name           VARCHAR2(30),
  card_money          NUMBER,
  valid_date          VARCHAR2(30),
  station_id          VARCHAR2(4),
  station_name        VARCHAR2(20),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  model_name          VARCHAR2(20),
  num                 NUMBER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGE_LIST_SUB_RS to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGE_LIST_SUB_RS to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGE_LIST_SUB_RS to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGE_RESULT
prompt ======================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGE_RESULT
(
  storage_id           VARCHAR2(4),
  area_id              VARCHAR2(2),
  area_name            VARCHAR2(20),
  ic_main_type         VARCHAR2(2),
  ic_sub_type          VARCHAR2(2),
  ic_sub_desc          VARCHAR2(30),
  card_money           INTEGER,
  valid_date           VARCHAR2(12),
  station_id           VARCHAR2(4),
  station_name         VARCHAR2(16),
  exit_station_id      VARCHAR2(4),
  exit_stationid_name  VARCHAR2(20),
  model                VARCHAR2(3),
  model_name           VARCHAR2(20),
  last_total_quantity  FLOAT,
  today_in_quantity    FLOAT,
  today_out_quantity   FLOAT,
  today_total_quantity FLOAT
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGE_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGE_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGE_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGE_RESULT_GP
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGE_RESULT_GP
(
  storage_id           VARCHAR2(4),
  area_id              VARCHAR2(2),
  area_name            VARCHAR2(20),
  ic_main_type         VARCHAR2(2),
  ic_sub_type          VARCHAR2(2),
  ic_sub_desc          VARCHAR2(30),
  card_money           NUMBER,
  valid_date           VARCHAR2(12),
  station_id           VARCHAR2(4),
  station_name         VARCHAR2(16),
  exit_station_id      VARCHAR2(4),
  exit_stationid_name  VARCHAR2(20),
  model                VARCHAR2(3),
  model_name           VARCHAR2(20),
  last_total_quantity  FLOAT,
  today_in_quantity    FLOAT,
  today_out_quantity   FLOAT,
  today_total_quantity FLOAT
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGE_RESULT_GP to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGE_RESULT_GP to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGE_RESULT_GP to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RCT_STORAGE_TMP_RESULT
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_RCT_STORAGE_TMP_RESULT
(
  storage_id           VARCHAR2(4),
  area_id              VARCHAR2(2),
  area_name            VARCHAR2(20),
  ic_main_type         VARCHAR2(2),
  ic_sub_type          VARCHAR2(2),
  ic_sub_desc          VARCHAR2(30),
  last_total_quantity  FLOAT,
  today_in_quantity    FLOAT,
  today_out_quantity   FLOAT,
  today_total_quantity FLOAT
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGE_TMP_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RCT_STORAGE_TMP_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RCT_STORAGE_TMP_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RECLAIM_LINE_DETAIL
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_RECLAIM_LINE_DETAIL
(
  line_id      INTEGER,
  station_id   INTEGER,
  station_name VARCHAR2(50),
  coln_code    VARCHAR2(10),
  coln_name    VARCHAR2(50),
  num          INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RECLAIM_LINE_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_RECLAIM_LINE_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RECLAIM_LINE_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RECLAIM_LINE_RESULT
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_RECLAIM_LINE_RESULT
(
  line_id   INTEGER,
  line_name VARCHAR2(20),
  coln_code VARCHAR2(10),
  coln_name VARCHAR2(50),
  num       INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RECLAIM_LINE_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RECLAIM_LINE_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RECLAIM_LINE_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RESERVE
prompt ===========================
prompt
create global temporary table ACC_TK.T#IC_RESERVE
(
  dept_id       NUMBER(38),
  tickettype_id NUMBER(38),
  ticketvalue   NUMBER(20,2),
  reserve_num   INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RESERVE to ACC_TK_APP;
grant select on ACC_TK.T#IC_RESERVE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RESERVE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_RESULT
prompt ==========================
prompt
create global temporary table ACC_TK.T#IC_RESULT
(
  dept_id       NUMBER(38),
  tickettype_id NUMBER(38),
  ticketvalue   NUMBER(20,2),
  currenttotal  NUMBER(20,2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_BUY_REMARK_RESULT
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_BUY_REMARK_RESULT
(
  rpt_date DATE,
  remark   VARCHAR2(200)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_BUY_REMARK_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_BUY_REMARK_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_BUY_REMARK_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_BUY_RESULT
prompt ==================================
prompt
create global temporary table ACC_TK.T#IC_ROT_BUY_RESULT
(
  ic_main_type     VARCHAR2(3),
  ic_sub_type      VARCHAR2(3),
  rpt_date         VARCHAR2(24),
  num              INTEGER,
  ic_sub_type_desc VARCHAR2(30),
  rpt_year         VARCHAR2(4),
  storage_id       CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_BUY_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_BUY_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_BUY_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_ES_PRODUCE_RESULT
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_ES_PRODUCE_RESULT
(
  es_id            VARCHAR2(10),
  es_desc          VARCHAR2(100),
  es_worktype_id   VARCHAR2(5),
  es_worktype_desc VARCHAR2(100),
  card_main_type   VARCHAR2(2),
  card_sub_type    VARCHAR2(2),
  sub_type_desc    VARCHAR2(100),
  fini_pronum      INTEGER,
  trashy_num       INTEGER,
  trashy_rate      NUMBER(10,3),
  operator_id      VARCHAR2(10),
  storage_id       CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_ES_PRODUCE_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_ES_PRODUCE_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_ES_PRODUCE_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_ES_PRODUCE_RPT
prompt ======================================
prompt
create global temporary table ACC_TK.T#IC_ROT_ES_PRODUCE_RPT
(
  es_id            VARCHAR2(10),
  es_desc          VARCHAR2(100),
  es_worktype_id   VARCHAR2(2),
  es_worktype_desc VARCHAR2(100),
  card_main_type   VARCHAR2(2),
  card_sub_type    VARCHAR2(2),
  sub_type_desc    VARCHAR2(100),
  fini_pronum      INTEGER,
  trashy_num       INTEGER,
  operator_id      VARCHAR2(10),
  storage_id       CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_ES_PRODUCE_RPT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_ES_PRODUCE_RPT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_ES_PRODUCE_RPT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_HOLD_NEW
prompt ================================
prompt
create global temporary table ACC_TK.T#IC_ROT_HOLD_NEW
(
  year_month VARCHAR2(8),
  new_num    INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_NEW to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_HOLD_NEW to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_NEW to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_HOLD_NEW_TOTAL
prompt ======================================
prompt
create global temporary table ACC_TK.T#IC_ROT_HOLD_NEW_TOTAL
(
  year_month VARCHAR2(8),
  new_num    INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_NEW_TOTAL to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_HOLD_NEW_TOTAL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_NEW_TOTAL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_HOLD_RESULT
prompt ===================================
prompt
create global temporary table ACC_TK.T#IC_ROT_HOLD_RESULT
(
  year_month  VARCHAR2(8),
  new_num     INTEGER,
  store_num   INTEGER,
  reserve_num INTEGER,
  month_name  VARCHAR2(50),
  storage_id  CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_HOLD_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_HOLD_STORE_IN
prompt =====================================
prompt
create global temporary table ACC_TK.T#IC_ROT_HOLD_STORE_IN
(
  year_month VARCHAR2(8),
  in_num     INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_IN to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_HOLD_STORE_IN to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_IN to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_HOLD_STORE_IN_NOT
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_HOLD_STORE_IN_NOT
(
  year_month VARCHAR2(8),
  in_num     INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_IN_NOT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_HOLD_STORE_IN_NOT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_IN_NOT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_HOLD_STORE_IN_TOTAL
prompt ===========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_HOLD_STORE_IN_TOTAL
(
  year_month VARCHAR2(8),
  in_num     INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_IN_TOTAL to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_HOLD_STORE_IN_TOTAL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_IN_TOTAL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_HOLD_STORE_MANU
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_ROT_HOLD_STORE_MANU
(
  year_month  VARCHAR2(8),
  num_station INTEGER,
  num_store   INTEGER,
  num_income  INTEGER,
  num_other   INTEGER,
  storage_id  CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_MANU to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_HOLD_STORE_MANU to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_MANU to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_HOLD_STORE_OUT
prompt ======================================
prompt
create global temporary table ACC_TK.T#IC_ROT_HOLD_STORE_OUT
(
  year_month VARCHAR2(8),
  out_num    INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_OUT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_HOLD_STORE_OUT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_OUT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_HOLD_STORE_OUT_TOTAL
prompt ============================================
prompt
create global temporary table ACC_TK.T#IC_ROT_HOLD_STORE_OUT_TOTAL
(
  year_month VARCHAR2(8),
  out_num    INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_OUT_TOTAL to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_HOLD_STORE_OUT_TOTAL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_OUT_TOTAL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_HOLD_STORE_TOTAL
prompt ========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_HOLD_STORE_TOTAL
(
  year_month VARCHAR2(8),
  num        INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_TOTAL to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_HOLD_STORE_TOTAL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_STORE_TOTAL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_HOLD_SUM_TEMP
prompt =====================================
prompt
create global temporary table ACC_TK.T#IC_ROT_HOLD_SUM_TEMP
(
  value_name VARCHAR2(30),
  sum_num    INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_SUM_TEMP to ACC_TK_APP;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_HOLD_SUM_TEMP to ACC_TK_DEV;

prompt
prompt Creating table T#IC_ROT_LOST_RESULT
prompt ===================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_RESULT
(
  year_month       VARCHAR2(8),
  num_last         INTEGER,
  num_current      INTEGER,
  num_useless      INTEGER default 0,
  num_new          INTEGER default 0,
  num_sell         INTEGER default 0,
  num_loss         INTEGER default 0,
  num_loss_rate    NUMBER(10,2) default 0.00,
  num_useless_rate NUMBER(10,2) default 0.0,
  season           INTEGER default 0,
  year_month_desc  VARCHAR2(50),
  storage_id       CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_RESULT_SEASON
prompt ==========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_RESULT_SEASON
(
  year_month       VARCHAR2(8),
  num_last         INTEGER default 0,
  num_current      INTEGER default 0,
  num_useless      INTEGER default 0,
  num_new          INTEGER default 0,
  num_sell         INTEGER default 0,
  num_loss         INTEGER default 0,
  num_loss_rate    NUMBER(10,2) default 0.00,
  num_useless_rate NUMBER(10,2) default 0.0,
  season           INTEGER default 0,
  storage_id       CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_RESULT_SEASON to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_RESULT_SEASON to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_RESULT_SEASON to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_STORE_IN
prompt =====================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_STORE_IN
(
  year_month VARCHAR2(8),
  in_num     INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_IN to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_STORE_IN to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_IN to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_STORE_IN_NOT
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_STORE_IN_NOT
(
  year_month VARCHAR2(8),
  in_num     INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_IN_NOT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_STORE_IN_NOT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_IN_NOT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_STORE_IN_TOTAL
prompt ===========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_STORE_IN_TOTAL
(
  year_month VARCHAR2(8),
  in_num     INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_IN_TOTAL to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_STORE_IN_TOTAL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_IN_TOTAL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_STORE_MANU
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_STORE_MANU
(
  year_month  VARCHAR2(8),
  num_station INTEGER,
  num_store   INTEGER,
  num_income  INTEGER,
  num_other   INTEGER,
  storage_id  CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_MANU to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_STORE_MANU to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_MANU to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_STORE_MANU_1
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_STORE_MANU_1
(
  year_month  VARCHAR2(8),
  num_useless INTEGER,
  num_new     INTEGER,
  storage_id  CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_MANU_1 to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_STORE_MANU_1 to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_MANU_1 to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_STORE_OUT
prompt ======================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_STORE_OUT
(
  year_month VARCHAR2(8),
  out_num    INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_OUT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_STORE_OUT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_OUT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_STORE_OUTPUT
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_STORE_OUTPUT
(
  year_month  VARCHAR2(8),
  num_last    INTEGER,
  num_current INTEGER,
  storage_id  CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_OUTPUT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_STORE_OUTPUT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_OUTPUT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_STORE_OUT_TOTAL
prompt ============================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_STORE_OUT_TOTAL
(
  year_month VARCHAR2(8),
  out_num    INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_OUT_TOTAL to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_STORE_OUT_TOTAL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_OUT_TOTAL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_STORE_SELL
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_STORE_SELL
(
  year_month VARCHAR2(8),
  num_sell   INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_SELL to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_STORE_SELL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_SELL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_STORE_SELL_TOTAL
prompt =============================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_STORE_SELL_TOTAL
(
  year_month VARCHAR2(8),
  num_sell   INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_SELL_TOTAL to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_STORE_SELL_TOTAL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_SELL_TOTAL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_STORE_TOTAL
prompt ========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_STORE_TOTAL
(
  year_month VARCHAR2(8),
  num        INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_TOTAL to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_LOST_STORE_TOTAL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_STORE_TOTAL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_LOST_SUM_TEMP
prompt =====================================
prompt
create global temporary table ACC_TK.T#IC_ROT_LOST_SUM_TEMP
(
  value_name VARCHAR2(30),
  sum_num    INTEGER,
  storage_id CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_SUM_TEMP to ACC_TK_APP;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_LOST_SUM_TEMP to ACC_TK_DEV;

prompt
prompt Creating table T#IC_ROT_MB_PRODUCE_RESULT
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_MB_PRODUCE_RESULT
(
  indexid          VARCHAR2(6),
  indexidstr       VARCHAR2(8),
  order_no         CHAR(14),
  es_worktype_id   VARCHAR2(2),
  es_worktype_desc VARCHAR2(100),
  draw_num         INTEGER,
  fini_pronum      INTEGER,
  surplus_num      INTEGER,
  trashy_num       INTEGER,
  hdl_flag         VARCHAR2(1),
  hdl_flag_desc    VARCHAR2(100),
  achieve_date     VARCHAR2(8),
  order_memo       VARCHAR2(256)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_MB_PRODUCE_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_MB_PRODUCE_RPT
prompt ======================================
prompt
create global temporary table ACC_TK.T#IC_ROT_MB_PRODUCE_RPT
(
  order_no         CHAR(14) not null,
  es_worktype_id   VARCHAR2(2),
  es_worktype_desc VARCHAR2(100),
  draw_num         INTEGER,
  fini_pronum      INTEGER,
  surplus_num      INTEGER,
  trashy_num       INTEGER,
  hdl_flag         VARCHAR2(1) not null,
  hdl_flag_desc    VARCHAR2(100),
  achieve_date     VARCHAR2(8),
  order_memo       VARCHAR2(256)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_MB_PRODUCE_RPT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_SALE_HIS
prompt ================================
prompt
create global temporary table ACC_TK.T#IC_ROT_SALE_HIS
(
  report_year      VARCHAR2(4),
  month_id         FLOAT,
  report_month     VARCHAR2(20),
  line_id          NUMBER(38),
  line_name        VARCHAR2(10),
  ticket_type_id   VARCHAR2(4),
  ticket_type_name VARCHAR2(20),
  sold_num         NUMBER(20,2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_SALE_HIS to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_SALE_HIS to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_SALE_HIS to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_SALE_RETURN
prompt ===================================
prompt
create global temporary table ACC_TK.T#IC_ROT_SALE_RETURN
(
  report_year      VARCHAR2(4),
  month_id         FLOAT,
  report_month     VARCHAR2(20),
  line_id          NUMBER(38),
  line_name        VARCHAR2(10),
  ticket_type_id   VARCHAR2(4),
  ticket_type_name VARCHAR2(20),
  sold_num         NUMBER(20,2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_SALE_RETURN to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_SALE_RETURN to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_SALE_RETURN to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_SALE_TEMP
prompt =================================
prompt
create global temporary table ACC_TK.T#IC_ROT_SALE_TEMP
(
  report_year    VARCHAR2(4),
  month_id       FLOAT,
  line_id        VARCHAR2(2),
  station_id     VARCHAR2(4),
  ticket_type_id VARCHAR2(4),
  sold_num       NUMBER(20,2),
  sold_num_sjt   NUMBER(20,2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_SALE_TEMP to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_SALE_TEMP to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_SALE_TEMP to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_TK_PRODUCE_RESULT
prompt =========================================
prompt
create global temporary table ACC_TK.T#IC_ROT_TK_PRODUCE_RESULT
(
  indexid          VARCHAR2(6),
  indexidstr       VARCHAR2(8),
  bill_date        VARCHAR2(8),
  card_main_type   VARCHAR2(2),
  card_sub_type    VARCHAR2(2),
  sub_type_desc    VARCHAR2(100),
  es_worktype_id   VARCHAR2(2),
  es_worktype_desc VARCHAR2(100),
  order_no         VARCHAR2(800),
  deposit_amnt     VARCHAR2(6),
  card_money       INTEGER,
  vaild_date       VARCHAR2(8),
  fini_pronum      INTEGER,
  man_useless_num  INTEGER,
  es_useless_num   INTEGER,
  real_balance     INTEGER,
  trashy_rate      NUMBER(10,3),
  operator_id      VARCHAR2(10),
  storage_id       VARCHAR2(4),
  es_id            VARCHAR2(10),
  es_desc          VARCHAR2(100)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_TK_PRODUCE_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_TK_PRODUCE_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_TK_PRODUCE_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_ROT_TK_PRODUCE_RPT
prompt ======================================
prompt
create global temporary table ACC_TK.T#IC_ROT_TK_PRODUCE_RPT
(
  indexid          VARCHAR2(6),
  bill_date        VARCHAR2(8),
  card_main_type   VARCHAR2(2),
  card_sub_type    VARCHAR2(2),
  sub_type_desc    VARCHAR2(100),
  es_worktype_id   VARCHAR2(2),
  es_worktype_desc VARCHAR2(100),
  order_no         VARCHAR2(800),
  deposit_amnt     VARCHAR2(6),
  card_money       INTEGER,
  vaild_date       VARCHAR2(8),
  fini_pronum      INTEGER,
  man_useless_num  INTEGER,
  es_useless_num   INTEGER,
  real_balance     INTEGER,
  operator_id      VARCHAR2(10),
  storage_id       VARCHAR2(4),
  es_id            VARCHAR2(10),
  es_desc          VARCHAR2(100),
  out_bill_no      VARCHAR2(12)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_TK_PRODUCE_RPT to ACC_TK_APP;
grant select on ACC_TK.T#IC_ROT_TK_PRODUCE_RPT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_ROT_TK_PRODUCE_RPT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_SALE
prompt ========================
prompt
create global temporary table ACC_TK.T#IC_SALE
(
  dept_id       NUMBER(38),
  tickettype_id NUMBER(38),
  ticketvalue   NUMBER(20,2),
  currenttotal  NUMBER(20,2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_SALE to ACC_TK_APP;
grant select on ACC_TK.T#IC_SALE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_SALE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_SALEWEEK
prompt ============================
prompt
create global temporary table ACC_TK.T#IC_SALEWEEK
(
  dept_id       NUMBER(38),
  tickettype_id NUMBER(38),
  ticketvalue   NUMBER(20,2),
  currenttotal  NUMBER(20,2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_SALEWEEK to ACC_TK_APP;
grant select on ACC_TK.T#IC_SALEWEEK to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_SALEWEEK to ACC_TK_RPT;

prompt
prompt Creating table T#IC_START_END_BOX
prompt =================================
prompt
create global temporary table ACC_TK.T#IC_START_END_BOX
(
  start_box_id CHAR(14) not null,
  end_box_id   CHAR(14) not null
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_START_END_BOX to ACC_TK_APP;
grant select on ACC_TK.T#IC_START_END_BOX to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_START_END_BOX to ACC_TK_RPT;

prompt
prompt Creating table T#IC_STORE_DETAIL
prompt ================================
prompt
create global temporary table ACC_TK.T#IC_STORE_DETAIL
(
  water_no         NUMBER(18),
  bill_no          CHAR(12) not null,
  reason_id        VARCHAR2(2) not null,
  storage_id       VARCHAR2(4) not null,
  area_id          VARCHAR2(2) not null,
  ic_main_type     VARCHAR2(2) not null,
  ic_sub_type      VARCHAR2(2) not null,
  in_num           INTEGER not null,
  detail_place     VARCHAR2(50),
  start_box_id     CHAR(14),
  end_box_id       CHAR(14),
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20),
  valid_date       DATE,
  card_money       INTEGER default 0,
  line_id          VARCHAR2(2),
  station_id       VARCHAR2(3),
  exit_line_id     VARCHAR2(2),
  exit_station_id  VARCHAR2(3),
  model            VARCHAR2(3),
  use_flag         CHAR(1)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_STORE_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_STORE_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_STORE_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_STS_GEN_IN
prompt ==============================
prompt
create global temporary table ACC_TK.T#IC_STS_GEN_IN
(
  bill_no            CHAR(12) not null,
  verify_date        DATE not null,
  reason_id          CHAR(2) not null,
  storage_id         CHAR(4) not null,
  area_id            CHAR(2) not null,
  ic_main_type       CHAR(2) not null,
  ic_sub_type        CHAR(2) not null,
  in_num             INTEGER not null,
  valid_date         DATE,
  card_money         INTEGER not null,
  line_id_reclaim    VARCHAR2(2),
  station_id_reclaim VARCHAR2(3),
  line_id            VARCHAR2(2),
  station_id         VARCHAR2(3),
  related_bill_no    CHAR(12),
  card_ava_days      VARCHAR2(10),
  exit_line_id       VARCHAR2(2),
  exit_station_id    VARCHAR2(2),
  model              VARCHAR2(3)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_STS_GEN_IN to ACC_TK_APP;
grant select on ACC_TK.T#IC_STS_GEN_IN to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_STS_GEN_IN to ACC_TK_RPT;

prompt
prompt Creating table T#IC_STS_GEN_IN_OUT_BILL
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_STS_GEN_IN_OUT_BILL
(
  bill_no     CHAR(12) not null,
  verify_date DATE not null
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_STS_GEN_IN_OUT_BILL to ACC_TK_APP;
grant select on ACC_TK.T#IC_STS_GEN_IN_OUT_BILL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_STS_GEN_IN_OUT_BILL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_STS_GEN_IN_OUT_STAT
prompt =======================================
prompt
create global temporary table ACC_TK.T#IC_STS_GEN_IN_OUT_STAT
(
  bill_no         CHAR(12) not null,
  verify_date     DATE not null,
  reason_id       CHAR(2) not null,
  storage_id      CHAR(4) not null,
  area_id         CHAR(2) not null,
  ic_main_type    CHAR(2) not null,
  ic_sub_type     CHAR(2) not null,
  out_num         INTEGER not null,
  vaild_date      DATE,
  card_money      INTEGER default 0,
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  card_ava_days   VARCHAR2(10),
  exit_line_id    VARCHAR2(2),
  exit_station_id VARCHAR2(2),
  model           VARCHAR2(3)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_STS_GEN_IN_OUT_STAT to ACC_TK_APP;
grant select on ACC_TK.T#IC_STS_GEN_IN_OUT_STAT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_STS_GEN_IN_OUT_STAT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_STS_GEN_IN_STORE_DETAIL
prompt ===========================================
prompt
create global temporary table ACC_TK.T#IC_STS_GEN_IN_STORE_DETAIL
(
  bill_no            CHAR(12) not null,
  verify_date        DATE not null,
  reason_id          CHAR(2) not null,
  storage_id         CHAR(4) not null,
  area_id            CHAR(2) not null,
  ic_main_type       CHAR(2) not null,
  ic_sub_type        CHAR(2) not null,
  in_num             INTEGER not null,
  valid_date         DATE,
  card_money         INTEGER default 0,
  line_id_reclaim    VARCHAR2(2),
  station_id_reclaim VARCHAR2(3),
  line_id            VARCHAR2(2),
  station_id         VARCHAR2(3),
  related_bill_no    CHAR(12),
  card_ava_days      VARCHAR2(10),
  exit_line_id       VARCHAR2(2),
  exit_station_id    VARCHAR2(2),
  model              VARCHAR2(3)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_STS_GEN_IN_STORE_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_STS_GEN_IN_STORE_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_STS_GEN_IN_STORE_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_STS_GEN_IN_TABLE
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_STS_GEN_IN_TABLE
(
  recd_count INTEGER not null,
  begin_recd VARCHAR2(20),
  end_recd   VARCHAR2(20)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_STS_GEN_IN_TABLE to ACC_TK_APP;
grant select on ACC_TK.T#IC_STS_GEN_IN_TABLE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_STS_GEN_IN_TABLE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TEMP_PLAN_RESULT
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_TEMP_PLAN_RESULT
(
  bill_no             CHAR(12) not null,
  out_bill_no         CHAR(16),
  bill_date           DATE,
  form_maker          VARCHAR2(10),
  operator            VARCHAR2(50),
  verify_person       VARCHAR2(10),
  execute_date        DATE,
  verify_date         DATE,
  record_flag         CHAR(1),
  remarks             VARCHAR2(400),
  es_worktype_id      VARCHAR2(2),
  storage_id          VARCHAR2(4),
  area_id             VARCHAR2(2),
  ic_main_type        VARCHAR2(2),
  ic_sub_type         VARCHAR2(2),
  card_money          INTEGER,
  vaild_date          DATE,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  draw_quantity       INTEGER,
  make_quantity       INTEGER,
  machine_no          VARCHAR2(4),
  card_type           VARCHAR2(3),
  reason_id           VARCHAR2(2),
  card_money_produce  INTEGER,
  es_worktype_name    VARCHAR2(50),
  area_name           VARCHAR2(20),
  chinese_name        VARCHAR2(20),
  card_type_name      VARCHAR2(100),
  ic_sub_desc         VARCHAR2(30),
  exit_line_id        VARCHAR2(2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TEMP_PLAN_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_TEMP_PLAN_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TEMP_PLAN_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TEMP_PRODUCE_RPT
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_TEMP_PRODUCE_RPT
(
  bill_no             CHAR(12),
  out_bill_no         CHAR(12),
  in_bill_no          CHAR(12),
  draw_total          INTEGER,
  es_worktype_id      VARCHAR2(2) not null,
  es_worktype_name    VARCHAR2(100) not null,
  es_useless_num      INTEGER not null,
  man_useless_num     INTEGER not null,
  lost_num            INTEGER not null,
  system_balance      INTEGER not null,
  real_balance        INTEGER not null,
  hand_man            CHAR(10),
  receive_man         CHAR(10),
  bill_date           DATE not null,
  verify_date         DATE,
  ic_sub_type         VARCHAR2(2) not null,
  ic_sub_desc         VARCHAR2(30) not null,
  card_money          INTEGER default 0,
  vaild_date          DATE,
  station_id          VARCHAR2(2),
  station_name        VARCHAR2(40),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  draw_quantity       INTEGER,
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  machine_no          VARCHAR2(4),
  remarks             VARCHAR2(1024),
  ic_main_type        VARCHAR2(2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TEMP_PRODUCE_RPT to ACC_TK_APP;
grant select on ACC_TK.T#IC_TEMP_PRODUCE_RPT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TEMP_PRODUCE_RPT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TEMP_RESULT
prompt ===============================
prompt
create global temporary table ACC_TK.T#IC_TEMP_RESULT
(
  bill_no             CHAR(12) not null,
  out_bill_no         CHAR(12),
  operator            VARCHAR2(10),
  administer          VARCHAR2(100),
  bill_date           DATE,
  record_flag         CHAR(1),
  verify_date         DATE,
  verify_person       CHAR(10),
  remark              VARCHAR2(300),
  storage_id          CHAR(4),
  area_id             CHAR(2),
  ic_main_type        VARCHAR2(2),
  ic_sub_type         VARCHAR2(2),
  draw_quantity       INTEGER,
  real_quantity       INTEGER,
  error_quantity      INTEGER,
  vaild_date          DATE,
  card_money          INTEGER,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    VARCHAR2(20),
  end_logical_id      VARCHAR2(20),
  adjust_id           CHAR(2),
  storey_id           CHAR(2),
  base_id             CHAR(2),
  chest_id            CHAR(3),
  adjust_reason       VARCHAR2(20),
  area_name           VARCHAR2(20),
  chinese_name        VARCHAR2(20),
  ic_sub_desc         VARCHAR2(20),
  exit_line_id        VARCHAR2(2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TEMP_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_TEMP_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TEMP_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TMP_BILL_STORAGE
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_TMP_BILL_STORAGE
(
  storage_id VARCHAR2(4),
  bill_no    CHAR(12)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_BILL_STORAGE to ACC_TK_APP;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_BILL_STORAGE to ACC_TK_DEV;

prompt
prompt Creating table T#IC_TMP_BOX_DETAIL
prompt ==================================
prompt
create global temporary table ACC_TK.T#IC_TMP_BOX_DETAIL
(
  id      INTEGER,
  orderno VARCHAR2(14),
  num     INTEGER
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_BOX_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_TMP_BOX_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_BOX_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TMP_CARD_CODE
prompt =================================
prompt
create global temporary table ACC_TK.T#IC_TMP_CARD_CODE
(
  storage_id      CHAR(4) not null,
  area_id         VARCHAR2(2) not null,
  ic_main_type    VARCHAR2(2) not null,
  ic_sub_type     VARCHAR2(2) not null,
  card_num        INTEGER not null,
  card_money      INTEGER default 0,
  valid_date      VARCHAR2(10),
  line_id         VARCHAR2(2),
  station_id      VARCHAR2(3),
  exit_line_id    VARCHAR2(2),
  exit_station_id VARCHAR2(3),
  model           VARCHAR2(3),
  flag            CHAR(1) default '0' not null
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_CARD_CODE to ACC_TK_APP;
grant select on ACC_TK.T#IC_TMP_CARD_CODE to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_CARD_CODE to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TMP_DETAIL
prompt ==============================
prompt
create global temporary table ACC_TK.T#IC_TMP_DETAIL
(
  water_no         NUMBER(18) not null,
  verify_date      DATE,
  in_num           INTEGER not null,
  area_id          VARCHAR2(2),
  detail_place     VARCHAR2(50),
  start_box_id     CHAR(14),
  end_box_id       CHAR(14),
  start_logical_id VARCHAR2(20),
  end_logical_id   VARCHAR2(20),
  valid_date       DATE default to_date('2099-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss'),
  card_money       INTEGER,
  ic_sub_type      CHAR(2) not null,
  station_id       VARCHAR2(3),
  exit_station_id  VARCHAR2(3),
  model            VARCHAR2(3),
  ic_main_type     VARCHAR2(2) not null,
  storage_id       CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_TMP_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TMP_IN_BILL
prompt ===============================
prompt
create global temporary table ACC_TK.T#IC_TMP_IN_BILL
(
  reason_id    VARCHAR2(2),
  storage_id   VARCHAR2(4),
  area_id      VARCHAR2(2),
  ic_main_type VARCHAR2(2),
  ic_sub_type  VARCHAR2(2),
  card_money   INTEGER default 0,
  in_num       INTEGER
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_IN_BILL to ACC_TK_APP;
grant select on ACC_TK.T#IC_TMP_IN_BILL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_IN_BILL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TMP_RESULT
prompt ==============================
prompt
create global temporary table ACC_TK.T#IC_TMP_RESULT
(
  water_no            NUMBER(18),
  verify_date         DATE,
  in_num              INTEGER not null,
  area_id             CHAR(2) not null,
  area_name           VARCHAR2(50),
  detail_place        VARCHAR2(50),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    VARCHAR2(20),
  end_logical_id      VARCHAR2(20),
  valid_date          DATE,
  card_money          INTEGER,
  ic_sub_type         VARCHAR2(2) not null,
  ic_sub_desc         VARCHAR2(30),
  station_id          VARCHAR2(3),
  station_name        VARCHAR2(30),
  exit_station_id     VARCHAR2(3),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  ic_main_type        VARCHAR2(2) not null,
  storage_id          CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#IC_TMP_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_RESULT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TMP_RPT
prompt ===========================
prompt
create global temporary table ACC_TK.T#IC_TMP_RPT
(
  bill_no             CHAR(12) not null,
  related_bill_no     CHAR(12),
  bill_date           DATE,
  verify_date         DATE,
  area_id             CHAR(2) not null,
  area_name           VARCHAR2(20),
  ic_main_type        VARCHAR2(2) not null,
  ic_sub_type         VARCHAR2(2) not null,
  ic_sub_desc         VARCHAR2(50),
  in_num              INTEGER not null,
  valid_date          DATE,
  card_money          INTEGER,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  station_name        VARCHAR2(50),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    VARCHAR2(20),
  end_logical_id      VARCHAR2(20),
  reason_id           VARCHAR2(2) not null,
  reason_name         VARCHAR2(20),
  remark              VARCHAR2(400),
  form_maker          VARCHAR2(40),
  administer          VARCHAR2(40),
  storage_id          CHAR(4)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_RPT to ACC_TK_APP;
grant select on ACC_TK.T#IC_TMP_RPT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_RPT to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TMP_USELESS
prompt ===============================
prompt
create global temporary table ACC_TK.T#IC_TMP_USELESS
(
  orderno VARCHAR2(14),
  cardid  VARCHAR2(20),
  flag    CHAR(1)
)
on commit delete rows;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_USELESS to ACC_TK_APP;
grant select on ACC_TK.T#IC_TMP_USELESS to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_USELESS to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TMP_USELESS_CARD
prompt ====================================
prompt
create global temporary table ACC_TK.T#IC_TMP_USELESS_CARD
(
  card_no CHAR(16)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_USELESS_CARD to ACC_TK_APP;
grant select on ACC_TK.T#IC_TMP_USELESS_CARD to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_USELESS_CARD to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TMP_USELESS_DETAIL
prompt ======================================
prompt
create global temporary table ACC_TK.T#IC_TMP_USELESS_DETAIL
(
  card_no1 CHAR(16),
  card_no2 CHAR(16),
  card_no3 CHAR(16),
  card_no4 CHAR(16)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_USELESS_DETAIL to ACC_TK_APP;
grant select on ACC_TK.T#IC_TMP_USELESS_DETAIL to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TMP_USELESS_DETAIL to ACC_TK_RPT;

prompt
prompt Creating table T#IC_TVM
prompt =======================
prompt
create global temporary table ACC_TK.T#IC_TVM
(
  dept_id      NUMBER(38),
  currenttotal NUMBER(20,2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_TVM to ACC_TK_APP;
grant select on ACC_TK.T#IC_TVM to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_TVM to ACC_TK_RPT;

prompt
prompt Creating table T#IC_YESUSED
prompt ===========================
prompt
create global temporary table ACC_TK.T#IC_YESUSED
(
  dept_id       NUMBER(38),
  tickettype_id NUMBER(38),
  ticketvalue   NUMBER(20,2),
  currenttotal  NUMBER(20,2)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#IC_YESUSED to ACC_TK_APP;
grant select on ACC_TK.T#IC_YESUSED to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#IC_YESUSED to ACC_TK_RPT;

prompt
prompt Creating table T#_TEMP_RESULT
prompt =============================
prompt
create global temporary table ACC_TK.T#_TEMP_RESULT
(
  bill_no             CHAR(12) not null,
  out_bill_no         CHAR(12),
  operator            VARCHAR2(10),
  administer          VARCHAR2(100),
  bill_date           DATE,
  record_flag         CHAR(1),
  verify_date         DATE,
  verify_person       CHAR(10),
  remark              VARCHAR2(300),
  storage_id          CHAR(4),
  area_id             CHAR(2),
  ic_main_type        VARCHAR2(2),
  ic_sub_type         VARCHAR2(2),
  draw_quantity       INTEGER,
  real_quantity       INTEGER,
  error_quantity      INTEGER,
  vaild_date          DATE,
  card_money          INTEGER,
  line_id             VARCHAR2(2),
  station_id          VARCHAR2(3),
  exit_station_id     VARCHAR2(4),
  exit_stationid_name VARCHAR2(20),
  model               VARCHAR2(3),
  mode_name           VARCHAR2(20),
  start_box_id        CHAR(14),
  end_box_id          CHAR(14),
  start_logical_id    VARCHAR2(20),
  end_logical_id      VARCHAR2(20),
  adjust_id           CHAR(2),
  storey_id           CHAR(2),
  base_id             CHAR(2),
  chest_id            CHAR(3),
  adjust_reason       VARCHAR2(20),
  area_name           VARCHAR2(20),
  chinese_name        VARCHAR2(20),
  ic_sub_desc         VARCHAR2(20)
)
on commit preserve rows;
grant select, insert, update, delete on ACC_TK.T#_TEMP_RESULT to ACC_TK_APP;
grant select on ACC_TK.T#_TEMP_RESULT to ACC_TK_DEV;
grant select, insert, update, delete on ACC_TK.T#_TEMP_RESULT to ACC_TK_RPT;

prompt
prompt Creating sequence PLAN_DETAIL
prompt =============================
prompt
create sequence ACC_TK.PLAN_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 6591
increment by 1
cache 10;
grant select on ACC_TK.PLAN_DETAIL to ACC_ST_APP;
grant select on ACC_TK.PLAN_DETAIL to ACC_TK_APP;
grant select on ACC_TK.PLAN_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.PLAN_DETAIL to ACC_TK_RPT;


prompt
prompt Creating sequence PLSQL_PROFILER_RUNNUMBER
prompt ==========================================
prompt
create sequence ACC_TK.PLSQL_PROFILER_RUNNUMBER
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 10;
grant select on ACC_TK.PLSQL_PROFILER_RUNNUMBER to ACC_ST_APP;
grant select on ACC_TK.PLSQL_PROFILER_RUNNUMBER to ACC_TK_APP;
grant select on ACC_TK.PLSQL_PROFILER_RUNNUMBER to ACC_TK_DEV;
grant select on ACC_TK.PLSQL_PROFILER_RUNNUMBER to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_BC_LOGIC_NO
prompt ====================================
prompt
create sequence ACC_TK.SEQ_IC_BC_LOGIC_NO
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_BC_LOGIC_NO to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_BC_LOGIC_NO to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_BC_LOGIC_NO to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_BC_LOGIC_NO to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_CHK_STORAGE_DETAIL_CARD
prompt ================================================
prompt
create sequence ACC_TK.SEQ_IC_CHK_STORAGE_DETAIL_CARD
minvalue 1
maxvalue 9999999999999999999999999999
start with 41
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_CHK_STORAGE_DETAIL_CARD to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_CHK_STORAGE_DETAIL_CARD to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_CHK_STORAGE_DETAIL_CARD to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_CHK_STORAGE_DETAIL_CARD to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_ECP_OPRTLOG
prompt ====================================
prompt
create sequence ACC_TK.SEQ_IC_ECP_OPRTLOG
minvalue 1
maxvalue 9999999999999999999999999999
start with 14901
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_ECP_OPRTLOG to ACC_TK_APP;


prompt
prompt Creating sequence SEQ_IC_ECP_PRINT_LIST
prompt =======================================
prompt
create sequence ACC_TK.SEQ_IC_ECP_PRINT_LIST
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_ECP_PRINT_LIST to ACC_TK_APP;


prompt
prompt Creating sequence SEQ_IC_ES_FILE_AUDIT
prompt ======================================
prompt
create sequence ACC_TK.SEQ_IC_ES_FILE_AUDIT
minvalue 1
maxvalue 9999999999999999999999999999
start with 6621
increment by 1
cache 10;
grant select on ACC_TK.SEQ_IC_ES_FILE_AUDIT to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_ES_FILE_AUDIT to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_ES_FILE_AUDIT to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_ES_FILE_AUDIT to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_ES_FILE_ERROR
prompt ======================================
prompt
create sequence ACC_TK.SEQ_IC_ES_FILE_ERROR
minvalue 1
maxvalue 9999999999999999999999999999
start with 2831
increment by 1
cache 10;
grant select on ACC_TK.SEQ_IC_ES_FILE_ERROR to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_ES_FILE_ERROR to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_ES_FILE_ERROR to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_ES_FILE_ERROR to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_ES_INFO_FILE
prompt =====================================
prompt
create sequence ACC_TK.SEQ_IC_ES_INFO_FILE
minvalue 1
maxvalue 9999999999999999999999999999
start with 48111
increment by 1
cache 10;
grant select on ACC_TK.SEQ_IC_ES_INFO_FILE to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_ES_INFO_FILE to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_ES_INFO_FILE to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_ES_INFO_FILE to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_ES_ORDER_NUM_CHANGE
prompt ============================================
prompt
create sequence ACC_TK.SEQ_IC_ES_ORDER_NUM_CHANGE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 10;
grant select on ACC_TK.SEQ_IC_ES_ORDER_NUM_CHANGE to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_ES_ORDER_NUM_CHANGE to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_ES_ORDER_NUM_CHANGE to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_ES_ORDER_NUM_CHANGE to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_ET_OPRTLOG
prompt ===================================
prompt
create sequence ACC_TK.SEQ_IC_ET_OPRTLOG
minvalue 1
maxvalue 9999999999999999999999999999
start with 41881
increment by 1
cache 10;
grant select on ACC_TK.SEQ_IC_ET_OPRTLOG to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_ET_OPRTLOG to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_ET_OPRTLOG to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_ET_OPRTLOG to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_IN_RETURN_BILL_DETAIL
prompt ==============================================
prompt
create sequence ACC_TK.SEQ_IC_IN_RETURN_BILL_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 281
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_IN_RETURN_BILL_DETAIL to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_IN_RETURN_BILL_DETAIL to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_IN_RETURN_BILL_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_IN_RETURN_BILL_DETAIL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_IN_STORE_DETAIL
prompt ========================================
prompt
create sequence ACC_TK.SEQ_IC_IN_STORE_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_IN_STORE_DETAIL to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_IN_STORE_DETAIL to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_IN_STORE_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_IN_STORE_DETAIL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_OPER_LOGGING
prompt =====================================
prompt
create sequence ACC_TK.SEQ_IC_OPER_LOGGING
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_OPER_LOGGING to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_OPER_LOGGING to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_OPER_LOGGING to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_OPER_LOGGING to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_OUT_ADJUST_BILL_DETAIL
prompt ===============================================
prompt
create sequence ACC_TK.SEQ_IC_OUT_ADJUST_BILL_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 161
increment by 1
cache 20;
grant select, alter on ACC_TK.SEQ_IC_OUT_ADJUST_BILL_DETAIL to ACC_TK_APP;


prompt
prompt Creating sequence SEQ_IC_OUT_BILL_DETAIL
prompt ========================================
prompt
create sequence ACC_TK.SEQ_IC_OUT_BILL_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 12521
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_OUT_BILL_DETAIL to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_OUT_BILL_DETAIL to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_OUT_BILL_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_OUT_BILL_DETAIL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_OUT_BILL_DETAIL_BOX
prompt ============================================
prompt
create sequence ACC_TK.SEQ_IC_OUT_BILL_DETAIL_BOX
minvalue 1
maxvalue 9999999999999999999999999999
start with 42501
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_OUT_BILL_DETAIL_BOX to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_OUT_BILL_DETAIL_BOX to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_OUT_BILL_DETAIL_BOX to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_OUT_BILL_DETAIL_BOX to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_OUT_CANCEL_PLAN_DETAIL
prompt ===============================================
prompt
create sequence ACC_TK.SEQ_IC_OUT_CANCEL_PLAN_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 1621
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_OUT_CANCEL_PLAN_DETAIL to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_OUT_CANCEL_PLAN_DETAIL to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_OUT_CANCEL_PLAN_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_OUT_CANCEL_PLAN_DETAIL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_OUT_DISTRIBUTE_BILL
prompt ============================================
prompt
create sequence ACC_TK.SEQ_IC_OUT_DISTRIBUTE_BILL
minvalue 1
maxvalue 9999999999999999999999999999
start with 7881
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_BILL to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_BILL to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_BILL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_BILL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_OUT_DISTRIBUTE_DATA
prompt ============================================
prompt
create sequence ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DATA
minvalue 1
maxvalue 9999999999999999999999999999
start with 6561
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DATA to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DATA to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DATA to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DATA to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_OUT_DISTRIBUTE_DTL
prompt ===========================================
prompt
create sequence ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DTL
minvalue 1
maxvalue 9999999999999999999999999999
start with 7121
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DTL to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DTL to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DTL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DTL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_OUT_DISTRIBUTE_DTL_BOX
prompt ===============================================
prompt
create sequence ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DTL_BOX
minvalue 1
maxvalue 9999999999999999999999999999
start with 34961
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DTL_BOX to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DTL_BOX to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DTL_BOX to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_OUT_DISTRIBUTE_DTL_BOX to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_OUT_LEND_BILL_DETAIL
prompt =============================================
prompt
create sequence ACC_TK.SEQ_IC_OUT_LEND_BILL_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 261
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_OUT_LEND_BILL_DETAIL to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_OUT_LEND_BILL_DETAIL to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_OUT_LEND_BILL_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_OUT_LEND_BILL_DETAIL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_PDU_PRODUCE_BILL_DETAIL
prompt ================================================
prompt
create sequence ACC_TK.SEQ_IC_PDU_PRODUCE_BILL_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 7361
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_PDU_PRODUCE_BILL_DETAIL to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_PDU_PRODUCE_BILL_DETAIL to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_PDU_PRODUCE_BILL_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_PDU_PRODUCE_BILL_DETAIL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_PDU_USELESS
prompt ====================================
prompt
create sequence ACC_TK.SEQ_IC_PDU_USELESS
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_PDU_USELESS to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_PDU_USELESS to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_PDU_USELESS to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_PDU_USELESS to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_PRM_CURRENT_LOGIC_NO
prompt =============================================
prompt
create sequence ACC_TK.SEQ_IC_PRM_CURRENT_LOGIC_NO
minvalue 1
maxvalue 9999999999999999999999999999
start with 21
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_PRM_CURRENT_LOGIC_NO to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_PRM_CURRENT_LOGIC_NO to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_PRM_CURRENT_LOGIC_NO to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_PRM_CURRENT_LOGIC_NO to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_PRM_REPORT_STORAGELIST
prompt ===============================================
prompt
create sequence ACC_TK.SEQ_IC_PRM_REPORT_STORAGELIST
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;
grant select, alter on ACC_TK.SEQ_IC_PRM_REPORT_STORAGELIST to ACC_TK_APP;


prompt
prompt Creating sequence SEQ_IC_SAM_OPER_LOGGING
prompt =========================================
prompt
create sequence ACC_TK.SEQ_IC_SAM_OPER_LOGGING
minvalue 1
maxvalue 9999999999999999999999999999
start with 37503
increment by 1
cache 10;
grant select on ACC_TK.SEQ_IC_SAM_OPER_LOGGING to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_SAM_OPER_LOGGING to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_SAM_OPER_LOGGING to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_SAM_OPER_LOGGING to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_SCP_OPRTLOG
prompt ====================================
prompt
create sequence ACC_TK.SEQ_IC_SCP_OPRTLOG
minvalue 1
maxvalue 9999999999999999999999999999
start with 187941
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_SCP_OPRTLOG to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_SCP_OPRTLOG to ACC_TK_DEV;


prompt
prompt Creating sequence SEQ_IC_SCP_PRINT_LIST
prompt =======================================
prompt
create sequence ACC_TK.SEQ_IC_SCP_PRINT_LIST
minvalue 1
maxvalue 9999999999999999999999999999
start with 191661
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_SCP_PRINT_LIST to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_SCP_PRINT_LIST to ACC_TK_DEV;


prompt
prompt Creating sequence SEQ_IC_TK_ABANDON_PRM
prompt =======================================
prompt
create sequence ACC_TK.SEQ_IC_TK_ABANDON_PRM
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 10;
grant select on ACC_TK.SEQ_IC_TK_ABANDON_PRM to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_TK_ABANDON_PRM to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_TK_ABANDON_PRM to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_TK_ABANDON_PRM to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_TK_IN_DETAIL
prompt =====================================
prompt
create sequence ACC_TK.SEQ_IC_TK_IN_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 9302441
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_TK_IN_DETAIL to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_TK_IN_DETAIL to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_TK_IN_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_TK_IN_DETAIL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_TK_IN_DETAIL_SUBMIT
prompt ============================================
prompt
create sequence ACC_TK.SEQ_IC_TK_IN_DETAIL_SUBMIT
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_TK_IN_DETAIL_SUBMIT to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_TK_IN_DETAIL_SUBMIT to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_TK_IN_DETAIL_SUBMIT to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_TK_IN_DETAIL_SUBMIT to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_TK_IN_SR
prompt =================================
prompt
create sequence ACC_TK.SEQ_IC_TK_IN_SR
minvalue 1
maxvalue 9999999999999999999999999999
start with 9299201
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_TK_IN_SR to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_TK_IN_SR to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_TK_IN_SR to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_TK_IN_SR to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_TK_IN_XR
prompt =================================
prompt
create sequence ACC_TK.SEQ_IC_TK_IN_XR
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_TK_IN_XR to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_TK_IN_XR to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_TK_IN_XR to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_TK_IN_XR to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_TK_IN_XR_CARD_AREA
prompt ===========================================
prompt
create sequence ACC_TK.SEQ_IC_TK_IN_XR_CARD_AREA
minvalue 1
maxvalue 9999999999999999999999999999
start with 8441
increment by 1
cache 20;
grant select on ACC_TK.SEQ_IC_TK_IN_XR_CARD_AREA to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_TK_IN_XR_CARD_AREA to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_TK_IN_XR_CARD_AREA to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_TK_IN_XR_CARD_AREA to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_IC_TK_TOKEN_PRM
prompt =====================================
prompt
create sequence ACC_TK.SEQ_IC_TK_TOKEN_PRM
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 10;
grant select on ACC_TK.SEQ_IC_TK_TOKEN_PRM to ACC_ST_APP;
grant select on ACC_TK.SEQ_IC_TK_TOKEN_PRM to ACC_TK_APP;
grant select on ACC_TK.SEQ_IC_TK_TOKEN_PRM to ACC_TK_DEV;
grant select on ACC_TK.SEQ_IC_TK_TOKEN_PRM to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_T#IC_HANDIN_DETAIL
prompt ========================================
prompt
create sequence ACC_TK.SEQ_T#IC_HANDIN_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;
grant select on ACC_TK.SEQ_T#IC_HANDIN_DETAIL to ACC_ST_APP;
grant select on ACC_TK.SEQ_T#IC_HANDIN_DETAIL to ACC_TK_APP;
grant select on ACC_TK.SEQ_T#IC_HANDIN_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_T#IC_HANDIN_DETAIL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_T#IC_RCT_BL_IN_DETAIL_QR
prompt ==============================================
prompt
create sequence ACC_TK.SEQ_T#IC_RCT_BL_IN_DETAIL_QR
minvalue 1
maxvalue 9999999999999999999999999999
start with 1261041
increment by 1
cache 20;
grant select on ACC_TK.SEQ_T#IC_RCT_BL_IN_DETAIL_QR to ACC_ST_APP;
grant select on ACC_TK.SEQ_T#IC_RCT_BL_IN_DETAIL_QR to ACC_TK_APP;
grant select on ACC_TK.SEQ_T#IC_RCT_BL_IN_DETAIL_QR to ACC_TK_DEV;
grant select on ACC_TK.SEQ_T#IC_RCT_BL_IN_DETAIL_QR to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_TK_IN_CHECK_DETAIL
prompt ========================================
prompt
create sequence ACC_TK.SEQ_TK_IN_CHECK_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 641
increment by 1
cache 20;
grant select on ACC_TK.SEQ_TK_IN_CHECK_DETAIL to ACC_ST_APP;
grant select on ACC_TK.SEQ_TK_IN_CHECK_DETAIL to ACC_TK_APP;
grant select on ACC_TK.SEQ_TK_IN_CHECK_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_TK_IN_CHECK_DETAIL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_TMP_BOX_DETAIL
prompt ====================================
prompt
create sequence ACC_TK.SEQ_TMP_BOX_DETAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 1361
increment by 1
cache 20;
grant select on ACC_TK.SEQ_TMP_BOX_DETAIL to ACC_ST_APP;
grant select on ACC_TK.SEQ_TMP_BOX_DETAIL to ACC_TK_APP;
grant select on ACC_TK.SEQ_TMP_BOX_DETAIL to ACC_TK_DEV;
grant select on ACC_TK.SEQ_TMP_BOX_DETAIL to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_UP_IC_RCT_BL_IN_HR
prompt ========================================
prompt
create sequence ACC_TK.SEQ_UP_IC_RCT_BL_IN_HR
minvalue 1
maxvalue 9999999999999999999999999999
start with 21
increment by 1
cache 20;
grant select on ACC_TK.SEQ_UP_IC_RCT_BL_IN_HR to ACC_ST_APP;
grant select on ACC_TK.SEQ_UP_IC_RCT_BL_IN_HR to ACC_TK_APP;
grant select on ACC_TK.SEQ_UP_IC_RCT_BL_IN_HR to ACC_TK_DEV;
grant select on ACC_TK.SEQ_UP_IC_RCT_BL_IN_HR to ACC_TK_RPT;


prompt
prompt Creating sequence SEQ_UP_TK_IN_STORE
prompt ====================================
prompt
create sequence ACC_TK.SEQ_UP_TK_IN_STORE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;
grant select on ACC_TK.SEQ_UP_TK_IN_STORE to ACC_ST_APP;
grant select on ACC_TK.SEQ_UP_TK_IN_STORE to ACC_TK_APP;
grant select on ACC_TK.SEQ_UP_TK_IN_STORE to ACC_TK_DEV;
grant select on ACC_TK.SEQ_UP_TK_IN_STORE to ACC_TK_RPT;


prompt
prompt Creating sequence SERIAL_NO
prompt ===========================
prompt
create sequence ACC_TK.SERIAL_NO
minvalue 1
maxvalue 9999999999999999999999999999
start with 29411
increment by 1
cache 10;
grant select on ACC_TK.SERIAL_NO to ACC_ST_APP;
grant select on ACC_TK.SERIAL_NO to ACC_TK_APP;
grant select on ACC_TK.SERIAL_NO to ACC_TK_DEV;
grant select on ACC_TK.SERIAL_NO to ACC_TK_RPT;


prompt
prompt Creating sequence WATER_NO
prompt ==========================
prompt
create sequence ACC_TK.WATER_NO
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 10;
grant select on ACC_TK.WATER_NO to ACC_ST_APP;
grant select on ACC_TK.WATER_NO to ACC_TK_APP;
grant select on ACC_TK.WATER_NO to ACC_TK_DEV;
grant select on ACC_TK.WATER_NO to ACC_TK_RPT;


prompt
prompt Creating type STR_SPLIT
prompt =======================
prompt
CREATE OR REPLACE TYPE ACC_TK."STR_SPLIT"                                          IS TABLE OF VARCHAR2 (4000)
/
grant execute on ACC_TK.STR_SPLIT to ACC_TK_APP;


prompt
prompt Creating type UT_BOXID
prompt ======================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_BOXID"                                          as object(start_box_id char(14));
/
grant execute on ACC_TK.UT_BOXID to ACC_TK_APP;


prompt
prompt Creating type UT_BOXID_TEST
prompt ===========================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_BOXID_TEST"                                          char(14);
/
grant execute on ACC_TK.UT_BOXID_TEST to ACC_TK_APP;


prompt
prompt Creating type UT_CARDMAIN
prompt =========================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_CARDMAIN"                                          as object(ic_main_type char(2));
/
grant execute on ACC_TK.UT_CARDMAIN to ACC_TK_APP;


prompt
prompt Creating type UT_CARDSUB
prompt ========================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_CARDSUB"                                          as object(card_sub_type char(2));
/
grant execute on ACC_TK.UT_CARDSUB to ACC_TK_APP;


prompt
prompt Creating type UT_IC_LINE
prompt ========================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_IC_LINE"                                          as object(line_id char(2));
/
grant execute on ACC_TK.UT_IC_LINE to ACC_TK_APP;


prompt
prompt Creating type UT_IC_STATION
prompt ===========================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_IC_STATION"                                          as object(station_id char(3));
/
grant execute on ACC_TK.UT_IC_STATION to ACC_TK_APP;


prompt
prompt Creating type UT_LOGICALID
prompt ==========================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_LOGICALID"                                          as object(start_logical_id char(20));
/
grant execute on ACC_TK.UT_LOGICALID to ACC_TK_APP;


prompt
prompt Creating type UT_RECORDFLAG
prompt ===========================
prompt
CREATE OR REPLACE TYPE ACC_TK."UT_RECORDFLAG"                                          as object(record_flag char(1));
/
grant execute on ACC_TK.UT_RECORDFLAG to ACC_TK_APP;


prompt
prompt Creating function UF_IC_ES_GET_BILL_FLOW
prompt ========================================
prompt
CREATE OR REPLACE FUNCTION ACC_TK."UF_IC_ES_GET_BILL_FLOW"
(
  msg out VARCHAR2
) RETURN VARCHAR2 AS

  --单号生成使用变量
  billType char(2);                 --生产单类型
  currentIntNo INTEGER;             --表记录的当前流水号
  initValue INTEGER;                --流水初始化值
  billYear INTEGER;                 --单据年
  curYear  INTEGER;                 --当前年
  waterNo INTEGER;                  --流水号
  strWaterNo VARCHAR2(16);          --流水号字符串值
  billNo CHAR(12);                  --单号

BEGIN

  curYear := TO_NUMBER(to_char(SYSDATE,'yyyy'));
  initValue := 1;
  billType := 'SD';

  --生成生产单号------------------------------------
  --取出当前流水号
  begin
    select current_int_no into currentIntNo
      from ACC_TK.IC_PRM_BILL_CURRENT_FLOW where bill_main_type_id=billType;
  EXCEPTION
    when OTHERS then
    begin
      null;
    end;
  end;

  if(currentIntNo is not null) THEN--存在当前流水号
  begin
    waterNo := currentIntNo;
    --取出当前年
    begin
      select bill_year INTO billYear from ACC_TK.IC_PRM_BILL_CURRENT_DATE;
    EXCEPTION
      when OTHERS then
      begin
        null;
      end;
    end;
    if(billYear is null) THEN--当前年不存在
    begin
      insert into ACC_TK.IC_PRM_BILL_CURRENT_DATE(bill_year) values(curYear);
    end;
    else
    begin
      if(billYear<>curYear) THEN--系统当前年与表当前年不一致 已过1年
      begin
          waterNo := initValue;
          update ACC_TK.IC_PRM_BILL_CURRENT_DATE set bill_year=curYear;
      end;
      END IF;
      update ACC_TK.IC_PRM_BILL_CURRENT_FLOW set current_int_no=waterNo+1 where bill_main_type_id=billType;
    end;
    end IF;
  END;
  else --当前流水号不存在
  begin
    waterNo := initValue;
    --流水号+1
    insert into ACC_TK.IC_PRM_BILL_CURRENT_FLOW(bill_main_type_id,current_no,current_int_no) values(billType,'',initValue+1);
  end;
  end if;

  msg :=  waterNo;

  --格式化流水号
  strWaterNo := LPAD(waterNo,6,'0');
  --单号=单类型+当前年+6位流水号
  billNo := billType||curYear||strWaterNo;

  RETURN billNo;

END UF_IC_ES_GET_BILL_FLOW;
/
grant execute on ACC_TK.UF_IC_ES_GET_BILL_FLOW to ACC_TK_APP;


prompt
prompt Creating function UF_IC_SAM_GET_BILL_FLOW
prompt =========================================
prompt
create or replace function acc_tk."UF_IC_SAM_GET_BILL_FLOW"(
       Order_Type_Code in VARCHAR2, --订单类型
       Result OUT VARCHAR2 --返回订单号
  ) return varchar2 IS

  --PRAGMA AUTONOMOUS_TRANSACTION;

  --Result VARCHAR2(20);      --返回订单号
  Cur_Date varchar2(8);     --系统当前年月日
  Cur_Date_Temp VARCHAR2(8);--数据记录年月日
  Water_No INTEGER;         --结果流水号
  Order_Type_Code_temp varchar2(4);--临时订单类型
  num INTEGER;              --计数

/*
功能：密钥管理系统生成订单号方法
创建人：lindaquan
入参：Order_Type_Code 订单类型
出参：Result 订单号
*/
begin
  Cur_Date := to_char(Sysdate,'YYYYMMDD'); --取当前系统日期
  Water_No := 1; --初始流水号
  num := 0;
  RESULT := '00000000000000000000';--初始订单号
  Order_Type_Code_temp := RPAD(Order_Type_Code,4,'0');--格式化入参为4位

  BEGIN
    --判断是否存在记录
    SELECT COUNT(1) INTO num FROM ic_sam_order_water WHERE order_type = Order_Type_Code_temp;
    IF num > 0 THEN
        --存在记录
        SELECT to_char(order_date,'YYYYMMDD'), order_water INTO Cur_Date_Temp,Water_No
        FROM ic_sam_order_water WHERE order_type = Order_Type_Code_temp AND rownum=1;
        --记录日期与当前日期相等
        IF Cur_Date = Cur_Date_Temp THEN
           Water_No := Water_No + 1;--流水号+1
        END IF;
        --更新流水号
        UPDATE ic_sam_order_water SET order_date = SYSDATE, order_water = Water_No WHERE order_type = Order_Type_Code_temp;

    ELSE
        --不存在记录，插入新记录
        INSERT INTO ic_sam_order_water VALUES (Order_Type_Code_temp,SYSDATE,Water_No);
    END IF;

    --合拼流水号
    RESULT := Order_Type_Code_temp || Cur_Date || LPAD(Water_No,8,'0');

  END;

  --COMMIT;

  return(Result);
end UF_IC_SAM_GET_BILL_FLOW;
/
grant execute on ACC_TK.UF_IC_SAM_GET_BILL_FLOW to ACC_TK_APP;


prompt
prompt Creating function UP_DMS_TK_SPLITSTR
prompt ====================================
prompt
CREATE OR REPLACE FUNCTION ACC_TK."UP_DMS_TK_SPLITSTR"(p_string IN VARCHAR2, p_delimiter IN VARCHAR2)
    RETURN str_split
    PIPELINED
AS
    v_length   NUMBER := LENGTH(p_string);
    v_start    NUMBER := 1;
    v_index    NUMBER;
BEGIN
    WHILE(v_start <= v_length)
    LOOP
        v_index := INSTR(p_string, p_delimiter, v_start);

        IF v_index = 0
        THEN
            PIPE ROW(SUBSTR(p_string, v_start));
            v_start := v_length + 1;
        ELSE
            PIPE ROW(SUBSTR(p_string, v_start, v_index - v_start));
            v_start := v_index + 1;
        END IF;
    END LOOP;

    RETURN;
END up_dms_tk_splitstr;
/
grant execute on ACC_TK.UP_DMS_TK_SPLITSTR to ACC_TK_APP;


prompt
prompt Creating function UP_DMS_TK_TABLENO
prompt ===================================
prompt
create or replace function acc_tk."UP_DMS_TK_TABLENO"(in_num number) --输入的当前序号
  --函 数 名： up_dms_tk_tableno
  --功能描述：根据传入的序列号值，计算一下个序列号值，例如传入1，返回002，传入22返回0023，传入123返回0124
  --输   入: 整数序列号值
  --输   出：4位的序列号值
  --返回值    ：
  --创建者：  张建华
  --创建日期：20131021

 return varchar2 is
  v_temp_num number;
begin
  v_temp_num := in_num + 1;

  if in_num < 0 then
    return '001';
  elsif in_num < 10 then
    return '00' || v_temp_num;
  elsif in_num < 100 then
    return '0' || v_temp_num;
  elsif in_num < 999 then
    return '' || v_temp_num;
  else
    return '001';
  end if;

end up_dms_tk_tableno;
/
grant execute on ACC_TK.UP_DMS_TK_TABLENO to ACC_TK_APP;


prompt
prompt Creating function UP_DM_TK_SPLITSTR
prompt ===================================
prompt
CREATE OR REPLACE FUNCTION ACC_TK.up_dm_tk_splitstr(p_string IN VARCHAR2, p_delimiter IN VARCHAR2)
    RETURN str_split
    PIPELINED
AS
    v_length   NUMBER := LENGTH(p_string);
    v_start    NUMBER := 1;
    v_index    NUMBER;
BEGIN
    WHILE(v_start <= v_length)
    LOOP
        v_index := INSTR(p_string, p_delimiter, v_start);

        IF v_index = 0
        THEN
            PIPE ROW(SUBSTR(p_string, v_start));
            v_start := v_length + 1;
        ELSE
            PIPE ROW(SUBSTR(p_string, v_start, v_index - v_start));
            v_start := v_index + 1;
        END IF;
    END LOOP;

    RETURN;
END up_dm_tk_splitstr;
/
grant execute on ACC_TK.UP_DM_TK_SPLITSTR to ACC_TK_APP;


prompt
prompt Creating function UP_DM_TK_TABLENO
prompt ==================================
prompt
create or replace function acc_tk.up_dm_tk_tableno(in_num number) --输入的当前序号
  --函 数 名： up_dms_tk_tableno
  --功能描述：根据传入的序列号值，计算一下个序列号值，例如传入1，返回002，传入22返回023，传入123返回124
  --输   入: 整数序列号值
  --输   出：3位的序列号值
  --返回值    ：
  --创建者：  张建华
  --创建日期：20131021
  --修改 20150521 mqf 4位的序列号值改为6位

 return varchar2 is
  v_temp_num number;
begin
  v_temp_num := in_num + 1;

  if in_num < 0 then
    return '000001';
  elsif in_num < 9 then
    return '00000' || v_temp_num;
  elsif in_num < 99 then
    return '0000' || v_temp_num;
  elsif in_num < 999 then
    return '000' || v_temp_num;
  elsif in_num < 9999 then
    return '00' || v_temp_num;
  elsif in_num < 99999 then
    return '0' || v_temp_num;
  elsif in_num < 999999 then
    return '' || v_temp_num;
  else
    return '000001';
  end if;

end up_dm_tk_tableno;
/
grant execute on ACC_TK.UP_DM_TK_TABLENO to ACC_TK_APP;


prompt
prompt Creating procedure IC_TK_OUT_GETSTATIONDISTRIBUTE
prompt =================================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."IC_TK_OUT_GETSTATIONDISTRIBUTE"(p_cur            out sys_refcursor,
                                                             p_distributeDate in varchar,
                                                             p_icMainType     in varchar,
                                                             p_icSubType      in varchar,
                                                             p_cardMoney      in varchar,
                                                             p_validDate      in varchar,
                                                             p_lineId         in varchar,
                                                             p_stationId      in varchar)
---------------------------------------------------------------------------------
  --过程名:    IC_TK_OUT_GetStationDistribute
  --功能:      配票数量计算
  --创建者：  liangminglong
  --创建日期：20130909
  --输出:     p_cur结果集
  --正式版
  -- 修改：2015-01-28 wangkejia p_icMainType增加not in 异形票'7'和手机票'8'的过滤
  -- 修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票
  -------------------------------------------------------------------------------
 AS
  v_dateCurrent          date; --当前配票的日期
  v_dateBefore           varchar(18); --当前日期前一天
  v_dateBeforeStart      varchar(18); --上日起始时间
  v_dateBeforeEnd        varchar(18); --上日结束时间
  v_weekBeforeEnd        varchar(18); --最近一周结束时间
  v_weekBeforeStart      varchar(18); --最近一周起始时间
  v_dateBeforeSevenStart varchar(18); --最近7天起始时间
  v_dateBeforeSevenEnd   varchar(18); --最近7天结束时间
  v_yearHalfBeforeStart  varchar(18); --最近半年起始时间
  v_yearHalfBeforeEnd    varchar(18); --最近半年结束时间
  v_pIcSubType           numeric(38, 0); --票卡子类型
  v_pCardMoney           numeric(20, 2); --面值
  v_pStationId           numeric(38, 0); --车站ID
  v_daysHalfYear         integer; --半年天数
  v_daysWeek             integer; --1个星期天数
  v_n                    integer;
  v_isTokenWithMoney     integer; --判断是否是预制票
  v_cardMoney            varchar(4);

BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');

  delete from t#ic_result;
  delete from t#ic_sale;
  delete from t#ic_circle;
  delete from t#ic_yesUsed;
  delete from t#ic_tvm;
  delete from t#ic_loss;
  delete from t#ic_saleweek;
  delete from t#ic_reserve;
  --配票计算只对普通token、预制票、储值票、羊城通、纸票、赠票
  --20170714 modify by mqf 原来已有'9'
  if (p_icMainType not in ('1', '2', '6', '12', '40', '7', '8', '9')) then
    return;
  end if;
  select p_cardMoney into v_cardMoney from dual;
  ----参数赋值初时化------------------------------------------
  select sysdate into v_dateCurrent from dual; --当前日期
  select (to_char(v_dateCurrent - 6, 'yyyymm')) || '01 00:00:00'
    into v_yearHalfBeforeStart
    from dual; --最近半年的起始时间
  select (to_char(v_dateCurrent - 0, 'yyyymm')) || '01 00:00:00'
    into v_yearHalfBeforeEnd
    from dual; --最近半年的结束时间
  --select '最近半年时间段:'+@yearHalfBeforeStart +'至'+ @yearHalfBeforeEnd
  select to_char(v_dateCurrent - 1, 'yyyymmdd')
    into v_dateBefore
    from dual; --当前日期前1天
  select (to_char(v_dateCurrent - 1, 'yyyymmdd')) || ' 00:00:00'
    into v_dateBeforeStart
    from dual; --昨天开始时间
  select (to_char(v_dateCurrent - 0, 'yyyymmdd')) || ' 00:00:00'
    into v_dateBeforeEnd
    from dual; --昨天结束时间
  --select '昨天时间段:'+@dateBeforeStart +'至'+ @dateBeforeEnd
  select to_char(v_dateCurrent, 'd') into v_n from dual;
  select ((to_char(v_dateCurrent - (v_n + 6), 'yyyymmdd'))) || ' 00:00:00'
    into v_weekBeforeStart
    from dual; --上一星期的开始时间
  select ((to_char(v_dateCurrent - (v_n - 1), 'yyyymmdd'))) || ' 00:00:00'
    into v_weekBeforeEnd
    from dual; --上一星期的结束时间
  --select '上一星期段:'+@weekBeforeStart +'至'+ @weekBeforeEnd
  select to_char(v_dateCurrent - 7, 'yyyymmdd') || ' 00:00:00'
    into v_dateBeforeSevenStart
    from dual; --最近7天开始时间
  select v_dateBeforeEnd into v_dateBeforeSevenEnd from dual; --最近7天结束时间
  --select '最近7天时间段:'+@dateBeforeSevenStart +'至'+ @dateBeforeSevenEnd
  DBMS_OUTPUT.PUT_LINE('v_dateCurrent=' || v_dateCurrent);

  DBMS_OUTPUT.PUT_LINE('v_yearHalfBeforeStart=' || v_yearHalfBeforeStart);
  DBMS_OUTPUT.PUT_LINE('v_yearHalfBeforeEnd=' || v_yearHalfBeforeEnd);

  DBMS_OUTPUT.PUT_LINE('v_dateBefore=' || v_dateBefore);
  DBMS_OUTPUT.PUT_LINE('v_dateBeforeStart=' || v_dateBeforeStart);
  DBMS_OUTPUT.PUT_LINE('v_dateBeforeEnd=' || v_dateBeforeEnd);
  DBMS_OUTPUT.PUT_LINE('v_weekBeforeStart=' || v_weekBeforeStart);
  DBMS_OUTPUT.PUT_LINE('v_dateBeforeEnd=' || v_dateBeforeEnd);
  DBMS_OUTPUT.PUT_LINE('v_weekBeforeStart=' || v_weekBeforeStart);
  DBMS_OUTPUT.PUT_LINE('v_weekBeforeEnd=' || v_weekBeforeEnd);
  DBMS_OUTPUT.PUT_LINE('v_dateBeforeSevenStart=' || v_dateBeforeSevenStart);
  DBMS_OUTPUT.PUT_LINE('v_dateBeforeSevenEnd=' || v_dateBeforeSevenEnd);

  --储值票、羊城通、羊城通发票的面值查找时按0计或查找时不按面值查找
  if (p_icMainType = '1' or p_icMainType = '6' or p_icMainType = '34') then
    select '0000' into v_cardMoney from dual;
  end if;
  --面值转换为元
  select to_number(v_cardMoney) / 100 into v_pCardMoney from dual;
  --判断是否预制票
  if (p_icMainType = '12' and v_pCardMoney <> 0.00) then
    select 1 into v_isTokenWithMoney from dual;
  else
    select 0 into v_isTokenWithMoney from dual;
  end if;
  --票卡子类型转换成数值
  if (p_icMainType = '12' and p_lineId <> ' ' and p_stationId <> ' ') then
    --应急票
    select to_number(35) into v_pIcSubType from dual; --应急票暂时定义为35
  else
    select to_number(p_icSubType) into v_pIcSubType from dual;
  end if;
  --车站代码转换成数值
  select to_number(p_stationId) into v_pStationId from dual;
  select to_date(substr(v_yearHalfBeforeStart, 1, 8), 'yyyymmdd') -
         to_date(substr(v_yearHalfBeforeEnd, 1, 8), 'yyyymmdd')
    into v_daysHalfYear
    from dual; --180 --半年天数
  select 7 into v_daysWeek from dual; --周天数

  --DBMS_OUTPUT.PUT_LINE('v_daysHalfYear='||v_daysHalfYear);
  ---------------------------公用计算---------------------------------------------------------
  --获取配票周期
  insert into t#ic_circle
    (TICKETTYPE_ID, CIRCLE)
    select to_number(ic_sub_type), circle
      from ic_prm_distribute_circle
     where ic_main_type = p_icMainType
       and ic_sub_type = p_icSubType;

  --非预制票计算日均发售量、上日结存
  if (p_icMainType = '12' and v_pCardMoney = 0.00) then
    -------------------------日均发售量计算--------------------------------------------
    /*
        --获取日均发售量
        --日均发售量取最近半年（自然年）的发售量平均数，
        --例如：如果做8月份的配票计划，系统的日均发售量即是2月至7月自然月的日均发售数
        insert into t#ic_sale(DEPT_ID,TICKETTYPE_ID,TICKETVALUE,CURRENTTOTAL)
            select DEPT_ID,TICKETTYPE_ID,TICKETVALUE,to_number(sum(nvl(ICCSDEALNUM,0))/v_daysHalfYear)
                from ic_inf_station_sale
                where REPORTDATE >= to_date(v_yearHalfBeforeStart,'yyyymmdd hh24:mi:ss') and REPORTDATE <to_date(v_yearHalfBeforeEnd,'yyyymmdd hh24:mi:ss') and
                       TICKETTYPE_ID=v_pIcSubType and TICKETVALUE=v_pCardMoney
                group by  DEPT_ID,TICKETTYPE_ID,TICKETVALUE;
    */
    -----------------------日均发售量计算-----------------------------------------------
    ------------------------------------------------------------------------------------
    insert into t#ic_sale
      (DEPT_ID, TICKETTYPE_ID, TICKETVALUE, CURRENTTOTAL)
      select DEPT_ID,
             TICKETTYPE_ID,
             VALUE,
             to_number(sum(nvl(SALENUM, 0)) / v_daysHalfYear)
        from ic_inf_station_sale
       where REPORTDATE >=
             to_date(v_yearHalfBeforeStart, 'yyyymmdd hh24:mi:ss')
         and REPORTDATE <
             to_date(v_yearHalfBeforeEnd, 'yyyymmdd hh24:mi:ss')
         and TICKETTYPE_ID = v_pIcSubType
         and VALUE = v_pCardMoney
       group by DEPT_ID, TICKETTYPE_ID, VALUE;

  end if;

  /*
    --储值票、羊城通、纸票、赠票日均发售量
    if(p_icMainType ='1' or p_icMainType ='6' or p_icMainType ='9') then
      --获取日均发售量
      --日均发售量取最近半年（自然年）的发售量平均数，
      --例如：如果做8月份的配票计划，系统的日均发售量即是2月至7月自然月的日均发售数
      insert into t#ic_sale(DEPT_ID,TICKETTYPE_ID,TICKETVALUE,CURRENTTOTAL)
        select DEPT_ID,TICKETTYPE_ID,TICKETVALUE,to_number(sum(nvl(OP101SOLDNUM,0))/v_daysHalfYear)
            from ic_inf_station_sale
            where REPORTDATE >= to_date(v_yearHalfBeforeStart,'yyyymmdd hh24:mi:ss') and REPORTDATE <to_date(v_yearHalfBeforeEnd,'yyyymmdd hh24:mi:ss') and
                   TICKETTYPE_ID=v_pIcSubType and TICKETVALUE=v_pCardMoney
            group by  DEPT_ID,TICKETTYPE_ID,TICKETVALUE;
    end if;
  */
  ----------------- 上日结存计算-------------------------------------------------------------------------
  insert into t#ic_yesUsed
    (DEPT_ID, TICKETTYPE_ID, TICKETVALUE, CURRENTTOTAL)
    select DEPT_ID,
           TICKETTYPE_ID,
           VALUE,
           to_number(sum(nvl(CURRENTTOTAL, 0)))
      from ic_inf_station_sale
     where REPORTDATE >= to_date(v_dateBeforeStart, 'yyyymmdd hh24:mi:ss')
       and REPORTDATE < to_date(v_dateBeforeEnd, 'yyyymmdd hh24:mi:ss')
       and TICKETTYPE_ID = v_pIcSubType
       and VALUE = v_pCardMoney
     group by DEPT_ID, TICKETTYPE_ID, VALUE;
  ----------------- 上日结存计算-------------------------------------------------------------------------
  -------------------------------------------------------------------------------------------------------

  ---------------------------公用计算---------------------------------------------------------
  if (p_icMainType = '12' and v_pCardMoney = 0.00) then
    ----------------日均流失数量计算-------------------------------------------------------------------
    --获取日均流失数量改为如下:
    --获取日均流失量计算的扣减数 闸机回收数-发售数 最近7天的数据
    insert into t#ic_loss
      (DEPT_ID, TICKETTYPE_ID, TICKETVALUE, CURRENTTOTAL)
      select DEPT_ID,
             TICKETTYPE_ID,
             VALUE,
             to_number(sum(nvl(RETURNNUM, 0) - nvl(CURRENTTOTAL, 0)) /
                       v_daysWeek)
        from ic_inf_station_sale
       where REPORTDATE >=
             to_date(v_dateBeforeSevenStart, 'yyyymmdd hh24:mi:ss')
         and REPORTDATE <
             to_date(v_dateBeforeSevenEnd, 'yyyymmdd hh24:mi:ss')
         and TICKETTYPE_ID = v_pIcSubType
         and VALUE = v_pCardMoney
       group by DEPT_ID, TICKETTYPE_ID, VALUE;
    ----------------日均流失数量计算-------------------------------------------------------------------

    -----------------TVM储备数量计算-------------------------------------------------------------------
    --储备数量×TVM
    insert into t#ic_tvm
      (DEPT_ID, CURRENTTOTAL)
      select to_number(station_id),
             to_number(nvl(tvm_store_num * tvm_num, 0))
        from ic_prm_distribute_param;
    -----------------TVM储备数量计算------------------------------------------------------------------------

    --普通TOKEN配票量计算
    --配票量=日均发售量+储备数量×TVM数量+日均流失数量×配票周期（人工输入）－上日结存量
    insert into t#ic_result
      (DEPT_ID, TICKETTYPE_ID, TICKETVALUE, CURRENTTOTAL)
      select A.DEPT_ID,
             A.TICKETTYPE_ID,
             A.TICKETVALUE,
             nvl(A.CURRENTTOTAL, 0) + nvl(B.CURRENTTOTAL, 0) +
             nvl(C.CURRENTTOTAL, 0) * nvl(E.CIRCLE, 0) -
             nvl(D.CURRENTTOTAL, 0)
        from t#ic_sale    A,
             t#ic_tvm     B,
             t#ic_loss    C,
             t#ic_yesUsed D,
             t#ic_circle  E
       where A.DEPT_ID = B.DEPT_ID(+)
         and A.DEPT_ID = C.DEPT_ID(+)
         and A.TICKETTYPE_ID = C.TICKETTYPE_ID(+)
         and A.TICKETVALUE = C.TICKETVALUE(+)
         and A.DEPT_ID = D.DEPT_ID(+)
         and A.TICKETTYPE_ID = D.TICKETTYPE_ID(+)
         and A.TICKETVALUE = D.TICKETVALUE(+)
         and A.TICKETTYPE_ID = E.TICKETTYPE_ID(+);
  end if;

  -------------------------预制单程票 最近一周总发售量计算--------------------------------------------
  if (p_icMainType = '12' and v_pCardMoney <> 0.00) then

    --预制票上日结存计算，接口不限期预制票票卡子类型为11 ，票库系统预制票票卡子类型为22
    insert into t#ic_yesUsed
      (DEPT_ID, TICKETTYPE_ID, TICKETVALUE, CURRENTTOTAL)
      select DEPT_ID, 22, VALUE, to_number(sum(nvl(CURRENTTOTAL, 0)))
        from ic_inf_station_sale
       where REPORTDATE >=
             to_date(v_dateBeforeStart, 'yyyymmdd hh24:mi:ss')
         and REPORTDATE < to_date(v_dateBeforeEnd, 'yyyymmdd hh24:mi:ss')
         and TICKETTYPE_ID = 11
         and VALUE = v_pCardMoney
       group by DEPT_ID, TICKETTYPE_ID, VALUE;

    --最近一周总发售量
    --最近一周总发售量计算，接口不限期预制票票卡子类型为11 ，票库系统预制票票卡子类型为22
    insert into t#ic_saleweek
      (DEPT_ID, TICKETTYPE_ID, TICKETVALUE, CURRENTTOTAL)
    --select DEPT_ID,22,VALUE,sum(nvl(OP101SOLDNUM,0))
      select DEPT_ID, 22, VALUE, sum(nvl('', 0))
        from ic_inf_station_sale
       where REPORTDATE >=
             to_date(v_weekBeforeStart, 'yyyymmdd hh24:mi:ss')
         and REPORTDATE < to_date(v_weekBeforeEnd, 'yyyymmdd hh24:mi:ss')
         and TICKETTYPE_ID = 11
         and VALUE = v_pCardMoney
       group by DEPT_ID, VALUE;

    --获取配票保有量
    insert into t#ic_reserve
      (DEPT_ID, TICKETTYPE_ID, TICKETVALUE, RESERVE_NUM)
      select to_number(station_id),
             to_number(ic_sub_type),
             to_number(card_money / 100),
             nvl(reverve_num, 0)
        from ic_prm_distribute_reserve
       where ic_sub_type = p_icSubType
         and card_money = to_number(v_cardMoney);

    --预制单程票配票量计算\
    --配票量=保有量+最近一周总发售量－上日结存量
    insert into t#ic_result
      (DEPT_ID, TICKETTYPE_ID, TICKETVALUE, CURRENTTOTAL)
      select nvl(A.DEPT_ID, C.DEPT_ID),
             nvl(A.TICKETTYPE_ID, C.TICKETTYPE_ID),
             nvl(A.TICKETVALUE, C.TICKETVALUE),
             nvl(C.RESERVE_NUM, 0) + nvl(A.CURRENTTOTAL, 0) -
             nvl(B.CURRENTTOTAL, 0)
        from t#ic_saleweek A, t#ic_yesUsed B, t#ic_reserve C
       where A.DEPT_ID = B.DEPT_ID(+)
         and A.TICKETTYPE_ID = B.TICKETTYPE_ID(+)
         and A.TICKETVALUE = B.TICKETVALUE(+)
         and A.DEPT_ID(+) = C.DEPT_ID;
  end if;

  /*
    --储值票/羊城通车票配票量计算
    --配票量=日均发售量×21天（人工输入）－上日结存量
    --纸票/赠票配票量计算
    --配票量=日均发售量（分票价显示）×37天（人工输入）－上日结存量
    if(p_icMainType ='1' or p_icMainType ='6' or p_icMainType ='9') then
    insert into t#ic_result(DEPT_ID,TICKETTYPE_ID,TICKETVALUE,CURRENTTOTAL)
                    select A.DEPT_ID,A.TICKETTYPE_ID,A.TICKETVALUE,nvl(A.CURRENTTOTAL,0)*nvl(C.CIRCLE,0)-nvl(B.CURRENTTOTAL,0)
                            from t#ic_sale A,t#ic_yesUsed B,t#ic_circle C
                            where A.DEPT_ID =B.DEPT_ID(+) and A.TICKETTYPE_ID =B.TICKETTYPE_ID(+) and
                                  A.TICKETVALUE =B.TICKETVALUE(+) and
                                  A.TICKETTYPE_ID =C.TICKETTYPE_ID(+);
    end if;
  */
  ---返回结果
  --返回结果集到游标变量--
  OPEN p_cur FOR
    select to_number(DEPT_ID) DEPT_ID,
           to_number(TICKETTYPE_ID) TICKETTYPE_ID,
           to_number(TICKETVALUE * 100) TICKETVALUE,
           to_number(CURRENTTOTAL) CURRENTTOTAL
      from t#ic_result
     order by DEPT_ID, TICKETTYPE_ID, TICKETVALUE, CURRENTTOTAL;
  --删除临时表数据
  delete from t#ic_result;
  delete from t#ic_sale;
  delete from t#ic_circle;
  delete from t#ic_yesUsed;
  delete from t#ic_tvm;
  delete from t#ic_loss;
  delete from t#ic_saleweek;
  delete from t#ic_reserve;

END;
/
grant execute on ACC_TK.IC_TK_OUT_GETSTATIONDISTRIBUTE to ACC_TK_APP;


prompt
prompt Creating procedure RP_UNSETTLED_DATA_STASTISTICS
prompt ================================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."RP_UNSETTLED_DATA_STASTISTICS" (
--????????
IN_TYPE                     IN INT,         --??????0??????????1??????????
IN_balance_date_start       IN VARCHAR2,           --????????
IN_balance_date_end         IN VARCHAR2,           --????????
IN_merchant_no              IN VARCHAR2,          --??????????
IN_error_type_no            IN VARCHAR2,          --????????????
IN_deal_type                IN VARCHAR2,          --????????????
in_begin_num                IN INT,        --????????
in_end_num                  IN INT,         --????????
--????????
OU_RECORD_NUM                   OUT VARCHAR2,          --????????
CUR_unsettled_data_stastistics  OUT SYS_REFCURSOR,     --??????
Msg_no                          OUT VARCHAR2           --??????
)
IS
V_RECORD_NUM NUMBER;
V_SQL_N VARCHAR(2056);
V_SQL VARCHAR2(2056);
V_SQL_MERCHANT_NO VARCHAR2(256);
V_SQL_error_type_no VARCHAR2(256);
V_SQL_deal_type VARCHAR2(256);
BEGIN
   IF NVL(IN_merchant_no,'0000') = '0000' THEN    --IN_merchant_no????
    V_SQL_MERCHANT_NO := '';                      --????????????
  ELSE                                            --IN_merchant_no??????
      V_SQL_MERCHANT_NO := ' and a.merchant_no in ' || IN_merchant_no ;    --???? and a.merchant_no in ('00002222')
  END IF ;
  IF NVL(IN_error_type_no,'0000') = '0000' THEN      --IN_error_type_no????
    V_SQL_ERROR_TYPE_NO := '';                      --????????????
  ELSE                                              --IN_error_type_no??????
      V_SQL_ERROR_TYPE_NO := ' and b.error_type_no in ' || IN_error_type_no ;    --???? and a.error_type_no in ('00002222')
  END IF ;
  IF NVL(IN_deal_type,'0000') = '0000' THEN      --IN_deal_type????
    V_SQL_DEAL_TYPE := '';                      --????????????
  ELSE                                          --IN_deal_type??????
      V_SQL_DEAL_TYPE := ' and b.deal_type in ' || IN_deal_type ;    --???? and a.deal_type in ('00002222')
  END IF ;
   --????????
V_SQL_N := ' SELECT COUNT(1)  FROM ( '
          || ' SELECT t.deal_count,t.deal_fee,f.merchant_name,g.deal_type_name,h.card_type_name,i.error_type_name,t.balance_date,t.deal_time as deal_date,t.deal_type as deal_type from '
          || ' (SELECT count(b.terminal_no) as deal_count,sum(deal_fee) as deal_fee,a.merchant_no,b.error_type_no,b.deal_type,b.card_sub_type,to_char(b.balance_date,''yyyy-mm-dd'') as balance_date,substr(b.deal_time,0,8) as deal_time '
          || ' from SYS_MERCHANT_INFO a, QS_DEAL_ERR_RECORD b, SYS_TERMINAL_INFO c '
          || ' where a.merchant_no=c.merchant_no and b.terminal_no=c.terminal_no '
          || ' and b.balance_date >= to_date(''' || IN_balance_date_start || ''' || '' 00:00:00'',''yyyy-mm-dd HH24:mi;ss'') '
          || ' and b.balance_date <= to_date('''   || IN_balance_date_end   || ''' || '' 23:59:59'',''yyyy-mm-dd HH24:mi;ss'') '
          || V_SQL_MERCHANT_NO || V_SQL_ERROR_TYPE_NO || V_SQL_DEAL_TYPE
          || ' group by a.merchant_no,b.error_type_no,b.deal_type,b.card_sub_type,b.balance_date,substr(b.deal_time,0,8) order by b.balance_date,a.merchant_no) t, '
          || ' SYS_MERCHANT_INFO f, SYS_DEAL_TYPE_INFO g, SYS_CARD_SUB_TYPE h, QS_ERROR_TYPE_INFO i '
          || ' where t.merchant_no=f.merchant_no and t.deal_type=g.deal_type and t.card_sub_type=h.card_sub_type and t.error_type_no=i.error_type_no '
          || ' ) ';
EXECUTE IMMEDIATE V_SQL_N  INTO  V_RECORD_NUM  ;
 --????
 if IN_TYPE = 0 THEN
     V_SQL := ' SELECT y.* FROM ( '
        || ' select x.*,rownum rn from ( '
        || ' SELECT t.deal_count,t.deal_fee,f.merchant_name,g.deal_type_name,h.card_type_name,i.error_type_name,t.balance_date,t.deal_time as deal_date,t.deal_type as deal_type from '
        || ' (SELECT count(b.terminal_no) as deal_count,sum(deal_fee) as deal_fee,a.merchant_no,b.error_type_no,b.deal_type,b.card_sub_type,to_char(b.balance_date,''yyyy-mm-dd'') as balance_date,substr(b.deal_time,0,8) as deal_time '
        || ' from SYS_MERCHANT_INFO a, QS_DEAL_ERR_RECORD b, SYS_TERMINAL_INFO c '
        || ' where a.merchant_no=c.merchant_no and b.terminal_no=c.terminal_no '
        || ' and b.balance_date >= to_date(''' || IN_balance_date_start || ''' || '' 00:00:00'',''yyyy-mm-dd HH24:mi;ss'') '
        || ' and b.balance_date <= to_date('''   || IN_balance_date_end   || ''' || '' 23:59:59'',''yyyy-mm-dd HH24:mi;ss'') '
        || V_SQL_MERCHANT_NO || V_SQL_ERROR_TYPE_NO || V_SQL_DEAL_TYPE
        || ' group by a.merchant_no,b.error_type_no,b.deal_type,b.card_sub_type,b.balance_date,substr(b.deal_time,0,8) order by b.balance_date,a.merchant_no) t, '
        || ' SYS_MERCHANT_INFO f, SYS_DEAL_TYPE_INFO g, SYS_CARD_SUB_TYPE h, QS_ERROR_TYPE_INFO i '
        || ' where t.merchant_no=f.merchant_no and t.deal_type=g.deal_type and t.card_sub_type=h.card_sub_type and t.error_type_no=i.error_type_no '
        || ' ) x where ROWNUM <= ' || in_end_num
        || ' ) y where y.rn > ' || in_begin_num;
   OPEN CUR_unsettled_data_stastistics FOR V_SQL;
 END IF;
 --??????
  if   IN_TYPE = 1 THEN
    V_SQL :=  ' SELECT t.deal_count,t.deal_fee,f.merchant_name,g.deal_type_name,h.card_type_name,i.error_type_name,t.balance_date,t.deal_time as deal_date,t.deal_type as deal_type from '
        || ' (SELECT count(b.terminal_no) as deal_count,sum(deal_fee) as deal_fee,a.merchant_no,b.error_type_no,b.deal_type,b.card_sub_type,to_char(b.balance_date,''yyyy-mm-dd'') as balance_date,substr(b.deal_time,0,8) as deal_time '
        || ' from SYS_MERCHANT_INFO a, QS_DEAL_ERR_RECORD b, SYS_TERMINAL_INFO c '
        || ' where a.merchant_no=c.merchant_no and b.terminal_no=c.terminal_no '
        || ' and b.balance_date >= to_date(''' || IN_balance_date_start || ''' || '' 00:00:00'',''yyyy-mm-dd HH24:mi;ss'') '
        || ' and b.balance_date <= to_date('''   || IN_balance_date_end   || ''' || '' 23:59:59'',''yyyy-mm-dd HH24:mi;ss'') '
        || V_SQL_MERCHANT_NO || V_SQL_ERROR_TYPE_NO || V_SQL_DEAL_TYPE
        || ' group by a.merchant_no,b.error_type_no,b.deal_type,b.card_sub_type,b.balance_date,substr(b.deal_time,0,8) order by b.balance_date,a.merchant_no) t, '
        || ' SYS_MERCHANT_INFO f, SYS_DEAL_TYPE_INFO g, SYS_CARD_SUB_TYPE h, QS_ERROR_TYPE_INFO i '
        || ' where t.merchant_no=f.merchant_no and t.deal_type=g.deal_type and t.card_sub_type=h.card_sub_type and t.error_type_no=i.error_type_no ';
    OPEN CUR_unsettled_data_stastistics FOR V_SQL;
  END IF;
  --????????
  OU_RECORD_NUM := TO_CHAR(V_RECORD_NUM) ;
  Msg_no := '30000';      --????
RETURN;
EXCEPTION WHEN OTHERS THEN
  BEGIN
    RETURN;
  END;
END rp_unsettled_data_stastistics;
/
grant execute on ACC_TK.RP_UNSETTLED_DATA_STASTISTICS to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_ES_GEN_PRODUCE_BILL
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ES_GEN_PRODUCE_BILL"
( orderNo IN CHAR                   --订单号
, finiPronum IN INTEGER             --有效票
, surplusNum IN INTEGER             --结余票
, trashyNum IN INTEGER              --废票
, esSamno IN VARCHAR2               --SAM卡号
, hdlFlag IN VARCHAR2               --处理标志
, achieveTime IN DATE               --生产时间
, orderMemo IN VARCHAR2             --备注
, esWorkTypeId IN VARCHAR2          --工作类型
, drawNum IN INTEGER                --领票票（空发）
, produceType  in varchar2          --生产类型（0：为ES，1为空发）
, retCode  OUT INTEGER              --返回结果
, retMsg OUT VARCHAR2               --输出信息
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_ES_GEN_PRODUCE_BILL
  --功能: 通讯程序自动生成生产单

  --插入物理卡号与逻辑卡号对照备份表(20151016添加water_no字段插入 by lindaquan)
  --buf表插入info表时添加卡商代码、手机号字段（20160111 by lindaquan）
  --判断空充时直接将参数插入空发生产单表ic_mb_pdu_order_form（20160111 by lindaquan）
  --IC_ES_HUNCH_INFO表增加insert_time（20170217 by lindaquan）
  --重编码Buf迁移时，添加储值票记录表（IC_ES_AGAIN_INFO_SVT），原表为单程票记录表（20170330 by lindaquan）
  -------------------------------------------------------------------------------
AS
  recNum INTEGER;
  strSql VARCHAR2( 1000);
  planBillNo  CHAR(12 );              --生产计划单
  outBillNo   CHAR(12 );               --出库单号
  billNo      CHAR(12 );                  --单号
  esOperator VARCHAR2( 10); --ES操作员
  totalPlanProduce INTEGER; --计划单总生产数量
  totalDraw INTEGER;  --领票总数量
  totalSurplus INTEGER; --结余总数量
  totalTrash INTEGER;  --费票总数量
  orderNoInt INTEGER;                   --订单号
  curInt INTEGER; --游标循环序数
  cardType INTEGER ;  --卡片类型
BEGIN

  -- 判断如果是空发生产，执行以下一步即可
  if(produceType = '1') then
      BEGIN
        insert into ACC_TK.ic_mb_pdu_order_form
          (order_no, es_worktype_id, draw_num, fini_pronum, surplus_num, trashy_num, hdl_flag, achieve_time, order_memo)
        values
          (orderNo, esWorkTypeId, drawNum, finiPronum, surplusNum, trashyNum, hdlFlag, achieveTime, orderMemo);
        retMsg := '空发生成ES生产单成功';
        retCode := 0;
        return;
      EXCEPTION
        WHEN OTHERS THEN
        BEGIN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE );
            DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
            retCode := 1;
            retMsg := '空发生成生产订单表失败,' ||SQLCODE|| ':'||SQLERRM ;
            return;
        END;
      END;
  end if;

  --清理临时表
  DELETE ACC_TK.T#IC_PDU_PLAN_ORDER_MAPPING;
  DELETE ACC_TK.T#IC_PDU_ORDER_FORM;
  DELETE ACC_TK.T#IC_PDU_PRODUCE_BILL_DETAIL;
  DELETE acc_tk.T#IC_PDU_RESULT_DETAIL;
  commit;

  --取出库计划单号、出库单号
  SELECT plan_bill_no, out_bill_no into planbillno, outbillno
      FROM ACC_TK.ic_pdu_plan_order_mapping
      WHERE order_no = orderno;
  ---判断是否需生成生产单，如存在生产单，则返回
  select count(*) into recNum FROM dual
    where EXISTS (SELECT 1 from acc_tk.IC_PDU_PRODUCE_BILL where out_bill_no=outBillNo);
  if recNum<> 0 then
    begin
       retCode := 4;
       retMsg := '生产单已存在' ;
       return;
    end;
  end if;
  --更新订单的有效票、废票、结余票、SAM卡号、处理标志、生产时间、备注
  BEGIN
    UPDATE ACC_TK.IC_PDU_ORDER_FORM
      SET fini_pronum= finiPronum, surplus_num= surplusnum, trashy_num= trashynum,
        es_samno= essamno, hdl_flag= hdlflag, achieve_time= achievetime, order_memo= ordermemo
      where order_no=orderNo;
  EXCEPTION
    WHEN OTHERS THEN
    BEGIN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE );
        DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
        retCode := 1;
        retMsg := '更新生产订单表失败,' ||SQLCODE|| ':'||SQLERRM ;
        return;
    END;
  END;
  --当订单未完整完成时（hdlflag='2'：被中途中止结束订单）
  /*
  BEGIN
    IF hdlflag='2' THEN
      BEGIN
        -- 更新未开始的所有订单为2 未完整完成状态
        UPDATE ACC_TK.IC_PDU_ORDER_FORM
          SET fini_pronum= 0, surplus_num= pro_num, trashy_num= 0,
            es_samno= '', hdl_flag= hdlflag, achieve_time= achievetime, order_memo= ordermemo
          where order_no IN (SELECT order_no FROM ACC_TK.IC_PDU_PLAN_ORDER_MAPPING WHERE out_bill_no = outbillno )
                AND hdl_flag = 0;
        -- 更新除正在生产外的所有订单为1 完成状态
        UPDATE ACC_TK.IC_PDU_PLAN_ORDER_MAPPING SET finish_flag= '1', detail_total= 0
          WHERE out_bill_no = outbillno AND order_no NOT IN (
                SELECT order_no FROM ACC_TK.IC_PDU_ORDER_FORM WHERE hdl_flag=1
          ) AND finish_flag<> '1';
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      BEGIN
        ROLLBACK;
        retCode := 1;
        retMsg := '更新生产订单表失败2,'||SQLCODE||':'||SQLERRM;
        return;
      END;
  END;
  */
  --更新订单完成标志
  BEGIN
    IF hdlflag='2' OR hdlflag= '3' THEN
    BEGIN
      UPDATE ACC_TK.IC_PDU_PLAN_ORDER_MAPPING
        SET finish_flag= '1' , detail_total= finipronum
        WHERE order_no= orderno;
    END;
    END IF ;
  EXCEPTION
    WHEN OTHERS THEN
      BEGIN
        ROLLBACK;
        retCode := 2;
        retMsg := '更新订单表或对照表失败' ;
        return;
      END;
  END;
  --判断生产计划是否还有未完成订单
  select count(*) into recNum from dual
    where EXISTS (select 1 from acc_tk.IC_PDU_PLAN_ORDER_MAPPING where plan_bill_no=planBillNo and finish_flag <>'1');
  if recNum!= 0 then
    begin
      --hwj modify 20140308
      --retCode := 3;
      retCode := 0;
      retMsg := '还有未完成订单' ;
      return;
    end;
  end if;
  --生产单号
  billNo := ACC_TK.uf_ic_es_get_bill_flow(retMsg);
   begin
    --取出ES操作员
     select operator into esOperator from ACC_TK.IC_OUT_DATE_PLAN where bill_no=planBillNo;
     ---统计数量
     select sum (draw_num),sum(trashy_num), sum(fini_pronum), sum(surplus_num)
          into totalDraw, totalTrash, totalPlanProduce, totalSurplus
        from ACC_TK.IC_PDU_ORDER_FORM
        where order_no in (select order_no from ACC_TK.IC_PDU_PLAN_ORDER_MAPPING where plan_bill_no=planBillNo);
   exception
     WHEN others THEN
     begin
       ROLLBACK;
       DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE ||':'||planBillNo);
       DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
       retMsg := '取出ES操作员或统计数量失败,' ||SQLCODE|| ':'||SQLERRM ;
       retCode := 5;
       return;
     end;
   end;
   --由于领票数量没有分拆到 生产单，所以需从原出库单查询领票数量
   SELECT out_num INTO totalDraw FROM ic_out_bill_detail WHERE bill_no = outbillno;
  ----生产生产单总表
   begin
     insert into ACC_TK.IC_PDU_PRODUCE_BILL(bill_no,out_bill_no,es_worktype_id,bill_date,
                                record_flag,remarks,es_operator,draw_total,system_balance,
                                es_useless_num,real_balance,man_useless_num,lost_num)
               values(billNo,outBillNo,esWorkTypeId,sysdate ,'3', '系统自动生成' ,esOperator,
                      totalDraw,totalSurplus,totalTrash, 0,0 ,0);
   exception
     when OTHERS THEN
     begin
       ROLLBACK;
       DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE ||':'||planBillNo);
       DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
       retMsg := '生成生产单失败,' ||SQLCODE|| ':'||SQLERRM ;
       retCode := 6;
       return;
     end;
   end;
   --生成生产明细
   --缓存生产单订单映射表
   begin
     insert into ACC_TK.T#IC_PDU_PLAN_ORDER_MAPPING(plan_bill_no,order_no,finish_flag,out_bill_no,out_water_no)
                  select plan_bill_no,order_no,finish_flag,out_bill_no,out_water_no
                  from  ACC_TK.IC_PDU_PLAN_ORDER_MAPPING where plan_bill_no=planBillNo;
   exception
    WHEN others THEN
    begin
       ROLLBACK;
       retMsg := '缓存生产单订单映射表失败,' ||SQLCODE|| ':'||SQLERRM ;
       retCode := 7;
       return;
    end;
   end;
   --缓存订单表
   begin
     insert into ACC_TK.T#IC_PDU_ORDER_FORM(order_no,card_main_code,card_sub_code,card_per_ava,card_mon,
                        draw_num,fini_pronum,surplus_num,trashy_num,
                        es_samno,line_code,station_code,
                        card_ava_days,exit_line_code,exit_station_code,model)
               select order_no,card_main_code,card_sub_code,card_per_ava,CARD_MON,
                      draw_num,fini_pronum,surplus_num,trashy_num,
                      es_samno,line_code,station_code,
                      card_ava_days,exit_line_code,exit_station_code, model
              from ACC_TK.IC_PDU_ORDER_FORM
              where order_no in (select order_no from ACC_TK.T#IC_PDU_PLAN_ORDER_MAPPING);
   exception
    when OTHERS then
    begin
       ROLLBACK;
       retMsg := '缓存订单表失败,' ||SQLCODE|| ':'||SQLERRM ;
       retCode := 8;
       return;
    end;
   end;
   begin
     --缓存生产明细
     insert into ACC_TK.T#IC_PDU_PRODUCE_BILL_DETAIL(bill_no,afc_main_type,afc_sub_type,
                          card_money,vaild_date,afc_line_id,afc_station_id,es_samno,
                          draw_quantity,order_no,out_bill_no,out_water_no,
                          card_ava_days,afc_exit_line_id,afc_exit_station_id,modal)
                select billNo ,A.card_main_code,A.card_sub_code,
                       A.card_mon,A.card_per_ava,A.line_code,A.station_code,A.es_samno,
                       A.fini_pronum,B.order_no,B.out_bill_no,B.out_water_no,
                       A.card_ava_days,A.exit_line_code,A.exit_station_code,A.model
               from  ACC_TK.T#IC_PDU_ORDER_FORM A,ACC_TK.T#IC_PDU_PLAN_ORDER_MAPPING B
               where A.order_no =B.order_no;
   exception
    when OTHERS then
    begin
      ROLLBACK;
      DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE );
        DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
      retMsg := '缓存生产明细失败,' ||SQLCODE|| ':'||SQLERRM ;
      retCode := 9;
      return;
    end;
   end;
   BEGIN
     --更新机器号 modify hwj 20140306
     --update ACC_TK.T#IC_PDU_PRODUCE_BILL_DETAIL A
     --     set machine_no = (SELECT B.device_id from ACC_ST.OP_PRM_SAM_LIST B
     --              where A.es_samno = B.sam_logical_id and B.dev_type_id='09' and B.record_flag='0');
     update ACC_TK.T#IC_PDU_PRODUCE_BILL_DETAIL A
           set machine_no = (select B.ES_SERIAL_NO from ACC_TK.IC_PDU_ORDER_FORM B
                     where B.Order_No=orderNo);
   EXCEPTION
    WHEN OTHERS THEN
    BEGIN
      ROLLBACK;
      retMsg := '更新机器号失败,' ||SQLCODE|| ':'||SQLERRM ;
      retCode := 10;
      return;
    END;
   END;
   -----------------------------------------------合并订单号开始-----------------------------------------------------------
   DECLARE
     cursor cur_pbd is
        select bill_no,afc_main_type,afc_sub_type,card_money,vaild_date,afc_line_id,
               afc_station_id,machine_no,draw_quantity,order_no,out_bill_no,out_water_no,
               card_ava_days,afc_exit_line_id,afc_exit_station_id,modal
        from  ACC_TK.T#IC_PDU_PRODUCE_BILL_DETAIL
        order by order_no,bill_no,afc_main_type,afc_sub_type,card_money,vaild_date,afc_line_id,
                 afc_station_id,machine_no,out_bill_no,out_water_no,card_ava_days,
                 afc_exit_line_id,afc_exit_station_id,modal;
    BEGIN
      curInt := 0;
      for pbd in cur_pbd
      LOOP
          IF curInt>0 AND to_number(pbd.order_no)=orderNoInt+ 1 THEN
              BEGIN
                update acc_tk.T#IC_PDU_RESULT_DETAIL
                  set draw_quantity=draw_quantity+pbd.draw_quantity,end_box_id=pbd.order_no,order_no=pbd.order_no
                  where order_no=orderNoInt;
              end;
          ELSE
            begin
              insert into acc_tk.T#IC_PDU_RESULT_DETAIL(bill_no,afc_main_type,afc_sub_type,
                                       card_money,vaild_date,afc_line_id,afc_station_id,machine_no,
                                       draw_quantity,start_box_id,end_box_id,out_bill_no,out_water_no,
                                       card_ava_days,afc_exit_line_id,afc_exit_station_id,modal,order_no)
                   values(pbd.bill_no,pbd.afc_main_type,pbd.afc_sub_type,pbd.card_money,pbd.vaild_date,
                          pbd.afc_line_id,pbd.afc_station_id,pbd.machine_no,pbd.draw_quantity,
                          pbd.order_no,pbd.order_no,pbd.out_bill_no,pbd.out_water_no,pbd.card_ava_days,
                          pbd.afc_exit_line_id,pbd.afc_exit_station_id,pbd.modal,pbd.order_no);
            end;
          end if ;
          --SELECT draw_quantity INTO draw_quantity_tmp FROM T#IC_PDU_RESULT_DETAIL WHERE order_no=pbd.order_no;
          curInt := curInt+ 1;
          orderNoInt := pbd.order_no;
          /*
        orderNoInt := "TO_NUMBER"(pbd.order_no)-1;
        select count(*) into recNum from dual
          where EXISTS(select 1 from acc_tk.T#IC_PDU_RESULT_DETAIL where order_no=orderNoInt);
        if recNum=0 then
          begin
            insert into acc_tk.T#IC_PDU_RESULT_DETAIL(bill_no,afc_main_type,afc_sub_type,
                                     card_money,vaild_date,afc_line_id,afc_station_id,machine_no,
                                     draw_quantity,start_box_id,end_box_id,out_bill_no,out_water_no,
                                     card_ava_days,afc_exit_line_id,afc_exit_station_id,modal,order_no)
                 values(pbd.bill_no,pbd.afc_main_type,pbd.afc_sub_type,pbd.card_money,pbd.vaild_date,
                        pbd.afc_line_id,pbd.afc_station_id,pbd.machine_no,pbd.draw_quantity,
                        pbd.order_no,pbd.order_no,pbd.out_bill_no,pbd.out_water_no,pbd.card_ava_days,
                        pbd.afc_exit_line_id,pbd.afc_exit_station_id,pbd.modal,pbd.order_no);
          end;
        else
          begin
            update acc_tk.T#IC_PDU_RESULT_DETAIL
              set draw_quantity=draw_quantity+pbd.draw_quantity,end_box_id=pbd.order_no,order_no=orderNoInt
              where order_no=orderNoInt;
          end;
        end if;
        */
        --循环做隐含检查 %notfound
      end loop ;
    end;
    ---------------------------------------------合并订单号结束-------------------------------------------------
   BEGIN
     --转换AFC票卡类型成ic票库票卡类型
     /*
     update acc_tk.T#IC_PDU_RESULT_DETAIL A set(ic_main_type,ic_sub_type)=
          (select B.ic_main_type,B.ic_sub_type from acc_tk.IC_COD_CARD_TYPE_CONTRAST B
            where A.afc_main_type = B.CARD_MAIN_TYPE and A.afc_sub_type=B.CARD_SUB_TYPE);
            */
     update acc_tk.T#IC_PDU_RESULT_DETAIL A set(ic_main_type,ic_sub_type)=
          ( SELECT DISTINCT ic_main_type,ic_sub_type FROM ic_out_bill_detail WHERE bill_no=outBillNo);
   EXCEPTION
    WHEN OTHERS THEN
    BEGIN
      ROLLBACK;
      DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE );
      DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
      retMsg := '转换AFC票卡类型成ic票库票卡类型失败,' ||SQLCODE|| ':'||SQLERRM ;
      retCode := 11;
      return;
    END;
   END;
   BEGIN
     --转换AFC车站代码成ic票库车站代码 --改为先更新线线路再更新车站
     update acc_tk.T#IC_PDU_RESULT_DETAIL A set A.line_id=
        ( SELECT DISTINCT B.line_id from acc_tk.IC_COD_STATION_CONTRAST B
        where A.afc_line_id =B.line_code);
     update acc_tk.T#IC_PDU_RESULT_DETAIL A set A.station_id=
        ( SELECT DISTINCT B.station_id from acc_tk.IC_COD_STATION_CONTRAST B
        where A.afc_line_id =B.line_code and A.afc_station_id=B.station_code);
   EXCEPTION
     WHEN OTHERS THEN
     BEGIN
      ROLLBACK;
      DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE );
      DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
      retMsg := '转换AFC车站代码成ic票库车站代码失败,' ||SQLCODE|| ':'||SQLERRM ;
      retCode := 12;
      return;
    END;
   END;
   begin
    update acc_tk.T#IC_PDU_RESULT_DETAIL A set exit_line_id=
      ( SELECT DISTINCT B.line_id from acc_tk.IC_COD_STATION_CONTRAST B
           where A.afc_exit_line_id =B.line_code);
    update acc_tk.T#IC_PDU_RESULT_DETAIL A set exit_station_id=
      ( SELECT DISTINCT B.station_id from acc_tk.IC_COD_STATION_CONTRAST B
           where A.afc_exit_line_id =B.line_code and A.afc_exit_station_id=B.station_code);
   EXCEPTION
     WHEN OTHERS THEN
     BEGIN
      ROLLBACK;
      DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE );
      DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
      retMsg := '转换AFC车站代码成ic票库车站代码失败,' ||SQLCODE|| ':'||SQLERRM ;
      retCode := 13;
      return;
    END;
   END;
   begin
     --插入生产明细表(有效票)
     insert into ACC_TK.IC_PDU_PRODUCE_BILL_DETAIL(water_no,bill_no,ic_main_type,ic_sub_type,card_money,
            vaild_date,line_id,station_id,machine_no,draw_quantity,start_box_id,
            end_box_id,card_ava_days,exit_line_id,exit_station_id,model)
        select seq_ic_pdu_produce_bill_detail.nextval,bill_no,ic_main_type,ic_sub_type,card_money,vaild_date,line_id,
               station_id,machine_no,draw_quantity,start_box_id,end_box_id,
               card_ava_days,exit_line_id,exit_station_id,modal
        from acc_tk.T#IC_PDU_RESULT_DETAIL;
   exception
     when others then
     begin
       ROLLBACK;
       DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE );
       DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
       retMsg := '插入生产明细表失败,' ||SQLCODE|| ':'||SQLERRM ;
       retCode := 14;
       return;
     end;
   end;
   --导入缓存数据到正式明细表---------------------------------------------------------
   if(esWorkTypeId = '00') then --初始化订单
   begin
       begin
         insert into ACC_TK.IC_ES_INITI_INFO(logical_id, card_main_type, card_sub_type, req_no, phy_id,
                                 print_id, manu_time, card_money, peri_avadate, kdc_version,
                                 hdl_time, order_no, status_flag, card_type,
                                 card_ava_days,exit_line_code,exit_station_code,model,card_producer_code,phone_no)
                      select     logical_id, card_main_type, card_sub_type, req_no, phy_id,
                                 print_id, manu_time, card_money, peri_avadate, kdc_version,
                                 hdl_time, order_no, status_flag, card_type,
                                 card_ava_days,exit_line_code,exit_station_code,model,card_producer_code,phone_no
                      from ACC_TK.IC_ES_INITI_INFO_BUF;
          ----更新成功记名卡记录信息
          UPDATE acc_st.st_list_sign_card t SET t.hdl_flag = '2',t.hdl_time = SYSDATE
          WHERE hdl_flag = '1' AND EXISTS (
               SELECT 1 FROM ACC_TK.IC_ES_INITI_INFO_BUF a,acc_tk.ic_pdu_order_form b
               WHERE a.order_no = b.order_no(+) AND b.card_type='1' AND a.req_no = t.req_no AND a.order_no = t.order_no
          );
          ---还原失败记录的记名卡
          UPDATE acc_st.st_list_sign_card t SET t.hdl_flag = '0',t.hdl_time = '' , t.order_no=''
          WHERE hdl_flag = '1' AND EXISTS (
               SELECT 1 FROM ACC_TK.IC_ES_INITI_INFO_BUF a WHERE  a.order_no = t.order_no
          );
         --插入物理卡号与逻辑卡号对照备份表(20151016添加water_no字段插入 by lindaquan)
         --条件中对照表表逻辑卡号前面加4个0
         insert into ACC_ST.op_his_phy_logic_list(physic_no,logic_no,WATER_NO)
                      SELECT a.phy_id,a.logical_id,b.water_no from ACC_TK.IC_ES_INITI_INFO_BUF a,acc_st.op_prm_phy_logic_list b
                       where trim (a.logical_id) = '0000'||trim (b.logic_no) and trim (a.phy_id) = trim (b.physic_no);
         --删除物理卡号与逻辑卡号对照表已经制卡数据,同时票卡类型不为单程票(20140604修改 by lindaquan)
         DELETE FROM ACC_ST.op_prm_phy_logic_list WHERE trim(physic_no) in(
         SELECT trim (phy_id) from ACC_TK.IC_ES_INITI_INFO_BUF where trim(card_main_type) <> '01' );
         --删除Buf临时数量(票务入库会删除，此处不能删除)
         DELETE FROM ACC_TK.IC_ES_INITI_INFO_BUF;
     exception
      when others then
      begin
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE );
        DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
        retMsg := '插入初始化订单表失败,' ||SQLCODE|| ':'||SQLERRM ;
        retCode := 15;
        return;
      end;
     end;
   end;
   end if;
   if(esWorkTypeId = '01') then        --预赋值订单
   begin
     begin
       insert into ACC_TK.IC_ES_HUNCH_INFO(logical_id, card_main_type, card_sub_type, req_no, phy_id,
                                 print_id, manu_time, card_money, peri_avadate, kdc_version,
                                 hdl_time, order_no, status_flag, card_type,
                                 line_code, station_code, card_start_ava,
                                 card_ava_days,exit_line_code,exit_station_code,model,card_producer_code,phone_no,insert_time
                                 )
                     select     logical_id, card_main_type, card_sub_type, req_no, phy_id,
                                print_id, manu_time, card_money, peri_avadate, kdc_version,
                                hdl_time, order_no, status_flag, card_type,
                                line_code, station_code, card_start_ava ,
                                card_ava_days,exit_line_code,exit_station_code,model,card_producer_code,phone_no,sysdate
                     from     ACC_TK.IC_ES_HUNCH_INFO_BUF;
       ----更新成功记名卡记录信息
        UPDATE acc_st.st_list_sign_card t SET t.hdl_flag = '2',t.hdl_time = SYSDATE
        WHERE hdl_flag = '1' AND EXISTS (
             SELECT 1 FROM ACC_TK.IC_ES_HUNCH_INFO_BUF a,acc_tk.ic_pdu_order_form b
             WHERE a.order_no = b.order_no(+) AND b.card_type='1' AND a.req_no = t.req_no AND a.order_no = t.order_no
        );
        ---还原失败记录的记名卡
        UPDATE acc_st.st_list_sign_card t SET t.hdl_flag = '0',t.hdl_time = '' , t.order_no=''
        WHERE hdl_flag = '1' AND EXISTS (
             SELECT 1 FROM ACC_TK.IC_ES_HUNCH_INFO_BUF a WHERE  a.order_no = t.order_no
        );
       --删除Buf临时数量(票务入库会删除，此处不能删除)
       DELETE FROM ACC_TK.IC_ES_HUNCH_INFO_BUF;
     exception
       when others then
       begin
         ROLLBACK;
         DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE );
        DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
         retMsg := '插入预赋值订单失败,' ||SQLCODE|| ':'||SQLERRM ;
         retCode := 16;
         return;
       end;
     end;
   end;
   end if;
   if(esWorkTypeId = '02') then        --重编码订单
   begin
     begin
         --重编码Buf迁移时，添加储值票记录表（IC_ES_AGAIN_INFO_SVT），原表为单程票记录表（20170330 by lindaquan）
         insert into ACC_TK.IC_ES_AGAIN_INFO(logical_id, card_main_type, card_sub_type, req_no, phy_id,
                                   print_id, manu_time, card_money, peri_avadate, kdc_version,
                                   hdl_time, order_no, status_flag, card_type,
                                   card_ava_days,exit_line_code,exit_station_code,model,card_producer_code,phone_no,INSERT_TIME
                                   )
                        select     logical_id, card_main_type, card_sub_type, req_no, phy_id,
                                   print_id, manu_time, card_money, peri_avadate, kdc_version,
                                   hdl_time, order_no, status_flag, card_type,
                                   card_ava_days,exit_line_code,exit_station_code,model,card_producer_code,phone_no,sysdate
                        from     ACC_TK.IC_ES_AGAIN_INFO_BUF where card_main_type='01';--单程票
        insert into ACC_TK.IC_ES_AGAIN_INFO_SVT(logical_id, card_main_type, card_sub_type, req_no, phy_id,
                                   print_id, manu_time, card_money, peri_avadate, kdc_version,
                                   hdl_time, order_no, status_flag, card_type,
                                   card_ava_days,exit_line_code,exit_station_code,model,card_producer_code,phone_no,INSERT_TIME
                                   )
                        select     logical_id, card_main_type, card_sub_type, req_no, phy_id,
                                   print_id, manu_time, card_money, peri_avadate, kdc_version,
                                   hdl_time, order_no, status_flag, card_type,
                                   card_ava_days,exit_line_code,exit_station_code,model,card_producer_code,phone_no,sysdate
                        from     ACC_TK.IC_ES_AGAIN_INFO_BUF where card_main_type!='01';--储值票
        ----更新成功记名卡记录信息
        UPDATE acc_st.st_list_sign_card t SET t.hdl_flag = '2',t.hdl_time = SYSDATE
        WHERE hdl_flag = '1' AND EXISTS (
             SELECT 1 FROM ACC_TK.IC_ES_AGAIN_INFO_BUF a,acc_tk.ic_pdu_order_form b
             WHERE a.order_no = b.order_no(+) AND b.card_type='1' AND a.req_no = t.req_no AND a.order_no = t.order_no
        );
        ---还原失败记录的记名卡
        UPDATE acc_st.st_list_sign_card t SET t.hdl_flag = '0',t.hdl_time = '' , t.order_no=''
        WHERE hdl_flag = '1' AND EXISTS (
             SELECT 1 FROM ACC_TK.IC_ES_AGAIN_INFO_BUF a WHERE  a.order_no = t.order_no
        );
       --删除Buf临时数量(票务入库会删除，此处不能删除)
       DELETE FROM ACC_TK.IC_ES_AGAIN_INFO_BUF;
     exception
      when others then
      begin
         ROLLBACK;
         DBMS_OUTPUT.PUT_LINE( 'sqlcode : ' || SQLCODE );
         DBMS_OUTPUT.PUT_LINE( 'sqlerrm : ' || SQLERRM );
         retMsg := '插入重编码订单失败,' ||SQLCODE|| ':'||SQLERRM ;
         retCode := 17;
         return;
      end;
     end;
   end;
   end if;
   if(esWorkTypeId = '03') then        --注销订单
   begin
     begin
       insert into ACC_TK.IC_ES_LOGOUT_INFO(logical_id, card_main_type, card_sub_type, req_no, phy_id,
                                  print_id, manu_time, card_money, peri_avadate, kdc_version,
                                  hdl_time, order_no, status_flag, card_type,
                                  card_ava_days,exit_line_code,exit_station_code,model,card_producer_code,phone_no
                                  )
                       select     logical_id, card_main_type, card_sub_type, req_no, phy_id,
                                  print_id, manu_time, card_money, peri_avadate, kdc_version,
                                  hdl_time, order_no, status_flag, card_type,
                                  card_ava_days,exit_line_code,exit_station_code,model,card_producer_code,phone_no
                       from     ACC_TK.IC_ES_LOGOUT_INFO_BUF;
       ----更新成功记名卡记录信息
        UPDATE acc_st.st_list_sign_card t SET t.hdl_flag = '2',t.hdl_time = SYSDATE
        WHERE hdl_flag = '1' AND EXISTS (
             SELECT 1 FROM ACC_TK.IC_ES_LOGOUT_INFO_BUF a,acc_tk.ic_pdu_order_form b
             WHERE a.order_no = b.order_no(+) AND b.card_type='1' AND a.req_no = t.req_no AND a.order_no = t.order_no
        );
        ---还原失败记录的记名卡
        UPDATE acc_st.st_list_sign_card t SET t.hdl_flag = '0',t.hdl_time = '' , t.order_no=''
        WHERE hdl_flag = '1' AND EXISTS (
             SELECT 1 FROM ACC_TK.IC_ES_LOGOUT_INFO_BUF a WHERE  a.order_no = t.order_no
        );
       --删除Buf临时数量(票务入库会删除，此处不能删除)
       DELETE FROM ACC_TK.IC_ES_LOGOUT_INFO_BUF;
     exception
       when others then
       begin
         ROLLBACK;
         retMsg := '插入注销订单失败,' ||SQLCODE|| ':'||SQLERRM ;
         retCode := 17;
         return;
       end;
     end;
   end;
   end if;
   ------------------------导入缓存数据到正式明细表结束-------------------------
   --清理临时表
   DELETE ACC_TK.T#IC_PDU_PLAN_ORDER_MAPPING;
   DELETE ACC_TK.T#IC_PDU_ORDER_FORM;
   DELETE ACC_TK.T#IC_PDU_PRODUCE_BILL_DETAIL;
   DELETE acc_tk.T#IC_PDU_RESULT_DETAIL;
   commit; --提交
   retMsg := '成功';
   retCode := 0;
END UP_IC_ES_GEN_PRODUCE_BILL;
/
grant execute on ACC_TK.UP_IC_ES_GEN_PRODUCE_BILL to ACC_TK_APP;


prompt
prompt Creating procedure TEST_BILL
prompt ============================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."TEST_BILL"
( orderNo IN varCHAR2                   --订单号
, logic_no  IN number            --逻辑卡号
, finiPronum IN INTEGER             --有效票
, surplusNum IN INTEGER             --结余票
, trashyNum IN INTEGER              --废票
, retCode  OUT INTEGER              --返回结果
, retMsg OUT VARCHAR2               --输出信息
)
  ---------------------------------------------------------------------------------
  --过程名:  TEST_BILL
  --功能:   测试生成生产单
  -------------------------------------------------------------------------------
AS
  card_main VARCHAR2(2);
  curInt INTEGER; --循环序数

  CARD_SUB_CODE VARCHAR2(2);
  ACHIEVE_TIME  date;
  CARD_MON      INTEGER;
  MODEL           VARCHAR2(3);
  CARD_PER_AVA  date;
  GEN_TIME      date;
  CARD_AVA_DAYS  VARCHAR2(3);
  EXIT_LINE_CODE  VARCHAR2(2);
  EXIT_STATION_CODE VARCHAR2(2);
  DRAW_NUM         INTEGER;
  ES_WORKTYPE_ID  VARCHAR2(2);
  LINE_CODE      VARCHAR2(2);
  STATION_CODE   VARCHAR2(2);
  CARDSTARTAVA   VARCHAR2(8);
  var_logic_no     number;
  logic_no_tmp VARCHAR2(20);


BEGIN

  --取出库计划单号、出库单号
  var_logic_no :=logic_no;
  SELECT c.card_main_code,      c.card_sub_code     ,
      c.achieve_time      ,      c.card_mon          ,
      c.model             ,      c.card_per_ava      ,
      c.gen_time          ,      c.exit_line_code    ,
      c.exit_station_code ,      c.draw_num          ,
      c.es_worktype_id    ,      c.line_code         ,
      c.station_code      ,      c.cardstartava      ,
      c.card_ava_days
  into card_main,    CARD_SUB_CODE,
  ACHIEVE_TIME,  CARD_MON,
  MODEL,    CARD_PER_AVA,
  GEN_TIME,   EXIT_LINE_CODE,
  EXIT_STATION_CODE,    DRAW_NUM,
  ES_WORKTYPE_ID,        LINE_CODE,
  STATION_CODE,          CARDSTARTAVA  ,CARD_AVA_DAYS
      FROM acc_tk.ic_pdu_order_form c
      WHERE c.order_no = orderno;

 FOR curInt IN  1..finiPronum
   LOOP
     logic_no_tmp := lpad(to_char(var_logic_no),19,'0');
     logic_no_tmp := lpad(to_char(var_logic_no),20,'1');
     if ES_WORKTYPE_ID ='00' then
        insert into ACC_TK.IC_ES_INITI_INFO (LOGICAL_ID, CARD_MAIN_TYPE,CARD_SUB_TYPE, REQ_NO, PHY_ID,
               PRINT_ID, MANU_TIME,CARD_MONEY,PERI_AVADATE, KDC_VERSION, HDL_TIME, ORDER_NO, STATUS_FLAG,
               CARD_TYPE, CARD_AVA_DAYS, EXIT_LINE_CODE,EXIT_STATION_CODE,MODEL)
        values (logic_no_tmp,card_main,CARD_SUB_CODE,'0000000000','04bfbc89360280      ',
               '0020100270094865    ',GEN_TIME,CARD_MON,CARD_PER_AVA,null,ACHIEVE_TIME,orderNo,'3',
               '002',CARD_AVA_DAYS,EXIT_LINE_CODE,EXIT_STATION_CODE,MODEL);
        dbms_output.put_line(curInt||card_main);
      end if; --初始化
     if ES_WORKTYPE_ID ='02' then
        insert into ACC_TK.ic_es_again_info (LOGICAL_ID, CARD_MAIN_TYPE,CARD_SUB_TYPE, REQ_NO, PHY_ID,
               PRINT_ID, MANU_TIME,CARD_MONEY,PERI_AVADATE, KDC_VERSION, HDL_TIME, ORDER_NO, STATUS_FLAG,
               CARD_TYPE, CARD_AVA_DAYS, EXIT_LINE_CODE,EXIT_STATION_CODE,MODEL)
        values (logic_no_tmp,card_main,CARD_SUB_CODE,'0000000000','04bfbc89360280      ',
               '0020100270094865    ',GEN_TIME,CARD_MON,CARD_PER_AVA,null,ACHIEVE_TIME,orderNo,'3',
               '002',CARD_AVA_DAYS,EXIT_LINE_CODE,EXIT_STATION_CODE,MODEL);
        dbms_output.put_line(curInt||card_main);
     end if;  --重编码
     if ES_WORKTYPE_ID ='03' then
        insert into ACC_TK.ic_es_logout_info (LOGICAL_ID, CARD_MAIN_TYPE,CARD_SUB_TYPE, REQ_NO, PHY_ID,
               PRINT_ID, MANU_TIME,CARD_MONEY,PERI_AVADATE, KDC_VERSION, HDL_TIME, ORDER_NO, STATUS_FLAG,
               CARD_TYPE, CARD_AVA_DAYS, EXIT_LINE_CODE,EXIT_STATION_CODE,MODEL)
        values (logic_no_tmp,card_main,CARD_SUB_CODE,'0000000000','04bfbc89360280      ',
               '0020100270094865    ',GEN_TIME,CARD_MON,CARD_PER_AVA,null,ACHIEVE_TIME,orderNo,'3',
               '002',CARD_AVA_DAYS,EXIT_LINE_CODE,EXIT_STATION_CODE,MODEL);
     end if;  --注销
     if ES_WORKTYPE_ID ='01' then
        insert into acc_tk.ic_es_hunch_info (LOGICAL_ID, CARD_MAIN_TYPE, CARD_SUB_TYPE, REQ_NO, PHY_ID,
               PRINT_ID, MANU_TIME, CARD_MONEY, PERI_AVADATE, KDC_VERSION, HDL_TIME, ORDER_NO, STATUS_FLAG,
               CARD_TYPE, LINE_CODE, STATION_CODE, CARD_START_AVA, CARD_AVA_DAYS,
               EXIT_LINE_CODE, EXIT_STATION_CODE, MODEL)
         values (logic_no_tmp,card_main,CARD_SUB_CODE, '0000000000', '04D8788D500000      ',
               '2013111810000001',GEN_TIME,CARD_MON,CARD_PER_AVA, null, ACHIEVE_TIME, orderNo, '3',
                '000', LINE_CODE, STATION_CODE, CARDSTARTAVA, CARD_AVA_DAYS,
                EXIT_LINE_CODE,EXIT_STATION_CODE,MODEL);
     end if;  --预赋值


    var_logic_no :=var_logic_no+1;
   END LOOP;
   commit;


UP_IC_ES_GEN_PRODUCE_BILL
  (orderno                   --订单号
, finiPronum                 --有效票
, surplusNum                 --结余票
, trashyNum                  --废票
, '4100000300080001'     --SAM卡号
, '3'                        --处理标志
, ACHIEVE_TIME               --生产时间
, 'TEST         '            --备注
, ES_WORKTYPE_ID             --工作类型
, retCode                    --返回结果
, retMsg                     --输出信息
) ;


END TEST_BILL;
/
grant execute on ACC_TK.TEST_BILL to ACC_TK_APP;


prompt
prompt Creating procedure UP_DM_TK_MV_LOG
prompt ==================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK.UP_DM_TK_MV_LOG(origin_table_name    in varchar2,
                                            dest_table_name      in varchar2,
                                            begin_bill_no        in varchar2,
                                            end_bill_no          in varchar2,
                                            begin_clear_datetime in date,
                                            end_clear_datetime   in date,
                                            spent_time           in NUMBER,
                                            clear_recd_count     in NUMBER,
                                            err_discribe         in varchar2,
                                            v_sql                in varchar2) as

  ---------------------------------------------------------------------------------
  --过程名：  up_st_ist_settle_log_add
  --功能描述：记录迁移数据时的日志
  --输入参数: origin_table_name  原表名
  --输入参数: dest_table_name   分表表名
  --输入参数: balance_water_no  原表名
  --输入参数: begin_clear_datetime  操作开始时间
  --输入参数: end_clear_datetimein  操作结束时间
  --输入参数: spent_time  操作所花时间
  --输入参数: clear_recd_count  清理记录数
  --输入参数: err_discribe  错误描述
  --创建者：张建华
  --创建日期：20131028
  -------------------------------------------------------------------------------
begin
  insert into acc_tk.ic_log_clear_table
    (origin_table_name,
     dest_table_name,
     begin_bill_no,
     end_bill_no,
     begin_clear_datetime,
     end_clear_datetime,
     spent_time,
     clear_recd_count,
     err_discribe,
     sql_label)
  values
    (origin_table_name,
     dest_table_name,
     begin_bill_no,
     end_bill_no,
     to_char(begin_clear_datetime, 'yyyy-mm-dd hh24:mi:ss'),
     to_char(end_clear_datetime, 'yyyy-mm-dd hh24:mi:ss'),
     spent_time,
     clear_recd_count,
     err_discribe,
     v_sql);
  commit;
end up_dm_tk_mv_log;
/
grant execute on ACC_TK.UP_DM_TK_MV_LOG to ACC_TK_APP;


prompt
prompt Creating procedure UP_DM_ES_HIS_CREATE
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK.UP_DM_ES_HIS_CREATE(out_retResult OUT INTEGER, --返回结果
                                                out_msg       OUT VARCHAR2 --返回信息
                                                )
---------------------------------------------------------------------------------
  --过程名：  up_dm_cm_his_create
  --功能描述：建立数据交换系统各日志表的历史分表
  --输出参数  ：out_retResult 模块返回值 out_msg 返回信息
  --返回值    ：0：操作成功；其他：操作失败；
  --创建者：  张建华
  --创建日期：201301105
  --修改：
  -------------------------------------------------------------------------------
 AS

  v_msg VARCHAR(50);
  --v_sql              varchar(5000);
  --v_new_begin date; --新的开始时间
  v_new_begin  varchar2(40); --新的结束时间
  v_begin_time date;
  --v_min_date     date; --最小时间
--  v_max_table varchar2(40); --最大的历史表   hwj modify 20150424
  v_count     number(18); --临时统计变量
  v_count2    number(18); --临时统计变量
  v_flag      number(1); --创建001的标志，0：创建
  --v_time         varchar2(20); --临时时间变量
  v_temp_sql     varchar2(4000); --临时sql语句
  v_table_sql    varchar2(4000); --建表临时sql语句
  v_temp_num     varchar2(6); --分表序列号 4位改为6位
  new_table_name varchar2(40); --分表表名
BEGIN
  begin
    declare
      cursor scc_table is
        select t.origin_table_name tmp_origin_table,
               t.create_sql        tmp_create_sql,
               t.keep_days         tmp_keep_days,
               t.ab_name           tmp_ab_name,
               t.date_type         tmp_date_type
          from acc_tk.ic_cfg_clear_table t
         where t.deal_type = 2;
    begin
      for i_cur in scc_table loop
        begin
          v_flag     := 2;
          v_temp_sql := 'select count(*) from acc_tk.' || i_cur.tmp_origin_table;
          execute immediate v_temp_sql
            into v_count;
          if v_count = 0 then
            continue;
          end if;
        end;

        begin
          select count(*)
            into v_count
            from acc_tk.ic_idx_history
           where his_table like i_cur.tmp_ab_name || '_%';
        end;
        begin
          --因为有些原表名太长，所以生成的分表采用自定义的表名，控制了长度
          new_table_name := i_cur.tmp_ab_name || '000001';

          v_temp_sql := 'select count(*) from user_objects where object_name = upper (''' ||
                        new_table_name || ''')';
          execute immediate v_temp_sql
            into v_count2;
        end;
        begin
          if v_count = 0 then
            --索引表没有对应分表的记录
            if v_count2 > 0 then
              --分表的物理表存在
              v_temp_sql := 'drop table ' || new_table_name;
              execute immediate v_temp_sql; --删除001分表表
            end if;
            v_flag := 0;

          else
            ----索引表有对应分表的记录
            if v_count2 = 0 then
              --分表的物理表不存在
              v_flag := 0;
            end if;
          end if;
        end;
        if v_flag = 0 then
          --先建表，再初始化
          begin
            --建001表
            begin
              --获取建表语句
              --替换表名 替换索引 替换主键
              select regexp_replace(i_cur.tmp_create_sql,
                                    '%s',
                                    new_table_name)
                into v_temp_sql
                from dual;
              --将建表语句插入到测试表，调试用
              --insert into t_test
              -- values
              --   (to_char(systimestamp, 'yyyy-mm-dd hh24:mi:ss.ff'),
              --  v_temp_sql);

              --每个建表语句中含有建索引、主键信息，且以；分割
              declare
                cursor sql_cur is
                  select * from table(acc_tk.up_dm_tk_splitstr(v_temp_sql, ';'));
              begin
                for t_cur in sql_cur loop
                  v_table_sql := t_cur.column_value;

                  if trim(v_table_sql) is not null and v_table_sql <> ' ' then
                    execute immediate v_table_sql; --创建001分表相关的操作
                  end if;
                end loop;
              end;
            end;
      --20150512 add by mqf 增加日志
        acc_tk.up_dm_tk_mv_log(i_cur.tmp_origin_table,
                new_table_name,
                '',
                '',
                sysdate,
                sysdate,
                0,
                0,
                '成功创建' || new_table_name || '表',
                'create table ' || new_table_name || '...');
            /**
            --计算最小、最大流水号、最小运营日，最大运营日
            v_time     := to_char(sysdate - i_cur.tmp_keep_days, 'yyyymmdd');
            v_temp_sql := 'select min(' || i_cur.tmp_date_type || ')' ||
                          ' from ' || i_cur.tmp_origin_table || ' t' ||
                          ' where to_char(' || i_cur.tmp_date_type ||
                          ', ''yyyymmdd'') <= ''' || v_time || '''';

            execute immediate v_temp_sql
              into v_min_date;

            if v_min_date is not null then
              v_new_begin := to_char(v_min_date, 'yyyy-mm-dd') ||
                             ' 00:00:00';
            end if;*/
            v_new_begin := '2013-05-01 00:00:00';
            select count(*)
              into v_count
              from acc_tk.ic_idx_history
             where his_table = new_table_name;
            if v_count = 0 then
              insert into acc_tk.ic_idx_history
                (his_table,
                 origin_table_name,
                 begin_time,
                 end_time,
                 recd_count,
                 recd_type)
              values
                (new_table_name,
                 i_cur.tmp_origin_table,
                 v_new_begin,
                 '',
                 0,
                 '99');

            end if;

          end;
        end if;
      end loop;
    end;
  end;

  ---------------以下为创建非001表

  begin
    declare
      cursor cu_table is
        select regexp_substr(a.his_table, '.{1,6}$') tmp_i_list_no,
               a.recd_count tmp_recd_count,
               to_date(substr(a.end_time, 0, 10), 'yyyy-mm-dd') + 1 tmp_max_date,
               a.origin_table_name tmp_origin_table,
               b.divide_recd_count tmp_divide_recd,
               b.create_sql tmp_create_sql,
               b.ab_name tmp_ab_name
          from acc_tk.ic_idx_history a, acc_tk.ic_cfg_clear_table b
         where a.origin_table_name = b.origin_table_name
           and b.deal_type = 2
           and a.his_table in (select max(his_table)
                                 from acc_tk.ic_idx_history
                                group by origin_table_name);
    begin
      for my_cur in cu_table loop
        /**  --hwj modify 20150424
        begin
          --取最大表
          select max(his_table)
            into v_max_table
            from ic_idx_history
           where origin_table_name = my_cur.tmp_origin_table
           group by origin_table_name;

          --获取当前表
          select regexp_substr(v_max_table, '.{1,6}$')
            into v_temp_num
            from dual;
        end;
        */
        begin
          begin
            if my_cur.tmp_recd_count >= my_cur.tmp_divide_recd then
              v_new_begin := to_char(my_cur.tmp_max_date, 'yyyy-mm-dd') ||
                             ' 00:00:00';
              --达到配置表中的最大记录数，需要建表
              --下一分表的序列号
              v_temp_num     := acc_tk.up_dm_tk_tableno(my_cur.tmp_i_list_no);
              new_table_name := my_cur.tmp_ab_name || '' || v_temp_num;
              begin
                v_temp_sql := 'select count(*) from user_objects where object_name = upper (''' ||
                              new_table_name || ''')';
                execute immediate v_temp_sql
                  into v_count2;
                if v_count2 > 0 then

                  --删除该表
                  v_temp_sql := 'drop table  ' || new_table_name;
                  execute immediate v_temp_sql;
                end if;
              end;
              --获取建表语句
              --替换表名 替换索引 替换主键
              select REGEXP_REPLACE(my_cur.tmp_create_sql,
                                    '%s',
                                    new_table_name)
                into v_temp_sql
                from dual;

              --commit;  --hwj modify 20150424
              --每个建表语句中含有建索引、主键信息，且以；分割
              declare
                cursor sql_cur is
                  select * from table(acc_tk.up_dm_tk_splitstr(v_temp_sql, ';'));
              begin
                for t_cur in sql_cur loop
                  v_begin_time := sysdate;
                  v_table_sql  := t_cur.column_value;

                  commit;
                  if trim(v_table_sql) is not null and v_table_sql <> ' ' then
                    begin
                      execute immediate v_table_sql; --创建001分表相关的操作
                    EXCEPTION
                      when others then
                        begin
                          rollback;
                          out_retresult := SQLCODE;
                          out_msg       := new_table_name || '创建表结构出错:' ||
                                           SQLERRM || ',发生在第[' ||
                                           dbms_utility.format_error_backtrace() || ']行';
                          v_count2      := ROUND(TO_NUMBER(sysdate -
                                                           v_begin_time) * 24 * 60 * 60);
                          acc_tk.up_dm_tk_mv_log(my_cur.tmp_origin_table,
                                          new_table_name,
                                          '',
                                          '',
                                          v_begin_time,
                                          sysdate,
                                          v_count2,
                                          0,
                                          out_msg,
                                          v_table_sql);
                          return;
                        end;
                    end;
                  end if;
                end loop;
              end;

        --20150512 add by mqf 增加日志
        acc_tk.up_dm_tk_mv_log(my_cur.tmp_origin_table,
                new_table_name,
                '',
                '',
                sysdate,
                sysdate,
                0,
                0,
                '成功创建' || new_table_name || '表',
                'create table ' || new_table_name || '...');

              begin

                begin
                  select count(*)
                    into v_count
                    from acc_tk.ic_idx_history
                   where his_table = new_table_name;
                  if v_count = 0 then
                    insert into acc_tk.ic_idx_history
                      (his_table,
                       origin_table_name,
                       begin_time,
                       end_time,
                       recd_count,
                       recd_type)
                    values
                      (new_table_name,
                       my_cur.tmp_origin_table,
                       v_new_begin,
                       '',
                       0,
                       '99');

                  end if;

                end;
              end; --if上的begin

            end if;
          end;

        end; --loop中的第2个begin
      end loop;
    end; -- for之前的begin
    out_msg       := '建表成功';
    out_retResult := sqlcode;
    commit;
  end; --declare前的begin

exception
  when OTHERS THEN
    begin
      ROLLBACK;
      out_msg       := v_msg || '错误：' || sqlerrm || ',发生在第[' ||
                       dbms_utility.format_error_backtrace() || ']行';
      out_retResult := sqlcode;
      return;
    end;

END up_dm_es_his_create;
/
grant execute on ACC_TK.UP_DM_ES_HIS_CREATE to ACC_TK_APP;


prompt
prompt Creating procedure UP_DM_ES_HIS_MV
prompt ==================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK.UP_DM_ES_HIS_MV(out_retresult OUT INTEGER, --返回结果
                                            out_msg       OUT VARCHAR2 --返回信息
                                            )
---------------------------------------------------------------------------------
  --过程名：  up_dm_cm_his_mv
  --功能描述：票务借口--数据表导入历史表
  --输出参数  ：out_retresult 模块返回值
  --返回值    ：0：操作成功；其他：操作失败；
  --创建者：张建华
  --创建日期：20131104
  --修改日期： 20150513 by mqf
  --修改内容： 按日期遍历，记录数大于分表最大记录数则停止迁移数据，新建分表再迁移数据。
             --解决上线运行时，堆积大量的记录插入到第一个分表的问题
  --修改日期：20160912 modify by mqf
  --修改内容：1.关闭游标
  -------------------------------------------------------------------------------
 AS
  v_sql       varchar2(2048);
  v_sqldel    varchar2(2048);
  v_max_table varchar2(40); --最大的历史表
  c_begin     varchar2(40); --当前表对应的开始时间
  c_end       varchar2(40); --当前表对应的结束时间
  --v_new_begin       date;
  --v_new_end         date;
  v_time            varchar2(10);
  v_count           integer; --临时统计变量
  v_table_columns   varchar2(2048); --表字段
  v_begin_time      date; --清理开始时间
  origin_table_name varchar2(30); --中间表表名
  --table_columns     varchar2(1000); --中间表各字段
  v_cost_seconds int; --统计时间
  v_msg          varchar2(255); --注释

  --20150513 add by mqf
  v_recd_count integer; --索引表已更新记录数
  divide_recd_count integer; --配置表最大记录数
  v_rowcount  integer; --更新记录数
  v_time_type_value varchar2(20); --日期
  TYPE MYCURSOR IS REF CURSOR;  --定义游标类型
  cur_date_type MYCURSOR;       --定义游标
  v_datetime_begin     varchar2(20); --遍历的开始时间
  v_datetime_end     varchar2(20); --遍历的结束时间
  v_datetime_where_sql  varchar2(2048);

BEGIN
  begin
    out_msg       := '成功迁移数据';
    out_retresult := sqlcode;
    declare
      cursor scc_table is
        select t.origin_table_name tmp_origin_table,
               t.keep_days         tmp_keep_days,
               t.clear_flag        tmp_clear_flag,
               t.table_columns     tmp_table_columns,
               t.date_type         tmp_date_type,
         t.divide_recd_count tmp_divide_recd_count
          from acc_tk.ic_cfg_clear_table t
         where t.deal_type = 2;
    begin

      for i_cur in scc_table loop

        origin_table_name := trim(i_cur.tmp_origin_table);
        v_table_columns   := trim(i_cur.tmp_table_columns);
        v_begin_time      := sysdate;
    --20150513 add by mqf
      divide_recd_count := trim(i_cur.tmp_divide_recd_count);
        --清理标志为1时才清理中间表至历史表
        --在配置表中 clear_table_config 的station_entry_rpt 的 clear_flag 设置为-1
        if i_cur.tmp_clear_flag = 1 then
          --最大表
          v_sql := 'select max(his_table) from acc_tk.ic_idx_history where origin_table_name = ''' ||
                   origin_table_name || '''';
          execute immediate v_sql
            into v_max_table;
          --v_table_columns := table_columns;

          if v_max_table is NULL then
            continue;
          end if;
          --对最大的历史表导入数据
      --20150513 modify by mqf 增加查询recd_count
          select begin_time,recd_count
            into c_begin,v_recd_count
            from acc_tk.ic_idx_history
           where his_table = v_max_table;
          --v_new_begin := to_date(c_begin, 'yyyy-mm-dd hh24:mi:ss');

      --索引表已迁移记录大于或等于分表最大记录数，将跳到一次循环 20150520 modify by mqf
      if v_recd_count>=divide_recd_count then
        continue;
      end if;

          v_time := to_char(v_begin_time - i_cur.tmp_keep_days,
                            'yyyy-mm-dd');
          --更新到索引表中
          c_end := v_time || ' 23:59:59';
          --v_new_end := to_date(c_end, 'yyyy-mm-dd hh24:mi:ss');

          v_sql := ' select count(*) from acc_tk.' || origin_table_name ||
                   ' where to_char(' || i_cur.tmp_date_type ||
                   ',''yyyy-mm-dd hh24:mi:ss'') <=''' || c_end ||
                   ''' and to_char(' || i_cur.tmp_date_type ||
                   ',''yyyy-mm-dd hh24:mi:ss'') >=''' || c_begin || '''';
          execute immediate v_sql
            into v_count;
          if v_count = 0 then
            continue;
          end if;
          --对最大的历史表导入数据
          v_sql := 'lock table acc_tk.' || v_max_table || ' in exclusive mode';
          execute immediate v_sql;

      --20150513 add by mqf 按日期遍历，解决上线运行时，堆积大量的记录插入到第一个分表中。
      v_begin_time := sysdate;
      v_sql := ' select distinct to_char(' || i_cur.tmp_date_type || ', ''yyyy-mm-dd'') from acc_tk.' || origin_table_name ||
               ' where to_char(' || i_cur.tmp_date_type || ',''yyyy-mm-dd hh24:mi:ss'') <=''' || c_end ||
                   ''' and to_char(' || i_cur.tmp_date_type || ',''yyyy-mm-dd hh24:mi:ss'') >=''' || c_begin || '''' ||
           ' order by to_char(' || i_cur.tmp_date_type || ', ''yyyy-mm-dd'')';
      --更新记录数初始为0
      v_rowcount := 0;

      open cur_date_type for v_sql;
      loop
        fetch cur_date_type into v_time_type_value;
        exit when cur_date_type%notfound;

        --超过分表最大记录数，将结束循环
        if (v_recd_count+v_rowcount>=divide_recd_count) then
          exit;
        end if;
        v_datetime_begin := v_time_type_value || ' 00:00:00';
          v_datetime_end := v_time_type_value || ' 23:59:59';

        begin
        v_sql := ' insert into acc_tk.' || v_max_table || ' select ' ||
             v_table_columns || ' from acc_tk.' || origin_table_name ||
             ' where to_char(' || i_cur.tmp_date_type ||
             ',''yyyy-mm-dd hh24:mi:ss'') <=''' || v_datetime_end || --c_end改为v_datetime_end
             ''' and to_char(' || i_cur.tmp_date_type ||
             ',''yyyy-mm-dd hh24:mi:ss'') >=''' || v_datetime_begin || ''''; --c_begin改为v_datetime_begin
        execute immediate v_sql;
        EXCEPTION
        when others then
          begin
          rollback;
          out_retresult  := SQLCODE;
          out_msg        := origin_table_name || '插入历史表错误,错误代码:' ||
                    SQLERRM || ',发生在第[' ||
                    dbms_utility.format_error_backtrace() || ']行';
          v_cost_seconds := ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60 * 60);
          acc_tk.up_dm_tk_mv_log(origin_table_name,
                  v_max_table,
                  '',
                  '',
                  v_begin_time,
                  sysdate,
                  v_cost_seconds,
                  0,
                  out_msg,
                  v_sql);
          return;
          end;
        end;

        --累加更新记录数
          v_rowcount := v_rowcount + sql%rowcount;
      end loop;
    close cur_date_type; --20160912 add by mqf 关闭游标

      --20150513 add by mqf
      c_end := v_datetime_end;
      v_count := v_rowcount;

      /* 20150513 屏蔽
          begin
            --更新st_idx_rpt_history表信息
            v_sql := 'select count(*) from ' || origin_table_name ||
                     ' where to_char(' || i_cur.tmp_date_type ||
                     ',''yyyy-mm-dd hh24:mi:ss'') <=''' || c_end ||
                     ''' and to_char(' || i_cur.tmp_date_type ||
                     ',''yyyy-mm-dd hh24:mi:ss'') >=''' || c_begin || '''';

            execute immediate v_sql
              into v_count;

          end;
      */

          --写入日志记录表clear_table_log
      v_cost_seconds := ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60 * 60); --20150513 add by mqf
          out_msg := '从' || origin_table_name || '表中导入' || v_max_table ||
                     '历史表的数据成功，记录数：' || v_count;
          acc_tk.up_dm_tk_mv_log(origin_table_name,
                          v_max_table,
                          '',
                          '',
                          v_begin_time,
                          sysdate,
                          v_cost_seconds,
                          v_count,
                          out_msg,
                          v_sql);

          --如果导入的数据为0，则不进行以下索引表的更新
          if v_count > 0 then
            begin

              begin
                update acc_tk.ic_idx_history
                   set recd_count = recd_count + v_count, end_time = c_end
                 where his_table = v_max_table;

              end;

            end;
            --删除已经导入历史表的数据
            v_begin_time := sysdate;
            begin
              v_sqldel := ' delete from acc_tk.' || origin_table_name ||
                          ' where to_char(' || i_cur.tmp_date_type ||
                          ',''yyyy-mm-dd hh24:mi:ss'') <=''' || c_end ||
                          ''' and to_char(' || i_cur.tmp_date_type ||
                          ',''yyyy-mm-dd hh24:mi:ss'') >=''' || c_begin || '''';
              execute immediate v_sqldel;

            end;
            out_msg        := '删除acc_tk.' || origin_table_name || '表中导入' ||
                              v_max_table || '历史表的数据成功';
            v_cost_seconds := ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60 * 60);
            acc_tk.up_dm_tk_mv_log(origin_table_name,
                            v_max_table,
                            '',
                            '',
                            v_begin_time,
                            sysdate,
                            v_cost_seconds,
                            v_count,
                            out_msg,
                            v_sqldel); --20150514 v_sql改为v_sqldel

          end if;

        end if;
      end loop;

    end;

  end;
exception
  when OTHERS THEN
    begin
      ROLLBACK;
      out_msg       := v_msg || '错误：' || sqlerrm || ',发生在第[' ||
                       dbms_utility.format_error_backtrace() || ']行';
      out_retResult := sqlcode;
      return;
    end;

END up_dm_es_his_mv;
/
grant execute on ACC_TK.UP_DM_ES_HIS_MV to ACC_TK_APP;


prompt
prompt Creating procedure UP_DM_TK_HIS_CREATE
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK.UP_DM_TK_HIS_CREATE(out_retResult OUT INTEGER, --返回结果
                                                out_msg       OUT VARCHAR2 --返回信息
                                                )
---------------------------------------------------------------------------------
  --过程名：  UP_DM_TK_HIS_CREATE
  --功能描述：建立票务入库表的历史分表
  --输出参数  ：out_retResult 模块返回值 out_msg 返回信息
  --返回值    ：0：操作成功；其他：操作失败；out_retResult为0时，out_msg返回表名
  --创建者：  张建华
  --创建日期：201301023
  --修改：
  -------------------------------------------------------------------------------
 AS

  v_msg        VARCHAR(50);
  v_begin_time date;
  v_min_recd   varchar2(10); --最大交易序列号
  v_max_recd   varchar2(10); -- 最小交易序列号
  --v_max_table    varchar2(40); --最大的历史表
  v_count        number(18); --临时统计变量
  v_count2       number(18); --临时统计变量
  v_flag         number(1); --创建001的标志，0：创建
  v_time         varchar2(20); --临时时间变量
  v_temp_sql     varchar2(4000); --临时sql语句
  v_table_sql    varchar2(4000); --建表临时sql语句
  v_temp_num     varchar2(6); --分表序列号  4位改为6位
  new_table_name varchar2(40); --分表表名
BEGIN
  begin
    declare
      cursor scc_table is
        select t.origin_table_name tmp_origin_table,
               t.create_sql        tmp_create_sql,
               t.keep_days         tmp_keep_days,
               t.ab_name           tmp_ab_name
          from acc_tk.ic_cfg_clear_table t
         where t.deal_type = 1;
    begin
      for i_cur in scc_table loop
        begin
          v_flag     := 2;
          v_temp_sql := 'select count(*) from acc_tk.' || i_cur.tmp_origin_table;
          execute immediate v_temp_sql
            into v_count;
          if v_count = 0 then
            continue;
          end if;
        end;

        begin
          select count(*)
            into v_count
            from acc_tk.ic_idx_history
           where his_table like i_cur.tmp_ab_name || '_%';
        end;
        begin
          --因为有些原表名太长，所以生成的分表采用自定义的表名，控制了长度
          new_table_name := i_cur.tmp_ab_name || '000001';

          v_temp_sql := 'select count(*) from user_objects where object_name = upper (''' ||
                        new_table_name || ''')';
          execute immediate v_temp_sql
            into v_count2;
        end;
        begin
          if v_count = 0 then
            --索引表没有对应分表的记录
            if v_count2 > 0 then
              --分表的物理表存在
              v_temp_sql := 'drop table acc_tk.' || new_table_name;
              execute immediate v_temp_sql; --删除001分表表
            end if;
            v_flag := 0;

          else
            ----索引表有对应分表的记录
            if v_count2 = 0 then
              --分表的物理表不存在
              v_flag := 0;
            end if;
          end if;
        end;
        if v_flag = 0 then
          --先建表，再初始化
          begin
            --建001表
            begin
              --获取建表语句
              --替换表名 替换索引 替换主键
              select regexp_replace(i_cur.tmp_create_sql,
                                    '%s',
                                    new_table_name)
                into v_temp_sql
                from dual;

              --每个建表语句中含有建索引、主键信息，且以；分割
              declare
                cursor sql_cur is
                  select * from table(acc_tk.up_dm_tk_splitstr(v_temp_sql, ';')); --20150702 modify by mqf up_dms_tk_splitstr改为up_dm_tk_splitstr
              begin
                for t_cur in sql_cur loop
                  v_table_sql := t_cur.column_value;

                  if trim(v_table_sql) is not null and v_table_sql <> ' ' then
                    execute immediate v_table_sql; --创建001分表相关的操作
                  end if;
                end loop;
              end;
            end;

      --20150512 add by mqf 增加日志
        acc_tk.up_dm_tk_mv_log(i_cur.tmp_origin_table,
                new_table_name,
                '',
                '',
                sysdate,
                sysdate,
                0,
                0,
                '成功创建' || new_table_name || '表',
                'create table ' || new_table_name || '...');

            --计算最小、最大流水号、最小运营日，最大运营日
            --计算最大bill_no中的最大序列号
            v_time     := to_char(sysdate - i_cur.tmp_keep_days, 'yyyymmdd');
            v_temp_sql := 'select max(substr(bill_no, -10)),min(substr(bill_no, -10))' ||
                          'from acc_tk.ic_in_store_bill t' ||
                          ' where to_char(t.bill_date, ''yyyymmdd'') <= ''' ||
                          v_time || ''' and substr(bill_no, 3, 1) <> ''T''';
            execute immediate v_temp_sql
              into v_max_recd, v_min_recd;
            if v_min_recd is null then
              v_min_recd := '2013050101';
            end if;

            select count(*)
              into v_count
              from acc_tk.ic_idx_history
             where his_table = new_table_name;
            if v_count = 0 then
              insert into acc_tk.ic_idx_history
                (his_table,
                 origin_table_name,
                 begin_recd,
                 end_recd,
                 recd_count,
                 recd_type)
              values
                (new_table_name,
                 i_cur.tmp_origin_table,
                 v_min_recd,
                 '',
                 0,
                 'in');
            end if;
          end;
        end if;
      end loop;
    end;
  end;

  ---------------以下为创建非00X表

  begin
    declare
      cursor cu_table is
        select regexp_substr(a.his_table, '.{1,6}$') tmp_i_list_no,
               a.recd_count tmp_recd_count,
               to_number(substr(a.end_recd, -10)) + 1 tmp_recd,
               a.origin_table_name tmp_origin_table,
               b.divide_recd_count tmp_divide_recd,
               b.create_sql tmp_create_sql,
               b.ab_name tmp_ab_name
          from acc_tk.ic_idx_history a, acc_tk.ic_cfg_clear_table b
         where a.origin_table_name = b.origin_table_name
           and a.his_table in (select max(his_table)
                                 from acc_tk.ic_idx_history
                                group by origin_table_name);
    begin
      for my_cur in cu_table loop

        begin
          begin
            if my_cur.tmp_recd_count >= my_cur.tmp_divide_recd then
              --达到配置表中的最大记录数，需要建表
              --下一分表的序列号
              v_temp_num     := acc_tk.up_dm_tk_tableno(my_cur.tmp_i_list_no); --20150702 modify by mqf up_dms_tk_tableno 改为 up_dm_tk_tableno
              new_table_name := my_cur.tmp_ab_name || '' || v_temp_num;
              begin
                v_temp_sql := 'select count(*) from user_objects where object_name = upper (''' ||
                              new_table_name || ''')';
                execute immediate v_temp_sql
                  into v_count2;
                if v_count2 > 0 then

                  --删除该表
                  v_temp_sql := 'drop table  acc_tk.' || new_table_name;
                  execute immediate v_temp_sql;
                end if;
              end;
              --获取建表语句
              --替换表名 替换索引 替换主键
              select REGEXP_REPLACE(my_cur.tmp_create_sql,
                                    '%s',
                                    new_table_name)
                into v_temp_sql
                from dual;

              commit;
              --每个建表语句中含有建索引、主键信息，且以；分割
              declare
                cursor sql_cur is
                  select * from table(acc_tk.up_dm_tk_splitstr(v_temp_sql, ';')); --20150702 modify by mqf up_dms_tk_splitstr改为up_dm_tk_splitstr
              begin
                for t_cur in sql_cur loop
                  v_begin_time := sysdate;
                  v_table_sql  := t_cur.column_value;

                  commit;
                  if trim(v_table_sql) is not null and v_table_sql <> ' ' then
                    begin
                      execute immediate v_table_sql; --创建0001分表相关的操作
                    EXCEPTION
                      when others then
                        begin
                          rollback;
                          out_retresult := SQLCODE;
                          out_msg       := new_table_name || '创建表结构出错:' ||
                                           SQLERRM || ',发生在第[' ||
                                           dbms_utility.format_error_backtrace() || ']行';
                          v_count2      := ROUND(TO_NUMBER(sysdate -
                                                           v_begin_time) * 24 * 60 * 60);
                          acc_tk.up_dm_tk_mv_log(new_table_name,
                                          '',
                                          '',
                                          '',
                                          v_begin_time,
                                          sysdate,
                                          v_count2,
                                          0,
                                          out_msg,
                                          v_table_sql);
                          return;
                        end;
                    end;
                  end if;
                end loop;
              end;

        --20150512 add by mqf 增加日志
          acc_tk.up_dm_tk_mv_log(my_cur.tmp_origin_table,
                new_table_name,
                '',
                '',
                sysdate,
                sysdate,
                0,
                0,
                '成功创建' || new_table_name || '表',
                'create table ' || new_table_name || '...');

              begin

                begin
                  select count(*)
                    into v_count
                    from acc_tk.ic_idx_history
                   where his_table = new_table_name;
                  if v_count = 0 then
                    insert into acc_tk.ic_idx_history
                      (his_table,
                       origin_table_name,
                       begin_recd,
                       end_recd,
                       recd_count,
                       recd_type)
                    values
                      (new_table_name,
                       my_cur.tmp_origin_table,
                       my_cur.tmp_recd,
                       '',
                       0,
                       'in');

                  end if;

                end;
              end; --if上的begin

            end if;
          end;

        end; --loop中的第2个begin
      end loop;
    end; -- for之前的begin
    out_msg       := '建表成功';
    out_retResult := sqlcode;
    commit;
  end; --declare前的begin

exception
  when OTHERS THEN
    begin
      ROLLBACK;
      out_msg       := v_msg || '错误：' || sqlerrm || ',发生在第[' ||
                       dbms_utility.format_error_backtrace() || ']行';
      out_retResult := sqlcode;
      return;
    end;

END UP_DM_TK_HIS_CREATE;
/
grant execute on ACC_TK.UP_DM_TK_HIS_CREATE to ACC_TK_APP;


prompt
prompt Creating procedure UP_DM_TK_HIS_MV
prompt ==================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK.UP_DM_TK_HIS_MV(out_retresult OUT INTEGER, --返回结果
                                            out_msg       OUT VARCHAR2 --返回信息
                                            )
---------------------------------------------------------------------------------
  --过程名：  up_dm_tk_his_mv
  --功能描述：票务系统--数据表导入历史表
  --输出参数  ：out_retresult 模块返回值
  --返回值    ：0：操作成功；其他：操作失败；
  --创建者：张建华
  --创建日期：20131104
  -------------------------------------------------------------------------------
 AS
  v_sql       varchar2(2048);
  v_wheresql  varchar2(2048);
  v_sqldel    varchar2(2048);
  v_max_table varchar2(40); --最大的历史表
  c_begin     varchar2(10); --当前表对应的开始时间
  c_end       varchar2(10); --
  v_time      varchar2(20); --时间
  --v_new_end         date;
  v_count           integer; --临时统计变量
  v_table_columns   varchar2(2048); --表字段
  v_begin_time      date; --清理开始时间
  v_max_recd_no     varchar2(10); --最大单号
  origin_table_name varchar2(30); --中间表表名
  table_columns     varchar2(1000); --中间表各字段
  v_cost_seconds    int; --统计时间
  v_msg             varchar2(255); --注释

  c_end_tmp         varchar2(10);--中间变量
  divide_recd_tmp   integer; --临时统计中间变量
  i_recd_count      integer; --临时统计中间变量
  i_tmp             integer;
  i_increase        integer;
  c_increase_end    varchar2(10);
  i_no_recd_flag         varchar2(2); --每次遍历记录为0 标志
  v_insertsql       varchar2(2048);
BEGIN
  begin
    out_msg       := '成功迁移数据';
    out_retresult := sqlcode;
    declare
      cursor scc_table is
        select t.origin_table_name tmp_origin_table,
               t.keep_days         tmp_keep_days,
               t.clear_flag        tmp_clear_flag,
               t.table_columns     tmp_table_columns,
               t.divide_recd_count tmp_divide_recd_count
          from acc_tk.ic_cfg_clear_table t
         where t.deal_type = 1;
    begin

      for i_cur in scc_table loop

        origin_table_name := trim(i_cur.tmp_origin_table);
        table_columns     := trim(i_cur.tmp_table_columns);
        v_begin_time      := sysdate;
        divide_recd_tmp   := trim(i_cur.tmp_divide_recd_count);--hwj 20150424
        --清理标志为1时才清理中间表至历史表
        --在配置表中 clear_table_config 的station_entry_rpt 的 clear_flag 设置为-1
        if i_cur.tmp_clear_flag = 1 then
          --最大表
          v_sql := 'select max(his_table) from acc_tk.ic_idx_history where origin_table_name = ''' ||
                   origin_table_name || '''';
          execute immediate v_sql
            into v_max_table;
          v_table_columns := table_columns;

          if v_max_table is NULL then
            continue;
          end if;
          --对最大的历史表导入数据
          select begin_recd,recd_count --hwj 20150424
            into c_begin,i_recd_count   --hwj 20150424
            from acc_tk.ic_idx_history
           where his_table = v_max_table;

      --索引表已迁移记录大于或等于分表最大记录数，将跳到一次循环 20150520 modify by mqf
      if i_recd_count>=divide_recd_tmp then
        continue;
      end if;

          v_time := to_char(v_begin_time - i_cur.tmp_keep_days,
                            'yyyy-mm-dd');
          --v_new_end := to_date(v_time || ' 23:59:59','yyyy-mm-dd hh24:mi:ss');
          v_time := v_time || ' 23:59:59';

          --计算最大bill_no中的最大序列号
          v_sql := ' select max(substr(bill_no, -10))  from acc_tk.ic_in_store_bill t where to_char(t.bill_date,''yyyy-mm-dd hh24:mi:ss'') <=''' ||
                   v_time || ''' and substr(bill_no, 3, 1) <> ''T''';
          execute immediate v_sql
            into c_end;

          --hwj modify 20150424 解决首次迁移时数据量过大
          c_end_tmp := c_end;
          c_end := c_begin;
          i_tmp := 0;

      i_increase := 2000; --mqf modify 20150430 增长值 同一条单号存在多条相同单号的入库明细
      if  divide_recd_tmp < i_increase then --20150528 modify by mqf
        i_increase :=  divide_recd_tmp;
      end if;
      i_no_recd_flag := '0'; --mqf modify 20150503 默认遍历有记录
          while c_end<=c_end_tmp loop
              if i_recd_count>=divide_recd_tmp then
                 exit;
              end if;
        i_tmp := 1;
        if i_no_recd_flag = '0' then
          c_increase_end := to_char(to_number(c_end)+i_increase-1);   --mqf modify 20150430 20150528 modify by mqf 增加-1
        elsif  i_no_recd_flag = '1' then
          c_increase_end := substr(c_end,1,4) || '999999';   --mqf modify 20150503 遍历无记录，单号可能存在跨年，取当年的单号最大值
        end if;

        if c_end_tmp <= c_increase_end then
          c_increase_end := c_end_tmp;
        end if; --mqf modify 20150430
          -----

        v_wheresql := 'acc_tk.' || origin_table_name ||
              --' where substr(bill_no,-10) <=''' || to_char(to_number(substr(c_end,0,8)) + i_tmp)|| substr(c_end,-2) ||  --hwj 20150424
              ' where substr(bill_no,-10) <=''' || c_increase_end ||  --mqf 20150430
              ''' and substr(bill_no,-10) >=''' || c_end ||
              ''' and  substr(bill_no,3,1)<>''T''';
        v_sql      := ' select count(*) from ' || v_wheresql;
        execute immediate v_sql
        into v_count;


        if v_count = 0 then
          c_end := to_char(to_number(c_increase_end)+1); --mqf modify 20150430
        i_no_recd_flag := '1'; --mqf modify 20150503 遍历无记录
        continue;
        else
        i_no_recd_flag := '0'; --mqf modify 20150503 遍历有记录
        end if;
        i_recd_count := i_recd_count+v_count;--hwj 20150424

        begin
        v_sql := ' insert into acc_tk.' || v_max_table || ' select ' ||
             v_table_columns || ' from ' || v_wheresql;
        execute immediate v_sql;
        EXCEPTION
        when others then
          begin
          rollback;
          out_retresult  := SQLCODE;
          out_msg        := origin_table_name || '插入历史表错误,错误代码:' ||
                    SQLERRM || ',发生在第[' ||
                    dbms_utility.format_error_backtrace() || ']行';
          v_cost_seconds := ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60 * 60);
          acc_tk.up_dm_tk_mv_log(origin_table_name,
                  v_max_table,
                  c_begin,
                  c_increase_end, --mqf modify 20150430 c_end改为c_increase_end
                  v_begin_time,
                  sysdate,
                  v_cost_seconds,
                  0,
                  out_msg,
                  v_sql);
          return;
          end;
        end;

        ----
        --c_end := to_char(to_number(to_char(to_number(substr(c_end,0,8)) + i_tmp)|| substr(c_end,-2))+i_tmp);--hwj 20150424
        c_end := to_char(to_number(c_increase_end)+1); --mqf modify 20150430
          end loop;
          ---end . hwj modify 20150424
          --c_end := to_char(to_number(to_char(to_number(substr(c_end,0,8)) - i_tmp)|| substr(c_end,-2))-i_tmp);--hwj 20150424
      c_end := to_char(to_number(c_end)-1); --mqf modify 20150430

          v_wheresql := 'acc_tk.' || origin_table_name ||
                        ' where substr(bill_no,-10) <=''' || c_end ||  --hwj 20150424
                        ''' and substr(bill_no,-10) >=''' || c_begin ||
                        ''' and  substr(bill_no,3,1)<>''T''';
          ---

          begin

        v_insertsql := v_sql; --20150514 modify by mqf
            v_sql := 'select count(*) from ' || v_wheresql;

            execute immediate v_sql
              into v_count;

          end;

          --写入日志记录表clear_table_log
          out_msg := '从' || origin_table_name || '表中导入' || v_max_table ||
                     '历史表的数据成功，记录数：' || v_count;
          v_cost_seconds := ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60 * 60);
          acc_tk.up_dm_tk_mv_log(origin_table_name,
                          v_max_table,
                          c_begin,
                          c_end,
                          v_begin_time,
                          sysdate,
                          v_cost_seconds,
                          v_count,
                          out_msg,
                          v_insertsql);--20150514 modify by mqf v_sql改为v_insertsql

          --如果导入的数据为0，则不进行以下索引表的更新、不进行删除操作
      if v_count > 0 then
      begin
        begin
        v_sql := 'select max(substr(bill_no,-10)) from ' ||
             v_max_table;
        execute immediate v_sql
          into v_max_recd_no;
        end;
        select nvl(v_max_recd_no, c_begin)
        into v_max_recd_no
        from dual;

        begin
        update acc_tk.ic_idx_history
           set recd_count = recd_count + v_count,
             end_recd   = v_max_recd_no
         where his_table = v_max_table;

        end;

      end;
      NULL;

        --删除已经导入历史表的数据
        v_begin_time := sysdate;
        begin
        v_sqldel := ' delete from ' || v_wheresql;
        execute immediate v_sqldel;

        end;
        out_msg        := '删除' || origin_table_name || '表中导入' ||
                v_max_table || '历史表的数据成功';
        v_cost_seconds := ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60 * 60);
        acc_tk.up_dm_tk_mv_log(origin_table_name,
                v_max_table,
                c_begin,
                c_end,
                v_begin_time,
                sysdate,
                v_cost_seconds,
                v_count,
                out_msg,
                v_sqldel); --20150514 modify by mqf v_sql改为v_sqldel
      end if;
        end if;
      end loop;
      commit;
    end;

  end;
exception
  when OTHERS THEN
    begin
      ROLLBACK;
      out_msg       := v_msg || '错误：' || sqlerrm || ',发生在第[' ||
                       dbms_utility.format_error_backtrace() || ']行';
      out_retResult := sqlcode;
      return;
    end;

END up_dm_tk_his_mv;
/
grant execute on ACC_TK.UP_DM_TK_HIS_MV to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_ES_CARD_TYPE
prompt =====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ES_CARD_TYPE"
AS
BEGIN
 select distinct CARD_MAIN_ID||CARD_SUB_ID card_type,CARD_SUB_NAME card_sub_desc from ACC_ST.OP_PRM_CARD_SUB where record_flag='0';
END;
/
grant execute on ACC_TK.UP_IC_ES_CARD_TYPE to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_ES_CHECK_LOGIC
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ES_CHECK_LOGIC"
( orderNo IN VARCHAR2
) AS
BEGIN
  NULL;
END UP_IC_ES_CHECK_LOGIC;
/
grant execute on ACC_TK.UP_IC_ES_CHECK_LOGIC to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_ES_COMBINE_LOGIC
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ES_COMBINE_LOGIC"
( orderNo IN VARCHAR2
) AS
BEGIN
  dbms_output.put_line('UP_IC_ES_COMBINE_LOGIC');
END UP_IC_ES_COMBINE_LOGIC;
/
grant execute on ACC_TK.UP_IC_ES_COMBINE_LOGIC to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_ES_FARE_TABLE
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ES_FARE_TABLE"
AS
BEGIN
    select distinct(fare) fare from "ACC_ST"."OP_PRM_FARE_TABLE" where record_flag='0';
END;
/
grant execute on ACC_TK.UP_IC_ES_FARE_TABLE to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_ES_STATUS
prompt ==================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ES_STATUS"
IS
    deviceId    varchar2(6);
    operatorId  varchar2(10);
    statusTime  varchar2(20);
    status      varchar2(4);
    remark      varchar(30);
BEGIN
    IF(exists(select * from ACC_TK.IC_ES_STATUS where device_id=deviceId and status_time=statusTime and status=status)) THEN
        BEGIN
            select '11' result from dual;
            return;
        END;
    END IF;
    
    BEGIN
		insert into ACC_TK.IC_ES_STATUS(device_id,operator_id,status_time,status,remark)
											values(deviceId,operatorId,statusTime,status,remark);
    EXCEPTION
        WHEN OTHERS THEN
        BEGIN
            ROLLBACK;
            return;
        END;
    END;
    COMMIT;
END;
/
grant execute on ACC_TK.UP_IC_ES_STATUS to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_ES_S_PARA
prompt ==================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ES_S_PARA"
IS
  coun  INTEGER;
  tsql   VARCHAR2(1000);
BEGIN

    tsql :=
    'CREATE GLOBAL TEMPORARY TABLE temp_s_para(
        result      char(3) null,
        city_no     char(4) null ,
        call_no     char(4) null,
        okm_no      char(4) null
    )ON COMMIT PRESERVE ROWS';
    execute immediate tsql;

    BEGIN
        select count(*) into coun from "ACC_ST"."ST_CFG_SYS" where delete_flag = '0';
    EXCEPTION
      WHEN OTHERS THEN
      BEGIN
          ROLLBACK;
          tsql := 'insert into temp_s_para  values("-1","","","")';
          execute immediate tsql;
          tsql := 'select result,city_no,call_no,okm_no from temp_s_para';
          execute immediate tsql;
          return;
      END;
     END;

    IF coun= 0 THEN
    BEGIN
        COMMIT;
        tsql := 'insert into #temp_s_para values("0","","","")';
        execute immediate tsql;
        tsql := 'select result,city_no,call_no,okm_no from temp_s_para';
        execute immediate tsql;
        return;
    END;
    END IF;

    BEGIN
        tsql := 'insert into temp_s_para
                  select "",city_code,calling_code,oke_no from ACC_ST.ST_CFG_SYS where  delete_flag = "0"';
    EXCEPTION
      WHEN OTHERS THEN
      BEGIN
          ROLLBACK;
          tsql := 'insert into temp_s_para values("-1","","","")';
          execute immediate tsql;
          tsql := 'select result,city_no,call_no,okm_no from temp_s_para';
          execute immediate tsql;
          return;
      END;
    END;
    COMMIT;

    tsql := 'select result,city_no,call_no,okm_no from temp_s_para';
    execute immediate tsql;
    tsql := 'drop table temp_s_para';
    execute immediate tsql;

END;
/
grant execute on ACC_TK.UP_IC_ES_S_PARA to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_IN_ADD_CR
prompt ==================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_IN_ADD_CR" (V_INT_TYPE        IN VARCHAR2, --入库类型
                                          V_RELATED_BILL_NO IN VARCHAR2, --入库单对应出库单号
                                          V_FORM_MAKER      IN VARCHAR2, --制单人
                                          V_HAND_MAN        IN VARCHAR2, --交票人
                                          V_ADMINISTER      IN VARCHAR2, --车票管理员
                                          V_ACCOUNTER       IN VARCHAR2, --记帐员
                                          V_REMARK          IN VARCHAR2, --备注
                                          MODULE_ID         IN VARCHAR2, --模块代码
                                          BILL_NO           OUT VARCHAR2, --生成的入库号
                                          P_RESULT          OUT INTEGER, --返回结果代码
                                          P_MEMO            OUT VARCHAR2)

---------------------------------------------------------------------------------
--过程名:  UP_IC_IN_ADD_CR
--功能:核查入库添加功能 'CR'
--输出:BILL_NO:生成的入库号,P_RESULT:返回结果代码,P_MEMO:结果描述
--P_RESULT:-1添加出错，信息请查看操作日志/-17:添加出错,单据号为空!/-15:添加出错,单据已经存在!/0:成功添加
-------------------------------------------------------------------------------

 AS
  V_BILL_NO     VARCHAR2(12);
  V_P_RESULT    INTEGER;
  V_NUM         INTEGER;
  V_RECORD_FLAG VARCHAR2(1);
  V_BEGIN_TIME  DATE;

BEGIN

  V_RECORD_FLAG := '3'; --入库单初始状态（"0":单据有效，"1":单据撤消（对未审核单据），"2":单据删除（对有效单据），"3":单据未审核）

  SELECT SYSDATE INTO V_BEGIN_TIME FROM DUAL;

  /*出库单号为空时*/
  IF V_RELATED_BILL_NO = '' OR V_RELATED_BILL_NO IS NULL THEN
    P_RESULT := -17;
    RETURN;
  END IF;
  /*检查是否已经录入出库单对应的入库单*/
  BEGIN
    SELECT COUNT(1)
      INTO V_NUM
      FROM IC_IN_STORE_BILL T
     WHERE T.RELATED_BILL_NO = V_RELATED_BILL_NO;
    IF V_NUM > 0 THEN
      P_RESULT := -15;
      RETURN;
    END IF;
  END;
  /*取流水号生成入库单号*/
  BEGIN
    SELECT V_INT_TYPE || 'T' || LPAD(CURRENT_INT_NO+1, 9, '0')
      INTO V_BILL_NO
      FROM IC_PRM_BILL_CURR_FLOW_TMP
     WHERE BILL_MAIN_TYPE_ID = V_INT_TYPE;
     /*更新临时流水表号*/
    UPDATE IC_PRM_BILL_CURR_FLOW_TMP
       SET CURRENT_NO     = V_BILL_NO,
           CURRENT_INT_NO = TO_NUMBER(SUBSTR(V_BILL_NO, 4, 9))
     WHERE BILL_MAIN_TYPE_ID = V_INT_TYPE;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_MEMO:=SQLCODE||':'||SQLERRM;
      ROLLBACK;
      P_RESULT := -1;
      RETURN;
  END;
  ----------------
  --更新出库单为已入库状态
  BEGIN
    UPDATE IC_OUT_BILL SET IN_FLAG = '1' WHERE BILL_NO = V_RELATED_BILL_NO;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_MEMO:=SQLCODE||':'||SQLERRM;
      ROLLBACK;
      P_RESULT := -1;
      RETURN;
  END;
  ---------------------
  --插入入库单
  BEGIN
    INSERT INTO IC_IN_STORE_BILL
      (BILL_NO,
       BILL_DATE,
       FORM_MAKER,
       HAND_MAN,
       ADMINISTER,
       ACCOUNTER,
       RELATED_BILL_NO,
       RECORD_FLAG,
       REMARK)
    VALUES
      (V_BILL_NO,
       SYSDATE,
       V_FORM_MAKER,
       V_HAND_MAN,
       V_ADMINISTER,
       V_ACCOUNTER,
       V_RELATED_BILL_NO,
       V_RECORD_FLAG,
       V_REMARK);

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_MEMO:=SQLCODE||':'||SQLERRM;
      ROLLBACK;
      P_RESULT := -1;
      RETURN;
  END;
  -------------------------

  IF V_BILL_NO IS NOT NULL AND V_BILL_NO != ' ' THEN
    P_MEMO   := '单据' || V_BILL_NO || '入库成功, 用时 ' ||
                ROUND(TO_NUMBER(SYSDATE - V_BEGIN_TIME) * 24 * 60) || ' 秒';
    BILL_NO  := V_BILL_NO;
    P_RESULT := 0;

  END IF;

  INSERT INTO OPER_LOGGING
  VALUES
    ('', V_FORM_MAKER, SYSDATE, MODULE_ID, '增加', P_MEMO);
END;
/
grant execute on ACC_TK.UP_IC_IN_ADD_CR to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_IN_AUDIT_CR
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_IN_AUDIT_CR" (P_BILL_NO     IN VARCHAR2,
                                              P_OPERATOR_ID IN VARCHAR2,
                                              P_MODULE_ID   IN VARCHAR2, --模块代码
                                              P_ERRMSG      OUT VARCHAR2,
                                              P_RESULT      OUT INTEGER,
                                              P_MEMO        OUT VARCHAR2,
                                              BILL_NO       OUT VARCHAR2)



  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_IN_AUDIT_CR
  --功能:核查入库 审核（CR）
  --输出: --(-1)修改数据出错，详情请查询操作日志!
  --(-5)单据状态非未审核
  --(-2)无明细记录
  --(-3)赋值区或编码区已无位置
  --(1)审核成功
  --修改日期：2016-1-20 oywl ic_sts_area_card校验库存更新时字段valid_date修改为trim(valid_date)
  --修改日期：2016-03-09 modify by mqf 增加trim
  --修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票,屏蔽原有'9'
  -------------------------------------------------------------------------------
 AS
  V_TYPE            CHAR(4); --审核
  V_BEGIN_TIME      DATE; --存储过程开始时间
  V_RELATED_BILL_NO CHAR(16); --对应出库单
  V_TEMP_NUMBER     INTEGER; --入库
  V_BILL_YEAR       INTEGER; --当前年份
  V_BILL_NO_AUDIT   CHAR(12); --审核后的单号
  V_CARD_MONEY_NUM      INTEGER; --卡面值数据临时数量
v_temp_number5        INTEGER;

BEGIN

  --清理临时表数据
  BEGIN
    DELETE FROM T#IC_IN_STORE_DETAIL;
    DELETE FROM T#IC_IN_CARD_CODE;
    DELETE FROM T#IC_IN_AREA_CODE;
    --DELETE FROM T#_BOX;
    DELETE FROM T#IC_IN_AREA_CARD_CODE;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      P_RESULT := -1;
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      BILL_NO  := P_BILL_NO;
      RETURN;
  END;

  SELECT '审核' INTO V_TYPE FROM DUAL;
  SELECT SYSDATE INTO V_BEGIN_TIME FROM DUAL;
  -----------------------------------校验单据是否存在、状态是否未审核----------------------
  BEGIN
    SELECT COUNT(*)
      INTO V_TEMP_NUMBER
      FROM IC_IN_STORE_BILL
     WHERE BILL_NO = P_BILL_NO
       AND RECORD_FLAG = '3';
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      P_RESULT := -1;
      RETURN;
  END;
  IF V_TEMP_NUMBER = 0 THEN
    P_ERRMSG := '无记录';
    P_RESULT := -5;
    RETURN;
  END IF;

  BEGIN
    SELECT COUNT(*)
      INTO V_TEMP_NUMBER
      FROM IC_IN_STORE_DETAIL
     WHERE BILL_NO = P_BILL_NO;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      P_RESULT := -1;
      BILL_NO  := P_BILL_NO;
      RETURN;
  END;
  IF V_TEMP_NUMBER = 0 THEN
    P_ERRMSG := '无明细记录';
    P_RESULT := -2;
    BILL_NO  := P_BILL_NO;
    RETURN;
  END IF;
  SELECT RELATED_BILL_NO
    INTO V_RELATED_BILL_NO
    FROM IC_IN_STORE_BILL
   WHERE BILL_NO = P_BILL_NO;
  -----------------------------------------------------------------------------------------------
  BEGIN

    BEGIN
      --更改入库单
      UPDATE IC_IN_STORE_BILL
         SET RECORD_FLAG = '0'
       WHERE BILL_NO = P_BILL_NO;
      ----------- 判断入库数量是否超过区剩余数量（可入库数量=上限数量-当前数据）------------------------------------------------------------------------------------------------
      --将入库数量、区、层保存到临时表
      INSERT INTO T#IC_IN_AREA_CODE
        SELECT STORAGE_ID, AREA_ID, SUM(IN_NUM)
          FROM IC_IN_STORE_DETAIL
         WHERE BILL_NO = P_BILL_NO
         GROUP BY STORAGE_ID, AREA_ID;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
        P_ERRMSG := SQLCODE || ':' || SQLERRM;
        P_RESULT := -1;
        BILL_NO  := P_BILL_NO;
        RETURN;
    END;

    BEGIN
      SELECT COUNT(*)
        INTO V_TEMP_NUMBER
        FROM T#IC_IN_AREA_CODE A, IC_COD_AREA B
       WHERE A.STORAGE_ID = B.STORAGE_ID
         AND A.AREA_ID = B.AREA_ID
         AND B.REAL_NUM + A.CARD_NUM > B.UPPER_NUM;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
        P_ERRMSG := SQLCODE || ':' || SQLERRM;
        P_RESULT := -1;
        BILL_NO  := P_BILL_NO;
        RETURN;
    END;
    IF V_TEMP_NUMBER > 0 THEN
      ROLLBACK;
      P_ERRMSG := '入库数量超过区剩余数量';
      P_RESULT := -3;
      BILL_NO  := P_BILL_NO;
      RETURN;
    END IF;

    BEGIN
      DELETE T#IC_IN_AREA_CODE;
      --------------------缓存入库数据----------------
      INSERT INTO T#IC_IN_STORE_DETAIL
        SELECT WATER_NO,
               BILL_NO,
               REASON_ID,
               STORAGE_ID,
               AREA_ID,
               IC_MAIN_TYPE,
               IC_SUB_TYPE,
               IN_NUM,
               DETAIL_PLACE,
               START_BOX_ID,
               END_BOX_ID,
               START_LOGICAL_ID,
               END_LOGICAL_ID,
               VALID_DATE,
               CARD_MONEY,
               LINE_ID,
               STATION_ID,
               EXIT_LINE_ID,
               EXIT_STATION_ID,
               MODEL,
               USE_FLAG
          FROM IC_IN_STORE_DETAIL
         WHERE BILL_NO = P_BILL_NO;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
        P_ERRMSG := SQLCODE || ':' || SQLERRM;
        P_RESULT := -1;
        BILL_NO  := P_BILL_NO;
        RETURN;
    END;
  END;
  ------------------------------------------------------------------------

  --盒明细表
  BEGIN
    INSERT INTO IC_COD_BOX_DETAIL
      (BOX_ID, START_LOGICAL_ID, END_LOGICAL_ID)
      SELECT START_BOX_ID, START_LOGICAL_ID, END_LOGICAL_ID
        FROM T#IC_IN_STORE_DETAIL
       WHERE START_BOX_ID IS NOT NULL
         AND START_LOGICAL_ID IS NOT NULL
         AND END_LOGICAL_ID IS NOT NULL
         AND START_BOX_ID != ''
         AND START_LOGICAL_ID != ''
         AND END_LOGICAL_ID != '';

    -------------------------除赋值区或编码区处理(调帐入库、新票入库)外其他更新总票区、卡票区开始------------------------
    --其他区增加数量
    INSERT INTO T#IC_IN_CARD_CODE
      (STORAGE_ID,
       AREA_ID,
       IC_MAIN_TYPE,
       IC_SUB_TYPE,
       CARD_MONEY,
       CARD_NUM,
       VALID_DATE,
       LINE_ID,
       STATION_ID,
       EXIT_LINE_ID,
       EXIT_STATION_ID,
       MODEL,
       FLAG)
      SELECT B.STORAGE_ID,
             B.AREA_ID,
             LTRIM(RTRIM(B.IC_MAIN_TYPE)),
             LTRIM(RTRIM(B.IC_SUB_TYPE)),
             B.CARD_MONEY,
             SUM(B.IN_NUM),
             ' ',
             ' ',
             ' ',
             ' ',
             ' ',
             '000',
             '0'
        FROM T#IC_IN_STORE_DETAIL B
       WHERE SUBSTR(P_BILL_NO, 1, 2) || AREA_ID ||
             LTRIM(RTRIM(IC_MAIN_TYPE)) != 'TR021'
         AND SUBSTR(P_BILL_NO, 1, 2) || AREA_ID != 'TR03'
         AND SUBSTR(P_BILL_NO, 1, 2) || AREA_ID != 'XR03'
       GROUP BY B.STORAGE_ID,
                B.AREA_ID,
                LTRIM(RTRIM(B.IC_MAIN_TYPE)),
                LTRIM(RTRIM(B.IC_SUB_TYPE)),
                B.CARD_MONEY;

    UPDATE T#IC_IN_CARD_CODE
       SET CARD_MONEY = 0
     WHERE
   --LTRIM(RTRIM(IC_MAIN_TYPE)) != '9' AND 20170714 modify by mqf 屏蔽原有的'9'
        LTRIM(RTRIM(IC_MAIN_TYPE)) != '6';

    INSERT INTO T#IC_IN_AREA_CARD_CODE
      (STORAGE_ID,
       AREA_ID,
       IC_MAIN_TYPE,
       IC_SUB_TYPE,
       CARD_MONEY,
       CARD_NUM,
       VALID_DATE,
       LINE_ID,
       STATION_ID,
       EXIT_LINE_ID,
       EXIT_STATION_ID,
       MODEL,
       FLAG)
      SELECT STORAGE_ID,
             AREA_ID,
             IC_MAIN_TYPE,
             IC_SUB_TYPE,
             CARD_MONEY,
             SUM(CARD_NUM),
             VALID_DATE,
             LINE_ID,
             STATION_ID,
             EXIT_LINE_ID,
             EXIT_STATION_ID,
             MODEL,
             FLAG
        FROM T#IC_IN_CARD_CODE
       GROUP BY STORAGE_ID,
                AREA_ID,
                IC_MAIN_TYPE,
                IC_SUB_TYPE,
                CARD_MONEY,
                VALID_DATE,
                LINE_ID,
                STATION_ID,
                EXIT_LINE_ID,
                EXIT_STATION_ID,
                MODEL,
                FLAG;



    SELECT count(C.CARD_NUM) INTO V_CARD_MONEY_NUM
              FROM T#IC_IN_AREA_CARD_CODE C,ic_sts_area_card B
             WHERE C.STORAGE_ID = B.STORAGE_ID
               AND C.AREA_ID = B.AREA_ID
               AND LTRIM(RTRIM(C.IC_MAIN_TYPE)) =
                   LTRIM(RTRIM(B.IC_MAIN_TYPE))
               AND LTRIM(RTRIM(C.IC_SUB_TYPE)) = LTRIM(RTRIM(B.IC_SUB_TYPE))
               AND C.CARD_MONEY = B.CARD_MONEY
               AND NVL(trim(C.VALID_DATE), ' ') = NVL(trim(B.VALID_DATE), ' ')
               AND NVL(C.LINE_ID, ' ') = NVL(B.LINE_ID, ' ')
               AND NVL(C.STATION_ID, ' ') = NVL(B.STATION_ID, ' ')
               AND NVL(C.EXIT_LINE_ID, ' ') = NVL(B.EXIT_LINE_ID, ' ')
               AND NVL(C.EXIT_STATION_ID, ' ') = NVL(B.EXIT_STATION_ID, ' ')
               AND NVL(C.MODEL, ' ') = NVL(B.MODEL, ' ');

    IF V_CARD_MONEY_NUM > 0 THEN
      --更新ic_sts_area_card表
      UPDATE ic_sts_area_card B
         SET B.CARD_NUM = B.CARD_NUM +
                          (SELECT A.CARD_NUM
                             FROM T#IC_IN_AREA_CARD_CODE A
                            WHERE A.STORAGE_ID = B.STORAGE_ID
                              AND A.AREA_ID = B.AREA_ID
                              AND LTRIM(RTRIM(A.IC_MAIN_TYPE)) =
                                  LTRIM(RTRIM(B.IC_MAIN_TYPE))
                              AND LTRIM(RTRIM(A.IC_SUB_TYPE)) =
                                  LTRIM(RTRIM(B.IC_SUB_TYPE))
                              AND A.CARD_MONEY = B.CARD_MONEY
                              AND NVL(trim(A.VALID_DATE), ' ') =
                                  NVL(trim(B.VALID_DATE), ' ')
                              AND NVL(A.LINE_ID, ' ') = NVL(B.LINE_ID, ' ')
                              AND NVL(A.STATION_ID, ' ') =
                                  NVL(B.STATION_ID, ' ')
                              AND NVL(A.EXIT_LINE_ID, ' ') =
                                  NVL(B.EXIT_LINE_ID, ' ')
                              AND NVL(A.EXIT_STATION_ID, ' ') =
                                  NVL(B.EXIT_STATION_ID, ' ')
                              AND NVL(A.MODEL, ' ') = NVL(B.MODEL, ' '))
         WHERE EXISTS
         (SELECT C.CARD_NUM
                  FROM T#IC_IN_AREA_CARD_CODE C
                 WHERE C.STORAGE_ID = B.STORAGE_ID
                   AND C.AREA_ID = B.AREA_ID
                   AND LTRIM(RTRIM(C.IC_MAIN_TYPE)) =
                       LTRIM(RTRIM(B.IC_MAIN_TYPE))
                   AND LTRIM(RTRIM(C.IC_SUB_TYPE)) = LTRIM(RTRIM(B.IC_SUB_TYPE))
                   AND C.CARD_MONEY = B.CARD_MONEY
           --20160309 modify by mqf 增加trim
                   AND NVL(trim(C.VALID_DATE), ' ') = NVL(trim(B.VALID_DATE), ' ')
                   AND NVL(C.LINE_ID, ' ') = NVL(B.LINE_ID, ' ')
                   AND NVL(C.STATION_ID, ' ') = NVL(B.STATION_ID, ' ')
                   AND NVL(C.EXIT_LINE_ID, ' ') = NVL(B.EXIT_LINE_ID, ' ')
                   AND NVL(C.EXIT_STATION_ID, ' ') = NVL(B.EXIT_STATION_ID, ' ')
                   AND NVL(C.MODEL, ' ') = NVL(B.MODEL, ' '));

    ELSE
      --无原数据时插入新数据到ic_sts_area_card表
      insert into ic_sts_area_card(water_no,storage_id,area_id,ic_main_type,ic_sub_type,card_num,card_money,valid_date,
                                      line_id,station_id,exit_line_id,exit_station_id,MODEL,flag)
                   select SEQ_IC_TK_IN_XR_CARD_AREA.NEXTVAL,storage_id,area_id,ltrim(rtrim(ic_main_type)),ltrim(rtrim(ic_sub_type)),
                          card_num,card_money,trim(valid_date),line_id,station_id,exit_line_id,exit_station_id,MODEL,flag
                          from  T#IC_IN_AREA_CARD_CODE
                          where storage_id||area_id||ltrim(rtrim(ic_main_type))
                                ||ltrim(rtrim(ic_sub_type))||lpad(card_money,10,'0')
                                ||nvl(trim(valid_date),'') || nvl(line_id,'')|| nvl(station_id,'') || nvl(exit_line_id,'')
                                ||nvl(exit_station_id,'') || nvl(MODEL,'')
                                not in (
                                select storage_id+area_id||ltrim(rtrim(ic_main_type))
                                ||ltrim(rtrim(ic_sub_type))||lpad(card_money,10,'0')
                                ||nvl(trim(valid_date),'')||nvl(line_id,'')|| nvl(station_id,'')
                                ||nvl(exit_line_id,'')||nvl(exit_station_id,'')|| nvl(MODEL,'')
                                from  ic_sts_area_card
                                );
    END IF;




    INSERT INTO T#IC_IN_AREA_CODE
        (STORAGE_ID, AREA_ID, CARD_NUM)
        SELECT STORAGE_ID, AREA_ID, SUM(CARD_NUM)
          FROM T#IC_IN_AREA_CARD_CODE
         GROUP BY STORAGE_ID, AREA_ID;

    --更新IC_COD_AREA表（更新票区目前卡数量）
    UPDATE IC_COD_AREA A
       SET A.REAL_NUM = A.REAL_NUM +
                        (SELECT B.CARD_NUM
                           FROM T#IC_IN_AREA_CODE B
                          WHERE A.AREA_ID = B.AREA_ID
                            AND A.STORAGE_ID = B.STORAGE_ID)
     WHERE EXISTS (SELECT C.CARD_NUM
              FROM T#IC_IN_AREA_CODE C
             WHERE C.AREA_ID = A.AREA_ID
               AND C.STORAGE_ID = A.STORAGE_ID);

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      P_RESULT := -1;
      BILL_NO  := P_BILL_NO;
      RETURN;
  END;

  -------------------------------------------更新总票区、卡票区结束--------------------------------

  -------------------------------------------获取正式单号开始--------------------------------
    begin
        select bill_year into v_bill_year from ic_prm_bill_current_date;
    exception when no_data_found then
        return;
    end;

    begin
       if v_bill_year=to_char(sysdate,'yyyy') then
          select substr(p_bill_no,1,2)||v_bill_year||lpad(current_int_no+1,6,'0') into v_bill_no_audit
                 from ic_prm_bill_current_flow where bill_main_type_id='IL';
       else
          select substr(p_bill_no,1,2)||v_bill_year||'000001' into v_bill_no_audit from dual;
          update ic_prm_bill_current_date set bill_year=to_number(to_char(sysdate,'yyyy'));
       end if;

       update  ic_prm_bill_current_flow set current_no=v_bill_no_audit, current_int_no=to_number(substr(v_bill_no_audit,7,6)) where  bill_main_type_id='IL';

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      P_RESULT := -1;
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      BILL_NO  := P_BILL_NO;
      RETURN;
  END;
  ---------------------------------------获取正式单号结束-------------------------------------

  ---------------------------------------------更新入库单及明细开始----------------------------
  BEGIN
    --更改入库单
    UPDATE IC_IN_STORE_BILL
       SET BILL_NO       = V_BILL_NO_AUDIT,
           VERIFY_DATE   = SYSDATE,
           VERIFY_PERSON = P_OPERATOR_ID
     WHERE BILL_NO = P_BILL_NO;

    --更改入库明细
    UPDATE IC_IN_STORE_DETAIL A
       SET BILL_NO = V_BILL_NO_AUDIT
     WHERE A.BILL_NO = P_BILL_NO;

    --更新出入差额表入库单号
    UPDATE IC_IN_OUT_DIFF I
       SET I.IN_BILL_NO = V_BILL_NO_AUDIT
     WHERE I.IN_BILL_NO = P_BILL_NO;
    /*
    UPDATE IC_IN_STORE_DETAIL A
       SET A.DETAIL_PLACE = (SELECT B.DETAIL_PLACE
                               FROM T#_BOX B
                              WHERE BILL_NO = V_BILL_NO_AUDIT
                                AND A.START_BOX_ID = B.BOX_ID);
                                */
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      P_RESULT := -1;
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      BILL_NO  := P_BILL_NO;
      RETURN;
  END;
  --------------------------------------更新入库单及明细结束--------------------------------

  --删除临时表数据
  BEGIN
    DELETE FROM T#IC_IN_STORE_DETAIL;
    DELETE FROM T#IC_IN_CARD_CODE;
    DELETE FROM T#IC_IN_AREA_CODE;
    --DELETE FROM T#_BOX;
    DELETE FROM T#IC_IN_AREA_CARD_CODE;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      P_RESULT := -1;
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      BILL_NO  := P_BILL_NO;
      RETURN;
  END;

  IF V_RELATED_BILL_NO IS NULL THEN
    SELECT '' INTO V_RELATED_BILL_NO FROM DUAL;
  END IF;

  IF P_BILL_NO IS NOT NULL AND P_BILL_NO != ' ' THEN
    P_MEMO   := '单据' || P_BILL_NO || '入库成功, 用时 ' ||
                ROUND(TO_NUMBER(SYSDATE - V_BEGIN_TIME) * 24 * 60) || ' 秒';
    BILL_NO  := V_BILL_NO_AUDIT;
    P_RESULT := 1;

  END IF;

  INSERT INTO OPER_LOGGING
  VALUES
    ('', P_OPERATOR_ID, SYSDATE, P_MODULE_ID, '审核', P_MEMO);

END UP_IC_IN_AUDIT_CR;
/
grant execute on ACC_TK.UP_IC_IN_AUDIT_CR to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_IN_RETURN_MAX
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_IN_RETURN_MAX"
(
  p_waterNo in NUMBER,
  p_result  out integer
)

AS

v_billNo varchar(12);
v_billNoLend varchar(12);
v_outBillNo varchar(12);
v_boxFlag varchar(1);
v_waterNoLend numeric(18,0);
v_numReturn integer;
v_totalLend integer;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  begin
    select bill_no,box_flag,lend_water_no into v_billNo, v_boxFlag,v_waterNoLend
              from ic_in_return_bill_detail where water_no=p_waterNo;
    select lend_bill_no into v_billNoLend from ic_in_return_bill where bill_no=v_billNo;

    select out_bill_no into v_outBillNo from ic_out_lend_bill where bill_no=v_billNoLend;

    select nvl(sum(return_quantity) ,0) into v_numReturn
              from ic_in_return_bill A,ic_in_return_bill_detail B
              where A.bill_no=B.bill_no and A.lend_bill_no=v_billNoLend and
                    B.lend_water_no=v_waterNoLend and B.box_flag=v_boxFlag and
                    B.water_no <> p_waterNo;

     if(v_boxFlag <>'1') then
          select out_num into v_totalLend from ic_out_bill_detail where bill_no=v_outBillNo and water_no=v_waterNoLend;
     else
          select section_num into v_totalLend from ic_out_bill_detail_box where  water_no_pk=v_waterNoLend   ;
     end if;
     select v_totalLend-v_numReturn into p_result from dual;
  exception when no_data_found then
    p_result:=0;
  end;

END;
/
grant execute on ACC_TK.UP_IC_IN_RETURN_MAX to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_IN_TK_DETAIL_SUBMIT
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_IN_TK_DETAIL_SUBMIT" (p_bill_no in varchar,p_errmsg out varchar2,p_result out integer,bill_no out varchar2)
AS
--------------------------------------------------
--功能：卡号段提交
--作者：liangminglong
--修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票,屏蔽原有'9'
---------------------------------------------------
v_no                   numeric(18,0);
v_end_no               numeric(18,0);
v_start_logical_id     varchar(20);
v_mid_logical_id       varchar(20);
v_end_logical_id       varchar(20);
v_in_num               integer;
v_max_card_num         integer;
v_box_remain_num       integer ;    --本盒还可以放数量
v_curr_date           varchar(8);
v_storage_id          varchar(4);
v_area_id             varchar(2);
v_ic_main_type        varchar(2);
v_ic_sub_type         varchar(2);
v_card_type           varchar(2);
v_pre_card_type       varchar(2); --前条记录的卡类
v_box_id               varchar(14);
v_card_money           integer;
v_pre_money           integer;
v_temp_number         integer;
v_temp_number2         integer;
BEGIN
  -- routine body goes here, e.g.
   --DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  select 'ff',-537 into v_pre_card_type,v_pre_money from dual;
  select to_char(sysdate,'yyyymmdd') into v_curr_date from dual;
  --select substr(v_curr_date,1,4)||substr(v_curr_date,6,2)||substr(v_curr_date,9,2) into v_curr_date from dual;


  begin
    select count(*) into v_temp_number from ic_in_add_new_card where in_bill_no=p_bill_no;
  exception when no_data_found then
    p_result:=-2 ;
    p_errmsg :='无卡号段输入';
    return ;
  end;
  if  v_temp_number =0 then
    p_result:=-2 ;
    p_errmsg :='无卡号段输入';
    return ;
  end if;

  BEGIN
    begin
      insert into t#ic_id select water_no, storage_id,area_id,ic_main_type,ic_sub_type,card_money,sum(in_num),start_logical_id,end_logical_id
        from ic_in_add_new_card where in_bill_no=p_bill_no and in_flag='0'
        group by water_no,storage_id,area_id,ic_main_type,ic_sub_type,card_money,start_logical_id,end_logical_id
        order by storage_id,area_id,ic_main_type,ic_sub_type,start_logical_id,end_logical_id;
        --DBMS_OUTPUT.PUT_LINE(p_bill_no);
    exception when others then
      p_result:=-1 ;
      p_errmsg :='error....';
      return ;
    end;
    select min(no),max(no) into v_no,v_end_no from t#ic_id;
--DBMS_OUTPUT.PUT_LINE(v_no);

    begin
    while v_no<=v_end_no loop --每条记录处理，开始
      select start_logical_id,end_logical_id,ic_main_type,ic_sub_type,card_money,storage_id,area_id,in_num
        into v_start_logical_id,v_end_logical_id,v_ic_main_type,v_ic_sub_type,v_card_money,v_storage_id,v_area_id,v_in_num from t#ic_id where no=v_no;
      if v_no!=v_end_no then
          select min(no) into v_no from t#ic_id where no>v_no;
      else
          select v_end_no+1 into v_no from dual;
      end if;




      select case
                  --20170714 modify by mqf 屏蔽不用的的票卡类型
                  --when v_ic_sub_type='9' then '00'  --2元纸票
                    --when v_ic_sub_type='32' then '01' --赠票
                    --when v_ic_sub_type='7' then '02'  --赋值oct
                    --when v_ic_sub_type='34' then '03'  --羊城通押金发票
                    --when v_ic_sub_type='38' then '04' --APM赠票
                    --when v_ic_sub_type='94' then '05' --广佛试乘券
                    when v_ic_sub_type='61' then '06' --一卡通普通票
                    when v_ic_sub_type='62' then '06' --一卡通卡学生卡
                    when v_ic_sub_type='63' then '06'  --一卡通卡老人卡
                    --when v_ic_sub_type='64' then '06'  --一卡通发票
                   end into v_card_type from dual;

      if v_card_type!=v_pre_card_type  and v_pre_card_type!='ff'then
          p_result:=-3;
          p_errmsg :='卡类必须相同';
          return ;
      end if;
      if v_pre_money!=v_card_money and v_pre_money!=-537 then
          p_result:=-4;
          p_errmsg :='面值必须相同';
          return ;
      end if;
--DBMS_OUTPUT.PUT_LINE('v_start_logical_id'||v_start_logical_id);
      select v_start_logical_id into v_mid_logical_id from dual;     --每盒的结束卡号


      if v_pre_card_type='ff' then        --第一条记录

            select box_unit into v_max_card_num from ic_cod_card_type_contrast   where ic_main_type=v_ic_main_type  and ic_sub_type=v_ic_sub_type;
            select v_max_card_num into v_box_remain_num from dual;
            select case when v_curr_date=current_datetime then substr(v_curr_date,3,8)||v_card_type||lpad(current_int_no+1,6,'0')
                        else  substr(v_curr_date,3,8)||v_card_type||'000001' end
                  into v_box_id from ic_in_bill_box_id where box_card_type=v_card_type;



        else        --非第一条记录
               select sum(in_num) into v_box_remain_num from t#ic_box_id where box_id=v_box_id;
               select v_max_card_num-v_box_remain_num into v_box_remain_num from dual;
               if v_box_remain_num=0  then --当前盒已经装满就要寻找下一盒
                  select v_max_card_num into v_box_remain_num from dual;
                  select substr(v_box_id,1,8)||lpad(to_char(to_number(substr(v_box_id,9,14))+1),6,'0') into v_box_id from dual;  --下一盒
               end if;
      end if;

      if v_in_num>v_box_remain_num then    --本条记录的数量当前盒装不完

           begin
            while v_start_logical_id<=v_end_logical_id loop
                 select lpad(to_char(v_start_logical_id+v_box_remain_num-1),20,'0') into v_mid_logical_id from dual;
                  if v_mid_logical_id>v_end_logical_id then
                      select v_end_logical_id into  v_mid_logical_id from dual;
                  end if;
                  select v_mid_logical_id-v_start_logical_id+1 into v_box_remain_num from dual;  --当前要放的卡数量
                begin
                  insert into t#ic_box_id values(v_storage_id,v_area_id,v_ic_main_type,v_ic_sub_type,v_card_money ,v_box_id,v_start_logical_id,v_mid_logical_id,v_box_remain_num);
                exception when others then
                  p_result:=-1 ;
                  p_errmsg :='error...';
                  return ;
                end;
              select lpad(v_mid_logical_id+1,20,'0') into v_start_logical_id from dual;
              if v_start_logical_id<=v_end_logical_id then    --未到最后一张卡，寻找下一盒子
                  select substr(v_box_id,1,8)||lpad(to_char(to_number(substr(v_box_id,9,14)+1)),6,'0') into v_box_id from dual;  --下一盒
                  select v_max_card_num into v_box_remain_num from dual;
              end if;
            end loop;
        end;

        else
            begin
              insert into t#ic_box_id values(v_storage_id,v_area_id,v_ic_main_type,v_ic_sub_type,v_card_money ,v_box_id,v_start_logical_id,v_end_logical_id,
                  (to_number(v_end_logical_id)-to_number(v_start_logical_id)+1));
            exception when others then
                p_result:=-1 ;
                p_errmsg :='error...';
                return ;
            end;
            --DBMS_OUTPUT.PUT_LINE(v_box_remain_num);
        end if;
        select v_card_type,v_card_money into v_pre_card_type,v_pre_money from dual;
    end loop;
end;
    begin
        update ic_in_bill_box_id set current_int_no=to_number(substr(v_box_id,9,14)),current_datetime=v_curr_date
            where box_card_type=v_card_type;
        insert into ic_in_store_detail(WATER_NO,bill_no ,reason_id ,storage_id,area_id ,ic_main_type ,ic_sub_type ,card_money  ,in_num ,detail_place ,
            start_box_id ,end_box_id,start_logical_id,  end_logical_id  , valid_date, line_id, station_id,use_flag ,report_date)
            select SEQ_IC_TK_IN_DETAIL.NEXTVAL, p_bill_no,'01',storage_id,area_id,rtrim(ic_main_type) ,rtrim(ic_sub_type) ,card_money  ,in_num ,null ,
            box_id ,box_id,start_logical_id,  end_logical_id  , null,null,null,null ,null from t#ic_box_id;
        update ic_in_add_new_card set in_flag='1' where  in_bill_no=p_bill_no and in_flag='0';
      exception when others then
          p_result:=-1 ;
          p_errmsg :='error...';
          return ;
     end;
  update ic_in_add_new_card set in_flag='1' where  in_bill_no=p_bill_no and in_flag='0';
    begin
      delete from t#ic_id;
      delete from t#ic_box_id;
    exception when others then
      rollback;
      return;
   end;

    select 1, p_bill_no into p_result,bill_no from dual;
  END;
END;
/
grant execute on ACC_TK.UP_IC_IN_TK_DETAIL_SUBMIT to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_LOST_PRODUCT
prompt =====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_LOST_PRODUCT" (
p_billno in varchar,
p_orderno in varchar,
p_cardid in varchar,
p_type in varchar,
p_result out integer)
AS

-------------------------------------------
--功能：生产工作单-->登记遗失票
--作者：liangminglong
-------------------------------------------
--修改者：mqf
--修改内容：1、普通储值票重用,新增ES储值票重编码记录表acc_tk.IC_ES_AGAIN_INFO_SVT，原表IC_ES_AGAIN_INFO为ES单程票重编码记录表。
--          2、先检查ES表有逻辑卡号，再查询order_no写入v_orderp才不报错
--          3、限制ES废票、遗失票 订单号不为空
--          4、ES废票、遗失票增加订单号校验
--          5、通过查询ic_pdu_produce_bill_detail表数据，插入遗失明细ic_pdu_useless_detail
--修改日期：2017-04-05
---------------------------------------------------

v_err           integer;
v_orderp        varchar(14);
v_cardp         varchar(20);
v_icmainp       varchar(2);
v_icsubp        varchar(2);
v_linep         varchar(4);
v_stationp      varchar(4);
v_exitlinep     varchar(4);
v_exitstationp  varchar(4);
v_modep         varchar(4);
v_moneyp        integer;
v_datep         date;
v_machinep      varchar(4);
v_flag          varchar(1);
v_checkid       varchar(20);
v_checkflag     varchar(1);
v_boxnum        integer;
v_regnum        integer;
v_billnum       integer;
v_estype        varchar(2);
v_temp_num      integer;
waterNo          integer;

v_card_sub_type varchar(1); --'1'：单程票，'2':非单程票

BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');

delete from t#ic_lost_cardinfo;


  if p_billno is null or p_billno=' ' then
    p_result := -14;
    return;
  end if;
  if p_type is null or p_type=' ' then
    p_result := -14;
    return;
  end if;
  --p_type : '1'：ES废票，'2'：人工废票，'3'：遗失票

  if p_type='2' then
    begin
      select nvl(man_useless_num,0) into v_billnum from ic_pdu_produce_bill where bill_no=p_billno;

      if p_orderno is not null and p_orderno !=' ' then
        if substr(p_orderno,1,2)!='00' and substr(p_orderno,1,2)!='01' and substr(p_orderno,1,2)!='02' then
          p_result := -12;      -- orderno unvalid
          return;
        end if;

        if p_cardid is not null and p_cardid !=' ' then
          select count(*) into v_regnum from ic_pdu_useless_detail where bill_no=p_billno and card_type='2';

          if v_billnum<=v_regnum then
            p_result := -30;      -- 票卡数量已超过该废票定义总数
            return;
          end if;

          if substr(p_orderno,1,2)='00' then
            begin
              select count(*) into v_temp_num from ic_es_initi_info A where A.order_no=p_orderno and A.logical_id=p_cardid;
              if v_temp_num=0 then
                p_result := -1;      -- can't find the card and order number
                return;
              end if;
            exception when no_data_found then
              p_result := -1;      -- can't find the card and order number
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_useless_detail A where A.order_no=p_orderno and A.card_no=p_cardid;
              if v_temp_num!=0 then
                p_result := -10;      -- the card has already registered
                return;
              end if;
            exception when others then
              p_result := -10;      -- the card has already registered
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=p_orderno and A.end_box_id>=p_orderno and A.bill_no=p_billno;
              if v_temp_num =0 then
                p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
                return;
              end if;
            exception when no_data_found then
              p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
              return;
            end;

      --flag ：'1'：单张票卡插入遗失明细，删除遗失明细时将单张票卡；'2'：整盒插入遗失明细，删除遗失明细时将整盒删除
            select '1' into v_flag from dual;
            begin
              insert into t#ic_lost_cardinfo
                    (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
                    select p_billno,p_orderno,p_cardid,p_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,vaild_date,machine_no ,v_flag
                    from ic_pdu_produce_bill_detail where start_box_id<=p_orderno and end_box_id>=p_orderno and bill_no=p_billno;
              insert into ic_pdu_useless_detail
                    (bill_no,order_no,card_no,card_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,valid_date,machine_no,flag)
                    select bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag from t#ic_lost_cardinfo;
            exception when no_data_found then
              p_result := -2;      -- insert error
              rollback;
              return;
            end;
          end if;


          if substr(p_orderno,1,2)='01' then
            begin
              select count(*) into v_temp_num from ic_es_hunch_info A where A.order_no=p_orderno and A.logical_id=p_cardid;
              if v_temp_num=0 then
                p_result := -1;      -- can't find the card and order number
                return;
              end if;
            exception when no_data_found then
              p_result := -1;      -- can't find the card and order number
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_useless_detail A where A.order_no=p_orderno and A.card_no=p_cardid;
              if v_temp_num!=0 then
                p_result := -10;      -- the card has already registered
                return;
              end if;
            exception when others then
              p_result := -10;      -- the card has already registered
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=p_orderno and A.end_box_id>=p_orderno and A.bill_no=p_billno;
              if v_temp_num =0 then
                p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
                return;
              end if;
            exception when no_data_found then
              p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
              return;
            end;

            select '1' into v_flag from dual;
            begin
              insert into t#ic_lost_cardinfo
                    (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
                    select p_billno,p_orderno,p_cardid,p_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,vaild_date,machine_no ,v_flag
                    from ic_pdu_produce_bill_detail where start_box_id<=p_orderno and end_box_id>=p_orderno and bill_no=p_billno;
              insert into ic_pdu_useless_detail
                    (bill_no,order_no,card_no,card_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,valid_date,machine_no,flag)
                    select bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag from t#ic_lost_cardinfo;
            exception when no_data_found then
              p_result := -2;      -- insert error
              rollback;
              return;
            end;
          end if;


          if substr(p_orderno,1,2)='02' then

        begin
              select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=p_orderno and A.end_box_id>=p_orderno and A.bill_no=p_billno;
              if v_temp_num =0 then
                p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
                return;
              end if;
            exception when no_data_found then
              p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
              return;
            end;

            begin

        --20170405 add by mqf 普通储值票重用
        select ic_main_type,ic_sub_type
                into v_icmainp,v_icsubp
                from ic_pdu_produce_bill_detail where bill_no=p_billno and start_box_id<=p_orderno and end_box_id>=p_orderno;

        if v_icmainp='12' and v_icsubp='22' then
          v_card_sub_type := '1'; --单程票
        else
          v_card_sub_type := '2'; --非单程票
              end if;
        if v_card_sub_type = '1' then
                select count(*) into v_temp_num from ic_es_again_info A where A.order_no=p_orderno and A.logical_id=p_cardid;
        elsif v_card_sub_type = '2' then --非单程票
          select count(*) into v_temp_num from acc_tk.ic_es_again_info_svt A where A.order_no=p_orderno and A.logical_id=p_cardid;
          end if;

              if v_temp_num=0 then
                p_result := -1;      -- can't find the card and order number
                return;
              end if;
            exception when no_data_found then
              p_result := -1;      -- can't find the card and order number
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_useless_detail A where A.order_no=p_orderno and A.card_no=p_cardid;
              if v_temp_num!=0 then
                p_result := -10;      -- the card has already registered
                return;
              end if;
            exception when others then
              p_result := -10;      -- the card has already registered
              return;
            end;

      /* 放在前面判断
            begin
              select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=p_orderno and A.end_box_id>=p_orderno and A.bill_no=p_billno;
              if v_temp_num =0 then
                p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
                return;
              end if;
            exception when no_data_found then
              p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
              return;
            end;
      */

            select '1' into v_flag from dual;
            begin
              insert into t#ic_lost_cardinfo
                    (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
                    select p_billno,p_orderno,p_cardid,p_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,vaild_date,machine_no ,v_flag
                    from ic_pdu_produce_bill_detail where start_box_id<=p_orderno and end_box_id>=p_orderno and bill_no=p_billno;
              insert into ic_pdu_useless_detail
                    (bill_no,order_no,card_no,card_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,valid_date,machine_no,flag)
                    select bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag from t#ic_lost_cardinfo;
            exception when no_data_found then
              p_result := -2;      -- insert error
              rollback;
              return;
            end;
          end if;



          if substr(p_orderno,1,2)='03' then
            begin
              select count(*) into v_temp_num from ic_es_logout_info A where A.order_no=p_orderno and A.logical_id=p_cardid;
              if v_temp_num=0 then
                p_result := -1;      -- can't find the card and order number
                return;
              end if;
            exception when no_data_found then
              p_result := -1;      -- can't find the card and order number
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_useless_detail A where A.order_no=p_orderno and A.card_no=p_cardid;
              if v_temp_num!=0 then
                p_result := -10;      -- the card has already registered
                return;
              end if;
            exception when others then
              p_result := -10;      -- the card has already registered
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=p_orderno and A.end_box_id>=p_orderno and A.bill_no=p_billno;
              if v_temp_num =0 then
                p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
                return;
              end if;
            exception when no_data_found then
              p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
              return;
            end;

            select '1' into v_flag from dual;
            begin
              insert into t#ic_lost_cardinfo
                    (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
                    select p_billno,p_orderno,p_cardid,p_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,vaild_date,machine_no ,v_flag
                    from ic_pdu_produce_bill_detail where start_box_id<=p_orderno and end_box_id>=p_orderno and bill_no=p_billno;
              insert into ic_pdu_useless_detail
                    (bill_no,order_no,card_no,card_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,valid_date,machine_no,flag)
                    select bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag from t#ic_lost_cardinfo;
            exception when others then
              p_result := -2;      -- insert error
              rollback;
              return;
            end;
          end if;
        end if;   -- cardno !=null end

        if p_cardid is null or p_cardid=' ' then  --票卡号为空
          if substr(p_orderno,1,2)='00' then

            begin
              select count(*) into v_temp_num from ic_es_initi_info A where A.order_no=p_orderno;
              if v_temp_num=0 then
                p_result := -1;      -- can't find the card and order number
                return;
              end if;
            exception when no_data_found then
              p_result := -1;      -- can't find the card and order number
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_useless_detail A where A.order_no=p_orderno;
              if v_temp_num!=0 then
                p_result := -10;      -- the card has already registered
                return;
              end if;
            exception when others then
              p_result := -10;      -- the card has already registered
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=p_orderno and A.end_box_id>=p_orderno and A.bill_no=p_billno;
              if v_temp_num =0 then
                p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
                return;
              end if;
            exception when no_data_found then
              p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
              return;
            end;

            begin
              select count(*) into v_regnum from ic_pdu_useless_detail where bill_no=p_billno and card_type='2';
              select count(*) into v_boxnum from ic_es_initi_info where order_no=p_orderno;
              if v_billnum < (v_regnum+v_boxnum) then
                p_result := -30;      -- 票卡数量已超过该废票定义总数
                return;
              end if;
            exception when no_data_found then
              p_result := -30;      -- 票卡数量已超过该废票定义总数
              return;
            end;

      --flag ：'1'：单张票卡插入遗失明细，删除遗失明细时将单张票卡；'2'：整盒插入遗失明细，删除遗失明细时将整盒删除
            select '2' into v_flag from dual;
            begin --ES数据表通过订单号查找所有逻辑卡号
              insert into t#ic_lost_cardinfo
                  (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
                  select p_billno,p_orderno,logical_id,p_type,null,null,null,null,null,null,null,null,null,null ,v_flag from
                    ic_es_initi_info where order_no=p_orderno;

              select ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,vaild_date,machine_no
                into v_icmainp,v_icsubp,v_linep,v_stationp,v_exitlinep,v_exitstationp,v_modep,v_moneyp,v_datep,v_machinep
                from ic_pdu_produce_bill_detail where bill_no=p_billno and start_box_id<=p_orderno and end_box_id>=p_orderno;

              begin --ES数据表为ACC的票卡类型，工作单明细为票务票卡类型
                update t#ic_lost_cardinfo set icmaintype=v_icmainp,icsubtype=v_icsubp,lineid=v_linep,stationid=v_stationp,exitlineid=v_exitlinep,exitstationid = v_exitstationp,model=v_modep,
                premoney=v_moneyp,validdate=v_datep,machineno=v_machinep ;
              exception when others then
                p_result := -4;
              rollback;
                return;
              end;

              insert into ic_pdu_useless_detail
              (bill_no,order_no,card_no,card_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,valid_date,machine_no,flag )
                select bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag from t#ic_lost_cardinfo;
            exception when others then
              p_result := -2;      -- insert error
              rollback;
              return;
            end;

          end if;

          if substr(p_orderno,1,2)='01' then

            begin
              select count(*) into v_temp_num from ic_es_hunch_info A where A.order_no=p_orderno;
              if v_temp_num=0 then
                p_result := -1;      -- can't find the card and order number
                return;
              end if;
            exception when no_data_found then
              p_result := -1;      -- can't find the card and order number
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_useless_detail A where A.order_no=p_orderno;
              if v_temp_num!=0 then
                p_result := -10600;      -- the card has already registered
                return;
              end if;
            exception when others then
              p_result := -10600;      -- the card has already registered
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=p_orderno and A.end_box_id>=p_orderno and A.bill_no=p_billno;
              if v_temp_num =0 then
                p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
                return;
              end if;
            exception when no_data_found then
              p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
              return;
            end;

            begin
              select count(*) into v_regnum from ic_pdu_useless_detail where bill_no=p_billno and card_type='2';
              select count(*) into v_boxnum from ic_es_hunch_info where order_no=p_orderno;
              if v_billnum < (v_regnum+v_boxnum) then
                p_result := -30;      -- 票卡数量已超过该废票定义总数
                return;
              end if;
            exception when no_data_found then
              p_result := -30;      -- 票卡数量已超过该废票定义总数
              return;
            end;

            select '2' into v_flag from dual;
            begin --ES数据表通过订单号查找所有逻辑卡号
              insert into t#ic_lost_cardinfo
                  (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
                  select p_billno,p_orderno,logical_id,p_type,null,null,null,null,null,null,null,null,null,null ,v_flag from
                    ic_es_hunch_info where order_no=p_orderno;

              select ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,vaild_date,machine_no
                into v_icmainp,v_icsubp,v_linep,v_stationp,v_exitlinep,v_exitstationp,v_modep,v_moneyp,v_datep,v_machinep
                from ic_pdu_produce_bill_detail where bill_no=p_billno and start_box_id<=p_orderno and end_box_id>=p_orderno;

              begin --ES数据表为ACC的票卡类型，工作单明细为票务票卡类型
                update t#ic_lost_cardinfo set icmaintype=v_icmainp,icsubtype=v_icsubp,lineid=v_linep,stationid=v_stationp,exitlineid=v_exitlinep,exitstationid = v_exitstationp,model=v_modep,
                premoney=v_moneyp,validdate=v_datep,machineno=v_machinep ;
              exception when others then
                p_result := -4;
                return;
              end;

              insert into ic_pdu_useless_detail
              (bill_no,order_no,card_no,card_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,valid_date,machine_no,flag )
                select bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag from t#ic_lost_cardinfo;
            exception when others then
              p_result := -2;      -- insert error
              rollback;
              return;
            end;
          end if;



          if substr(p_orderno,1,2)='02' then

            begin
              select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=p_orderno and A.end_box_id>=p_orderno and A.bill_no=p_billno;
              if v_temp_num =0 then
                p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
                return;
              end if;
            exception when no_data_found then
              p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
              return;
            end;

      --20170405 add by mqf
      begin
        select ic_main_type,ic_sub_type
                into v_icmainp,v_icsubp
                from ic_pdu_produce_bill_detail where bill_no=p_billno and start_box_id<=p_orderno and end_box_id>=p_orderno;

        if v_icmainp='12' and v_icsubp='22' then
          v_card_sub_type := '1'; --单程票
        else
          v_card_sub_type := '2'; --非单程票
              end if;

        if v_card_sub_type = '1' then
        select count(*) into v_temp_num from ic_es_again_info A where A.order_no=p_orderno;
        elsif v_card_sub_type = '2' then --非单程票
        select count(*) into v_temp_num from acc_tk.ic_es_again_info_svt A where A.order_no=p_orderno;
          end if;

              if v_temp_num=0 then
                p_result := -1;      -- can't find the card and order number
                return;
              end if;
            exception when no_data_found then
              p_result := -1;      -- can't find the card and order number
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_useless_detail where order_no=p_orderno and card_no=p_cardid ;

              if v_temp_num!=0 then
                p_result := -10700;      -- the card has already registered
                return;
              end if;
            exception when others then
              p_result := -10700;      -- the card has already registered
              return;
            end;

      /* 20170405 modify by mqf 放在前面判断
            begin
              select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=p_orderno and A.end_box_id>=p_orderno and A.bill_no=p_billno;
              if v_temp_num =0 then
                p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
                return;
              end if;
            exception when no_data_found then
              p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
              return;
            end;
      */

            begin
              select count(*) into v_regnum from ic_pdu_useless_detail where bill_no=p_billno and card_type='2';
              --select count(*) into v_boxnum from ic_es_again_info where order_no=p_orderno;

        --20170405 modify by mqf
        if v_card_sub_type = '1' then
        select count(*) into v_boxnum from ic_es_again_info where order_no=p_orderno;
        elsif v_card_sub_type = '2' then --非单程票
        select count(*) into v_boxnum from acc_tk.ic_es_again_info_svt where order_no=p_orderno;
          end if;

              if v_billnum < (v_regnum) then
                p_result := -30;      -- 票卡数量已超过该废票定义总数
                return;
              end if;
            exception when no_data_found then
              p_result := -30;      -- 票卡数量已超过该废票定义总数
              return;
            end;

            select '2' into v_flag from dual;
            begin
      /*
              insert into t#ic_lost_cardinfo
                  (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
                  select p_billno,p_orderno,logical_id,p_type,null,null,null,null,null,null,null,null,null,null ,v_flag from
                    ic_es_again_info where order_no=p_orderno;
      */

        --20170405 modify by mqf --ES数据表通过订单号查找所有逻辑卡号
        if v_card_sub_type = '1' then
        insert into t#ic_lost_cardinfo
                  (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
                  select p_billno,p_orderno,logical_id,p_type,null,null,null,null,null,null,null,null,null,null ,v_flag from
                    ic_es_again_info where order_no=p_orderno;
        elsif v_card_sub_type = '2' then --非单程票
        insert into t#ic_lost_cardinfo
                  (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
                  select p_billno,p_orderno,logical_id,p_type,null,null,null,null,null,null,null,null,null,null ,v_flag from
                    acc_tk.ic_es_again_info_svt where order_no=p_orderno;
          end if;

              select ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,vaild_date,machine_no
                into v_icmainp,v_icsubp,v_linep,v_stationp,v_exitlinep,v_exitstationp,v_modep,v_moneyp,v_datep,v_machinep
                from ic_pdu_produce_bill_detail where bill_no=p_billno and start_box_id<=p_orderno and end_box_id>=p_orderno;

              begin --ES数据表为ACC的票卡类型，工作单明细为票务票卡类型
                update t#ic_lost_cardinfo set icmaintype=v_icmainp,icsubtype=v_icsubp,lineid=v_linep,stationid=v_stationp,exitlineid=v_exitlinep,exitstationid = v_exitstationp,model=v_modep,
                premoney=v_moneyp,validdate=v_datep,machineno=v_machinep ;
              exception when others then
              rollback;
                p_result := -4;
                return;
              end;

              insert into ic_pdu_useless_detail
              (bill_no,order_no,card_no,card_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,valid_date,machine_no,flag )
                select bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag from t#ic_lost_cardinfo;
            exception when others then
              p_result := -2;      -- insert error
              rollback;
              return;
            end;
          end if;


          if substr(p_orderno,1,2)='03' then

            begin
              select count(*) into v_temp_num from ic_es_logout_info A where A.order_no=p_orderno;
              if v_temp_num=0 then
                p_result := -1;      -- can't find the card and order number
                return;
              end if;
            exception when no_data_found then
              p_result := -1;      -- can't find the card and order number
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_useless_detail A where A.order_no=p_orderno;
              if v_temp_num!=0 then
                p_result := -10800;      -- the card has already registered
                return;
              end if;
            exception when others then
              p_result := -10800;      -- the card has already registered
              return;
            end;

            begin
              select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=p_orderno and A.end_box_id>=p_orderno and A.bill_no=p_billno;
              if v_temp_num =0 then
                p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
                return;
              end if;
            exception when no_data_found then
              p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
              return;
            end;

            begin
              select count(*) into v_regnum from ic_pdu_useless_detail where bill_no=p_billno and card_type='2';
              --select count(*) into v_boxnum from ic_es_again_info where order_no=p_orderno;
        --20170405 modify by mqf ic_es_again_info 改为 ic_es_logout_info
        select count(*) into v_boxnum from ic_es_logout_info where order_no=p_orderno;
              if v_billnum < (v_regnum+v_boxnum) then
                p_result := -30;      -- 票卡数量已超过该废票定义总数
                return;
              end if;
            exception when no_data_found then
              p_result := -30;      -- 票卡数量已超过该废票定义总数
              return;
            end;

            select '2' into v_flag from dual;
            begin --ES数据表通过订单号查找所有逻辑卡号
              insert into t#ic_lost_cardinfo
                  (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
                  select p_billno,p_orderno,logical_id,p_type,null,null,null,null,null,null,null,null,null,null ,v_flag from
                    ic_es_logout_info where order_no=p_orderno;

              select ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,vaild_date,machine_no
                into v_icmainp,v_icsubp,v_linep,v_stationp,v_exitlinep,v_exitstationp,v_modep,v_moneyp,v_datep,v_machinep
                from ic_pdu_produce_bill_detail where bill_no=p_billno and start_box_id<=p_orderno and end_box_id>=p_orderno;

              begin --ES数据表为ACC的票卡类型，工作单明细为票务票卡类型
                update t#ic_lost_cardinfo set icmaintype=v_icmainp,icsubtype=v_icsubp,lineid=v_linep,stationid=v_stationp,exitlineid=v_exitlinep,exitstationid = v_exitstationp,model=v_modep,
                premoney=v_moneyp,validdate=v_datep,machineno=v_machinep ;
              exception when others then
                p_result := -4;
                return;
              end;

              insert into ic_pdu_useless_detail
              (bill_no,order_no,card_no,card_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,valid_date,machine_no,flag )
                select bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag from t#ic_lost_cardinfo;
            exception when others then
              p_result := -2;      -- insert error
              rollback;
              return;
            end;
          end if;
        end if;   --end if cardno =null or cardno=''
      end if;     --end if orderno !=null

      if p_orderno is null or p_orderno=' ' then
        if p_cardid is null or p_cardid=' ' then
          p_result := -11; --current operation unvalid
          return;
        end if;

        if p_cardid is not null and p_cardid!=' ' then
          select es_worktype_id into v_estype from ic_pdu_produce_bill where bill_no=p_billno;
          if v_estype is null or v_estype =' ' then
            p_result := -40;
            return;
          end if;

          begin
            select count(*) into v_temp_num from ic_pdu_useless_detail where bill_no=p_billno  and card_no=p_cardid;

            --if v_temp_num=0 then 20170414 modify by mqf
      if v_temp_num!=0 then
              p_result := -27;    -- 票卡已登记
              return;
            end if;
          exception when no_data_found then
            p_result := -27;    -- 票卡已登记
            return;
          end;

          if v_estype ='00' then
        --20170414 add by mqf 先检查ES表有逻辑卡号，再查询order_no写入v_orderp才不报错
        begin
              select count(*) into v_temp_num from ic_es_initi_info where logical_id=p_cardid;
              if v_temp_num=0 then
                p_result := -1;      -- can't find the card
                return;
              end if;
            exception when no_data_found then
              p_result := -1;      -- can't find the card
              return;
            end;
      --end 20170414

            select order_no into v_orderp from ic_es_initi_info where logical_id=p_cardid;
            if v_orderp is null or v_orderp=' ' then
              p_result := -13;
              return;
            end if;
          end  if;

          if v_estype ='01' then
        --20170414 add by mqf 先检查ES表有逻辑卡号，再查询order_no写入v_orderp才不报错
        begin
              select count(*) into v_temp_num from ic_es_hunch_info where logical_id=p_cardid;
              if v_temp_num=0 then
                p_result := -1;      -- can't find the card
                return;
              end if;
            exception when no_data_found then
              p_result := -1;      -- can't find the card
              return;
            end;
      --end 20170414

            select order_no into v_orderp from ic_es_hunch_info where logical_id=p_cardid;
            if v_orderp is null or v_orderp=' ' then
              p_result := -13;
              return;
            end if;
          end  if;

          if v_estype ='02' then
            --select order_no into v_orderp from ic_es_again_info where logical_id=p_cardid;
      --20170405 modify by mqf p_orderno为空，不能用p_orderno作为查询条件
      select ic_main_type,ic_sub_type
                into v_icmainp,v_icsubp
                from ic_pdu_produce_bill_detail where bill_no=p_billno and rownum=1; --查询符合条件的第一条记录

        if v_icmainp='12' and v_icsubp='22' then
        v_card_sub_type := '1'; --单程票
        else
        v_card_sub_type := '2'; --非单程票
        end if;
        if v_card_sub_type = '1' then
                --20170414 add by mqf 先检查ES表有逻辑卡号，再查询order_no写入v_orderp才不报错
        begin
          select count(*) into v_temp_num from ic_es_again_info where logical_id=p_cardid;
          if v_temp_num=0 then
          p_result := -1;      -- can't find the card
          return;
          end if;
        exception when no_data_found then
          p_result := -1;      -- can't find the card
          return;
        end;
        --end 20170414

        select order_no into v_orderp from ic_es_again_info where logical_id=p_cardid;

        elsif v_card_sub_type = '2' then --非单程票
          --20170414 add by mqf 先检查ES表有逻辑卡号，再查询order_no写入v_orderp才不报错
        begin
          select count(*) into v_temp_num from ic_es_again_info_svt where logical_id=p_cardid;
          if v_temp_num=0 then
          p_result := -1;      -- can't find the card
          return;
          end if;
        exception when no_data_found then
          p_result := -1;      -- can't find the card
          return;
        end;
        --end 20170414

        select order_no into v_orderp from acc_tk.ic_es_again_info_svt where logical_id=p_cardid;
        end if;


            if v_orderp is null or v_orderp=' ' then
              p_result := -13;
              return;
            end if;
          end  if;

          if v_estype ='03' then
        --20170414 add by mqf 先检查ES表有逻辑卡号，再查询order_no写入v_orderp才不报错
        begin
              select count(*) into v_temp_num from ic_es_logout_info where logical_id=p_cardid;
              if v_temp_num=0 then
                p_result := -1;      -- can't find the card
                return;
              end if;
            exception when no_data_found then
              p_result := -1;      -- can't find the card
              return;
            end;
      --end 20170414

            select order_no into v_orderp from ic_es_logout_info where logical_id=p_cardid;
            if v_orderp is null or v_orderp=' ' then
              p_result := -13;
              return;
            end if;
          end  if;

          begin
            select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=v_orderp and A.end_box_id>=v_orderp and A.bill_no=p_billno;
            if v_temp_num=0 then
              p_result := -13;    --order number wasn't in the ic_produce_bill_detail
              return;
            end if;
          exception when no_data_found then
            p_result := -13;    -- order number wasn't in the ic_produce_bill_detail
            return;
          end;

          select count(*) into v_regnum from ic_pdu_useless_detail where bill_no=p_billno and card_type='2';
          if v_billnum<v_regnum then
            p_result := -30;    --票卡数量已超过该废票定义总数
            return;
          end if;

          select '1' into v_flag from dual;
          begin
            insert into t#ic_lost_cardinfo
              (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
            select p_billno,v_orderp,p_cardid,p_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,vaild_date,machine_no,v_flag
            from ic_pdu_produce_bill_detail where start_box_id<=v_orderp and end_box_id>=v_orderp and bill_no=p_billno;

            insert into ic_pdu_useless_detail
              (bill_no,order_no,card_no,card_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,valid_date,machine_no,flag )
            select bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag from t#ic_lost_cardinfo;
          exception when others then
            p_result := -2;      -- insert error
              rollback;
            return;
          end;
        end if;   -- end if p_cardid != null
      end if; --    if p_orderno=null or p_orderno=''
    end; -- end p_type='2'
  else

    --20170414 add by mqf ES废票、遗失票 订单号不为空
  if (p_orderno is null or p_orderno=' ') then
          p_result := -31;
          return;
    end if;

    begin
    --p_type : '1'：ES废票
      if p_type='1' then
        select es_useless_num into v_billnum from ic_pdu_produce_bill where bill_no=p_billno;
        select count(*) into v_regnum from ic_pdu_useless_detail where bill_no=p_billno and card_type='1';
        if( v_billnum<=v_regnum) then
          p_result := -30;
          return;
        end if;

        begin
          select count(*) into v_temp_num from ic_pdu_useless_detail where bill_no=p_billno and card_type='1' and card_no=p_cardid;
          if v_temp_num !=0 then
            p_result := -27;    -- 票卡已登记
            return;
          end if;
        exception when others then
          p_result := -27;    -- 票卡已登记
          return;
        end;


--单独判断卡号是否为空

        if (p_cardid is null or p_cardid=' ') then
          p_result := -29;
          return;
        end if;

      end if;

    end; --end p_type='1'

    --p_type :'3'：遗失票
    begin
      if p_type='3' then
        select lost_num into v_billnum from ic_pdu_produce_bill where bill_no=p_billno;
        select count(*) into v_regnum from ic_pdu_useless_detail where bill_no=p_billno and card_type='3';
        if( v_billnum<=v_regnum) then
          p_result := -30;
          return;
        end if;

        begin
          --select count(*) into v_temp_num from ic_pdu_useless_detail where bill_no=p_billno and card_type='1' and card_no=p_cardid;
      --20170414 modify by mqf
      select count(*) into v_temp_num from ic_pdu_useless_detail where bill_no=p_billno and card_type='3' and card_no=p_cardid;
          if v_temp_num !=0 then
            p_result := -27;    -- 票卡已登记
            return;
          end if;
        exception when others then
          p_result := -27;    -- 票卡已登记
          return;
        end;
--单独判断卡号是否为空
/*
        if (p_cardid is null or p_cardid=' ') then
          p_result := -29;
          return;
        end if;
*/

      end if;
    end;  --end p_type='3'

    if (length(p_cardid)!=20) then
      p_result := -28;
      return;
    end if;

    /*
     --校验票卡
     select substring(@cardid,20,1) into v_checkflag from dual;
     select @checkid=convert(varchar(1),((convert(smallint,substring(@cardid,1,1))^convert(smallint,substring(@cardid,2,1))
                          ^convert(smallint,substring(@cardid,3,1))^convert(smallint,substring(@cardid,4,1))^convert(smallint,substring(@cardid,5,1))
                          ^convert(smallint,substring(@cardid,6,1))^convert(smallint,substring(@cardid,7,1))^convert(smallint,substring(@cardid,8,1))^convert(smallint,substring(@cardid,9,1))^convert(smallint,substring(@cardid,10,1))
                          ^convert(smallint,substring(@cardid,11,1))^convert(smallint,substring(@cardid,12,1))^convert(smallint,substring(@cardid,13,1))^convert(smallint,substring(@cardid,14,1))^convert(smallint,substring(@cardid,15,1))
                          ^convert(smallint,substring(@cardid,1,1)))%10)) ;
    if (v_checkflag!=v_checkid) then
      p_result := -28;
      return;
    end if;
    */



    begin
      select count(*) into v_temp_num from ic_pdu_useless_detail where card_no=p_cardid and bill_no=p_billno ;
      if v_temp_num !=0 then
        p_result := -27;    -- 票卡已登记
        return;
      end if;
    exception when others then
      p_result := -27;    -- 票卡已登记
      return;
    end;

  --20170413 add by mqf 1、ES废票、遗失票 增加订单号校验 2、通过查询ic_pdu_produce_bill_detail表数据，插入遗失明细ic_pdu_useless_detail
  --p_orderno前面已限制ES废票、遗失票 订单号不为空
  begin
    select count(*) into v_temp_num from ic_pdu_produce_bill_detail A where A.start_box_id<=p_orderno and A.end_box_id>=p_orderno and A.bill_no=p_billno;
    if v_temp_num =0 then
    p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
    return;
    end if;
  exception when no_data_found then
    p_result := -13;      -- order number wasn't in the ic_produce_bill_detail
    return;
  end;

  select '1' into v_flag from dual; --flag ：'1'：单张票卡插入遗失明细，删除遗失明细时将单张票卡
  begin
    insert into t#ic_lost_cardinfo
      (bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag)
      select p_billno,p_orderno,p_cardid,p_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,vaild_date,machine_no ,v_flag
      from ic_pdu_produce_bill_detail where start_box_id<=p_orderno and end_box_id>=p_orderno and bill_no=p_billno;
    insert into ic_pdu_useless_detail
      (bill_no,order_no,card_no,card_type,ic_main_type,ic_sub_type,line_id,station_id,exit_line_id,exit_station_id,model,card_money,valid_date,machine_no,flag)
      select bill_no,order_no,card_no,cardtype,icmaintype,icsubtype,lineid,stationid,exitlineid,exitstationid,model,premoney,validdate,machineno,flag from t#ic_lost_cardinfo;
  exception when no_data_found then
    p_result := -2;      -- insert error
    rollback;
    return;
  end; --end 20170413 add by mqf


        --p_orderno is null or p_orderno=' '
    /*
    begin
      insert into ic_pdu_useless_detail(bill_no,order_no,card_no,card_type) values(p_billno,p_orderno,p_cardid,p_type);
    exception when others then
      p_result := -2;    -- 票卡已登记
      return;
    end;
    */



  end if;   --end else
  delete from t#ic_lost_cardinfo;
  p_result :=0;
END;
/
grant execute on ACC_TK.UP_IC_LOST_PRODUCT to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_PRODUCE_AUDIT
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_PRODUCE_AUDIT" (p_billno in varchar2,p_time in varchar2,p_operator in varchar2,p_result out varchar2)

---------------------------------------------------
--功能：生产工作单审核
--作者：liangminglong
---------------------------------------------------
--修改者：mqf
--修改内容：1、普通储值票重用,新增ES储值票重编码记录表acc_tk.IC_ES_AGAIN_INFO_SVT，原表IC_ES_AGAIN_INFO为ES单程票重编码记录表。
--修改日期：2017-04-05
---------------------------------------------------

AS
v_hole              integer;
v_valid             integer;
v_err               integer;
v_id1               numeric;
v_tid               numeric;
v_id2               numeric;
v_num               numeric;
v_startbox          varchar(14);
v_tempbox           varchar(14);
v_endbox            varchar(14);
v_esnum             integer;
v_mannum            integer;
v_billnum           integer;
v_lostnum           integer;
v_maintype          varchar(2);
v_card              varchar(20);
v_flag              char(1);
v_order_no          varchar(14);
v_icmainp           char(2);
v_icsubp            char(2);
v_linep             varchar(4);
v_stationp          varchar(4);
v_moneyp            integer;
v_datep             date;
v_machinep          varchar(4);
v_startboxid        varchar(14);
v_temp_num          integer;

v_card_sub_type varchar(1); --'1'：单程票，'2':非单程票

BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  delete from  t#ic_tmp_box_detail;

  if p_billno is null or p_billno=' ' then
    p_result:=15;   --15无生产工作单
    return;
  end if;

  begin
    select count(*) into v_temp_num from ic_pdu_produce_bill where bill_no=p_billno and record_flag='0';
    if v_temp_num>0 then
      p_result:=-16;   --工作单已审核
      return;
    end if;
  exception when others then
    p_result:=-16;  --工作单已审核
    return;
  end;

  begin
    select count(*) into v_temp_num from ic_pdu_produce_bill_detail where bill_no=p_billno;
    if v_temp_num=0 then
      p_result:=14;   --该单据无生产工作单明细
      return;
    end if;
  exception when others then
    p_result:=-14;  --该单据无生产工作单明细
    return;
  end;

  select ltrim(rtrim(ic_main_type)) into v_maintype from ic_pdu_produce_bill_detail where bill_no=p_billno;
  if(v_maintype='1' or v_maintype='2' or v_maintype='33') then
    select es_useless_num into v_esnum from ic_pdu_produce_bill where bill_no=p_billno;
    select man_useless_num into v_mannum from ic_pdu_produce_bill where bill_no=p_billno;

    if (v_esnum >0) then
      select count(*) into v_lostnum from ic_pdu_useless_detail where bill_no=p_billno and card_type='1';
      if (v_esnum<>v_lostnum) then
        p_result:=-40;
        return;
      end if;
    end if;

    if (v_mannum >0) then
      select count(*) into v_lostnum from ic_pdu_useless_detail where bill_no=p_billno and card_type='2';
      if (v_mannum<>v_lostnum) then
        p_result:=-40;
        return;
      end if;
    end if;
  end if;

  select count(*) into v_temp_num from ic_pdu_useless_detail where bill_no=p_billno and card_type='2';
  if v_temp_num=0 then
    --直接核对 总票数和有效票、废票、结余票总和是否相等
    select (A.draw_total-A.es_useless_num-A.man_useless_num-A.lost_num-A.real_balance) into v_hole from ic_pdu_produce_bill A where A.bill_no=p_billno;
    select sum(B.draw_quantity) into v_valid from ic_pdu_produce_bill_detail B where B.bill_no=p_billno;
    if (v_hole<>v_valid) then
      p_result:=-10;  ---10总票数和有效票、废票、结余票总和不等
      return;
    end if;

    begin
      update ic_pdu_produce_bill set record_flag='0',verify_person=p_operator, verify_date=to_date(p_time,'yyyy-mm-dd hh24:mi:ss') where bill_no=p_billno;
    exception when others then
      p_result:=-6;  --工作单审核出错
      return;
    end;

    p_result:=0;
    return;
  end if;


  --当有人工废票时，验证明细录入的完整性
  select man_useless_num into v_mannum from ic_pdu_produce_bill where bill_no=p_billno;
  select count(*) into v_billnum from ic_pdu_useless_detail where bill_no=p_billno and card_type='2';
  if (v_mannum<>v_billnum) then
    p_result:=-41;  -- 该生产工作单人工废票明细录入不完整
    return;
  end if;

-------------------------------------------------
  begin
    insert into t#ic_tmp_box_detail(id,orderno,num)
      select seq_tmp_box_detail.nextval, order_no,fini_pronum from
      (select  M.order_no order_no,M.fini_pronum fini_pronum from ic_pdu_produce_bill_detail D,ic_pdu_order_form M where
      M.order_no>=D.start_box_id and M.order_no<=D.end_box_id and D.bill_no=p_billno order by M.order_no);
  exception when others then
    p_result:=-17;   --获取订单信息出错
    return;
  end;

  begin
    insert into t#ic_tmp_useless
      select order_no,card_no,flag from ic_pdu_useless_detail where bill_no=p_billno and card_type='2' and flag='1'; --group by order_no,flag --
    insert into t#ic_tmp_useless(orderno,flag)
      select order_no,flag from ic_pdu_useless_detail where bill_no=p_billno and card_type='2' and flag='2' group by order_no,flag;
  exception when others then
    p_result:=-18;   --获取废票明细出错
    return;
  end;

  select ic_main_type,ic_sub_type,line_id,station_id,card_money,vaild_date,machine_no
    into v_icmainp,v_icsubp,v_linep,v_stationp,v_moneyp,v_datep,v_machinep from ic_pdu_produce_bill_detail where bill_no=p_billno;
  begin
    delete from ic_pdu_produce_bill_detail where bill_no=p_billno;
  exception when others then
    p_result:=-19;   --更新工作单明细失败
    return;
  end;

  --20170405 add by mqf
  if v_icmainp='12' and v_icsubp='22' then
  v_card_sub_type := '1'; --单程票
  else
  v_card_sub_type := '2'; --非单程票
  end if;

  declare cursor cur_useless  is select orderno,cardid,flag from t#ic_tmp_useless;
  begin
    open cur_useless;
    loop
    fetch cur_useless into v_order_no,v_card,v_flag;
    exit when cur_useless%notfound;
     DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
    if v_flag='1' then
        begin
        begin
          update ic_pdu_order_form set fini_pronum=(fini_pronum-1) where order_no=v_order_no;
        exception when others then
          p_result:=-1;   --更新ES制票结果失败
          return;
        end;

        if substr(v_order_no,1,2)='00' then
          begin
            delete from ic_es_initi_info where logical_id=v_card;
            delete from ic_es_initi_info_buf where logical_id=v_card;
          exception when others then
            p_result:=-2;   --更新ES制票结果明细失败
            return;
          end;
        end if;

        if substr(v_order_no,1,2)='01' then
          begin
            delete from ic_es_hunch_info where logical_id=v_card;
            delete from ic_es_hunch_info_buf where logical_id=v_card;
          exception when others then
            p_result:=-2;   --更新ES制票结果明细失败
            return;
          end;
        end if;

        if substr(v_order_no,1,2)='02' then
          begin
            --delete from ic_es_again_info where logical_id=v_card;

      --20170405 add by mqf
      if v_card_sub_type = '1' then
        delete from ic_es_again_info where logical_id=v_card;
      elsif v_card_sub_type = '2' then --非单程票
          delete from acc_tk.ic_es_again_info_svt where logical_id=v_card;
      end if;

            delete from ic_es_again_info_buf where logical_id=v_card;
          exception when others then
            p_result:=-2;   --更新ES制票结果明细失败
            return;
          end;
        end if;

        if substr(v_order_no,1,2)='03' then
          begin
            delete from ic_es_logout_info where logical_id=v_card;
            delete from ic_es_logout_info_buf where logical_id=v_card;
          exception when others then
            p_result:=-2;   --更新ES制票结果明细失败
            return;
          end;
        end if;

        begin
          update t#ic_tmp_box_detail set num=(num-1) where orderno=v_order_no;
        exception when others then
          p_result:=-4;   --更新ES制票结果明细失败
          return;
        end;
      end;   --end flag='1'
    else
      begin
        begin
          update ic_pdu_order_form set fini_pronum=0 where ic_pdu_order_form.order_no=v_order_no;
        exception when others then
          p_result:=-3;   --更新ES制票结果失败
          return;
        end;

        if substr(v_order_no,1,2)='00' then
          begin
            delete from ic_es_initi_info where order_no=v_order_no;
            delete from ic_es_initi_info_buf where order_no=v_order_no;
          exception when others then
            p_result:=-4;   --更新ES制票结果明细失败
            return;
          end;
        end if;

        if substr(v_order_no,1,2)='01' then
          begin
            delete from ic_es_hunch_info where order_no=v_order_no;
            delete from ic_es_hunch_info_buf where order_no=v_order_no;
          exception when others then
            p_result:=-4;   --更新ES制票结果明细失败
            return;
          end;
        end if;

        if substr(v_order_no,1,2)='02' then
          begin
            --delete from ic_es_again_info where order_no=v_order_no;

      --20170405 add by mqf
      if v_card_sub_type = '1' then
        delete from ic_es_again_info where order_no=v_order_no;
      elsif v_card_sub_type = '2' then --非单程票
        delete from acc_tk.ic_es_again_info_svt where order_no=v_order_no;
      end if;

            delete from ic_es_again_info_buf where order_no=v_order_no;
          exception when others then
            p_result:=-4;   --更新ES制票结果明细失败
            return;
          end;
        end if;

        if substr(v_order_no,1,2)='03' then
          begin
            delete from ic_es_logout_info where order_no=v_order_no;
            delete from ic_es_logout_info_buf where order_no=v_order_no;
          exception when others then
            p_result:=-4;   --更新ES制票结果明细失败
            return;
          end;
        end if;

        begin
          delete t#ic_tmp_box_detail where orderno=v_order_no ;
        exception when others then
          p_result:=-4;   --更新ES制票结果明细失败
          return;
        end;
      end;--end else  flag!='1'
    end if;
    end loop;
    close cur_useless;
  end;


  declare cursor cur_order  is select id,orderno from t#ic_tmp_box_detail order by id;
  begin
    open cur_order;
    loop
    fetch cur_order into v_tid,v_tempbox;
    exit when cur_order%notfound;

DBMS_OUTPUT.PUT_LINE('v_tid===='||v_tid);
DBMS_OUTPUT.PUT_LINE('v_id1===='||v_id1);

DBMS_OUTPUT.PUT_LINE('v_id2===='||v_id2);


    begin
      if (v_id1 is null ) then
        select v_tid into v_id1 from dual;
      end if;
      if (v_id2 is null) then
        select v_tid into v_id2 from dual;
      end if;
      if (v_startbox is null) then
        select v_tempbox into v_startbox from dual;
      end if;
      if(v_endbox is null) then
        select v_tempbox into v_endbox from dual;
      end if;

DBMS_OUTPUT.PUT_LINE('222v_tid===='||v_tid);
DBMS_OUTPUT.PUT_LINE('222v_id2===='||v_id1);

DBMS_OUTPUT.PUT_LINE('222v_id2===='||v_id2);

      if v_tid>v_id2+1 then
        begin
          select sum(num) into v_num from t#ic_tmp_box_detail where orderno>=v_startbox and orderno<=v_endbox;
          insert into ic_pdu_produce_bill_detail(water_no,bill_no,ic_main_type,ic_sub_type,card_money,vaild_date,line_id,station_id,draw_quantity,start_box_id,end_box_id,machine_no)
              values(SEQ_IC_PDU_PRODUCE_BILL_DETAIL.nextval,p_billno,v_icmainp ,v_icsubp,v_moneyp ,v_datep,v_linep,v_stationp ,v_num,v_startbox,v_endbox,v_machinep);
        exception when others then
          p_result:=-5;   --生成生产工作单明细失败
          return;
        end;
        select v_tempbox into v_startbox from dual;
        select v_tid into v_id1 from dual;
      end if;

      select v_tid into v_id2 from dual;
      select v_tempbox  into v_endbox from dual;

DBMS_OUTPUT.PUT_LINE('333v_tid===='||v_tid);
DBMS_OUTPUT.PUT_LINE('333v_id1===='||v_id1);

DBMS_OUTPUT.PUT_LINE('333v_id2===='||v_id2);
      end;
    end loop;
    close cur_order;
  end;

DBMS_OUTPUT.PUT_LINE('v_startbox===='||v_startbox);
DBMS_OUTPUT.PUT_LINE('v_endbox===='||v_endbox);


  begin
    select sum(num) into v_num from t#ic_tmp_box_detail where orderno>=v_startbox and orderno<=v_endbox;
    insert into ic_pdu_produce_bill_detail(water_no,bill_no,ic_main_type,ic_sub_type,card_money,vaild_date,line_id,station_id,draw_quantity,start_box_id,end_box_id,machine_no)
        values(SEQ_IC_PDU_PRODUCE_BILL_DETAIL.nextval,p_billno,v_icmainp ,v_icsubp,v_moneyp ,v_datep,v_linep,v_stationp ,v_num,v_startbox,v_endbox,v_machinep);
  exception when others then
    p_result:=-5;   --生成生产工作单明细失败
    return;
  end;

  begin
    update ic_pdu_produce_bill set record_flag='0',verify_person=p_operator, verify_date=to_date(p_time,'yyyy-mm-dd hh24:mi:ss') where bill_no=p_billno;
  exception when others then
    rollback;
    p_result:=-6;   --工作单审核出错
    return;
  end;

--所有操作完成后，开始验证票卡总数量和有效票、废票、结余票总和是否相等


  select (A.draw_total-A.es_useless_num-A.man_useless_num-A.lost_num-A.real_balance) into v_hole from ic_pdu_produce_bill A where A.bill_no=p_billno;
  select sum(B.draw_quantity) into v_valid from ic_pdu_produce_bill_detail B where B.bill_no=p_billno;
DBMS_OUTPUT.PUT_LINE('v_hole===='||v_hole);
DBMS_OUTPUT.PUT_LINE('v_valid===='||v_valid);

  if v_hole>v_valid then
    rollback;
    p_result:=-10;   --10总票数和有效票、废票、结余票总和不等(实际上是 总数量应该小于或者等于有效票、废票、结余票之和)    return;
    return;
  end if;

  delete from  t#ic_tmp_box_detail;
  p_result :=0;

END;
/
grant execute on ACC_TK.UP_IC_PRODUCE_AUDIT to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_QUERY_CARD_LOCAL
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_QUERY_CARD_LOCAL" (P_LOGICAL_ID  IN VARCHAR2, --卡号
                                                   P_ERRMSG      OUT VARCHAR2, --存储过程执行日志
                                                   P_RESULT      OUT INTEGER, --结果代码
                                                   INFO_CUR      OUT SYS_REFCURSOR) --返回结果集
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_QUERY_CARD_LOCAL
  --功能:票库查询-票卡查询
  --输出: --(-1)查询数据出错，详情请查询操作日志!(1)查询成功
  -------------------------------------------------------------------------------
 AS
  V_table_Name CHAR(50); --SQL拼接表名
  V_sql     CHAR(1024); --拼接SQL
  V_TEMP_NUMBER       INTEGER; --临时变量
BEGIN
  ------------------------初始化记录 ------------------------------------------------
  ---type值为-2------------
  BEGIN
    insert into T#IC_QUERY_CARD_RESULT (type,bill_no,verify_date,reason_id_text)
                select -2,order_no,manu_time,'初始化' from ic_es_initi_info WHERE logical_id=P_LOGICAL_ID;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      P_RESULT := -1;
      RETURN;
  END;
  ------------------------初始化记录结束------------------------------------------------
  ------------------------预赋值记录 ------------------------------------------------
  ---type值为-1------------
  BEGIN
    insert into T#IC_QUERY_CARD_RESULT(type,bill_no,verify_date,reason_id_text)
                select -1,order_no,manu_time,'预赋值' from ic_es_hunch_info where logical_id=P_LOGICAL_ID;
    --获取盒号--单程票从赋值区出库--
    insert into T#IC_QUERY_CARD_BOX(box_id)
                select distinct bill_no from T#IC_QUERY_CARD_RESULT where type=-1;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      P_RESULT := -1;
      RETURN;
  END;
  ------------------------预赋值记录结束------------------------------------------------
  ------------------------入库记录------------------------------------------------
  ---type值为0------------
    --入库当前表
    insert into T#IC_QUERY_CARD_RESULT(type,bill_no,reason_id,storage_id,area_id,detail_place,start_box_id,end_box_id
           ,form_maker,verify_person,verify_date)
                SELECT distinct 0,A.bill_no,A.reason_id,A.storage_id,A.area_id,A.detail_place,A.start_box_id,A.end_box_id,
                       B.form_maker,B.verify_person,B.verify_date
                        from ic_in_store_detail A,ic_in_store_bill B
                        where trim(A.start_logical_id)<=trim(P_LOGICAL_ID) and trim(A.end_logical_id)>=trim(P_LOGICAL_ID)
                        AND A.bill_no= B.bill_no(+);
    --查询入库历史表
    --查询入库的明细
    DECLARE cursor table_cur IS select his_table from ic_idx_history order BY his_table;
    BEGIN
      open table_cur;
        LOOP
          fetch table_cur into V_table_Name;
          exit when table_cur%notfound;
          V_sql := 'SELECT COUNT(1) INTO V_TEMP_NUMBER FROM '|| trim(V_table_Name) ||';';
          BEGIN
              EXECUTE immediate V_sql;
                EXCEPTION
                WHEN others THEN
                  Begin
                    DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
                  END;
          END;
          IF V_TEMP_NUMBER>0 THEN
              V_sql := 'insert into T#IC_QUERY_CARD_RESULT(type,bill_no,reason_id,storage_id,area_id,detail_place,start_box_id,end_box_id
                     ,form_maker,verify_person,verify_date)
                      select distinct 0,A.bill_no,A.reason_id,A.storage_id,A.area_id,A.detail_place,A.start_box_id,A.end_box_id,A.form_maker,A.verify_person,A.verify_date from
                      B.form_maker,B.verify_person,B.verify_date '
                      || trim(V_table_Name)  || ' A , ic_in_store_bill B where A.start_logical_id<='
                      || '''' || P_LOGICAL_ID || ''''
                      || 'and A.end_logical_id>='
                      || '''' || P_LOGICAL_ID || ''' AND A.bill_no= B.bill_no(+);';
              EXECUTE immediate V_sql;
           END IF;
        END LOOP;
      close table_cur;
    END;
    --查询入库的其他信息
    /*
    update T#IC_QUERY_CARD_RESULT A set (A.form_maker,A.verify_person,A.verify_date)=(
    SELECT B.form_maker,B.verify_person,B.verify_date
                    FROM ic_in_store_bill B
                    where A.bill_no= B.bill_no and type=0);
                    */
  ------------------------入库记录结束------------------------------------------------
  ------------------------出库记录------------------------------------------------
  --出库详细位置表(除调帐出库外，其他所有出库)
  ---type值为1------------
  --由于单程票从赋值区出库，有部分工作类型仅到盒，ic_out_bill_detail_box中没有逻辑卡号记录
  --需按盒查询，盒号从预赋值明细中获取
  SELECT count(1) INTO V_TEMP_NUMBER FROM T#IC_QUERY_CARD_BOX;
  IF V_TEMP_NUMBER = 0 THEN
     insert into T#IC_QUERY_CARD_BOX(box_id) values('-1');
  END IF;
  insert into T#IC_QUERY_CARD_RESULT(type,bill_no,detail_place,start_box_id,end_box_id,water_no
         ,reason_id,storage_id,area_id
         ,form_maker,verify_person,verify_date)
  select distinct 1,A.bill_no,A.detail_place,A.start_box_id,A.end_box_id,A.water_no
         ,C.reason_id,C.storage_id,C.area_id
         ,D.form_maker,D.verify_person,D.verify_date
          from ic_out_bill_detail_box A, T#IC_QUERY_CARD_BOX B
          ,ic_out_bill_detail C
          ,ic_out_bill D
          WHERE ((A.start_box_id <=B.box_id and A.end_box_id >=B.box_id ) or
                (A.start_logical_id<=P_LOGICAL_ID and A.end_logical_id>=P_LOGICAL_ID))
                AND A.bill_no=C.bill_no(+)
                AND A.bill_no=D.bill_no(+)
                AND A.water_no=C.water_no(+);
  --出库票区信息
  /*
  update T#IC_QUERY_CARD_RESULT A set (A.reason_id,A.storage_id,A.area_id)=(
  SELECT B.reason_id,B.storage_id,B.area_id
                      FROM ic_out_bill_detail B
                      where A.bill_no=B.bill_no and to_number(A.water_no)=B.water_no and A.type=1);
  --出库其他信息
  update T#IC_QUERY_CARD_RESULT A set (A.form_maker,A.verify_person,A.verify_date)=
  (SELECT B.form_maker,B.verify_person,B.verify_date
                      FROM ic_out_bill B
                      where A.bill_no=B.bill_no and A.type=1);
*/
  --调帐出库
  ---type值为2------------
  insert into T#IC_QUERY_CARD_RESULT(type,bill_no,reason_id,storage_id,area_id,detail_place,start_box_id,end_box_id
         ,verify_person,verify_date)
              SELECT 2,t.bill_no,t.adjust_id,t.storage_id,t.area_id,t.chest_id || '-' || t.storey_id || '-' || t.base_id,
                     t.start_box_id,t.end_box_id
                     ,B.verify_person,B.verify_date
                      from ic_out_adjust_bill_detail t
                      ,ic_out_adjust_bill B
                      where t.start_logical_id<=P_LOGICAL_ID and t.end_logical_id>=P_LOGICAL_ID
                      AND t.bill_no=B.bill_no(+);
  --调帐
  /*
  update T#IC_QUERY_CARD_RESULT A set (A.verify_person,A.verify_date)=(
  SELECT B.verify_person,B.verify_date
    FROM ic_out_adjust_bill B
    where A.bill_no=B.bill_no and type=2);
    */
  ------------------------出库记录结束------------------------------------------------
  --中文名称
  update T#IC_QUERY_CARD_RESULT A set A.reason_id_text = (
         SELECT B.reason_describe from ic_cod_in_out B where A.reason_id=B.reason_id);
  update T#IC_QUERY_CARD_RESULT A set A.storage_id_text= (
         SELECT B.storage_name from ic_cod_storage B where A.storage_id=B.storage_id);
  update T#IC_QUERY_CARD_RESULT A set A.area_id_text= (
         SELECT B.area_name FROM ic_cod_area B where A.area_id=B.area_id and A.storage_id=B.storage_id);
  --返回结果集
  BEGIN
    OPEN INFO_CUR FOR
    select bill_no,reason_id,storage_id,area_id,detail_place,start_box_id,end_box_id,form_maker,verify_person,verify_date,
          reason_id_text,storage_id_text,area_id_text,P_LOGICAL_ID logicalId from T#IC_QUERY_CARD_RESULT order by verify_date,bill_no;
  END;
  P_RESULT := 1;
  DELETE FROM T#IC_QUERY_CARD_RESULT;
  DELETE FROM T#IC_QUERY_CARD_BOX;
  COMMIT;
END UP_IC_QUERY_CARD_LOCAL;
/
grant execute on ACC_TK.UP_IC_QUERY_CARD_LOCAL to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_QUERY_UNCHECK_BILL
prompt ===========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_QUERY_UNCHECK_BILL" (P_ERRMSG      OUT VARCHAR2, --存储过程执行日志
                                                     P_RESULT      OUT INTEGER, --结果代码
                                                     INFO_CUR      OUT SYS_REFCURSOR) --返回结果集

  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_QUERY_UNCHECK_BILL
  --功能:票库查询-未审核单据查询
  --输出: --(-1)修改数据出错，详情请查询操作日志! (1)查询成功
  --磁悬浮票务改造-添加仓库权限 by lindaquan in 20151127
  -------------------------------------------------------------------------------
  AS
    v_sql varchar(2048);
    v_end varchar(256);
    v_where varchar(256);
    
BEGIN

  --清理临时表数据
  BEGIN
    DELETE FROM T#IC_QUERY_UNCHECK_BILL_RESULT;
  EXCEPTION
    WHEN OTHERS THEN
      P_RESULT := -1;
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      RETURN;
  END;

  --出库
  --生产计划
  BEGIN
    insert into T#IC_QUERY_UNCHECK_BILL_RESULT(bill_no,bill_name,bill_date,record_flag,storage_id)
                select distinct a.bill_no,'生产计划单',a.bill_date,a.record_flag,b.storage_id
                from ic_out_date_plan a,ic_out_date_plan_detail b
                where a.bill_no=b.bill_no(+)
                and a.record_flag='3';

    --核查计划
    insert into T#IC_QUERY_UNCHECK_BILL_RESULT(bill_no,bill_name,bill_date,record_flag,storage_id)
                select distinct t.bill_no,'核查计划单',t.bill_date,t.record_flag,b.storage_id
                from ic_out_cancel_plan t,ic_out_cancel_plan_detail b
                where t.bill_no = b.bill_no(+)
                and t.record_flag='3';

    --调帐出库
    insert into T#IC_QUERY_UNCHECK_BILL_RESULT(bill_no,bill_name,bill_date,record_flag,storage_id)
                select distinct t.bill_no,'调帐出库单',t.bill_date,t.record_flag,b.storage_id
                from ic_out_adjust_bill t,ic_out_adjust_bill_detail b
                where t.bill_no = b.bill_no(+)
                and t.record_flag='3';

    --配票计划
    insert into T#IC_QUERY_UNCHECK_BILL_RESULT(bill_no,bill_name,bill_date,record_flag,storage_id)
                select distinct a.bill_no,'配票计划单',a.bill_date,a.record_flag,b.storage_id
                from ic_out_distribute_plan_bill a,ic_out_distribute_plan_dtl b
                where a.bill_no = b.bill_no(+)
                and a.record_flag='3';
    --借票单
    insert into T#IC_QUERY_UNCHECK_BILL_RESULT(bill_no,bill_name,bill_date,record_flag,storage_id)
                select distinct t.bill_no,'借票单',t.bill_date,t.record_flag,b.storage_id
                from ic_out_lend_bill t,ic_out_lend_bill_detail b
                where t.bill_no = b.bill_no(+)
                and t.record_flag='3';

    --生产出库--销毁出库--清洗出库--核查出库
    insert into T#IC_QUERY_UNCHECK_BILL_RESULT(bill_no,bill_name,bill_date,record_flag,storage_id)
                select distinct a.bill_no,
                       decode(substr(a.bill_no,1,2),
                       'SC','生产出库单',
                       'XC','销毁出库单',
                       'HC','核查出库',
                       'QC','清洗出库',
                       '其他出库'),
                       a.bill_date,a.record_flag,b.storage_id
                from ic_out_bill a,ic_out_bill_detail b
                where a.bill_no = b.bill_no(+) AND a.record_flag='3';

    --入库
    --拼接历史表查询语句            
    v_sql := ' select bill_no,storage_id from ic_in_store_detail ';
    v_end := ' group by bill_no,storage_id ';
    v_sql := v_sql || v_end;

    DECLARE
    CURSOR c_cur IS
         select t.his_table from IC_IDX_HISTORY t where t.origin_table_name='ic_in_store_detail';
    r_cur c_cur%rowtype;

    begin
      open c_cur;
      loop
        fetch c_cur into r_cur;
        exit when c_cur%notfound;
        v_sql := v_sql || ' union all select bill_no,storage_id from '|| r_cur.his_table || v_end;
      end loop;
      close c_cur;
    end;
    
    --生产入库单--新票入库--回收入库--调帐入库--核查入库--清洗入库--借票归还入库单
    v_where := ' where a.bill_no = b.bill_no(+) and a.record_flag=''3''';
    v_sql := ' insert into T#IC_QUERY_UNCHECK_BILL_RESULT(bill_no,bill_name,bill_date,record_flag,storage_id)
                select distinct a.bill_no,
                       decode(substr(a.bill_no,1,2),
                       ''SR'',''生产入库单'',
                       ''XR'',''新票入库单'',
                       ''HR'',''回收入库单'',
                       ''TR'',''调帐入库单'',
                       ''CR'',''核查入库单'',
                       ''QR'',''清洗入库'',
                       ''JR'',''借票归还入库单'',
                       ''其他入库''),
                       a.bill_date,a.record_flag,b.storage_id
                from ic_in_store_bill a,(select * from ('||v_sql||')'||v_end||') b ';
    v_sql := v_sql || v_where;
    DBMS_OUTPUT.PUT_LINE(v_sql);

    EXECUTE immediate v_sql;


    --借票归还单
    --20121018 luojun 借票归还单为逻辑删除 加上 条件delete_flg = '0'
    insert into T#IC_QUERY_UNCHECK_BILL_RESULT(bill_no,bill_name,bill_date,record_flag,storage_id)
                select distinct a.bill_no,'借票归还单',a.bill_date,a.record_flag,b.storage_id
                from ic_in_return_bill a,ic_in_return_bill_detail b
                WHERE a.bill_no = b.bill_no(+) and a.record_flag='3';

   --盘点单
   insert into T#IC_QUERY_UNCHECK_BILL_RESULT(bill_no,bill_name,bill_date,record_flag,storage_id)
                select distinct a.check_bill_no,'盘点单',a.check_date,a.record_flag,b.storage_id
                from ic_chk_storage a,ic_chk_storage_detail b
                WHERE a.CHECK_BILL_NO = b.CHECK_BILL_NO(+) and a.record_flag='3';

    --生产工作单
    insert into T#IC_QUERY_UNCHECK_BILL_RESULT(bill_no,bill_name,bill_date,record_flag,storage_id)
                select distinct a.bill_no,'生产单',a.bill_date,a.record_flag,b.storage_id
                from ic_pdu_produce_bill a,ic_out_bill_detail b
                where a.out_bill_no = b.bill_no(+) and a.record_flag='3';
                
  EXCEPTION
    WHEN OTHERS THEN
      P_RESULT := -1;
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      RETURN;
  END;

  --查询临时表结果集到游标变量
  BEGIN
    OPEN INFO_CUR FOR
      select bill_no,bill_name,to_char(bill_date,'yyyy-MM-dd HH24:mi:ss') bill_date,record_flag,storage_id
               from T#IC_QUERY_UNCHECK_BILL_RESULT order by bill_name,bill_no,bill_date;
  END;

  --清理临时表数据
  BEGIN
    DELETE FROM T#IC_QUERY_UNCHECK_BILL_RESULT;
  EXCEPTION
    WHEN OTHERS THEN
      P_RESULT := -1;
      DBMS_OUTPUT.PUT_LINE('sqlcode : ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('sqlerrm : ' || SQLERRM);
      P_ERRMSG := SQLCODE || ':' || SQLERRM;
      RETURN;
  END;

  P_RESULT := 1;

END UP_IC_QUERY_UNCHECK_BILL;
/
grant execute on ACC_TK.UP_IC_QUERY_UNCHECK_BILL to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_RCT_BL_CHECK
prompt =====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_CHECK"
(  p_cur            IN OUT sys_refcursor,--返回结果集
  p_bill_no          IN  VARCHAR2--出库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_CHECK
  --功能:票库盘点单
  --创建者：  liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  if p_bill_no is not null then
                insert into t#ic_check_tmp_rpt select b.check_date,b.check_person,b.verify_person,b.check_bill_no,a.area_id,d.area_name,
      a.ic_main_type, a.ic_sub_type ,c.ic_sub_desc, card_money  , sys_amount,real_amount,
      a.line_id,  a.station_id  ,e.chinese_name
    from ic_chk_storage_detail a,ic_chk_storage b,ic_cod_card_sub_type c,ic_cod_area d,ic_cod_station e

    where a.check_bill_no=p_bill_no and a.check_bill_no=b.check_bill_no
        and a.line_id = e.line_id(+)  AND
      a.station_id = e.station_id(+) AND
      rtrim(a.ic_main_type) = c.ic_main_type(+) AND
      rtrim(a.ic_sub_type) = c.ic_sub_type(+) AND
      a.area_id = d.area_id ;
         /*
    update t#ic_check_tmp_rpt set (area_name,station_name,ic_sub_desc)=(select d.area_name,b.chinese_name,c.ic_sub_desc
        from t#ic_check_tmp_rpt a ,ic_cod_station b,ic_cod_card_sub_type c,ic_cod_area d
      where  a.line_id = b.line_id(+)  AND
      a.station_id = b.station_id(+) AND
      rtrim(a.ic_main_type) = c.ic_main_type(+) AND
      rtrim(a.ic_sub_type) = c.ic_sub_type(+) AND
      a.area_id = d.area_id )
    where exists(select d.area_name,b.chinese_name,c.ic_sub_desc
        from t#ic_check_tmp_rpt a ,ic_cod_station b,ic_cod_card_sub_type c,ic_cod_area d
      where  a.line_id = b.line_id(+)  AND
      a.station_id = b.station_id(+) AND
      rtrim(a.ic_main_type) = c.ic_main_type(+) AND
      rtrim(a.ic_sub_type) = c.ic_sub_type(+) AND
      a.area_id = d.area_id);
    */
  open p_cur for
    select check_date,check_person,verify_person,check_bill_no,
            area_id,area_name, ic_main_type,ic_sub_type,ic_sub_desc,
           card_money  ,line_id,station_id, station_name,
           sum(sys_amount) as sys_amount,sum(real_amount) as real_amount,sum(real_amount-sys_amount) as diff
           from t#ic_check_tmp_rpt
           group  by check_date,check_person,verify_person,check_bill_no,
            area_id,area_name, ic_main_type,ic_sub_type,ic_sub_desc,
           card_money  ,line_id,station_id, station_name;
  else
  open p_cur for
    select '' check_date,'' check_person,'' verify_person,'' check_bill_no,
            '' area_id,'' area_name, '' ic_main_type,'' ic_sub_type,'' ic_sub_desc,
           '' card_money  ,'' line_id,'' station_id, '' station_name,
           0 sys_amount,0 real_amount,0 diff
           from dual;
  end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_CHECK to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_CHECK to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_CHECK_CARD
prompt ==========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_CHECK_CARD"
(  p_cur            IN OUT sys_refcursor,--返回结果集
  p_bill_no          IN  VARCHAR2--出库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_CHECK_CARD
  --功能:票库盘点单明细
  --创建者：  liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS

v_temp_number   integer;

BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');

  if p_bill_no is not null then
  insert into t#ic_check_detail_tmp_rpt
    SELECT distinct
      a.check_bill_no, c.box_id, c.start_logical_id, c.end_logical_id,
      c.ic_main_type,c.ic_sub_type,'',card_money,line_id,station_id,'',a.verify_date
    FROM
      ic_chk_storage_detail_card c,
      ic_chk_storage_detail b,
      ic_chk_storage  a
    WHERE
      a.check_bill_no = b.check_bill_no AND b.check_bill_no = c.check_bill_no AND b.box_id=c.box_id and
      a.check_bill_no = p_bill_no;



    update t#ic_check_detail_tmp_rpt a set a.ic_sub_desc=(select b.ic_sub_desc from ic_cod_card_sub_type b where
    rtrim(a.ic_main_type)=b.ic_main_type and rtrim(a.ic_sub_type)=b.ic_sub_type)
      where exists(select b.ic_sub_desc from ic_cod_card_sub_type b where
    rtrim(a.ic_main_type)=b.ic_main_type and rtrim(a.ic_sub_type)=b.ic_sub_type);

    update t#ic_check_detail_tmp_rpt a set a.station_name=(select b.chinese_name from ic_cod_station b where
    a.line_id=b.line_id and a.station_id=b.station_id)
      where exists(select b.chinese_name from ic_cod_station b where
    a.line_id=b.line_id and a.station_id=b.station_id);


    select count(*) into v_temp_number from t#ic_check_detail_tmp_rpt;
    if v_temp_number=0 then
      insert into t#ic_check_detail_tmp_rpt select check_bill_no,null,null,null,' ',' ',' ',null,' ',' ',' ',verify_date from  ic_chk_storage where check_bill_no = p_bill_no;
    end if;

  open p_cur for
   select check_bill_no,box_id,start_logical_id,end_logical_id,ic_sub_desc,card_money,station_name,verify_date from t#ic_check_detail_tmp_rpt;

  else

    open p_cur for
   select '' check_bill_no,'' box_id,'' start_logical_id,'' end_logical_id,'' ic_sub_desc,'' card_money,
          '' station_name,'' verify_date from dual;

  end if;


END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_CHECK_CARD to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_CHECK_CARD to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_ADJUST
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_ADJUST"(p_cur     IN OUT sys_refcursor, --返回结果集
                                                     p_bill_no IN VARCHAR2 --出库单号
                                                     )
-------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_IN_ADJUST
  --功能:调帐入库(HR)-单据导出
  --创建者：  liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
 AS
  v_sql       varchar(1024);
  v_his_table varchar(1024);
  v_temp_num  integer;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  --delete from t#ic_tmp_rpt;
  if p_bill_no is not null then
    select 'ic_in_store_detail' into v_his_table from dual;
    select count(*)
      into v_temp_num
      from ic_in_store_detail
     where bill_no = p_bill_no;
  
    if v_temp_num = 0 then
      select his_table
        into v_his_table
        from ic_idx_history
       where substr(p_bill_no, 3, 10) between begin_recd and end_recd;
    end if;
  
    select 'insert into t#ic_tmp_rpt select a.bill_no,b.related_bill_no,b.bill_date,verify_date,area_id,'''',  ic_main_type, ic_sub_type ,'''',' ||
           'in_num,valid_date ,card_money,line_id,station_id,'''',exit_station_id,'''',model,'''',start_box_id,end_box_id,start_logical_id,end_logical_id ,' ||
           'reason_id ,'''',b.remark,form_maker,administer,storage_id from ' ||
           v_his_table || ' a,ic_in_store_bill b where a.bill_no=''' ||
           p_bill_no || ''' and a.bill_no=b.bill_no'
      into v_sql
      from dual;
    execute immediate v_sql;
  
    update t#ic_tmp_rpt
       set (area_name, station_name, ic_sub_desc, reason_name) =
           (select ic_cod_area.area_name,
                   ic_cod_station.chinese_name,
                   ic_cod_card_sub_type.ic_sub_desc,
                   ic_cod_in_out.reason_describe
              from t#ic_tmp_rpt a,
                   ic_cod_station,
                   ic_cod_card_sub_type,
                   ic_cod_area,
                   ic_cod_in_out
             where a.line_id = ic_cod_station.line_id(+)
               AND a.station_id = ic_cod_station.station_id(+)
               AND rtrim(a.ic_main_type) =
                   ic_cod_card_sub_type.ic_main_type(+)
               AND rtrim(a.ic_sub_type) =
                   ic_cod_card_sub_type.ic_sub_type(+)
               AND a.reason_id = ic_cod_in_out.reason_id
               and a.storage_id =ic_cod_area.storage_id
               AND a.area_id = ic_cod_area.area_id)
     where exists (select ic_cod_area.area_name,
                   ic_cod_station.chinese_name,
                   ic_cod_card_sub_type.ic_sub_desc,
                   ic_cod_in_out.reason_describe
              from t#ic_tmp_rpt a,
                   ic_cod_station,
                   ic_cod_card_sub_type,
                   ic_cod_area,
                   ic_cod_in_out
             where a.line_id = ic_cod_station.line_id(+)
               AND a.station_id = ic_cod_station.station_id(+)
               AND rtrim(a.ic_main_type) =
                   ic_cod_card_sub_type.ic_main_type(+)
               AND rtrim(a.ic_sub_type) =
                   ic_cod_card_sub_type.ic_sub_type(+)
               AND a.reason_id = ic_cod_in_out.reason_id
               and a.storage_id =ic_cod_area.storage_id
               AND a.area_id = ic_cod_area.area_id);
  
    --添加多日票模式相关字段 更新出站站点名称
    update t#ic_tmp_rpt a
       set a.exit_stationid_name =
           (select b.chinese_name
              from ic_cod_station b
             where a.exit_station_id = b.station_id)
     where exists (select b.chinese_name
              from ic_cod_station b
             where a.exit_station_id = b.station_id);
  
    --添加多日票模式相关字段 查询pub_flag 更新限制模式名称
    update t#ic_tmp_rpt a
       set a.mode_name =
           (select b.code_text
              from pub_flag b
             where a.model = b.code
               and b.type = 26)
     where exists (select b.code_text
              from pub_flag b
             where a.model = b.code
               and b.type = 26);
    OPEN p_cur FOR
      select bill_no,
             related_bill_no,
             bill_date,
             verify_date,
             area_name,
             ic_sub_desc,
             in_num in_num,
             valid_date,
             card_money,
             station_name,
             exit_stationid_name,
             mode_name,
             start_box_id,
             end_box_id,
             start_logical_id,
             end_logical_id,
             reason_name,
             remark,
             form_maker,
             administer
        from t#ic_tmp_rpt
       order by start_box_id, end_box_id, start_logical_id, end_logical_id;
  
  else
    OPEN p_cur FOR
      select bill_no,
             related_bill_no,
             bill_date,
             verify_date,
             area_name,
             ic_sub_desc,
             in_num,
             valid_date,
             card_money,
             station_name,
             exit_stationid_name,
             mode_name,
             start_box_id,
             end_box_id,
             start_logical_id,
             end_logical_id,
             reason_name,
             remark,
             form_maker,
             administer
        from t#ic_tmp_rpt
       order by start_box_id, end_box_id, start_logical_id, end_logical_id;
  
  end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_ADJUST to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_ADJUST to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_BORROW
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_BORROW"
(  p_cur            IN OUT sys_refcursor,--返回结果集
  p_bill_no          IN  VARCHAR2--出库单号
)
-------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_IN_BORROW
  --功能:借票归还-单据导出
  --创建者：  liangminglong
  --输出: p_cur结果集
-------------------------------------------------------------------------------
AS

v_form_maker        varchar(40);
v_hand_man          varchar(40);
v_administer        varchar(40);
v_accounter         varchar(40);
v_remarks           varchar(400);
v_bill_date         date;
v_verify_date       date;
v_related_bill      varchar(50);
v_achieve_time      varchar(30);
v_temp_number        integer;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  if p_bill_no is not null then
    select bill_date,verify_date,form_maker ,hand_man,administer,accounter,remark,case when substr(p_bill_no,1,2)='SR' then related_bill_no
       when substr(p_bill_no,1,2) ='TR' then related_bill_no else ' ' end
       into v_bill_date,v_verify_date,v_form_maker,v_hand_man,v_administer,v_accounter,v_remarks,v_related_bill
    from ic_in_store_bill where bill_no=p_bill_no;

    if substr(p_bill_no,1,2)='SR' then
      select to_char(achieve_time,'yyyymmdd') into v_achieve_time from ic_pdu_order_form a,ic_pdu_plan_order_mapping b,ic_pdu_produce_bill c
      where a.order_no=b.order_no and b.out_bill_no=c.out_bill_no and c.bill_no=v_related_bill;
      if v_achieve_time is not null then
        select '生产日期：'||substr(v_achieve_time,1,4)||'-'||substr(v_achieve_time,5,2)||'-'||substr(v_achieve_time,7,2) into v_achieve_time from dual;
      end if;
    end if;

    select count(*) into v_temp_number from  ic_in_store_detail  where  bill_no=p_bill_no;
      if v_temp_number>0 then
        open p_cur for
         select p_bill_no bill_no,v_bill_date bill_date,v_verify_date verify_date,v_form_maker form_maker,
            v_hand_man hand_man,v_administer administer,v_accounter accounter,v_remarks remarks,
            v_related_bill related_bill,v_achieve_time achieve_time,
            b.reason_describe reason,c.area_name area,d.ic_sub_desc sub_type, sum(a.in_num) in_num
           from ic_in_store_detail a,ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d
          where a.BILL_NO=p_bill_no
          and a.reason_id=b.reason_id(+)
          and a.area_id=c.area_id(+)
          and a.storage_id=c.storage_id(+)
          and rtrim(a.ic_main_type) =d.ic_main_type(+)
          and rtrim(a.ic_sub_type)=d.ic_sub_type(+)
          group by p_bill_no,v_bill_date,v_verify_date,v_form_maker,
            v_hand_man,v_administer,v_accounter,v_remarks,
            v_related_bill,v_achieve_time,
            b.reason_describe,c.area_name,d.ic_sub_desc,in_num;
    else
      open p_cur for
         select p_bill_no bill_no,v_bill_date bill_date,v_verify_date verify_date,v_form_maker form_maker,
            v_hand_man hand_man,v_administer administer,v_accounter accounter,v_remarks remarks,
            v_related_bill related_bill,v_achieve_time achieve_time,
            b.reason_describe reason,c.area_name area,d.ic_sub_desc sub_type, sum(a.in_num) in_num
           from ic_sts_in a,ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d
          where a.BILL_NO=p_bill_no
          and a.reason_id=b.reason_id(+)
          and a.area_id=c.area_id(+)
          and a.storage_id=c.storage_id(+)
          and rtrim(a.ic_main_type) =d.ic_main_type(+)
          and rtrim(a.ic_sub_type)=d.ic_sub_type(+)
          group by p_bill_no,v_bill_date,v_verify_date,v_form_maker,
            v_hand_man,v_administer,v_accounter,v_remarks,
            v_related_bill,v_achieve_time,
            b.reason_describe,c.area_name,d.ic_sub_desc,in_num;
    end if;
  else
    open p_cur for
         select '' bill_no,'' bill_date,'' verify_date,'' form_maker,
            '' hand_man,'' administer,'' accounter,'' remarks,
            '' related_bill,'' achieve_time,
            '' reason,'' area,'' sub_type, 0 in_num
        from dual;

  end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_BORROW to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_BORROW to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_CR
prompt =====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_CR"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2--入库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_IN_CR
  --功能:核查入库-单据导出-报表
  --创建者：  lindaquan
  --创建日期：20130718
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS
p_number INTEGER;

BEGIN
 IF p_bill_no IS NOT NULL THEN

    SELECT COUNT(1) INTO p_number FROM ic_in_store_detail WHERE bill_no=p_bill_no;

    --判断是否存在明细，否则到ic_sts_in入库中间表查询
    IF p_number>0 THEN
         OPEN p_cur FOR
         select p_bill_no bill_no
              ,e.bill_date,e.verify_date ,e.form_maker ,e.hand_man,e.administer,e.accounter,e.remark remarks,e.related_bill_no related_bill
              ,'' achieve_time,b.reason_describe reason,c.area_name area,d.ic_sub_desc sub_type,a.card_money,a.in_num
         FROM ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d,ic_in_store_bill e,
         (
              select reason_id,storage_id,area_id ,ic_main_type ,ic_sub_type,card_money ,sum(in_num) in_num
                     from ic_in_store_detail
                 where  bill_no=p_bill_no
                 group by reason_id,storage_id,area_id ,ic_main_type ,ic_sub_type,card_money
         ) a
        where e.bill_no=p_bill_no
              AND a.reason_id=b.reason_id(+)
              and a.area_id=c.area_id(+)
              and a.storage_id=c.storage_id(+)
              and a.ic_main_type =d.ic_main_type(+)
              and a.ic_sub_type=d.ic_sub_type(+);
    ELSE
        OPEN p_cur FOR
        select p_bill_no bill_no
              ,e.bill_date,e.verify_date ,e.form_maker ,e.hand_man,e.administer,e.accounter,e.remark remarks,e.related_bill_no related_bill
              ,'' achieve_time,b.reason_describe reason,c.area_name area,d.ic_sub_desc sub_type,a.card_money,a.in_num
         FROM ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d,ic_in_store_bill e,
         (
              select reason_id,storage_id,area_id ,ic_main_type ,ic_sub_type ,card_money,sum(in_num) in_num
                     from ic_sts_in
                 where  bill_no=p_bill_no
                 group by reason_id,storage_id,area_id ,ic_main_type ,ic_sub_type,card_money
         ) a
        where e.bill_no=p_bill_no
              AND a.reason_id=b.reason_id(+)
              and a.area_id=c.area_id(+)
              and a.storage_id=c.storage_id(+)
              and a.ic_main_type =d.ic_main_type(+)
              and a.ic_sub_type=d.ic_sub_type(+);

    END IF;

  ELSE
    OPEN p_cur FOR
    select '' bill_no ,'' bill_date,'' verify_date,'' form_maker ,'' hand_man,'' administer,'' accounter,'' remarks,'' related_bill
              ,'' achieve_time,'' reason,'' area,'' sub_type,'' card_money,'' in_num
    FROM dual;
  END IF;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_CR to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_CR to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_DETAIL_CR
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_DETAIL_CR"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2--入库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_IN_DETAIL_CR
  --功能:核查入库明细-单据导出-子报表
  --创建者：  lindaquan
  --创建日期：20130718
  --输出: p_cur结果集
  --修改：查询增加card_main_type过滤条件 ouyangwenling 20150615
  --修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票,屏蔽原有'9'
  -------------------------------------------------------------------------------
AS
p_number INTEGER;

BEGIN
 IF p_bill_no IS NOT NULL THEN

    SELECT COUNT(1) INTO p_number FROM ic_in_store_detail WHERE bill_no=p_bill_no;

    --判断是否存在明细，否则到ic_in_store_bill表查询
    IF p_number>0 THEN

        OPEN p_cur FOR

        SELECT a1.verify_date,d1.area_name,a1.in_num, a1.detail_place, a1.start_box_id, a1.end_box_id,a1.start_logical_id,a1.end_logical_id,
             a1.valid_date,a1.card_money,b1.ic_sub_desc,c1.chinese_name station_name,e.chinese_name exit_stationid_name,f.code_text mode_name
        FROM(
          SELECT b.verify_date,sum(a.in_num) in_num,a.area_id,a.detail_place,a.start_box_id,a.end_box_id,
             case when (substr(p_bill_no,1,2)='JR' or substr(p_bill_no,1,2)='TR' or a.ic_main_type='6' --or a.ic_main_type='9'
                  or  a.ic_main_type='34') then a.start_logical_id else '' end start_logical_id,
             case when (substr(p_bill_no,1,2)='JR' or substr(p_bill_no,1,2)='TR' or a.ic_main_type='6' --or a.ic_main_type='9'
                  or  a.ic_main_type='34') then a.end_logical_id else '' end end_logical_id,
             case when a.valid_date=to_date('2099-01-01','yyyy-MM-dd') then null else a.valid_date END valid_date
             ,a.card_money,a.ic_sub_type,a.station_id,a.exit_station_id,a.MODEL,a.ic_main_type
          FROM ic_in_store_detail a,ic_in_store_bill b
          WHERE  a.bill_no = p_bill_no
                 and a.bill_no=b.bill_no
          group by b.verify_date, area_id,detail_place,start_box_id,end_box_id,
                case when (substr(p_bill_no,1,2)='JR' or substr(p_bill_no,1,2)='TR' or ic_main_type='6' --or ic_main_type='9'
                     or  ic_main_type='34') then start_logical_id else '' end ,
                case when (substr(p_bill_no,1,2)='JR' or substr(p_bill_no,1,2)='TR' or ic_main_type='6' --or ic_main_type='9'
                     OR ic_main_type='34') then end_logical_id else '' end ,
                valid_date,card_money,ic_sub_type,station_id,exit_station_id,MODEL,a.ic_main_type
        )a1,ic_cod_card_sub_type b1,ic_cod_station c1,ic_cod_area d1,ic_cod_station e, pub_flag f
        WHERE a1.ic_sub_type=b1.ic_sub_type(+)
              and a1.ic_main_type=b1.ic_main_type(+)
              and a1.station_id=c1.station_id(+)
              and a1.area_id=d1.area_id(+)
              AND a1.exit_station_id=e.station_id(+)
              AND a1.model=f.code(+) and f.type = 26
        order by a1.start_box_id,a1.end_box_id,a1.start_logical_id;

    ELSE

        OPEN p_cur FOR

        SELECT verify_date,'' area_name,NULL in_num,'' detail_place, '' start_box_id, '' end_box_id,'' start_logical_id,'' end_logical_id
              ,null valid_date, NULL card_money,'' ic_sub_desc,'' station_name,'' exit_stationid_name,'' mode_name
        from ic_in_store_bill
        where bill_no=p_bill_no
        order by start_box_id, end_box_id,start_logical_id;
    END IF;

  ELSE
    OPEN p_cur FOR

    SELECT '' verify_date,'' area_name,NULL in_num,'' detail_place, '' start_box_id, '' end_box_id,'' start_logical_id,'' end_logical_id
          ,null valid_date, NULL card_money,'' ic_sub_desc,'' station_name,'' exit_stationid_name,'' mode_name
    from dual;
  END IF;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_DETAIL_CR to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_DETAIL_CR to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_DETAIL_NEW
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_DETAIL_NEW"

(p_cur     IN OUT sys_refcursor,--返回结果集

p_bill_no varchar2

)

---------------------------------------------------------------------------------

--过程名：  UP_IC_RCT_BL_IN_DETAIL_NEW

--功能描述：票务管理--新票入库明细--单据导出--报表

--修改者：  mqf

--修改日期：20130821
--修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票,屏蔽原有'9'





---------------------------------------------------                                                                      ----------------------------



as



    v_verify_date date;

    v_valid_date date;

    v_in_num         int;

    v_max_card_num   int;

    v_area_id          char(2);

    v_detail_place     varchar(50);

    v_start_box_id     char(14);

    v_end_box_id       char(14);

    v_start_logical_id varchar(20);

    v_end_logical_id   varchar(20);

    v_card_money       int;

    v_ic_main_type     char(2);

    v_ic_sub_type      char(2);

    v_station_id       varchar(3);

    v_n                int;

    v_water_no   numeric(18);

    v_last_water numeric(18);

    v_sql  varchar(1024);

    v_sql1 varchar(1024);

    v_his_table  varchar(1024);



    v_exit_station_id varchar(3);

    v_model           varchar(3);

    v_tmpNum          int;

    v_tempResultNum   int;



BEGIN







    v_his_table :='ic_in_store_detail';





    select count(*) into v_tmpNum from ic_in_store_detail where bill_no=p_bill_no;

    IF v_tmpNum=0 THEN

        select his_table into v_his_table from ic_idx_history where substr(p_bill_no,-10) between begin_recd and end_recd;

    END IF;

   -- 添加多日票模式相?        刈侄?返回报表显示的限制模式，出站站点



    v_sql := 'insert into T#IC_RCT_BL_IN_DETAIL_QR select SEQ_T#IC_RCT_BL_IN_DETAIL_QR.nextval as water_no,verify_date,in_num,area_id,detail_place,start_box_id,end_box_id, '

            ||'start_logical_id,end_logical_id,valid_date,card_money,ic_sub_type,station_id,exit_station_id,model '

            ||' from (SELECT b.verify_date, sum(in_num) in_num,area_id,NVL(detail_place,'' '') detail_place, NVL(start_box_id,'' '') start_box_id, NVL(end_box_id,'' '') end_box_id,'

            --||'case when substr('''||p_bill_no||''',0,2)=''JR'' or substr('''||p_bill_no||''',0,2)=''TR''  or ic_main_type=''6''  or ic_main_type=''9'' or  ic_main_type=''34'' then start_logical_id else '' '' end start_logical_id,'
      ||'case when substr('''||p_bill_no||''',0,2)=''JR'' or substr('''||p_bill_no||''',0,2)=''TR''  or ic_main_type=''6''  or  ic_main_type=''34'' then start_logical_id else '' '' end start_logical_id,'

            --||'case when substr('''||p_bill_no||''',0,2)=''JR'' or substr('''||p_bill_no||''',0,2)=''TR''  or ic_main_type=''6''  or ic_main_type=''9'' or  ic_main_type=''34'' then end_logical_id else '' '' end end_logical_id,'
      ||'case when substr('''||p_bill_no||''',0,2)=''JR'' or substr('''||p_bill_no||''',0,2)=''TR''  or ic_main_type=''6''  or  ic_main_type=''34'' then end_logical_id else '' '' end end_logical_id,'

            ||'valid_date,card_money,ic_sub_type,NVL(station_id,'' '') station_id,NVL(exit_station_id,'' '') exit_station_id,NVL(model,'' '') model FROM '||v_his_table||' a,ic_in_store_bill b  ';



    v_sql1 := ' WHERE  a.bill_no = '''||p_bill_no||'''  and a.bill_no=b.bill_no group by b.verify_date, area_id,NVL(detail_place,'' ''), NVL(start_box_id,'' ''),'

            --||'NVL(end_box_id,'' ''),case when substr('''||p_bill_no||''',0,2)=''JR'' or substr('''||p_bill_no||''',0,2)=''TR''  or ic_main_type=''6''  or ic_main_type=''9'' or  ic_main_type=''34'' '
      ||'NVL(end_box_id,'' ''),case when substr('''||p_bill_no||''',0,2)=''JR'' or substr('''||p_bill_no||''',0,2)=''TR''  or ic_main_type=''6''  or  ic_main_type=''34'' '

            --||'then start_logical_id else '' '' end ,case when substr('''||p_bill_no||''',0,2)=''JR'' or substr('''||p_bill_no||''',0,2)=''TR''  or ic_main_type=''6''  or ic_main_type=''9'' or '
      ||'then start_logical_id else '' '' end ,case when substr('''||p_bill_no||''',0,2)=''JR'' or substr('''||p_bill_no||''',0,2)=''TR''  or ic_main_type=''6''   or '

            ||' ic_main_type=''34'' then end_logical_id else '' '' end ,valid_date,card_money,ic_sub_type,NVL(station_id,'' ''),NVL(exit_station_id,'' ''),NVL(model,'' ''))';


    EXECUTE IMMEDIATE (v_sql||v_sql1);


    v_n := 1;



    -- 添加多日票模式相关字段 返回报表显示的限制模式，出站站点

    DECLARE cursor cur_1 IS  select  water_no,verify_date,valid_date,area_id,in_num, detail_place, start_box_id, end_box_id,

                                    start_logical_id,end_logical_id,card_money,ic_sub_type,station_id,exit_station_id,model from T#IC_RCT_BL_IN_DETAIL_QR order by start_box_id, end_box_id,

                                    start_logical_id,end_logical_id,water_no;



    BEGIN

      OPEN cur_1;

        LOOP

        FETCH cur_1 INTO v_water_no,v_verify_date,v_valid_date,v_area_id,v_in_num, v_detail_place, v_start_box_id, v_end_box_id,

                         v_start_logical_id,v_end_logical_id,v_card_money,v_ic_sub_type,v_station_id,v_exit_station_id,v_model;



        EXIT WHEN cur_1%notfound;



           IF v_n=1 THEN

               select box_unit into v_max_card_num from ic_cod_card_type_contrast   where  ic_sub_type=v_ic_sub_type; --盒单元

           END IF;



           select count(*) into v_tempResultNum from T#IC_RCT_BL_IN_RESULT_QR  where water_no=v_last_water  and end_box_id!=' ' and end_logical_id!=' '

                  and (end_box_id=v_start_box_id or to_number(end_box_id)+1=to_number(v_start_box_id))

                  and (end_logical_id=v_start_logical_id or

                 (to_number(substr(end_logical_id,0,15))+1=to_number(substr(v_start_logical_id,0,15)) and (v_ic_main_type in('12','1','2','40')) ) --modify by hejj 2011-08-23

                  or (to_number(end_logical_id)+1=to_number(v_start_logical_id) and (v_ic_main_type not in('12','1','2','40')) )) --modify by hejj 2011-08-23

                  and  detail_place=v_detail_place and in_num=v_max_card_num*(to_number(end_box_id)-to_number(start_box_id)+1)

                  and  card_money=v_card_money and ic_sub_type=v_ic_sub_type and area_id=v_area_id

                  and valid_date=v_valid_date and station_id=v_station_id and exit_station_id=v_exit_station_id and model =v_model;



           IF v_tempResultNum<=0 THEN

              select count(*) into v_tempResultNum from T#IC_RCT_BL_IN_RESULT_QR  where water_no=v_last_water  and end_box_id!=' ' and end_logical_id=' '

                  and (end_box_id=v_start_box_id or to_number(end_box_id)+1=to_number(v_start_box_id))

                  and  detail_place=v_detail_place and  in_num=v_max_card_num*(to_number(end_box_id)-to_number(start_box_id)+1)

                  and  card_money=v_card_money and ic_sub_type=v_ic_sub_type and area_id=v_area_id

                  and valid_date=v_valid_date and station_id=v_station_id and exit_station_id=v_exit_station_id and model =v_model;

           END IF;





           IF  v_n>1 and v_in_num=v_max_card_num and (v_tempResultNum >0) THEN

             update T#IC_RCT_BL_IN_RESULT_QR set in_num=in_num+v_in_num,end_box_id=v_end_box_id,end_logical_id=v_end_logical_id where water_no=v_last_water;



           ELSE

             --BEGIN

                insert into T#IC_RCT_BL_IN_RESULT_QR

                select  v_water_no,v_verify_date,v_in_num,v_area_id,' ', v_detail_place, v_start_box_id, v_end_box_id,v_start_logical_id,v_end_logical_id,

                        v_valid_date,v_card_money,v_ic_main_type,v_ic_sub_type,' ',v_station_id,' ',v_exit_station_id,'',v_model,' ','' from dual;



                v_last_water := v_water_no;

             --END

           END IF;

           v_n := v_n+1;



        END LOOP;

     CLOSE cur_1;

   END;











     update T#IC_RCT_BL_IN_RESULT_QR a

            set a.ic_sub_desc= (select b.ic_sub_desc from ic_cod_card_sub_type b where a.ic_sub_type=b.ic_sub_type(+))

               ,a.station_name= (select c.chinese_name from ic_cod_station c where a.station_id=c.station_id(+))

               ,a.area_name= (select d.area_name from ic_cod_area d where a.area_id=d.area_id(+))

               ,valid_date=case when to_char(valid_date,'yyyy-MM-dd')='2099-01-01' then null else valid_date end;









    --添加多日票模式相关字段 更新出站站点名称

    update T#IC_RCT_BL_IN_RESULT_QR a

          set a.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_station_id=b.station_id)

    where exists(select 1 from ic_cod_station b where a.exit_station_id=b.station_id);



    -- 添加多日票模式相关字段 查询                                pub_flag 更新限制模式名称

    update T#IC_RCT_BL_IN_RESULT_QR a

            set a.mode_name=(select b.code_text from pub_flag b where a.model=b.code and b.type = 26)

    where exists(select 1 from pub_flag b where a.model=b.code and b.type = 26);





      --添加多日票模式相关字段 返回报表显示的限制                            模式，出站站点  '' ,'','',''





    select count(*) into v_tempResultNum from T#IC_RCT_BL_IN_RESULT_QR;

    IF v_tempResultNum<=0 THEN

        insert into  T#IC_RCT_BL_IN_RESULT_QR(verify_date,area_name,in_num ,

                                    detail_place, start_box_id, end_box_id,start_logical_id,end_logical_id,

                                            valid_date, card_money,ic_sub_desc,station_name,exit_stationid_name,mode_name)

                             SELECT  verify_date,' ' ,null,

                                     ' ' , ' ' , ' ' ,' ' ,' ' ,

                                     null , null,' ' ,' ',' ',' '

                              from ic_in_store_bill

                              where bill_no=p_bill_no;

    END IF;



     --添加多日票模式相关字段 返回报表显示的限制模式，出站站点

     OPEN p_cur FOR

     SELECT  verify_date,area_name,in_num as in_num, detail_place, start_box_id, end_box_id,start_logical_id,end_logical_id, valid_date,

            card_money,ic_sub_desc,station_name,exit_stationid_name,mode_name

            FROM   T#IC_RCT_BL_IN_RESULT_QR

            order by start_box_id, end_box_id,start_logical_id;





     DELETE FROM T#IC_RCT_BL_IN_DETAIL_QR;

     DELETE FROM T#IC_RCT_BL_IN_RESULT_QR;





END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_DETAIL_NEW to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_DETAIL_NEW to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_DETAIL_QR
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_DETAIL_QR"
(p_cur     IN OUT sys_refcursor,--返回结果集
 p_bill_no varchar2
 )
---------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_BL_IN_DETAIL_QR
--功能描述：票务管理--清洗入库明细--单据导出--报表
--修改者：  mqf /liangminglong
--修改日期：20130821 /2013-10-10 共用　


---------------------------------------------------                                                                      ----------------------------

as

    v_verify_date date;
    v_valid_date date;
    v_in_num         int;
    v_max_card_num   int;
    v_storage_id   char(4);
    v_area_id          char(2);
    v_detail_place     varchar(50);
    v_start_box_id     char(14);
    v_end_box_id       char(14);
    v_start_logical_id varchar(20);
    v_end_logical_id   varchar(20);
    v_card_money       int;
    v_ic_main_type     char(2);
    v_ic_sub_type      char(2);
    v_station_id       varchar(3);
    v_n                int;
    v_water_no   numeric(18);
    v_last_water numeric(18);
    v_sql  varchar(1024);
    v_sql1 varchar(1024);
    v_his_table  varchar(1024);

    v_exit_station_id varchar(3);
    v_model           varchar(3);
    v_tmpNum          int;
    v_tempResultNum   int;

BEGIN
    DELETE FROM T#IC_RCT_BL_IN_DETAIL_QR;
    DELETE FROM T#IC_RCT_BL_IN_RESULT_QR;

  if p_bill_no is not null then
    v_his_table :='ic_in_store_detail';


    select count(*) into v_tmpNum from ic_in_store_detail where bill_no=p_bill_no;
    IF v_tmpNum=0 THEN
        --modify 20131204 增加recd_type='in'
      begin
        select his_table into v_his_table from ic_idx_history where recd_type='in' and substr(p_bill_no,-10) between begin_recd and end_recd;
      exception when no_data_found then
        DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
      end;

   END IF;
   -- 添加多日票模式相?        刈侄?返回报表显示的限制模式，出站站点
    v_sql := 'insert into T#IC_RCT_BL_IN_DETAIL_QR select SEQ_T#IC_RCT_BL_IN_DETAIL_QR.nextval as water_no,verify_date,in_num,area_id,detail_place,start_box_id,end_box_id, '
            ||'start_logical_id,end_logical_id,valid_date,card_money,ic_main_type,ic_sub_type,station_id,exit_station_id,model,storage_id '
            ||' from (SELECT b.verify_date, sum(in_num) in_num,area_id,NVL(detail_place,'' '') detail_place, NVL(start_box_id,'' '') start_box_id, NVL(end_box_id,'' '') end_box_id,'
            ||'nvl(start_logical_id,'' '') start_logical_id,'
            ||'nvl(end_logical_id,'' '') end_logical_id,'
            ||'valid_date,card_money,ic_main_type,ic_sub_type,NVL(station_id,'' '') station_id,NVL(exit_station_id,'' '') exit_station_id,NVL(model,'' '') model,storage_id FROM '||v_his_table||' a,ic_in_store_bill b  ';

    v_sql1 := ' WHERE  a.bill_no = '''||p_bill_no||'''  and a.bill_no=b.bill_no group by b.verify_date, area_id,NVL(detail_place,'' ''), NVL(start_box_id,'' ''),'
            ||'NVL(end_box_id,'' ''),nvl(start_logical_id,'' '') ,nvl(end_logical_id,'' ''),valid_date,card_money,ic_main_type,ic_sub_type,NVL(station_id,'' ''),NVL(exit_station_id,'' ''),NVL(model,'' ''),storage_id)';




 DBMS_OUTPUT.PUT_LINE('v_sql||v_sql1'||v_sql||v_sql1);
    EXECUTE IMMEDIATE (v_sql||v_sql1);

    v_n := 1;

    -- 添加多日票模式相关字段 返回报表显示的限制模式，出站站点
    DECLARE cursor cur_1 IS  select  water_no,verify_date,valid_date,area_id,in_num, detail_place, start_box_id, end_box_id,
                                    start_logical_id,end_logical_id,card_money,ic_main_type,ic_sub_type,station_id,exit_station_id,model,storage_id
                             from T#IC_RCT_BL_IN_DETAIL_QR order by start_box_id, end_box_id,start_logical_id,end_logical_id,water_no;

    BEGIN
      OPEN cur_1;
        LOOP
        FETCH cur_1 INTO v_water_no,v_verify_date,v_valid_date,v_area_id,v_in_num, v_detail_place, v_start_box_id, v_end_box_id,
                         v_start_logical_id,v_end_logical_id,v_card_money,v_ic_main_type,v_ic_sub_type,v_station_id,v_exit_station_id,v_model,v_storage_id;

        EXIT WHEN cur_1%notfound;

          begin
           IF v_n=1 THEN
               select box_unit into v_max_card_num from ic_cod_card_type_contrast   where  ic_main_type=RTRIM(v_ic_main_type) and ic_sub_type=RTRIM(v_ic_sub_type); --盒单元
           END IF;
          exception when no_data_found then
             DBMS_OUTPUT.PUT_LINE('没有数据');
          end;


           select count(*) into v_tempResultNum from T#IC_RCT_BL_IN_RESULT_QR  where water_no=v_last_water  and end_box_id!=' ' and end_logical_id!=' '
                  and (end_box_id=v_start_box_id or to_number(end_box_id)+1=to_number(v_start_box_id))
                  and (end_logical_id=v_start_logical_id or
                 (to_number(substr(end_logical_id,0,20))+1=to_number(substr(v_start_logical_id,0,20)) and (v_ic_main_type in('12','1','2','40')) )
                  or (to_number(end_logical_id)+1=to_number(v_start_logical_id) and (v_ic_main_type not in('12','1','2','40')) ))
                  and  detail_place=v_detail_place and in_num=v_max_card_num*(to_number(end_box_id)-to_number(start_box_id)+1)
                  and  card_money=v_card_money and ic_main_type=v_ic_main_type and ic_sub_type=v_ic_sub_type and storage_id=v_storage_id and area_id=v_area_id
                  and valid_date=v_valid_date and station_id=v_station_id and exit_station_id=v_exit_station_id and model =v_model;

           IF v_tempResultNum<=0 THEN
              select count(*) into v_tempResultNum from T#IC_RCT_BL_IN_RESULT_QR  where water_no=v_last_water  and end_box_id!=' ' and end_logical_id=' '
                  and (end_box_id=v_start_box_id or to_number(end_box_id)+1=to_number(v_start_box_id))
                  and  detail_place=v_detail_place and  in_num=v_max_card_num*(to_number(end_box_id)-to_number(start_box_id)+1)
                  and  card_money=v_card_money and ic_main_type=v_ic_main_type and ic_sub_type=v_ic_sub_type and storage_id=v_storage_id and area_id=v_area_id
                  and valid_date=v_valid_date and station_id=v_station_id and exit_station_id=v_exit_station_id and model =v_model;
           END IF;


           IF  v_n>1 and v_in_num=v_max_card_num and (v_tempResultNum >0) THEN
             update T#IC_RCT_BL_IN_RESULT_QR set in_num=in_num+v_in_num,end_box_id=v_end_box_id,end_logical_id=v_end_logical_id where water_no=v_last_water;

           ELSE
             --BEGIN
                insert into T#IC_RCT_BL_IN_RESULT_QR
                select  v_water_no,v_verify_date,v_in_num,v_area_id,' ', v_detail_place, v_start_box_id, v_end_box_id,v_start_logical_id,v_end_logical_id,
                        v_valid_date,v_card_money,v_ic_main_type,v_ic_sub_type,' ',v_station_id,' ',v_exit_station_id,'',v_model,' ',v_storage_id from dual;

                v_last_water := v_water_no;
             --END
           END IF;
           v_n := v_n+1;

        END LOOP;
     CLOSE cur_1;
   END;





     update T#IC_RCT_BL_IN_RESULT_QR a
            set a.ic_sub_desc= (select b.ic_sub_desc from ic_cod_card_sub_type b where RTRIM(a.ic_main_type)=b.ic_main_type(+) and RTRIM(a.ic_sub_type)=b.ic_sub_type(+))
               ,a.station_name= (select c.chinese_name from ic_cod_station c where a.station_id=c.station_id(+))
               ,a.area_name= (select d.area_name from ic_cod_area d where a.storage_id=d.storage_id and a.area_id=d.area_id(+))
               ,valid_date=case when to_char(valid_date,'yyyy-MM-dd')='2099-01-01' then null else valid_date end;


    --添加多日票模式相关字段 更新出站站点名称
    update T#IC_RCT_BL_IN_RESULT_QR a
          set a.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_station_id=b.station_id)
    where exists(select 1 from ic_cod_station b where a.exit_station_id=b.station_id);

    -- 添加多日票模式相关字段 查询                                pub_flag 更新限制模式名称
    update T#IC_RCT_BL_IN_RESULT_QR a
            set a.mode_name=(select b.code_text from pub_flag b where a.model=b.code and b.type = 26)
    where exists(select 1 from pub_flag b where a.model=b.code and b.type = 26);


      --添加多日票模式相关字段 返回报表显示的限制                            模式，出站站点  '' ,'','',''


    select count(*) into v_tempResultNum from T#IC_RCT_BL_IN_RESULT_QR;
    IF v_tempResultNum<=0 THEN
        insert into  T#IC_RCT_BL_IN_RESULT_QR(verify_date,area_name,in_num ,
                                    detail_place, start_box_id, end_box_id,start_logical_id,end_logical_id,
                                            valid_date, card_money,ic_sub_desc,station_name,exit_stationid_name,mode_name)
                             SELECT  verify_date,' ' ,null,
                                     ' ' , ' ' , ' ' ,' ' ,' ' ,
                                     null , null,' ' ,' ',' ',' '
                              from ic_in_store_bill
                              where bill_no=p_bill_no;
    END IF;

     --添加多日票模式相关字段 返回报表显示的限制模式，出站站点
     OPEN p_cur FOR
     SELECT  verify_date,area_name,in_num as in_num, detail_place, start_box_id, end_box_id,start_logical_id,end_logical_id, valid_date,
            card_money,ic_sub_desc,station_name,exit_stationid_name,mode_name
            FROM   T#IC_RCT_BL_IN_RESULT_QR
            order by start_box_id, end_box_id,start_logical_id;


     --DELETE FROM T#IC_RCT_BL_IN_DETAIL_QR;
     --DELETE FROM T#IC_RCT_BL_IN_RESULT_QR;
  else
     OPEN p_cur FOR
     SELECT  '' verify_date,'' area_name,'' in_num ,''  detail_place,''  start_box_id,''  end_box_id,'' start_logical_id,'' end_logical_id,''  valid_date,
            '' card_money,'' ic_sub_desc,'' station_name,'' exit_stationid_name,'' mode_name
            FROM  dual ;

   end if;
END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_DETAIL_QR to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_DETAIL_QR to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_HR
prompt =====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_HR"
(  p_cur            IN OUT sys_refcursor,--返回结果集
  p_bill_no          IN  VARCHAR2--出库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_IN_HR
  --功能:回收入库(HR)-单据导出-报表
  --创建者：  liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS

v_form_maker    varchar(10);
v_hand_man      varchar(10);
v_administer    varchar(10);
v_accounter     varchar(10);
v_remarks       varchar(400);
v_bill_date     date;
v_verify_date   date;
v_related_bill  varchar(50);
v_achieve_time  varchar(30);
v_temp_num       integer;
BEGIN
  -- routine body goes here, e.g.
  --DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  if p_bill_no is not null then



  ----一卡通面值作0处理

    select bill_date,verify_date,form_maker,hand_man,administer,accounter,remark,case when  substr(p_bill_no,1,2)='SR' then '生产单号：'||related_bill_no
    when substr(p_bill_no,1,2) ='TR' then '盘点单号：'||related_bill_no else '' end
    into v_bill_date, v_verify_date,v_form_maker,v_hand_man,v_administer,v_accounter,v_remarks,v_related_bill
    from ic_in_store_bill where bill_no=p_bill_no;

    select count(*) into v_temp_num from ic_in_store_detail  where  bill_no=p_bill_no;
    if v_temp_num>0 then
      insert into t#ic_tmp_in_bill(reason_id,storage_id,area_id,ic_main_type,ic_sub_type,card_money,in_num)
      select reason_id ,storage_id,area_id ,ic_main_type,ic_sub_type,case when ic_main_type='6' or ic_main_type='1' or ic_main_type='40' then 0 else card_money end,sum(in_num)
      from ic_in_store_detail where  bill_no=p_bill_no
      group by reason_id,storage_id,area_id,ic_main_type,ic_sub_type,case when ic_main_type='6' or ic_main_type='1' or ic_main_type='40' then 0 else card_money end;
    else
      insert into t#ic_tmp_in_bill(reason_id,storage_id,area_id,ic_main_type,ic_sub_type,card_money,in_num)
      select reason_id,storage_id,area_id ,ic_main_type ,ic_sub_type ,case when ic_main_type='6' or ic_main_type='1' or ic_main_type='40'  then 0 else card_money end,sum(in_num)
      from ic_sts_in where bill_no=p_bill_no
      group by reason_id,storage_id,area_id ,ic_main_type ,ic_sub_type,case when ic_main_type='6' or ic_main_type='1' or ic_main_type='40' then 0 else card_money end;
    end if;


    --单号为空时,返回空值
    OPEN p_cur FOR
    select p_bill_no as bill_no,
           v_bill_date as bill_date,
           v_verify_date as verify_date ,
           v_form_maker as form_maker  ,
           v_hand_man as hand_man,
           v_administer as administer,
           v_accounter as accounter,
           v_remarks as remarks
         ,v_related_bill as related_bill,
         v_achieve_time as achieve_time,
         b.reason_describe as reason,
         c.area_name as area ,
         d.ic_sub_desc  as sub_type,
         in_num as in_num,
         a.card_money
     from t#ic_tmp_in_bill a,ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d
    where a.reason_id=b.reason_id
          and a.area_id=c.area_id and a.storage_id=c.storage_id
          and a.ic_main_type =d.ic_main_type  and a.ic_sub_type=d.ic_sub_type
          and in_num <>0;---过滤数量为0记录;
  ELSE
        --单号为空时,返回空值
    OPEN p_cur FOR
    select p_bill_no as bill_no,
           '' as bill_date,
           '' as verify_date ,
           '' as form_maker  ,
           '' as hand_man,
           '' as administer,
           '' as accounter,
           '' as remarks
         ,'' as related_bill,
         '' as achieve_time,
         b.reason_describe as reason,
         c.area_name as area ,
         d.ic_sub_desc  as sub_type,
         in_num as in_num,
         a.card_money
     from t#ic_tmp_in_bill a,ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d
    where a.reason_id=b.reason_id
          and a.area_id=c.area_id and a.storage_id=c.storage_id
          and a.ic_main_type =d.ic_main_type  and a.ic_sub_type=d.ic_sub_type
          and in_num <>0;---过滤数量为0记录;
  end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_HR to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_HR to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_HR_DETAIL
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_HR_DETAIL"(p_cur     IN OUT sys_refcursor, --返回结果集
                                                        p_bill_no IN VARCHAR2 --出库单号
                                                        )
---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_IN_HR_DETAIL
  --功能:回收入库(HR)-单据导出-报表-明细
  --创建者：  liangminglong
  --输出: p_cur结果集
  --修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票,屏蔽原有'9'
  -------------------------------------------------------------------------------
 AS

  v_verify_date      date;
  v_valid_date       date;
  v_in_num           int;
  v_max_card_num     int;
  v_area_id          char(2);
  v_detail_place     varchar(50);
  v_start_box_id     char(14);
  v_end_box_id       char(14);
  v_start_logical_id varchar(20);
  v_end_logical_id   varchar(20);
  v_card_money       int;
  v_ic_main_type     varchar(2);
  v_ic_sub_type      varchar(2);
  v_station_id       varchar(3);
  v_n                int;
  v_water_no         numeric(18);
  v_last_water       numeric(18);
  v_sql              varchar(1024);
  v_sql1             varchar(1024);
  v_his_table        varchar(1024);

  v_exit_station_id varchar(3);
  v_mode            varchar(3);
  v_temp_num        integer;
  v_temp_num2       integer;
  v_temp_num3       integer;
  v_temp_water_no   numeric(18);

BEGIN
  -- routine body goes here, e.g.
  --DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');

  if p_bill_no is not null then
    select 'ic_in_store_detail' into v_his_table from dual;
    select count(*)
      into v_temp_num
      from ic_in_store_detail
     where bill_no = p_bill_no;
    select SEQ_UP_IC_RCT_BL_IN_HR.NEXTVAL into v_temp_water_no from dual;

    if v_temp_num = 0 then
      select his_table
        into v_his_table
        from ic_idx_history
       where substr(p_bill_no, 3, 10) between begin_recd and end_recd;
    end if;

    --起始、终止逻辑为NULL值是作空字符串处理
    --详细位置、起始盒号，NULL值作空字符串处理，一卡通、纸票、羊城通发票的起始逻辑卡号、终止逻辑卡号NULL值作空字符串处理
    --弃票/回收箱储值票面值不存在作NULL值处理、存在不作处理
    --改为数据有效性处理，NULL值变为空字符串或0值
    --添加多日票模式相关字段 返回报表显示的限制模式，进出站站点

    select 'insert into t#ic_tmp_detail SELECT ' || v_temp_water_no ||
           ', b.verify_date,  sum(in_num),area_id,nvl(detail_place,'' ''), nvl(start_box_id,'' ''), nvl(end_box_id,'' ''),' ||
           ' nvl(start_logical_id,'' ''), nvl(end_logical_id,'' '')  ,valid_date,nvl(card_money,0),' ||
           'ic_sub_type,nvl(station_id,'' ''),nvl(exit_station_id,'' ''),nvl(model,'' ''),ic_main_type,storage_id  from ' ||
           v_his_table || ' a,ic_in_store_bill b '
      into v_sql
      from dual;
    select ' WHERE  a.bill_no = ''' || p_bill_no ||
           '''  and a.bill_no=b.bill_no ' || ' group by ' ||
           ' b.verify_date,  area_id,nvl(detail_place,'' ''), nvl(start_box_id,'' ''), nvl(end_box_id,'' ''),' ||
           ' nvl(start_logical_id,'' ''), nvl(end_logical_id,'' '')  ,valid_date,nvl(card_money,0),ic_sub_type,' ||
           'ic_main_type,nvl(station_id,'' ''),nvl(exit_station_id,'' ''),nvl(model,'' ''),storage_id '
      into v_sql1
      from dual;
    DBMS_OUTPUT.PUT_LINE('v_sql||v_sql1=' || v_sql || v_sql1);
    execute immediate v_sql || v_sql1;
    --删除数量为0记录
    delete from t#ic_tmp_detail where in_num = 0;
    --循环区、待注销区的所有票卡详细位置、起止盒号、起止逻辑卡号作空字符串处理，除纸票外，其余面值作0处理，仅票据的纸票面值不作处理,有效期作NULL值处理
    --加上 进出站点限制模式
    update t#ic_tmp_detail
       set detail_place     = ' ',
           start_box_id     = ' ',
           end_box_id       = ' ',
           start_logical_id = ' ',
           end_logical_id   = ' ',
           --card_money = case
           --               when ic_sub_type = '9' then
           --                card_money
           --               else
           --                0
           --             end, 20170714 modify by 没有纸票ic_sub_type'9'
       card_money = 0,
           valid_date       = null,
           station_id       = ' ',
           exit_station_id  = ' ',
           model            = '000'
     where area_id in ('04', '05', '07');

    select 1 into v_n from dual;

    select count(*)
      into v_temp_num
      from t#ic_tmp_detail
     order by start_box_id,
              end_box_id,
              start_logical_id,
              end_logical_id,
              water_no;
    --添加多日票模式相关字段 返回报表显示的限制模式， 进出站站点
    declare
      cursor cur_1 is
        select water_no,
               verify_date,
               valid_date,
               area_id,
               in_num,
               detail_place,
               start_box_id,
               end_box_id,
               start_logical_id,
               end_logical_id,
               card_money,
               ic_sub_type,
               ic_main_type,
               station_id,
               exit_station_id,
               model,
               storage_id
          from t#ic_tmp_detail
         order by start_box_id,
                  end_box_id,
                  start_logical_id,
                  end_logical_id,
                  water_no;
    begin
      for my_cur in cur_1 loop
        if v_n = 1 then
          select box_unit
            into v_max_card_num
            from ic_cod_card_type_contrast
           where rtrim(ic_sub_type) = rtrim(my_cur.ic_sub_type)
             and rtrim(ic_main_type) = rtrim(my_cur.ic_main_type); --盒单元
        end if;

        select count(*)
          into v_temp_num2
          from t#ic_tmp_result
         where water_no = v_last_water
              --上一条记录的终止盒号、终止卡号不为空字符串
           and end_box_id != ' '
           and end_logical_id != ' '
              --上一条记录的终止盒号等于当前盒号或+1等于当前盒号
           and (end_box_id = my_cur.start_box_id or
               to_number(end_box_id) + 1 = to_number(my_cur.start_box_id))
              --上一条记录的终止逻辑卡号等于当前终止逻辑卡号或+1等于当前终止逻辑卡号
           and (end_logical_id = my_cur.start_logical_id
               --单程票、储值票、员工票、多日票取前15位计算
               or to_number(end_logical_id) + 1 =
               to_number(my_cur.start_logical_id) and
               (v_ic_main_type in ('12', '1', '2', '40')))
              --非单程票、储值票、员工票、多日票取前16位计算
            or to_number(end_logical_id) + 1 =
               to_number(my_cur.start_logical_id)
           and (v_ic_main_type not in ('12', '1', '2', '40'))
              --详细位置相等
           and detail_place = my_cur.detail_place
              --非整盒情况不需考虑
           and in_num = v_max_card_num * to_number(end_box_id) -
               (to_number(start_box_id) + 1)
              --面值、卡子类型、票区需相等
           and card_money = my_cur.card_money
           and ic_sub_type = my_cur.ic_sub_type
           and storage_id=my_cur.storage_id
           and area_id = my_cur.area_id
              --乘次票限制模式,进出站点模式需相等
           and station_id = my_cur.station_id
           and exit_station_id = my_cur.exit_station_id
           and model = my_cur.model
              --有效期需相等
           and (valid_date is not null and
               valid_date =
               to_date(my_cur.valid_date, 'yyyy-mm-dd hh24:mi:ss'));

        select count(*)
          into v_temp_num3
          from t#ic_tmp_result
         where water_no = v_last_water
           and
              --上一条记录的终止盒号不为空字符串、终止卡号为空字符串合并盒号
               end_box_id != ''
           and end_logical_id = ''
              --上一条记录的终止盒号等于当前盒号或+1等于当前盒号
           and (end_box_id = my_cur.start_box_id or
               to_number(end_box_id) + 1 = to_number(my_cur.start_box_id))
              --详细位置相等
           and detail_place = my_cur.detail_place
              -- 非整盒情况不需考虑
              --面值、卡子类型、票区需相等
           and card_money = my_cur.card_money
           and ic_sub_type = my_cur.ic_sub_type
           and storage_id=my_cur.storage_id
           and area_id = my_cur.area_id
           and station_id = my_cur.station_id
           and exit_station_id = my_cur.exit_station_id
           and model = my_cur.model
              --有效期需相等 添加注释
              --有效期不能为NULL值
           and (valid_date is not null and
               valid_date =
               to_date(my_cur.valid_date, 'yyyy-mm-dd hh24:mi:ss'));

        if v_n > 1 and my_cur.in_num = v_card_money and v_temp_num2 > 0 and
           v_temp_num3 > 0 then
          update t#ic_tmp_result
             set in_num         = in_num + my_cur.in_num,
                 end_box_id     = my_cur.end_box_id,
                 end_logical_id = my_cur.end_logical_id
           where water_no = v_last_water;
        else
          --第一条记录或不需合并的记录
          insert into t#ic_tmp_result
          values
            (my_cur.water_no,
             my_cur.verify_date,
             my_cur.in_num,
             my_cur.area_id,
             ' ',
             my_cur.detail_place,
             my_cur.start_box_id,
             my_cur.end_box_id,
             my_cur.start_logical_id,
             my_cur.end_logical_id,
             my_cur.valid_date,
             my_cur.card_money,
             my_cur.ic_sub_type,
             '',
             my_cur.station_id,
             '',
             my_cur.exit_station_id,
             ' ',
             my_cur.model,
             ' ',
             my_cur.ic_main_type
             ,my_cur.storage_id);

          select my_cur.water_no into v_last_water from dual;
        end if;
        select v_n + 1 into v_n from dual;
      end loop;

    end;

    update t#ic_tmp_result a
       set (ic_sub_desc, area_name, valid_date) =
           (select b.ic_sub_desc,
                   d.area_name,
                   case
                     when valid_date =
                          to_date('2099-01-01', 'yyyy-mm-dd hh24:mi:ss') then
                      null
                     else
                      valid_date
                   end
              from ic_cod_card_sub_type b, ic_cod_area d
             where rtrim(a.ic_sub_type) = rtrim(b.ic_sub_type(+))
               and rtrim(a.ic_main_type) = rtrim(b.ic_main_type)
               and a.area_id = d.area_id(+)
               and a.storage_id=d.storage_id(+))
     where EXISTS
     (select b.ic_sub_desc,
                   d.area_name,
                   case
                     when valid_date =
                          to_date('2099-01-01', 'yyyy-mm-dd hh24:mi:ss') then
                      null
                     else
                      valid_date
                   end
              from ic_cod_card_sub_type b, ic_cod_area d
             where a.ic_sub_type = b.ic_sub_type(+)
               and a.area_id = d.area_id(+)
               and a.storage_id=d.storage_id(+) );

    --添加多日票模式相关字段 更新进站站点名称
    update t#ic_tmp_result a
       set a.station_name =
           (select b.chinese_name
              from ic_cod_station b
             where a.station_id = b.station_id)
     where exists (select b.chinese_name
              from ic_cod_station b
             where a.station_id = b.station_id);

    --添加多日票模式相关字段 更新出站站点名称
    update t#ic_tmp_result a
       set a.exit_stationid_name =
           (select b.chinese_name
              from ic_cod_station b
             where a.exit_station_id = b.station_id)
     where exists (select b.chinese_name
              from ic_cod_station b
             where a.exit_station_id = b.station_id);
    --添加多日票模式相关字段 查询pub_flag 更新限制模式名称
    update t#ic_tmp_result a
       set a.mode_name =
           (select b.code_text
              from pub_flag b
             where a.model = b.code
               and b.type = 26)
     where exists (select b.code_text
              from pub_flag b
             where a.model = b.code
               and b.type = 26);

    OPEN p_cur FOR
      select area_id,
             area_name,
             ic_sub_desc,
             card_money,
             verify_date,
             detail_place,
             start_box_id,
             end_box_id,
             start_logical_id,
             end_logical_id,
             valid_date,
             station_name,
             exit_stationid_name,
             mode_name,
             sum(in_num) as in_num
        from t#ic_tmp_result
       group by area_id,
                area_name,
                ic_sub_desc,
                card_money,
                verify_date,
                detail_place,
                start_box_id,
                end_box_id,
                start_logical_id,
                end_logical_id,
                valid_date,
                station_name,
                exit_stationid_name,
                mode_name;

  else

    OPEN p_cur FOR
      select area_id,
             area_name,
             ic_sub_desc,
             card_money,
             verify_date,
             detail_place,
             start_box_id,
             end_box_id,
             start_logical_id,
             end_logical_id,
             valid_date,
             station_name,
             exit_stationid_name,
             mode_name,
             sum(in_num) as in_num
        from t#ic_tmp_result
       group by area_id,
                area_name,
                ic_sub_desc,
                card_money,
                verify_date,
                detail_place,
                start_box_id,
                end_box_id,
                start_logical_id,
                end_logical_id,
                valid_date,
                station_name,
                exit_stationid_name,
                mode_name;
  end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_HR_DETAIL to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_HR_DETAIL to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_MOVE
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_MOVE"
(  p_cur            IN OUT sys_refcursor,--返回结果集
  p_bill_no          IN  VARCHAR2--出库单号
)
-------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_IN_MOVE
  --功能:迁移入库(TI)-单据导出
  --创建者：  YHY
  --输出: p_cur结果集
-------------------------------------------------------------------------------
AS

v_form_maker        varchar(40);
v_hand_man          varchar(40);
v_administer        varchar(40);
v_accounter         varchar(40);
v_remarks           varchar(400);
v_bill_date         date;
v_verify_date       date;
v_related_bill      varchar(50);
v_achieve_time      varchar(30);
v_temp_number        integer;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  if p_bill_no is not null then
    select bill_date,verify_date,form_maker ,hand_man,administer,accounter,remark,
       related_bill_no
       into v_bill_date,v_verify_date,v_form_maker,v_hand_man,v_administer,v_accounter,v_remarks,v_related_bill
    from ic_in_store_bill where bill_no=p_bill_no;


    select count(*) into v_temp_number from  ic_in_store_detail  where  bill_no=p_bill_no;
      if v_temp_number>0 then
        open p_cur for
         select p_bill_no bill_no,v_bill_date bill_date,v_verify_date verify_date,v_form_maker form_maker,
            v_hand_man hand_man,v_administer administer,v_accounter accounter,v_remarks remarks,
            v_related_bill related_bill,v_achieve_time achieve_time,
            b.reason_describe reason,c.area_name area,d.ic_sub_desc sub_type, sum(a.in_num) in_num
           from ic_in_store_detail a,ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d
          where a.BILL_NO=p_bill_no
          and a.reason_id=b.reason_id(+)
          and a.area_id=c.area_id(+)
          and a.storage_id=c.storage_id(+)
          and rtrim(a.ic_main_type) =d.ic_main_type(+)
          and rtrim(a.ic_sub_type)=d.ic_sub_type(+)
          group by p_bill_no,v_bill_date,v_verify_date,v_form_maker,
            v_hand_man,v_administer,v_accounter,v_remarks,
            v_related_bill,v_achieve_time,
            b.reason_describe,c.area_name,d.ic_sub_desc,in_num;
    else
      open p_cur for
         select p_bill_no bill_no,v_bill_date bill_date,v_verify_date verify_date,v_form_maker form_maker,
            v_hand_man hand_man,v_administer administer,v_accounter accounter,v_remarks remarks,
            v_related_bill related_bill,v_achieve_time achieve_time,
            b.reason_describe reason,c.area_name area,d.ic_sub_desc sub_type, sum(a.in_num) in_num
           from ic_sts_in a,ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d
          where a.BILL_NO=p_bill_no
          and a.reason_id=b.reason_id(+)
          and a.area_id=c.area_id(+)
          and a.storage_id=c.storage_id(+)
          and rtrim(a.ic_main_type) =d.ic_main_type(+)
          and rtrim(a.ic_sub_type)=d.ic_sub_type(+)
          group by p_bill_no,v_bill_date,v_verify_date,v_form_maker,
            v_hand_man,v_administer,v_accounter,v_remarks,
            v_related_bill,v_achieve_time,
            b.reason_describe,c.area_name,d.ic_sub_desc,in_num;
    end if;
  else
    open p_cur for
         select '' bill_no,'' bill_date,'' verify_date,'' form_maker,
            '' hand_man,'' administer,'' accounter,'' remarks,
            '' related_bill,'' achieve_time,
            '' reason,'' area,'' sub_type, 0 in_num
        from dual;

  end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_MOVE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_NEW
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_NEW"
(  p_cur            IN OUT sys_refcursor,--返回结果集
  p_bill_no          IN  VARCHAR2--出库单号
)
-------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_IN_NEW
  --功能:新票入库(HR)-单据导出
  --创建者：  liangminglong
  --输出: p_cur结果集
-------------------------------------------------------------------------------
AS

v_form_maker        varchar(40);
v_hand_man          varchar(40);
v_administer        varchar(40);
v_accounter         varchar(40);
v_remarks           varchar(400);
v_bill_date         date;
v_verify_date       date;
v_related_bill      varchar(50);
v_achieve_time      varchar(30);
v_temp_number        integer;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  if p_bill_no is not null then
    select bill_date,verify_date,form_maker ,hand_man,administer,accounter,remark,case when substr(p_bill_no,1,2)='SR' then '生产单号：'||related_bill_no
       when substr(p_bill_no,1,2) ='TR' then '盘点单号：'||related_bill_no else ' ' end
       into v_bill_date,v_verify_date,v_form_maker,v_hand_man,v_administer,v_accounter,v_remarks,v_related_bill
    from ic_in_store_bill where bill_no=p_bill_no;

    if substr(p_bill_no,1,2)='SR' then
      select to_char(achieve_time,'yyyymmdd') into v_achieve_time from ic_pdu_order_form a,ic_pdu_plan_order_mapping b,ic_pdu_produce_bill c
      where a.order_no=b.order_no and b.out_bill_no=c.out_bill_no and c.bill_no=v_related_bill;
      if v_achieve_time is not null then
        select '生产日期：'||substr(v_achieve_time,1,4)||'-'||substr(v_achieve_time,5,2)||'-'||substr(v_achieve_time,7,2) into v_achieve_time from dual;
      end if;
    end if;

    select count(*) into v_temp_number from  ic_in_store_detail  where  bill_no=p_bill_no;
      if v_temp_number>0 then
        open p_cur for
         select p_bill_no bill_no,v_bill_date bill_date,v_verify_date verify_date,v_form_maker form_maker,
            v_hand_man hand_man,v_administer administer,v_accounter accounter,v_remarks remarks,
            v_related_bill related_bill,v_achieve_time achieve_time,
            b.reason_describe reason,c.area_name area,d.ic_sub_desc sub_type, sum(a.in_num) in_num
           from ic_in_store_detail a,ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d
          where a.BILL_NO=p_bill_no
          and a.reason_id=b.reason_id
          and a.area_id=c.area_id
          and a.storage_id=c.storage_id
          and a.ic_main_type =d.ic_main_type
          and a.ic_sub_type=d.ic_sub_type
          group by p_bill_no,v_bill_date,v_verify_date,v_form_maker,
            v_hand_man,v_administer,v_accounter,v_remarks,
            v_related_bill,v_achieve_time,
            b.reason_describe,c.area_name,d.ic_sub_desc,in_num;
    else
      open p_cur for
         select p_bill_no bill_no,v_bill_date bill_date,v_verify_date verify_date,v_form_maker form_maker,
            v_hand_man hand_man,v_administer administer,v_accounter accounter,v_remarks remarks,
            v_related_bill related_bill,v_achieve_time achieve_time,
            b.reason_describe reason,c.area_name area,d.ic_sub_desc sub_type, sum(a.in_num) in_num
           from ic_sts_in a,ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d
          where a.BILL_NO=p_bill_no
          and a.reason_id=b.reason_id
          and a.area_id=c.area_id
          and a.storage_id=c.storage_id
          and a.ic_main_type =d.ic_main_type
          and a.ic_sub_type=d.ic_sub_type
          group by p_bill_no,v_bill_date,v_verify_date,v_form_maker,
            v_hand_man,v_administer,v_accounter,v_remarks,
            v_related_bill,v_achieve_time,
            b.reason_describe,c.area_name,d.ic_sub_desc,in_num;
    end if;
  else
    open p_cur for
         select '' bill_no,'' bill_date,'' verify_date,'' form_maker,
            '' hand_man,'' administer,'' accounter,'' remarks,
            '' related_bill,'' achieve_time,
            '' reason,'' area,'' sub_type, 0 in_num
        from dual;

  end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_NEW to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_NEW to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_PRODUCE
prompt ==========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_PRODUCE"
(  p_cur            IN OUT sys_refcursor,--返回结果集
  p_bill_no          IN  VARCHAR2--出库单号
)
-------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_IN_PRODUCE
  --功能:生产入库(HR)-单据导出
  --创建者：  liangminglong
  --输出: p_cur结果集
-------------------------------------------------------------------------------
AS

v_form_maker        varchar(40);
v_hand_man          varchar(40);
v_administer        varchar(40);
v_accounter         varchar(40);
v_remarks           varchar(400);
v_bill_date         date;
v_verify_date       date;
v_related_bill      varchar(50);
v_achieve_time      varchar(30);
v_temp_number        integer;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  if p_bill_no is not null then
    select bill_date,verify_date,form_maker ,hand_man,administer,accounter,remark,case when substr(p_bill_no,1,2)='SR' then related_bill_no
       when substr(p_bill_no,1,2) ='TR' then related_bill_no else ' ' end
       into v_bill_date,v_verify_date,v_form_maker,v_hand_man,v_administer,v_accounter,v_remarks,v_related_bill
    from ic_in_store_bill where bill_no=p_bill_no;

    if substr(p_bill_no,1,2)='SR' then
      select to_char(achieve_time,'yyyymmdd') into v_achieve_time from ic_pdu_order_form a,ic_pdu_plan_order_mapping b,ic_pdu_produce_bill c
      where a.order_no=b.order_no and b.out_bill_no=c.out_bill_no and c.bill_no=v_related_bill and rownum=1;
      if v_achieve_time is not null then
        select '生产日期：'||substr(v_achieve_time,1,4)||'-'||substr(v_achieve_time,5,2)||'-'||substr(v_achieve_time,7,2) into v_achieve_time from dual;
      end if;
    end if;

    select count(*) into v_temp_number from  ic_in_store_detail  where  bill_no=p_bill_no;
      if v_temp_number>0 then
        open p_cur for
         select p_bill_no bill_no,v_bill_date bill_date,v_verify_date verify_date,v_form_maker form_maker,
            v_hand_man hand_man,v_administer administer,v_accounter accounter,v_remarks remarks,
            v_related_bill related_bill,v_achieve_time achieve_time,
            b.reason_describe reason,c.area_name area,d.ic_sub_desc sub_type, sum(a.in_num) in_num
           from ic_in_store_detail a,ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d
          where a.BILL_NO=p_bill_no
          and a.reason_id=b.reason_id(+)
          and a.area_id=c.area_id(+)
          and a.storage_id=c.storage_id(+)
          and rtrim(a.ic_main_type) =d.ic_main_type(+)
          and rtrim(a.ic_sub_type)=d.ic_sub_type(+)
          group by p_bill_no,v_bill_date,v_verify_date,v_form_maker,
            v_hand_man,v_administer,v_accounter,v_remarks,
            v_related_bill,v_achieve_time,
            b.reason_describe,c.area_name,d.ic_sub_desc,in_num;
    else
      open p_cur for
         select p_bill_no bill_no,v_bill_date bill_date,v_verify_date verify_date,v_form_maker form_maker,
            v_hand_man hand_man,v_administer administer,v_accounter accounter,v_remarks remarks,
            v_related_bill related_bill,v_achieve_time achieve_time,
            b.reason_describe reason,c.area_name area,d.ic_sub_desc sub_type, sum(a.in_num) in_num
           from ic_sts_in a,ic_cod_in_out b,ic_cod_area c,ic_cod_card_sub_type d
          where a.BILL_NO=p_bill_no
          and a.reason_id=b.reason_id(+)
          and a.area_id=c.area_id(+)
          and a.storage_id=c.storage_id(+)
          and rtrim(a.ic_main_type) =d.ic_main_type(+)
          and rtrim(a.ic_sub_type)=d.ic_sub_type(+)
          group by p_bill_no,v_bill_date,v_verify_date,v_form_maker,
            v_hand_man,v_administer,v_accounter,v_remarks,
            v_related_bill,v_achieve_time,
            b.reason_describe,c.area_name,d.ic_sub_desc,in_num;
    end if;
  else
    open p_cur for
         select '' bill_no,'' bill_date,'' verify_date,'' form_maker,
            '' hand_man,'' administer,'' accounter,'' remarks,
            '' related_bill,'' achieve_time,
            '' reason,'' area,'' sub_type, 0 in_num
        from dual;

  end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_PRODUCE to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_PRODUCE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_QR
prompt =====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_QR" (
---------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_BL_IN_QR
--功能描述：票务管理--清洗入库单--单据导出--报表
--创建者：  mqf
--创建日期：20130821
-----------------------------                             --------------------------------------------------
p_cur     IN OUT sys_refcursor,--返回结果集
p_bill_no IN varchar2   --入库单号
)
aS

v_temp_num int;

 BEGIN


  select count(*) into v_temp_num from  ic_in_store_detail  where  bill_no=p_bill_no;
  if v_temp_num >0 then

         OPEN p_cur FOR

         select p_bill_no as bill_no,e.bill_date,e.verify_date ,e.form_maker  ,e.hand_man,e.administer,e.accounter,e.remark
         ,e.related_bill_no as related_bill,' ' as achieve_time,b.reason_describe as reason,c.area_name as area ,d.ic_sub_desc  as sub_type,a.in_num as in_num
         from (select reason_id ,storage_id,area_id ,ic_main_type ,ic_sub_type ,sum(in_num) as in_num
               from ic_in_store_detail  where  bill_no=p_bill_no
               group by reason_id ,storage_id,area_id ,ic_main_type ,ic_sub_type) a
         ,ic_cod_in_out b
         ,ic_cod_area c
         ,ic_cod_card_sub_type d
         ,ic_in_store_bill e
        where e.bill_no=p_bill_no
              and a.reason_id=b.reason_id
              and a.area_id=c.area_id
              and a.storage_id=c.storage_id
              and a.ic_main_type =d.ic_main_type
              and a.ic_sub_type=d.ic_sub_type;


  else

       OPEN p_cur FOR

       select p_bill_no as bill_no,e.bill_date,e.verify_date ,e.form_maker  ,e.hand_man,e.administer,e.accounter,e.remark
         ,e.related_bill_no as related_bill,' ' as achieve_time,b.reason_describe as reason,c.area_name as area ,d.ic_sub_desc  as sub_type,a.in_num as in_num
         from (select reason_id ,storage_id,area_id ,ic_main_type ,ic_sub_type ,sum(in_num) as in_num
                from ic_sts_in  where  bill_no=p_bill_no
                group by reason_id ,storage_id,area_id ,ic_main_type ,ic_sub_type) a
         ,ic_cod_in_out b
         ,ic_cod_area c
         ,ic_cod_card_sub_type d
         ,ic_in_store_bill e
        where e.bill_no=p_bill_no
              and a.reason_id=b.reason_id
              and a.area_id=c.area_id
              and a.storage_id=c.storage_id
              and a.ic_main_type =d.ic_main_type
              and a.ic_sub_type=d.ic_sub_type;


  end if;


end;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_QR to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_QR to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_IN_RETURN
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_IN_RETURN"
(p_cur     IN OUT sys_refcursor,--返回结果集
 p_bill_no varchar2
 )
---------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_BL_IN_RETURN
--功能描述：票务管理--借票归还明细--单据导出--报表
--修改者：  liangminglong
--修改日期：
---------------------------------------------------
AS
BEGIN

  if p_bill_no is not null then
  -- 添加多日票模式相关字段 返回报表显示的限制模式，出站站点
  open p_cur for
  SELECT
      a.chinese_name,
      g.chinese_name as exit_stationid_name,
      h.code_text as mode_name,
      b.return_quantity,
      b.not_quantity,
      b.lost_quantity,
      b.card_money,
      b.valid_date,
      b.start_box_id,
      b.end_box_id,
      b.start_logical_id,
      b.end_logical_id,
      c.ic_sub_desc,
      d.bill_no,
      lend_bill_no ,
      d.in_bill_no,
      d.return_man,
      d.receive_man,
      d.bill_date,
      d.verify_date,
      d.remark remarks,
      e.area_name,
      f.unit_name
  FROM
      ic_cod_station a,
      ic_in_return_bill_detail b,
      ic_cod_card_sub_type c,
      ic_in_return_bill d,
      ic_cod_area e,
      ic_cod_borrow_unit f,
      ic_cod_station g,
      pub_flag h
  WHERE
      a.line_id(+) =b.line_id AND
      a.station_id(+) = b.station_id AND
      rtrim(b.ic_main_type) = c.ic_main_type AND
      rtrim(b.ic_sub_type) = c.ic_sub_type AND
      b.bill_no = d.bill_no AND
      b.storage_id = e.storage_id AND
      b.area_id = e.area_id AND
      d.unit_id = f.unit_id(+) AND
      g.station_id(+) = b.exit_station_id AND
      h.code(+) = b.model AND
      h.type = 26 AND
      b.delete_flag = '0' AND
      d.bill_no = p_bill_no ;
  else
  open p_cur for
      SELECT
      '' chinese_name,
      '' exit_stationid_name,
      '' mode_name,
      0 return_quantity,
      0 not_quantity,
      0 lost_quantity,
      '' card_money,
      '' valid_date,
      '' start_box_id,
      '' end_box_id,
      '' start_logical_id,
      '' end_logical_id,
      '' ic_sub_desc,
      '' bill_no,
      '' lend_bill_no ,
      '' in_bill_no,
      '' return_man,
      '' receive_man,
      '' bill_date,
      '' verify_date,
      '' remarks,
      '' area_name,
      '' unit_name
  FROM
      dual;
  end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_IN_RETURN to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_IN_RETURN to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_ADJUST
prompt ==========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_ADJUST"
(  p_cur            IN OUT sys_refcursor,--返回结果集
  p_bill_no          IN  VARCHAR2--出库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_OUT_ADJUST
  --功能:调帐出库-单据导出-报表-明细
  --创建者：  liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
--delete from t#ic_temp_result;
  if p_bill_no is not null then
  --添加多日票模式相关字段
  ----20151226 modify by mqf 增加B.exit_line_id
  insert into t#ic_temp_result t( bill_no,out_bill_no,operator,administer,bill_date,record_flag,remark,verify_date,
    storage_id,area_id,ic_main_type,ic_sub_type,error_quantity,vaild_date,card_money,line_id,station_id,exit_line_id,exit_station_id,model,
    start_box_id,end_box_id,start_logical_id,end_logical_id,adjust_id,storey_id,base_id,chest_id)
  select A.bill_no,A.out_bill_no,A.operator,A.administer,A.bill_date,A.record_flag,A.remark,A.verify_date,
  B.storage_id,B.area_id,B.ic_main_type,B.ic_sub_type,B.error_quantity,B.vaild_date,B.card_money,B.line_id,B.station_id,B.exit_line_id,B.exit_station_id,B.model,
  B.start_box_id,B.end_box_id,B.start_logical_id,B.end_logical_id,B.adjust_id,B.storey_id,B.base_id,B.chest_id
  from ic_out_adjust_bill A,ic_out_adjust_bill_detail B
  where A.bill_no =p_bill_no and
  A.bill_no = B.bill_no;

  update t#ic_temp_result a set a.adjust_reason=(select B.reason_describe from ic_cod_in_out B where a.adjust_id = B.reason_id)
                                        where exists(select B.reason_describe from ic_cod_in_out B where a.adjust_id = B.reason_id);
  update t#ic_temp_result a set a.area_name=(select B.area_name from ic_cod_area B where a.storage_id=B.storage_id and a.area_id = B.area_id)
                                         where exists(select B.area_name from ic_cod_area B where a.storage_id=B.storage_id and a.area_id = B.area_id);

  update t#ic_temp_result a set a.chinese_name=(select B.chinese_name from ic_cod_station B where a.line_id=B.line_id and a.station_id = B.station_id)
                                          where exists(select B.chinese_name from ic_cod_station B where a.line_id=B.line_id and a.station_id = B.station_id);
  update t#ic_temp_result a set a.ic_sub_desc=(select B.ic_sub_desc from ic_cod_card_sub_type B where a.ic_main_type=B.ic_main_type and a.ic_sub_type = B.ic_sub_type)
                                          where exists(select B.ic_sub_desc from ic_cod_card_sub_type B where a.ic_main_type=B.ic_main_type and a.ic_sub_type = B.ic_sub_type);
   --添加多日票模式相关字段 更新出站站点名称
   --20151226 modify by mqf 增加出站线路关联
   update t#ic_temp_result a set a.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_line_id=b.line_id and a.exit_station_id=b.station_id)
                                          where exists(select b.chinese_name from ic_cod_station b where a.exit_line_id=b.line_id and a.exit_station_id=b.station_id);
    --添加多日票模式相关字段 查询pub_flag 更新限制模式名称
   update t#ic_temp_result a set a.mode_name=(select b.code_text from pub_flag b where a.model=b.code and b.type = 26)
                                          where exists(select b.code_text from pub_flag b where a.model=b.code and b.type = 26);
    --单程票不显示逻辑卡
    update t#ic_temp_result set  start_logical_id='', end_logical_id='' where ic_main_type='12' ;

  OPEN p_cur FOR
   select   bill_no,out_bill_no,operator,administer,bill_date,remark,verify_date,
            adjust_reason,area_name,ic_sub_desc, sum(error_quantity)  error_quantity ,
            vaild_date,card_money,chinese_name,exit_stationid_name,mode_name,start_box_id,end_box_id,start_logical_id,end_logical_id
         from t#ic_temp_result
         group by  bill_no,out_bill_no,operator,administer,bill_date,remark,verify_date,
            adjust_reason,area_name,ic_sub_desc,
            vaild_date,card_money,chinese_name,exit_stationid_name,mode_name,start_box_id,end_box_id,start_logical_id,end_logical_id;

else

  OPEN p_cur FOR
   select   bill_no,out_bill_no,operator,administer,bill_date,remark,verify_date,
            adjust_reason,area_name,ic_sub_desc, sum(error_quantity)  error_quantity ,
            vaild_date,card_money,chinese_name,exit_stationid_name,mode_name,start_box_id,end_box_id,start_logical_id,end_logical_id
         from t#ic_temp_result
         group by  bill_no,out_bill_no,operator,administer,bill_date,remark,verify_date,
            adjust_reason,area_name,ic_sub_desc,
            vaild_date,card_money,chinese_name,exit_stationid_name,mode_name,start_box_id,end_box_id,start_logical_id,end_logical_id;
end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_ADJUST to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_ADJUST to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_COMMEN
prompt ==========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_COMMEN"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2--出库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_OUT_COMMEN
  --功能:出库计划
  --创建者：  liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS

v_billNoMap varchar(256);
v_remarks varchar(256);
BEGIN
  -- routine body goes here, e.g.
    -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  if p_bill_no is not null then
    if(p_bill_no is null or p_bill_no ='') then
      select '对应单:' into v_billNoMap from dual;
      select '' into v_remarks from dual;
    end if;

    if(substr(p_bill_no,1,2) ='SC') then
      select '对应计划单:' into v_billNoMap from dual;
      select remark into v_remarks from ic_out_date_plan where out_bill_no=p_bill_no;
    end if;

    if(substr(p_bill_no,1,2) ='PC') then
      select '对应配票计划单:' into v_billNoMap from dual;
      select remark into v_remarks from ic_out_distribute_plan_bill where out_bill_no=p_bill_no;
    end if;

    if(substr(p_bill_no,1,2) ='JC')then
      select '对应借出记录单:' into v_billNoMap from dual;
      select remark into v_remarks from ic_out_lend_bill where out_bill_no=p_bill_no;
    end if;

    if(substr(p_bill_no,1,2) ='XC') then
      select '对应单:' into v_billNoMap from dual;
      select remark into v_remarks from ic_out_bill where bill_no=p_bill_no;
    end if;

    if(substr(p_bill_no,1,2) ='HC')then
      select '对应核查计划单:' into v_billNoMap from dual;
      select remark into v_remarks from ic_out_cancel_plan where out_bill_no=p_bill_no;
    end if;



    insert into t#ic_commen_temp_result ( bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,verify_date,distribute_bill_no,remarks,
      reason_id,storage_id,area_id,ic_main_type,ic_sub_type,out_num,vaild_date,card_money,line_id,station_id,card_type,
      es_worktype_id,make_num,card_money_produce,section_num)
    select A.bill_no,A.bill_date,A.form_maker,A.drawer,A.administer,A.accounter,A.verify_person,A.verify_date,A.distribute_bill_no,A.remark,
    B.reason_id,B.storage_id,B.area_id,B.ic_main_type,B.ic_sub_type,
      case
      when C.section_num is not null and  C.section_num <>0 then  C.section_num
      else
      B.out_num
      end
      ,
    B.vaild_date,B.card_money,B.line_id,B.station_id,B.card_type,
    B.es_worktype_id,B.make_num,B.card_money_produce,nvl(C.section_num,0)
    from ic_out_bill A,ic_out_bill_detail B,ic_out_bill_detail_box C
    where A.bill_no =p_bill_no and
    A.bill_no = B.bill_no and
    B.bill_no =C.bill_no(+) and
    to_char(B.water_no) =C.water_no(+);

   insert into t#ic_commen_temp_group( bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,verify_date,distribute_bill_no,remarks,
     reason_id,storage_id,area_id,ic_main_type,ic_sub_type,out_num,vaild_date,card_money,line_id,station_id,card_type,
     es_worktype_id,make_num,card_money_produce,section_num)
   select  bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,verify_date,distribute_bill_no,remarks,
     reason_id,storage_id,area_id,ic_main_type,ic_sub_type,sum(out_num),vaild_date,card_money,line_id,station_id,card_type,
     es_worktype_id,make_num,card_money_produce,section_num
     from t#ic_commen_temp_result
     group by  bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,verify_date,distribute_bill_no,remarks,
     reason_id,storage_id,area_id,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,card_type,
     es_worktype_id,make_num,card_money_produce,section_num;


    update t#ic_commen_temp_group A set A.reason_describe=(select B.reason_describe from ic_cod_in_out B where A.reason_id = B.reason_id)
            where exists(select B.reason_describe from ic_cod_in_out B where A.reason_id = B.reason_id);
    update t#ic_commen_temp_group A set A.card_type_name=(select B.card_type_name from t#ic_plan_card_type B where A.card_type = B.card_type)
            where exists(select B.card_type_name from t#ic_plan_card_type B where A.card_type = B.card_type);
    update t#ic_commen_temp_group A set A.area_name=(select B.area_name from ic_cod_area B where A.storage_id=B.storage_id and A.area_id = B.area_id)
            where exists(select B.area_name from ic_cod_area B where A.storage_id=B.storage_id and A.area_id = B.area_id);

    update t#ic_commen_temp_group A set A.chinese_name=(select B.chinese_name from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id)
            where exists(select B.chinese_name from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id);
    update t#ic_commen_temp_group A set A.ic_sub_desc=(select B.ic_sub_desc from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type )
            where exists(select B.ic_sub_desc from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type );
    update t#ic_commen_temp_group set remarks=v_remarks;

  open p_cur for
    select  bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,remarks,
    reason_describe,area_name, ic_sub_desc,sum(out_num) out_num ,distribute_bill_no ,v_billNoMap billNoMap,card_money
    from t#ic_commen_temp_group
    group by bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,remarks,
    reason_describe,area_name, ic_sub_desc ,distribute_bill_no,card_money;

  else
  open p_cur for
    select '' bill_no,'' bill_date,'' form_maker,'' drawer,'' administer,'' accounter,'' verify_person,'' remarks,
    '' reason_describe,'' area_name,'' ic_sub_desc,0 out_num ,'' distribute_bill_no ,'' billNoMap,'' card_money
    from t#ic_commen_temp_group
    group by bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,remarks,
    reason_describe,area_name, ic_sub_desc ,distribute_bill_no,card_money;
end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_COMMEN to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_COMMEN to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_COMMEN_DETAIL
prompt =================================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_COMMEN_DETAIL"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2--出库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_OUT_COMMEN_DETAIL
  --功能:出库共用
  --创建者：  liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS
  v_startBoxId varchar(14); --起始盒号
  v_endBoxId varchar(14);   --终止盒号
  v_detailPlace varchar(50); --详细位置
  v_startLogicalId varchar(20); --起始卡号
  v_endLogicalId varchar(20); --终止卡号
  v_produceDate date;


  v_verifyDate date;
  v_outNum int;
  v_icMainType varchar(3);
  v_icSubType varchar(3);
  v_vaildDate date;
  v_cardMoney int;
  v_lineId   varchar(2);
  v_stationId varchar(3);

  v_exitStationId varchar(3);
  v_model varchar(3);

  v_startBoxId1 varchar(14); --下一记录起始盒号
  v_endBoxId1 varchar(14); --下一记录终止盒号
  v_detailPlace1 varchar(50); --下一记录详细位置
  v_startLogicalId1 varchar(20); --下一记录起始卡号
  v_endLogicalId1 varchar(20); --下一记录终止卡号
  v_produceDate1 date;


  v_verifyDate1 date;
  v_outNum1 int;
  v_icMainType1 varchar(3);
  v_icSubType1 varchar(3);
  v_vaildDate1 date;
  v_cardMoney1 int;
  v_lineId1   varchar(2);
  v_stationId1 varchar(3);

  v_exitStationId1 varchar(3);
  v_model1 varchar(3);

  v_totalOutNum int;
  v_i_start int;
  v_i_end int;
  v_tempCount int;

begin

--原始数据临时表
--清理临时数据
  DELETE FROM T#IC_RCT_BL_OUT_QC_RS;
  DELETE FROM T#IC_RCT_BL_OUT_QC_RS_START;
  DELETE FROM T#IC_RCT_BL_OUT_QC_RS_END;
  DELETE FROM T#IC_RCT_BL_OUT_QC_RS_COMBINE;

    insert into T#IC_RCT_BL_OUT_QC_RS( verify_date,ic_main_type,ic_sub_type,out_num,vaild_date,card_money,line_id,station_id,exit_station_id,model,
                       detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,section_num,produce_date
                       )


                select A.verify_date,B.ic_main_type,B.ic_sub_type,
                        case
                          when C.section_num is not null and  C.section_num <>0 then C.section_num
                          else B.out_num
                        end
                        ,
                        B.vaild_date,B.card_money,
                       NVL(B.line_id,' '),
                       NVL(B.station_id,' '),
                                   NVL(B.exit_station_id,' '),
                       NVL(B.model,' '),
                        C.detail_place,C.start_box_id,C.end_box_id,C.start_logical_id,C.end_logical_id,C.section_num,C.produce_date
                        from ic_out_bill A ,ic_out_bill_detail B,ic_out_bill_detail_box C
                        where A.bill_no =p_bill_no and
                              A.bill_no = B.bill_no and
                              B.bill_no =C.bill_no(+) and
                              substr(to_char(B.water_no),0,18) =C.water_no(+)
  order by start_box_id,end_box_id;

   update  T#IC_RCT_BL_OUT_QC_RS set  vaild_date = null where (line_id =null or line_id ='00') and (station_id =null or station_id ='00');

   update T#IC_RCT_BL_OUT_QC_RS A set  A.chinese_name=(select B.chinese_name from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id )
            where EXISTS (select 1 from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id);


   update T#IC_RCT_BL_OUT_QC_RS A set  A.ic_sub_desc=(select B.ic_sub_desc from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type)
            where EXISTS (select 1 from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type);
   --只有羊城通、纸票、羊城通发票需打印逻辑卡号

   update T#IC_RCT_BL_OUT_QC_RS a set a.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_station_id=b.station_id)
          where exists (select 1 from ic_cod_station b where a.exit_station_id=b.station_id);

    --add 20120426 luojun 添加多日票模式相关字段 查询pub_flag 更新限制模式名称
   --update #result_combine set a.mode_name=b.code_text from #result_combine a,pub_flag b where a.mode=b.code and b.type = 26;

   update T#IC_RCT_BL_OUT_QC_RS a set a.mode_name= (select b.code_text from pub_flag b where a.model=b.code and b.type = 26)
          where exists (select 1 from pub_flag b where a.model=b.code and b.type = 26);



 OPEN p_cur FOR
       select
         ic_sub_desc, vaild_date,card_money,chinese_name,exit_stationid_name, mode_name,sum(out_num) out_num,verify_date,
         produce_date,
         detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id
         from T#IC_RCT_BL_OUT_QC_RS

         group by    ic_sub_desc,vaild_date,card_money,chinese_name,exit_stationid_name, mode_name,verify_date,
         produce_date,
         detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id

          order by start_box_id,end_box_id;


--     select @endTime =getdate()
--     select '取原始记录用时:'+convert(varchar(8),datediff(second,@beginTime,@endTime))
--     select @beginTime =getdate()

  --获取记录的出库数量
 --   update #result set out_num =section_num w                here section_num is not null and  section_num <>0
--  update #result set line_id ='' where line_id is not null
--  update #result set station_id ='' where station_id is not null

--    select @endTime =getdate()
--    select '获取出库数量?      檬?'+convert(varchar(8),datediff(second,@beginTime,@endTime))
--    select @beginTime =getdate()







--------------------------------------------------------------------
------------合并盒号-----------------      -----------------------------
/*



  v_totalOutNum := 0;
  v_i_start := 0;
  v_i_end :=0;
--判断出库是否存在需按逻辑卡号合并的票卡类型，如不存在合并盒号，否则合并逻辑卡号
--按逻辑卡号合并的票卡类型为羊城通、纸票、30元羊城通押金发票、IC卡车票、员工票
select count(*) into v_tempCount from T#IC_RCT_BL_OUT_QC_RS where ic_main_type in('6','9','34','1','2','40');
IF v_tempCount>0 THEN
    select ic_main_type into v_icMainType from T#IC_RCT_BL_OUT_QC_RS where ic_main_type in('6','9','34','1','2','40');
END IF;
IF v_icMainType is null or v_icMainType =' ' THEN
    select count(*) into v_tempCount from T#IC_RCT_BL_OUT_QC_RS where ic_main_type not in('6','9','34','1','2','40');
    IF v_tempCount>0 THEN
        select ic_main_type into v_icMainType from T#IC_RCT_BL_OUT_QC_RS where ic_main_type not in('6','9','34','1','2','40');
    END IF;
END IF;
--select ic_main_type into v_icMainType from T#IC_RCT_BL_OUT_QC_RS;

IF v_icMainType  not in('6','9','34','1','2','40') THEN
--begin
    --?ㄒ逵伪?
       --luojun20121127
       --出库详细排序字段顺序修改卡类型、面值，出库生产时间,盒号,详细位置
    --declare csr_out cursor for
    DECLARE cursor csr_out IS
                   select detail_place,start_box_id,end_box_id,produce_date,
                           verify_date,out_num,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model
                   from T#IC_RCT_BL_OUT_QC_RS
                    order by ic_main_type,ic_sub_type,card_money,produce_date,start_box_id,end_box_id,detail_place,vaild_date,line_id,station_id,exit_station_id,model;
    BEGIN

      --打开游标
      open csr_out;
      --移动游标
      --LOOP
        fetch csr_out into v_detailPlace, v_startBoxId,v_endBoxId,v_produceDate,
                            v_verifyDate,v_outNum,v_icMainType,v_icSubType,v_vaildDate,v_cardMoney,v_lineId,v_stationId,v_exitStationId,v_model;

        IF csr_out%notfound THEN
          dbms_output.put_line('11 Data notfound');
          close csr_out;
        ELSE

        --游标操作状态2：结束 0:成功
        --判断结果集是否为空
        /*
        if(@@sqlstatus =2)
        begin
            close csr_out
            deallocate cursor csr_out

        end
        else
        begin

          --第一条记录是起始段

          v_i_start :=v_i_start+1;
          insert into T#IC_RCT_BL_OUT_QC_RS_START(detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,produce_date,
                                    verify_date,out_num,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model,n)
                              values(v_detailPlace, v_startBoxId,v_endBoxId,' ',' ',v_produceDate,
                                     v_verifyDate,v_outNum,v_icMainType,v_icSubType,v_vaildDate,v_cardMoney,v_lineId,v_stationId,v_exitStationId,v_model,v_i_start
                                     );
          v_totalOutNum := v_outNum+v_totalOutNum;

          --while(@@sqlstatus =0)
          Loop
            exit when csr_out%notfound;
          --begin
             --取下一记录
             fetch csr_out into v_detailPlace1,v_startBoxId1,v_endBoxId1,v_produceDate1,
                                v_verifyDate1,v_outNum1,v_icMainType1,v_icSubType1,v_vaildDate1,v_cardMoney1,v_lineId1,v_stationId1,v_exitStationId1,v_model1;
             --已到最后
             --判断结果集是否仅一条记录或已到最后
             --if(@@sqlstatus =2)
             IF csr_out%notfound THEN
                dbms_output.put_line('22 Data notfound');
             --begin
                --最后一条记录是终止段
                v_i_end := v_i_end+1;
                insert into T#IC_RCT_BL_OUT_QC_RS_END(detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,produce_date,
                                    verify_date,out_num,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model,n)
                              values(v_detailPlace, v_startBoxId,v_endBoxId,' ',' ',v_produceDate,
                                     v_verifyDate,v_totalOutNum,v_icMainType,v_icSubType,v_vaildDate,v_cardMoney,v_lineId,v_stationId,v_exitStationId,v_model,v_i_end
                                     );
                --break;
                exit;
             --end
             END IF;

            --卡不同、详细位置不同、当前盒号不等于上一盒号+1或当前盒号不等于上一盒号
            --上一盒号是上一合并号段的终止段，当前盒号是下一号段的起始段
            IF
                (v_icMainType <>v_icMainType1) or
                (v_icSubType <>v_icSubType1) or
                (v_vaildDate <> v_vaildDate1) or
                (v_cardMoney <> v_cardMoney1) or
                (v_lineId <>v_lineId1) or
                (v_stationId <>v_stationId1) or
                (v_exitStationId <>v_exitStationId1) or
                (v_model <>v_model1) or
                (v_detailPlace <> v_detailPlace1) or
                --(convert(numeric(14),@startBoxId1) <> convert(numeric(14),@endBoxId)+convert(numeric(14),1)
                (TO_NUMBER(v_startBoxId1) <> TO_NUMBER(v_endBoxId)+TO_NUMBER(1)
                  --and (convert(numeric(14),@startBoxId1) <> convert(numeric(14),@endBoxId))
                  and (TO_NUMBER(v_startBoxId1) <> TO_NUMBER(v_endBoxId))
                 )
            THEN
                v_i_start := v_i_start+1;
                v_i_end := v_i_end+1;
                insert into T#IC_RCT_BL_OUT_QC_RS_END(detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,produce_date,
                                    verify_date,out_num,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model,n)
                              values(v_detailPlace, v_startBoxId,v_endBoxId,' ',' ',v_produceDate,
                                     v_verifyDate,v_totalOutNum,v_icMainType,v_icSubType,v_vaildDate,v_cardMoney,v_lineId,v_stationId,v_exitStationId,v_model,v_i_end
                                     );
                insert into T#IC_RCT_BL_OUT_QC_RS_START(detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,produce_date,
                                    verify_date,out_num,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model,n)
                              values(v_detailPlace1, v_startBoxId1,v_endBoxId1,' ',' ',v_produceDate1,
                                     v_verifyDate1,v_outNum1,v_icMainType1,v_icSubType1,v_vaildDate1,v_cardMoney1,v_lineId1,v_stationId1,v_exitStationId1,v_model1,v_i_start
                                     );
                v_totalOutNum := 0;

            END IF;
            --累计出库数量
            v_totalOutNum := v_outNum1+v_totalOutNum;

            v_detailPlace:=v_detailPlace1;
            v_startBoxId:=v_startBoxId1;
            v_endBoxId:=v_endBoxId1;
            v_produceDate:=v_produceDate1;
            v_verifyDate:=v_verifyDate1;
            v_outNum:=v_outNum1;
            v_icMainType:=v_icMainType1;
            v_icSubType:=v_icSubType1;
            v_vaildDate:=v_vaildDate1;
            v_cardMoney:=v_cardMoney1;
            v_lineId:=v_lineId1;
            v_stationId:=v_stationId1;
            v_exitStationId :=v_exitStationId1;
            v_model := v_model1;







          --end --while(@@sqlstatus =0)
          END LOOP;
      --END LOOP;
     --关闭游标
      close csr_out;
      --释放资源
    --deallocate cursor csr_out


--    select @endTime =getdate()
--    select '合并盒号段用时:'+convert(varchar(8),datediff(second,@beginTime,@endTime))
--    select @begin               Time =getdate()

        END IF; --if(@@sqlstatus =2)
  END;
--end --if(@icMainType  not in('6','9','34','1'))
else --合并卡号段
--begin


    --定义游标
      --luojun 20121127
      --出库详细排序字段顺序修改卡类型、面值，出库生产时间,盒号,详细位置
    --declare csr_out cursor for
    DECLARE cursor csr_out IS
                   select detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,produce_date,
                           verify_date,out_num,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model
                   from T#IC_RCT_BL_OUT_QC_RS
                   order by ic_main_type,ic_sub_type,card_money,produce_date,start_box_id,end_box_id,start_logical_id,end_logical_id,detail_place,vaild_date,line_id,station_id,exit_station_id,model;
    BEGIN
    --打开游标
    open csr_out;
    --移动游标,取出第一条记录
    fetch csr_out into v_detailPlace, v_startBoxId,v_endBoxId,v_startLogicalId,v_endLogicalId,v_produceDate,
                       v_verifyDate,v_outNum,v_icMainType,v_icSubType,v_vaildDate,v_cardMoney,v_lineId,v_stationId,v_exitStationId,v_model;



    --游标操作状态2：结束 0:成功
    --判断结果集是否为空

    IF csr_out%notfound THEN
          close csr_out;
    ELSE
    --begin
      --第一条记录是起始段
      v_i_start :=v_i_start+1;
      insert into T#IC_RCT_BL_OUT_QC_RS_START(detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,produce_date,
                                verify_date,out_num,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model,n)
                          values(v_detailPlace, v_startBoxId,v_endBoxId,v_startLogicalId,v_endLogicalId,v_produceDate,
                                 v_verifyDate,v_outNum,v_icMainType,v_icSubType,v_vaildDate,v_cardMoney,v_lineId,v_stationId,v_exitStationId,v_model,v_i_start
                                  );

      v_totalOutNum := v_outNum+v_totalOutNum;

      --while(@@sqlstatus =0)
      LOOP
        exit when csr_out%notfound;
      --begin
         --取下一记录
         fetch csr_out into v_detailPlace1,v_startBoxId1,v_endBoxId1,v_startLogicalId1,v_endLogicalId1,v_produceDate1,
                             v_verifyDate1,v_outNum1,v_icMainType1,v_icSubType1,v_vaildDate1,v_cardMoney1,v_lineId1,v_stationId1,v_exitStationId1,v_model1;



         --已到最后
         --判断结果集是否仅一条记录或已到最后
         --if(@@sqlstatus =2)
         IF csr_out%notfound THEN
         --begin
             --最后一条记录是终止段
             v_i_end :=v_i_end+1;
             insert into T#IC_RCT_BL_OUT_QC_RS_END(detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,produce_date,
                                verify_date,out_num,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model,n)
                          values(v_detailPlace, v_startBoxId,v_endBoxId,v_startLogicalId,v_endLogicalId,v_produceDate,
                                 v_verifyDate,v_totalOutNum,v_icMainType,v_icSubType,v_vaildDate,v_cardMoney,v_lineId,v_stationId,v_exitStationId,v_model,v_i_end
                                  );
             --break
            EXIT;
         --end
         END IF;
         --卡不同、详细位置不同、当前盒号不等于上一盒号+1或当前盒号不等于上一盒号、当前逻辑卡号不等于上一逻辑卡号+1
        --上一盒号是上一合并                                                           号段的终止段，当前盒号是下一号段的起始段
         if
            (v_icMainType <>v_icMainType1) or
            (v_icSubType <>v_icSubType1) or
            (v_cardMoney <> v_cardMoney1) or
            (v_detailPlace <> v_detailPlace1) or
            --(convert(numeric(14),@startBoxId1) <> convert(numeric(14),@endBoxId)+convert(numeric(14),1)
            (TO_NUMBER(v_startBoxId1) <> TO_NUMBER(v_endBoxId)+TO_NUMBER(1)
              --and (convert(numeric(14),@startBoxId1) <> convert(numeric(14),@endBoxId))
              and (TO_NUMBER(v_startBoxId1) <> TO_NUMBER(v_endBoxId))
             ) or
             --((@icMainType in('1','2','40')) and (convert(numeric(15),substring(@startLogicalId1,1,15))<>convert(numeric(15),substring(@endLogicalId,1,15))+convert(numeric(15),1))) or
             ((TO_NUMBER(substr(v_startLogicalId1,1,20))<>TO_NUMBER(substr(v_endLogicalId,1,20))+TO_NUMBER(1))) or
             --((@icMainType not in('1','2','40')) and (convert(numeric(16),substring(@startLogicalId1,1,16))<>convert(numeric(16),substring(@endLogicalId,1,16))+convert(numeric(16),1)))
             ((TO_NUMBER(substr(v_startLogicalId1,1,20))<>TO_NUMBER(substr(v_endLogicalId,1,20))+TO_NUMBER(1)))


        THEN
            v_i_start := v_i_start+1;
            v_i_end := v_i_end+1;
            insert into T#IC_RCT_BL_OUT_QC_RS_END(detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,produce_date,
                                verify_date,out_num,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model,n)
                          values(v_detailPlace, v_startBoxId,v_endBoxId,v_startLogicalId,v_endLogicalId,v_produceDate,
                                 v_verifyDate,v_totalOutNum,v_icMainType,v_icSubType,v_vaildDate,v_cardMoney,v_lineId,v_stationId,v_exitStationId,v_model,v_i_end
                                  );
            insert into T#IC_RCT_BL_OUT_QC_RS_START(detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,produce_date,
                                verify_date,out_num,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model,n)
                          values(v_detailPlace1, v_startBoxId1,v_endBoxId1,v_startLogicalId1,v_endLogicalId1,v_produceDate1,
                                 v_verifyDate1,v_outNum1,v_icMainType1,v_icSubType1,v_vaildDate1,v_cardMoney1,v_lineId1,v_stationId1,v_exitStationId1,v_model1,v_i_start
                                  );
            v_totalOutNum := 0;

        END IF;
        --累计出库数量
        v_totalOutNum := v_outNum1+v_totalOutNum;
        v_detailPlace:=v_detailPlace1;
        v_startBoxId:=v_startBoxId1;
        v_endBoxId:=v_endBoxId1;
        v_startLogicalId:=v_startLogicalId1;
        v_endLogicalId:=v_endLogicalId1;
        v_produceDate:=v_produceDate1;
        v_verifyDate:=v_verifyDate1;
        v_outNum:=v_outNum1;
        v_icMainType:=v_icMainType1;
        v_icSubType:=v_icSubType1;
        v_vaildDate:=v_vaildDate1;
        v_cardMoney:=v_cardMoney1;
        v_lineId:=v_lineId1;
        v_stationId:=v_stationId1;
        v_exitStationId := v_exitStationId1;
        v_model:=v_model1;


    --end --while(@@sqlstatus =0)
    END LOOP;
   --关闭游标
    close csr_out;
    --释放资源
    --deallocate cursor csr_out


--    select @endTime =getdate()
--    select '合并逻辑卡号段用时:'+convert(varchar(8),datediff(second,@beginTime,@endTime))
--    select @beginTime =getdate()

    END IF; --if(@@sqlstatus =2)
  END; --DECLARE cursor
END IF;

  --select * from #result_start

  --select * from #result_end

--------------------盒号合并
   insert into T#IC_RCT_BL_OUT_QC_RS_COMBINE(detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,produce_date,
                                verify_date,out_num,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model)
                select A.detail_place,A.start_box_id,B.end_box_id,A.start_logical_id,B.end_logical_id,B.produce_date,
                                B.verify_date,B.out_num,B.ic_main_type,B.ic_sub_type,B.vaild_date,B.card_money,B.line_id,B.station_id,B.exit_station_id,B.model
                        from T#IC_RCT_BL_OUT_QC_RS_START A,T#IC_RCT_BL_OUT_QC_RS_END B
                        where A.n =B.n;


--    select @endTime =getdate()
--    select '合并结果用时:'+convert(varchar(8),datediff(second,@beginTime,@endTime))
--    select @beginTime =getdate()


   update  T#IC_RCT_BL_OUT_QC_RS_COMBINE set  vaild_date = null where (line_id =null or line_id ='00') and (station_id =null or station_id ='00');

   update T#IC_RCT_BL_OUT_QC_RS_COMBINE A set  A.chinese_name=(select B.chinese_name from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id )
            where EXISTS (select 1 from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id);


   update T#IC_RCT_BL_OUT_QC_RS_COMBINE A set  A.ic_sub_desc=(select B.ic_sub_desc from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type)
            where EXISTS (select 1 from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type);
   --只有羊城通、纸票、羊城通发票需打印逻辑卡号

   update T#IC_RCT_BL_OUT_QC_RS_COMBINE a set a.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_station_id=b.station_id)
          where exists (select 1 from ic_cod_station b where a.exit_station_id=b.station_id);

    --add 20120426 luojun 添加多日票模式相关字段 查询pub_flag 更新限制模式名称
   --update #result_combine set a.mode_name=b.code_text from #result_combine a,pub_flag b where a.mode=b.code and b.type = 26;

   update T#IC_RCT_BL_OUT_QC_RS_COMBINE a set a.mode_name= (select b.code_text from pub_flag b where a.model=b.code and b.type = 26)
          where exists (select 1 from pub_flag b where a.model=b.code and b.type = 26);


--    select @endTime =getdate()
--    select '更新用时:'+convert(varchar(8),datediff(second,@beginTime,@endTime))
--    select @beginTime =getdate()

   --返回结果集到游标变量--


   OPEN p_cur FOR

   select
         ic_sub_desc, vaild_date,card_money,chinese_name,exit_stationid_name, mode_name,sum(out_num) out_num,verify_date,
         produce_date,
         detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id
         from T#IC_RCT_BL_OUT_QC_RS_COMBINE
         group by    ic_sub_desc,vaild_date,card_money,chinese_name,exit_stationid_name, mode_name,verify_date,
         produce_date,
         detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id;

    */
--    select @endTime =getdate()
--    select '总用时:'+convert(varchar(8),datediff(second,@orgBeginTime,@endTime))

  DELETE FROM T#IC_RCT_BL_OUT_QC_RS;
  DELETE FROM T#IC_RCT_BL_OUT_QC_RS_START;
  DELETE FROM T#IC_RCT_BL_OUT_QC_RS_END;
  DELETE FROM T#IC_RCT_BL_OUT_QC_RS_COMBINE;




end;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_COMMEN_DETAIL to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_COMMEN_DETAIL to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_CR
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_CR"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2--出库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_OUT_CR
  --功能:核查出库(HC)-单据导出-报表
  --创建者：  lindaquan
  --创建日期：20130719
  --输出: p_cur结果集
  -- 修改 增加ic_main_type过滤条件 oywl 20150416  
  -------------------------------------------------------------------------------
IS

BEGIN
  IF p_bill_no IS NOT NULL THEN

     OPEN p_cur FOR
          SELECT bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,remarks,card_money,vaild_date,sum(out_num) out_num ,
                 reason_describe,area_name, ic_sub_desc,distribute_bill_no , billNoMap,mode_name,verify_date,detail_place,Chinese_Name,exit_stationid_name
          FROM (
            select A.bill_no,A.bill_date,A.form_maker,A.drawer,A.administer,A.accounter,A.verify_person,G.remark remarks,
                   B.card_money,B.vaild_date,A.verify_date,C.detail_place,
                   CASE when C.section_num is not null and  C.section_num <>0 then  C.section_num
                      ELSE B.out_num END out_num,
                   D.reason_describe,E.area_name, F.ic_sub_desc,A.distribute_bill_no ,'对应核查计划单:' billNoMap,H.Code_Text mode_name
                   ,I.CHINESE_NAME,J.Chinese_Name exit_stationid_name
            from ic_out_bill A,ic_out_bill_detail B,ic_out_bill_detail_box C,ic_cod_in_out D,ic_cod_area E,ic_cod_card_sub_type F
                 ,ic_out_cancel_plan G,pub_flag H,ic_cod_station I,ic_cod_station J
            where A.bill_no =p_bill_no and
                  A.bill_no = B.bill_no and
                  B.bill_no =C.bill_no(+) and
                  trim(to_char(B.water_no)) =trim(C.water_no(+))
                  AND B.Reason_Id = D.REASON_ID(+)
                  AND B.Storage_Id = E.Storage_Id(+) AND B.Area_Id = E.AREA_ID(+)
                  AND RTRIM(b.ic_main_type) = F.Ic_Main_Type(+)
                  AND RTRIM(B.Ic_Sub_Type)=F.Ic_Sub_Type(+)
                  AND A.BILL_NO=G.OUT_BILL_NO(+)
                  AND B.Model=H.code(+) AND H.TYPE='26'
                  AND B.Station_Id=I.Station_Id(+)
                  AND B.Exit_Station_Id=J.Station_Id(+)
          )
          group by  bill_no,bill_date,form_maker,drawer,administer,accounter, verify_person,remarks,
                    reason_describe,area_name, ic_sub_desc ,distribute_bill_no,card_money,billNoMap,out_num,vaild_date
                    ,mode_name,verify_date,detail_place,Chinese_Name,exit_stationid_name,vaild_date;

  ELSE
    --单号为空时,返回空值
    OPEN p_cur FOR
       SELECT '' bill_no,'' bill_date,'' form_maker,'' drawer,'' administer,'' accounter,'' verify_person,'' remarks,
       '' card_money,''  out_num ,'' reason_describe,'' area_name, '' ic_sub_desc,'' distribute_bill_no , '' billNoMap,
       '' vaild_date,'' mode_name,'' verify_date,'' detail_place,'' Chinese_Name,'' exit_stationid_name
          FROM dual;

  END IF;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_CR to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_CR to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_DETAIL_PC
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_DETAIL_PC" (
    p_cur     IN OUT sys_refcursor,--返回结果集
    p_bill_no varchar2
)
as
--------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_BL_OUT_DETAIL_PC
--功能描述：出库单明细
--创建者：  mqf
--创建日期：2013-10-10
-------------------------------------------------------------------------------


begin

--原始数据临时表
--清理临时数据
  DELETE FROM T#IC_RCT_BL_OUT_PC_RS;
  --DELETE FROM T#IC_RCT_BL_OUT_PC_RS_START;
  --DELETE FROM T#IC_RCT_BL_OUT_PC_RS_END;
  --DELETE FROM T#IC_RCT_BL_OUT_PC_RS_COMBINE;


    insert into T#IC_RCT_BL_OUT_PC_RS( verify_date,ic_main_type,ic_sub_type,out_num,vaild_date,card_money,line_id,station_id,exit_station_id,model,
                       detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,section_num,produce_date
                       )


                select A.verify_date,B.ic_main_type,B.ic_sub_type,
                        case
                          when C.section_num is not null and  C.section_num <>0 then C.section_num
                          else B.out_num
                        end
                        ,
                        B.vaild_date,B.card_money,
                       NVL(B.line_id,' '),
                       NVL(B.station_id,' '),
                                   NVL(B.exit_station_id,' '),
                       NVL(B.model,' '),
                        C.detail_place,C.start_box_id,C.end_box_id,C.start_logical_id,C.end_logical_id,C.section_num,C.produce_date
                        from ic_out_bill A ,ic_out_bill_detail B,ic_out_bill_detail_box C
                        where A.bill_no =p_bill_no and
                              A.bill_no = B.bill_no and
                              B.bill_no =C.bill_no(+) and
                              substr(to_char(B.water_no),0,18) =C.water_no(+);



   update  T#IC_RCT_BL_OUT_PC_RS set  vaild_date = null where (line_id =null or line_id ='00') and (station_id =null or station_id ='00');

   update T#IC_RCT_BL_OUT_PC_RS A set  A.chinese_name=(select B.chinese_name from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id )
            where EXISTS (select 1 from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id);


   update T#IC_RCT_BL_OUT_PC_RS A set  A.ic_sub_desc=(select B.ic_sub_desc from ic_cod_card_sub_type B where A.ic_main_type=B.ic_main_type and A.ic_sub_type = B.ic_sub_type)
            where EXISTS (select 1 from ic_cod_card_sub_type B where A.ic_main_type=B.ic_main_type and A.ic_sub_type = B.ic_sub_type);
   --只有羊城通、纸票、羊城通发票需打印逻辑卡号
   /*
   update T#IC_RCT_BL_OUT_PC_RS set   start_logical_id=' ',end_logical_id=' '
            where ic_main_type not in('6','9','34','1','2','40');
   */

   -- 添加多日票模式相关字段 更新出站站点名称

   update T#IC_RCT_BL_OUT_PC_RS a set a.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_station_id=b.station_id)
          where exists (select 1 from ic_cod_station b where a.exit_station_id=b.station_id);

    --添加多日票模式相关字段 查询pub_flag 更新限制模式名称

   update T#IC_RCT_BL_OUT_PC_RS a set a.mode_name= (select b.code_text from pub_flag b where a.model=b.code and b.type = 26)
          where exists (select 1 from pub_flag b where a.model=b.code and b.type = 26);

   update T#IC_RCT_BL_OUT_PC_RS A set A.ic_sub_desc=(select B.ic_sub_desc from ic_cod_card_sub_type B where trim(A.ic_main_type)=B.ic_main_type and trim(A.ic_sub_type) = B.ic_sub_type)
          where exists(select B.ic_sub_desc from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type);


   --返回结果集到游标变量--
   OPEN p_cur FOR

   select
         ic_sub_desc, vaild_date,card_money,chinese_name,exit_stationid_name, mode_name,out_num,verify_date,
         produce_date,
         detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id
         from T#IC_RCT_BL_OUT_PC_RS;




  DELETE FROM T#IC_RCT_BL_OUT_PC_RS;
  --DELETE FROM T#IC_RCT_BL_OUT_PC_RS_START;
  --DELETE FROM T#IC_RCT_BL_OUT_PC_RS_END;
  --DELETE FROM T#IC_RCT_BL_OUT_PC_RS_COMBINE;




end;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_DETAIL_PC to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_DETAIL_PC to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_DETAIL_QC
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_DETAIL_QC" (
    p_cur     IN OUT sys_refcursor,--返回结果集
    p_bill_no varchar2
)
as
--------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_BL_OUT_DETAIL_QC
--功能描述：出库单明细
--创建者：  mqf
--创建日期：2013-09-16
--修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票,屏蔽原有'9'
-------------------------------------------------------------------------------


begin

--原始数据临时表
--清理临时数据
  DELETE FROM T#IC_RCT_BL_OUT_QC_RS;
  --DELETE FROM T#IC_RCT_BL_OUT_QC_RS_START;
  --DELETE FROM T#IC_RCT_BL_OUT_QC_RS_END;
  --DELETE FROM T#IC_RCT_BL_OUT_QC_RS_COMBINE;


    insert into T#IC_RCT_BL_OUT_QC_RS( verify_date,ic_main_type,ic_sub_type,out_num,vaild_date,card_money,line_id,station_id,exit_station_id,model,
                       detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,section_num,produce_date
                       )


                select A.verify_date,B.ic_main_type,B.ic_sub_type,
                        case
                          when C.section_num is not null and  C.section_num <>0 then C.section_num
                          else B.out_num
                        end
                        ,
                        B.vaild_date,B.card_money,
                       NVL(B.line_id,' '),
                       NVL(B.station_id,' '),
                                   NVL(B.exit_station_id,' '),
                       NVL(B.model,' '),
                        C.detail_place,C.start_box_id,C.end_box_id,C.start_logical_id,C.end_logical_id,C.section_num,C.produce_date
                        from ic_out_bill A ,ic_out_bill_detail B,ic_out_bill_detail_box C
                        where A.bill_no =p_bill_no and
                              A.bill_no = B.bill_no and
                              B.bill_no =C.bill_no(+) and
                              substr(to_char(B.water_no),0,18) =C.water_no(+);






   update  T#IC_RCT_BL_OUT_QC_RS set  vaild_date = null where (line_id =null or line_id ='00') and (station_id =null or station_id ='00');

   update T#IC_RCT_BL_OUT_QC_RS A set  A.chinese_name=(select B.chinese_name from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id )
            where EXISTS (select 1 from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id);


   update T#IC_RCT_BL_OUT_QC_RS A set  A.ic_sub_desc=(select B.ic_sub_desc from ic_cod_card_sub_type B where A.ic_main_type=B.ic_main_type and A.ic_sub_type = B.ic_sub_type)
            where EXISTS (select 1 from ic_cod_card_sub_type B where A.ic_main_type=B.ic_main_type and A.ic_sub_type = B.ic_sub_type);
   --只有羊城通、纸票、羊城通发票需打印逻辑卡号
   update T#IC_RCT_BL_OUT_QC_RS set   start_logical_id=' ',end_logical_id=' '
            --where ic_main_type not in('6','9','34','1','2','40');
      --2010714 modify by mqf 没有'34'
      where ic_main_type not in('6','1','2','40','7','8','9');


   update T#IC_RCT_BL_OUT_QC_RS a set a.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_station_id=b.station_id)
          where exists (select 1 from ic_cod_station b where a.exit_station_id=b.station_id);


   update T#IC_RCT_BL_OUT_QC_RS a set a.mode_name= (select b.code_text from pub_flag b where a.model=b.code and b.type = 26)
          where exists (select 1 from pub_flag b where a.model=b.code and b.type = 26);

   update T#IC_RCT_BL_OUT_QC_RS A set A.ic_sub_desc=(select B.ic_sub_desc from ic_cod_card_sub_type B where trim(A.ic_main_type)=B.ic_main_type and trim(A.ic_sub_type) = B.ic_sub_type)
          where exists(select 1 from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type);




   --返回结果集到游标变量--
   OPEN p_cur FOR

   select
         ic_sub_desc, vaild_date,card_money,chinese_name,exit_stationid_name, mode_name,out_num,verify_date,
         produce_date,
         detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id
         from T#IC_RCT_BL_OUT_QC_RS;




  DELETE FROM T#IC_RCT_BL_OUT_QC_RS;
 -- DELETE FROM T#IC_RCT_BL_OUT_QC_RS_START;
  --DELETE FROM T#IC_RCT_BL_OUT_QC_RS_END;
  --DELETE FROM T#IC_RCT_BL_OUT_QC_RS_COMBINE;




end;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_DETAIL_QC to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_DETAIL_QC to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_DISTRIBUTE
prompt ==============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_DISTRIBUTE"
(   p_cur       IN OUT sys_refcursor,--返回结果集
    p_bill_no   IN  VARCHAR2--出库单号

)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_OUT_DISTRIBUTE
  --功能:配票出库
  --创建者：  mqf
  --创建日期：2013-10-10
  -------------------------------------------------------------------------------

as

   v_distributePlanBillNo char(12);
   v_reasonId char(2);
   v_icMainType char(2);
   v_tempCount int;
begin


  --DELETE FROM T#IC_RCT_BL_OUT_DIS_REASON;
  DELETE FROM T#IC_RCT_BL_OUT_DIS_RESULT;
  DELETE FROM T#IC_RCT_BL_OUT_DIS_RESULT_GP;
  /*
  insert into T#IC_RCT_BL_OUT_DIS_REASON(reason_id,chinese_name)
                values('18','其他部门');


  insert into T#IC_RCT_BL_OUT_DIS_REASON(reason_id,chinese_name)
                values('19','员工票办理点');
   */

   --配票计划单
   select count(*) into v_tempCount
          from ic_out_distribute_bill
          where bill_no=p_bill_no;
   IF v_tempCount > 0 THEN
     select distribute_plan_bill_no into v_distributePlanBillNo
            from ic_out_distribute_bill
            where bill_no=p_bill_no;
   END IF;
   --配票原因
   select count(*) into v_tempCount
                    from ic_out_distribute_plan_dtl
           where bill_no=v_distributePlanBillNo;
   IF v_tempCount > 0 THEN
     select reason_id, ic_main_type into v_reasonId,v_icMainType
                    from ic_out_distribute_plan_dtl
            where bill_no=v_distributePlanBillNo and rownum=1;
   END IF;


   ----20151226 modify by mqf 增加B.exit_line_id
   insert into T#IC_RCT_BL_OUT_DIS_RESULT(  bill_no,distribute_plan_bill_no,out_bill_no,receive_unit,
                        distribute_man,receive_man,bill_date,verify_person,remark,verify_date,
                        ic_main_type,ic_sub_type,distribute_quantity,card_money,
                        valid_date,line_id,station_id,exit_line_id,exit_station_id,model,distribute_line_id,distribute_station_id,
                        detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,section_num,reason_id,produce_date )

                 select  A.bill_no,A.distribute_plan_bill_no,A.out_bill_no,A.receive_unit,
                        A.distribute_man,A.receive_man,A.bill_date,A.verify_person,A.remark,A.verify_date,
                        B.ic_main_type,B.ic_sub_type,B.distribute_quantity,B.card_money,
                        B.valid_date,B.line_id,B.station_id,B.exit_line_id,B.exit_station_id,B.model,B.distribute_line_id,B.distribute_station_id,
                        C.detail_place,C.start_box_id,C.end_box_id,C.start_logical_id,C.end_logical_id,C.section_num,v_reasonId,C.produce_date
                 from ic_out_distribute_bill A,ic_out_distribute_detail B,ic_out_distribute_dtl_box C
                 where A.bill_no =p_bill_no and
                      A.bill_no = B.bill_no and
                      B.bill_no = C.bill_no(+) and B.water_no =C.water_no(+);

   update T#IC_RCT_BL_OUT_DIS_RESULT set distribute_quantity= section_num  where   section_num is not null and  section_num <>0;



   update T#IC_RCT_BL_OUT_DIS_RESULT A
            set  chinese_name=(select B.chinese_name
                from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id)
            where exists (select 1 from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id);

   update T#IC_RCT_BL_OUT_DIS_RESULT A
            set  distribute_chinese_name=(select b.LINE_NAME
                from ic_cod_line B where rtrim(A.distribute_line_id)=rtrim(B.line_id) )
            where exists (select 1 from ic_cod_line B where rtrim(A.distribute_line_id)=rtrim(B.line_id) );

   update T#IC_RCT_BL_OUT_DIS_RESULT A
            set  ic_sub_desc=(select B.ic_sub_desc
                from ic_cod_card_sub_type B where trim(A.ic_main_type)=B.ic_main_type and trim(A.ic_sub_type) = B.ic_sub_type)
            where exists (select 1 from ic_cod_card_sub_type B where trim(A.ic_main_type)=B.ic_main_type and trim(A.ic_sub_type) = B.ic_sub_type);

   --更新出库原因是其他出库及配票员工票办理点的配票车站名称
     --update T#IC_RCT_BL_OUT_DIS_RESULT A set  distribute_chinese_name=(select B.chinese_name from T#IC_RCT_BL_OUT_DIS_REASON B where A.reason_id=B.reason_id)
     --       where exists (select 1 from T#IC_RCT_BL_OUT_DIS_REASON B where A.reason_id=B.reason_id);
    update T#IC_RCT_BL_OUT_DIS_RESULT A set  distribute_chinese_name=(CASE WHEN A.reason_id = '18' THEN '其他部门'
                                                                          WHEN A.reason_id = '19' THEN '员工票办理点'
                                                                        WHEN A.reason_id = '17' THEN '配票线路'
                                                                          ELSE A.reason_id END);

   --add 20120426 luojun 添加多日票模式相关字段 更新出站站点名称
   --20151226 modify by mqf 增加出站线路关联
   update T#IC_RCT_BL_OUT_DIS_RESULT A set a.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_line_id=b.line_id and a.exit_station_id=b.station_id)
            where exists (select 1 from ic_cod_station b where a.exit_line_id=b.line_id and a.exit_station_id=b.station_id);

    --add 20120426 luojun 添加多日票模式相关字段 查询pub_flag 更新限制模式名称
   update T#IC_RCT_BL_OUT_DIS_RESULT A set a.mode_name=(select b.code_text from pub_flag b where a.model=b.code and b.type = 26)
           where exists (select 1 from pub_flag b where a.model=b.code and b.type = 26);



   /*
   --单程票配票其他部门没有逻辑卡号
   insert into T#IC_RCT_BL_OUT_DIS_RESULT_GP(  bill_no,out_bill_no,receive_unit,
                        distribute_man,receive_man,bill_date,verify_person,remark,verify_date,
                        ic_sub_desc,distribute_quantity,card_money,
                        valid_date,chinese_name,exit_stationid_name,mode_name,distribute_chinese_name,
                        start_box_id,end_box_id,start_logical_id,end_logical_id,distribute_line_id,distribute_station_id,ic_main_type,ic_sub_type,produce_date )
              select   bill_no,out_bill_no,receive_unit,
                          distribute_man,receive_man,bill_date,verify_person,remark,verify_date,
                           ic_sub_desc,sum(distribute_quantity) distribute_quantity,card_money,
                          valid_date,chinese_name,exit_stationid_name,mode_name,distribute_chinese_name,
                          start_box_id,end_box_id,' ' start_logical_id ,' ' end_logical_id,
                          TO_NUMBER(distribute_line_id) distribute_line_id,TO_NUMBER(distribute_station_id ) distribute_station_id,

                          ic_main_type,ic_sub_type,produce_date
                       from T#IC_RCT_BL_OUT_DIS_RESULT
                       where ic_main_type ='12' and reason_id='18'
                       group by bill_no,out_bill_no,receive_unit,
                          distribute_man,receive_man,bill_date,verify_person,remark,verify_date,

                          TO_NUMBER(distribute_line_id) ,TO_NUMBER(distribute_station_id ),
                          ic_main_type,ic_sub_type,card_money,valid_date,produce_date,start_box_id,end_box_id,

                          ic_sub_desc,chinese_name,exit_stationid_name,mode_name,distribute_chinese_name;
   */
   insert into T#IC_RCT_BL_OUT_DIS_RESULT_GP(  bill_no,out_bill_no,receive_unit,
                        distribute_man,receive_man,bill_date,verify_person,remark,verify_date,
                        ic_sub_desc,distribute_quantity,card_money,
                        valid_date,chinese_name,exit_stationid_name,mode_name,distribute_chinese_name,
                        start_box_id,end_box_id,start_logical_id,end_logical_id,distribute_line_id,distribute_station_id,ic_main_type,ic_sub_type,produce_date )
                select   bill_no,out_bill_no,receive_unit,
                            distribute_man,receive_man,bill_date,verify_person,remark,verify_date,
                            ic_sub_desc,distribute_quantity,card_money,
                            valid_date,chinese_name,exit_stationid_name,mode_name,distribute_chinese_name,
                            start_box_id,end_box_id,start_logical_id,end_logical_id,
                            TO_NUMBER(distribute_line_id) distribute_line_id,TO_NUMBER(distribute_station_id ) distribute_station_id,
                            ic_main_type,IC_SUB_TYPE,produce_date
                         from T#IC_RCT_BL_OUT_DIS_RESULT
                        -- where ic_main_type !='12' and reason_id !='18'
                         order by TO_NUMBER(distribute_line_id), TO_NUMBER(distribute_station_id),
                                  ic_main_type,ic_sub_type,card_money,valid_date,produce_date,
                                  start_box_id,end_box_id,start_logical_id,end_logical_id;



   OPEN p_cur FOR
   select bill_no,out_bill_no,receive_unit,
                        distribute_man,receive_man,bill_date,verify_person,remark,verify_date,
                        ic_sub_desc,distribute_quantity,card_money,
                        valid_date,chinese_name,exit_stationid_name,mode_name,distribute_chinese_name,
                        start_box_id,end_box_id,start_logical_id,end_logical_id,distribute_line_id,distribute_station_id,ic_main_type,ic_sub_type,produce_date
                        from T#IC_RCT_BL_OUT_DIS_RESULT_GP ;







end;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_DISTRIBUTE to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_DISTRIBUTE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_DIS_PLAN
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_DIS_PLAN"
(   p_cur       IN OUT sys_refcursor,--返回结果集
    p_bill_no   IN  VARCHAR2--出库单号

)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_OUT_DIS_PLAN
  --功能:配票出库
  --创建者：  mqf
  --创建日期：2013-10-10
  -------------------------------------------------------------------------------
as


  v_outBillNo char(12);
  v_tempCount int;

begin
    /*
    insert into #restrict_name(restrict_flag,restrict_flag_name)
               values('0','否');
    insert into #restrict_name(restrict_flag,restrict_fla g_name)
               values('1','是');

    insert into #reason_name(reason_id,chinese_name)
                values('18','其他部门');


    insert into #reason_name(reason_id,chinese_name)
                values('19','员工票办理点');
    */
  DELETE FROM  T#IC_RCT_BL_OUT_DIS_PL_RESULT;
  DELETE FROM  T#IC_RCT_BL_OUT_DIS_PL_RS_SUM;
  DELETE FROM  T#IC_RCT_BL_OUT_DIS_PL_RS_GP;


  insert into T#IC_RCT_BL_OUT_DIS_PL_RESULT(  bill_no,out_bill_no,distribute_bill_no,form_maker,bill_date,record_flag,
                        verify_date,verify_person,receive_unit,distribute_man,receive_man,remark,
                        distribute_line_id,distribute_station_id,ic_main_type,ic_sub_type,
                        distribute_quantity,card_money,vaild_date,restrict_flag,
                        storage_id,area_id,start_logical_id,end_logical_id,
                        reason_id,box_id,line_id,station_id,exit_station_id,model)

  select  A.bill_no,A.out_bill_no,A.distribute_bill_no,A.form_maker,A.bill_date,A.record_flag,
          A.verify_date,A.verify_person,A.receive_unit,A.distribute_man,A.receive_man,A.remark,
          B.distribute_line_id,B.distribute_station_id,B.ic_main_type,B.ic_sub_type,
          B.distribute_quantity,B.card_money,B.vaild_date,B.restrict_flag,
          B.storage_id,B.area_id,B.start_logical_id,B.end_logical_id,
          B.reason_id,B.box_id,B.line_id,B.station_id,B.exit_station_id,B.model
  from ic_out_distribute_plan_bill A,ic_out_distribute_plan_dtl B
  where A.bill_no =p_bill_no and
        A.bill_no = B.bill_no;

  select count(*) into v_tempCount from T#IC_RCT_BL_OUT_DIS_PL_RESULT;
  --取多条记的录out_bill_no值是相同的，取第一条记录的值
  IF v_tempCount>0 THEN
      select out_bill_no into v_outBillNo from T#IC_RCT_BL_OUT_DIS_PL_RESULT where rownum=1;
  END IF;

  insert into T#IC_RCT_BL_OUT_DIS_PL_RS_SUM(ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,exit_station_id,model,section_num)
  select
         B.ic_main_type,B.ic_sub_type,B.vaild_date,B.card_money,B.line_id,B.station_id,B.exit_station_id,B.model,
         sum(C.section_num)
  from   ic_out_bill_detail B,ic_out_bill_detail_box C
  where      B.bill_no =v_outBillNo and
              B.bill_no =C.bill_no(+) and
              --convert(varchar(18),B.water_no) =C.water_no(+)
              substr(to_char(B.water_no),0,18) =C.water_no(+)
  group by
           B.ic_main_type,B.ic_sub_type,B.card_money,B.vaild_date,B.line_id,B.station_id,B.exit_station_id,B.model;






  /*
  update T#IC_RCT_BL_OUT_DIS_PL_RESULT A
            set  restrict_flag_name=(select B.restrict_flag_name
                  from #restrict_name B where A.restrict_flag = B.restrict_flag)
            where exists (select 1 from #restrict_name B where A.restrict_flag = B.restrict_flag);
  */

  update T#IC_RCT_BL_OUT_DIS_PL_RESULT A
            set  restrict_flag_name=(CASE WHEN A.restrict_flag='0' THEN '否'
                                     WHEN A.restrict_flag='1' THEN '是'
                                     ELSE A.restrict_flag END);





   update T#IC_RCT_BL_OUT_DIS_PL_RESULT A
            set  area_name=(select B.area_name
                  from ic_cod_area B where A.storage_id=B.storage_id and A.area_id = B.area_id)
            where exists (select 1 from ic_cod_area B where A.storage_id=B.storage_id and A.area_id = B.area_id);


   update T#IC_RCT_BL_OUT_DIS_PL_RESULT A
            set  chinese_name=(select B.chinese_name
                  from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id)
            where exists (select 1 from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id);
      --更新出库原因是其他出库及配票员工票办理点的配票车站名称
    --                            update T#IC_RCT_BL_OUT_DIS_PL_RESULT set  chinese_name=B.chinese_name
    --        from T#IC_RCT_BL_OUT_DIS_PL_RESULT A,#reason_name B
    --        where A.reason_id=B.reason_id

  update T#IC_RCT_BL_OUT_DIS_PL_RESULT A
            set  distribute_chinese_name=(select B.chinese_name
                  from ic_cod_station B where A.distribute_line_id=B.line_id and A.distribute_station_id = B.station_id)
            where exists (select 1 from ic_cod_station B where A.distribute_line_id=B.line_id and A.distribute_station_id = B.station_id);

     --更新出库原因是其他出库及配票员工票办理点的配票车站名称
     /*
     update T#IC_RCT_BL_OUT_DIS_PL_RESULT A
            set  distribute_chinese_name=(selsect B.chinese_name
                  from #reason_name B where A.reason_id=B.reason_id)
            where exists (selsect 1 from #reason_name B where A.reason_id=B.reason_id);
      */
      update T#IC_RCT_BL_OUT_DIS_PL_RESULT A
            set  distribute_chinese_name=(select b.LINE_NAME
                from ic_cod_line B where rtrim(A.distribute_line_id)=rtrim(B.line_id) )
            where exists (select 1 from ic_cod_line B where rtrim(A.distribute_line_id)=rtrim(B.line_id) );




   update T#IC_RCT_BL_OUT_DIS_PL_RESULT A
            set  ic_sub_desc=(select B.ic_sub_desc
                  from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type)
            where exists (select 1 from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type);

    --add 20120426 luojun 添加多日票模式相关字段 更新出站站点名称
   update T#IC_RCT_BL_OUT_DIS_PL_RESULT A
            set a.exit_stationid_name=(select b.chinese_name
                  from ic_cod_station b where a.exit_station_id=b.station_id)
            where exists (select 1 from ic_cod_station b where a.exit_station_id=b.station_id);

    --add 20120426 luojun 添加多日票模式相关字段 查询pub_flag 更新限制模式名称
   update T#IC_RCT_BL_OUT_DIS_PL_RESULT A
            set a.mode_name=(select b.code_text
                  from pub_flag b where a.model=b.code and b.type = 26)
            where exists (select 1 from pub_flag b where a.model=b.code and b.type = 26);




   insert into T#IC_RCT_BL_OUT_DIS_PL_RS_GP(bill_no,form_maker,bill_date,verify_date,
            distribute_line_id,distribute_station_id,
            distribute_quantity ,card_money,vaild_date,restrict_flag,
            restrict_flag_name,chinese_name,distribute_chinese_name,ic_sub_desc,exit_stationid_name,mode_name,
            line_id,station_id,exit_station_id,model,ic_main_type,ic_sub_type)

   select   bill_no,form_maker,bill_date,verify_date,
            distribute_line_id,distribute_station_id,
            sum(distribute_quantity) distribute_quantity,card_money,vaild_date,restrict_flag,
            restrict_flag_name,chinese_name,distribute_chinese_name,ic_sub_desc,exit_stationid_name,mode_name,
            line_id,station_id,exit_station_id,model,ic_main_type,ic_sub_type
         from T#IC_RCT_BL_OUT_DIS_PL_RESULT
         group by
              bill_no,form_maker,bill_date,verify_date,
             distribute_line_id,distribute_station_id,
             ic_main_type,ic_sub_type,card_money,vaild_date,line_id,station_id,exit_station_id,model,
             restrict_flag,restrict_flag_name,chinese_name,distribute_chinese_name,ic_sub_desc,exit_stationid_name,mode_name;




   update T#IC_RCT_BL_OUT_DIS_PL_RS_GP A
           set distribute_quantity=(Select B.section_num from T#IC_RCT_BL_OUT_DIS_PL_RS_SUM B
                                    where A.ic_main_type =B.ic_main_type and
                                          A.ic_sub_type  =B.ic_sub_type and
                                          A.card_money =B.card_money and
                                          --(convert(varchar(8),A.vaild_date,112)=convert(varchar(8),B.vaild_date,112) or A.vaild_date is null)and
                                          (to_char(A.vaild_date,'yyyyMMdd')=to_char(B.vaild_date,'yyyyMMdd') or A.vaild_date is null) and
                                          A.line_id =B.line_id and
                                          A.station_id = B.station_id and
                                          A.exit_station_id =B.exit_station_id and
                                          A.model = B.model and
                                          (A.distribute_quantity is null or A.distribute_quantity =0) and
                                          B.section_num is not null and B.section_num <>0)
           where exists (Select 1 from T#IC_RCT_BL_OUT_DIS_PL_RS_SUM B
                          where A.ic_main_type =B.ic_main_type and
                                A.ic_sub_type  =B.ic_sub_type and
                                A.card_money =B.card_money and
                                --(convert(varchar(8),A.vaild_date,112)=convert(varchar(8),B.vaild_date,112) or A.vaild_date is null)and
                                (to_char(A.vaild_date,'yyyyMMdd')=to_char(B.vaild_date,'yyyyMMdd') or A.vaild_date is null) and
                                A.line_id =B.line_id and
                                A.station_id = B.station_id and
                                A.exit_station_id =B.exit_station_id and
                                A.model = B.model and
                                (A.distribute_quantity is null or A.distribute_quantity =0) and
                                B.section_num is not null and B.section_num <>0);


   OPEN p_cur FOR
   select   bill_no,form_maker,bill_date,verify_date,
            distribute_line_id,distribute_station_id,
            distribute_quantity ,card_money,vaild_date,restrict_flag,
            restrict_flag_name,chinese_name,distribute_chinese_name,ic_sub_desc,exit_stationid_name,mode_name,
            line_id,station_id,ic_main_type,ic_sub_type
         from T#IC_RCT_BL_OUT_DIS_PL_RS_GP
         order by  to_number(distribute_line_id),to_number(distribute_station_id),ic_main_type,ic_sub_type,card_money,vaild_date;










end;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_DIS_PLAN to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_DIS_PLAN to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_LEND
prompt ========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_LEND"
(  p_cur            IN OUT sys_refcursor,--返回结果集
  p_bill_no          IN  VARCHAR2--出库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_OUT_LEND
  --功能:借票出库
  --创建者：  liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS

v_billNoOut char(12);
v_recordFlag char(1) ;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
if p_bill_no is not null then
    select record_flag into v_recordFlag from ic_out_lend_bill a where a.bill_no=p_bill_no;

	----20151226 modify by mqf 增加B.exit_line_id
    if(v_recordFlag ='3') then--未审核单据
      insert into t#ic_lend_temp_result(bill_no,out_bill_no,distribute_man,receive_man,bill_date,unit_id,
      return_flag,verify_person,verify_date,record_flag,remarks,
      storage_id,area_id,ic_main_type,ic_sub_type,lend_quantity,vaild_date,card_money,
      line_id,station_id,exit_line_id,exit_station_id,model,start_box_id,end_box_id,start_logical_id,end_logical_id,card_type)
    select A.bill_no,A.out_bill_no,A.distribute_man,A.receive_man,A.bill_date,A.unit_id,
    A.return_flag,A.verify_person,A.verify_date,A.record_flag,A.remark,
    B.storage_id,B.area_id,B.ic_main_type,B.ic_sub_type,B.lend_quantity,B.vaild_date,card_money,
    B.line_id,B.station_id,B.exit_line_id,B.exit_station_id,B.model,B.start_box_id,B.end_box_id,B.start_logical_id,B.end_logical_id,B.card_type
    from ic_out_lend_bill A,ic_out_lend_bill_detail B
    where A.bill_no =p_bill_no and
    A.bill_no = B.bill_no;
    --审核时间临时改为单据时间，对未审核单据
    update t#ic_lend_temp_result set verify_date=bill_date;



    --从出库单中找出详细位置
    else --审核单据
      begin
        select out_bill_no into v_billNoOut from ic_out_lend_bill where bill_no=p_bill_no;
 
        ----20151226 modify by mqf 增加A.exit_line_id
        insert into t#ic_lend_temp_result( bill_no,storage_id,area_id,ic_main_type,ic_sub_type,vaild_date,card_money,
          line_id,station_id,exit_line_id,exit_station_id,model,lend_quantity,
          start_box_id,end_box_id,start_logical_id,end_logical_id,section_num)
        select p_bill_no,A.storage_id,A.area_id,A.ic_main_type,A.ic_sub_type,A.vaild_date,A.card_money,
          A.line_id,A.station_id,A.exit_line_id,A.exit_station_id,A.model,A.out_num,
          B.start_box_id,B.end_box_id,B.start_logical_id,B.end_logical_id,B.section_num
          from ic_out_bill_detail A,ic_out_bill_detail_box B
          where  A.bill_no =B.bill_no(+) and A.water_no =B.water_no(+) and
          A.bill_no=v_billNoOut;
        --更新借票数量，如果按逻辑卡号出库或盒出库借票数量更新为section_num
        update t#ic_lend_temp_result set lend_quantity=section_num where section_num is not null and  section_num <>0 ;

        update t#ic_lend_temp_result set start_box_id =' ',end_box_id =' ',start_logical_id=' ',end_logical_id=' ' where  ic_main_type ='12';

		--20151229 modify by mqf 增加where exists(select 1 from t#ic_lend_temp_result A ,ic_out_lend_bill B where A.bill_no = B.bill_no)
        update t#ic_lend_temp_result  set (out_bill_no,distribute_man,receive_man ,bill_date ,unit_id,return_flag,verify_person,verify_date,record_flag,
                          remarks)
           =(select B.out_bill_no,B.distribute_man,B.receive_man,B.bill_date,B.unit_id,B.return_flag,B.verify_person,B.verify_date,B.record_flag,B.remark
           from t#ic_lend_temp_result A ,ic_out_lend_bill B where A.bill_no = B.bill_no)
		where exists(select 1 from t#ic_lend_temp_result A ,ic_out_lend_bill B where A.bill_no = B.bill_no);

      end;


    end if;

      update t#ic_lend_temp_result A set A.unit_name=(select B.unit_name from ic_cod_borrow_unit B where rtrim(A.unit_id) = rtrim(B.unit_id))
    where exists(select 1 from ic_cod_borrow_unit B where A.unit_id = B.unit_id);
      update t#ic_lend_temp_result A set A.card_type_name=(select B.card_type_name from t#ic_plan_card_type B where A.card_type = B.card_type)
    where exists(select B.card_type_name from t#ic_plan_card_type B where A.card_type = B.card_type);
       update t#ic_lend_temp_result A set A.area_name=(select B.area_name from ic_cod_area B where A.storage_id=B.storage_id and A.area_id = B.area_id)
    where exists(select B.area_name from ic_cod_area B where A.storage_id=B.storage_id and A.area_id = B.area_id);
       update t#ic_lend_temp_result A set A.chinese_name=(select B.chinese_name from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id)
    where exists(select B.chinese_name from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id);
       update t#ic_lend_temp_result A set A.ic_sub_desc=(select B.ic_sub_desc from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type )
    where exists(select B.ic_sub_desc from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type );
       --添加多日票模式相关字段 更新出站站点名称
	   --20151226 modify by mqf 增加出站线路关联
       update t#ic_lend_temp_result A set A.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_line_id=b.line_id and A.exit_station_id=b.station_id)
    where exists(select b.chinese_name from ic_cod_station b where a.exit_line_id=b.line_id and A.exit_station_id=b.station_id);
        --添加多日票模式相关字段 查询pub_flag 更新限制模式名称
       update t#ic_lend_temp_result A set A.mode_name=(select b.code_text from pub_flag b where a.model=b.code and b.type = 26)
    where exists(select b.code_text from pub_flag b where a.model=b.code and b.type = 26);
  open p_cur for
   select   bill_no,out_bill_no,distribute_man,receive_man,bill_date,verify_date,
    remarks,card_money,vaild_date,
    start_box_id,end_box_id,start_logical_id,end_logical_id,
    unit_name,area_name,chinese_name,ic_sub_desc,exit_stationid_name,mode_name,
    sum(lend_quantity) lend_quantity
   from t#ic_lend_temp_result
   group by  bill_no,out_bill_no,distribute_man,receive_man,bill_date,verify_date,
            remarks,card_money,vaild_date,
             start_box_id,end_box_id,start_logical_id,end_logical_id,
            unit_name,area_name,chinese_name,ic_sub_desc,exit_stationid_name,mode_name;

  else
    open p_cur for
   select  '' bill_no,'' out_bill_no,'' distribute_man,'' receive_man,'' bill_date,'' verify_date,
    '' remarks,'' card_money,'' vaild_date,
    '' start_box_id,'' end_box_id,'' start_logical_id,'' end_logical_id,
    '' unit_name,'' area_name,'' chinese_name,'' ic_sub_desc,'' exit_stationid_name,'' mode_name,
    0 lend_quantity
   from dual;

end if;





END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_LEND to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_LEND to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_PC
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_PC"
(
    p_cur     IN OUT sys_refcursor,--返回结果集
    p_bill_no IN varchar2         --出库单号
)
as
-------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_BL_OUT_PC
--功能描述：配票出库-单据导出-报表
--创建者：  mqf
--创建日期：2013-10-10
-------------------------------------------------------------------------------
begin

    OPEN p_cur FOR

    select  bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,
                            verify_date,distribute_bill_no,remark,
                           reason_id,storage_id,area_id,ic_main_type,ic_sub_type,sum(out_num) as out_num,vaild_date,card_money,line_id,station_id,card_type,
                           es_worktype_id,make_num,card_money_produce,section_num,
                           reason_describe,area_name,ic_sub_desc,billNoMap
    from (
        select A.bill_no,A.bill_date,A.form_maker,A.drawer,A.administer,A.accounter,A.verify_person,A.verify_date,A.distribute_bill_no,I.remark,
             B.reason_id,B.storage_id,B.area_id,B.ic_main_type,B.ic_sub_type,
             case
                when C.section_num is not null and  C.section_num <>0 then  C.section_num
                else
                   B.out_num
             end as out_num
             ,
             B.vaild_date,B.card_money,B.line_id,B.station_id,B.card_type,
             B.es_worktype_id,B.make_num,B.card_money_produce,NVL(C.section_num,0) as section_num,
             E.reason_describe,F.area_name,G.chinese_name,H.ic_sub_desc,'对应配票计划单:' as billNoMap
      from ic_out_bill A
           ,ic_out_bill_detail B
           ,ic_out_bill_detail_box C
           ,ic_cod_in_out E
           ,ic_cod_area F
           ,ic_cod_station G
           ,ic_cod_card_sub_type H
           ,ic_out_distribute_plan_bill I
      where A.bill_no =p_bill_no
            and A.bill_no = B.bill_no
            and B.bill_no =C.bill_no(+)
            and substr(B.water_no,0,18) =C.water_no(+)
            and B.reason_id = E.reason_id(+)
            and B.storage_id=F.storage_id(+) and B.area_id = F.area_id(+)
            and B.line_id=G.line_id(+) and B.station_id = G.station_id(+)
            and B.ic_main_type=H.ic_main_type(+) and B.ic_sub_type = H.ic_sub_type(+)
            and A.bill_no = I.bill_no(+)
    )
    group by  bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,verify_date,distribute_bill_no,remark,
                           reason_id,storage_id,area_id,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,card_type,
                           es_worktype_id,make_num,card_money_produce,section_num,
                           reason_describe,area_name,ic_sub_desc,billNoMap;




end;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_PC to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_PC to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_PLAN
prompt ========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_PLAN"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2--出库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_OUT_PLAN
  --功能:出库计划-单据导出-报表 --日工作计划(RJ)
  --创建者：  liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  --20151217 modify by mqf 增加B.exit_line_id
  if p_bill_no is not null then
    if(substr(p_bill_no,1,2)='RJ') then
      insert into t#ic_temp_plan_result ( bill_no,out_bill_no,bill_date,form_maker,operator,verify_person,
            execute_date,verify_date,record_flag,remarks,
            es_worktype_id,storage_id,area_id,ic_main_type,ic_sub_type,vaild_date,line_id,station_id,exit_line_id,exit_station_id,model,
            draw_quantity,make_quantity,machine_no,card_type,card_money_produce)
      select A.bill_no,A.out_bill_no,A.bill_date,A.form_maker,A.operator,A.verify_person,
            A.execute_date,A.verify_date,A.record_flag,A.remark,
            B.es_worktype_id,B.storage_id,B.area_id,B.ic_main_type,B.ic_sub_type,B.vaild_date,B.line_id,B.station_id,B.exit_line_id,B.exit_station_id,B.model,
            B.draw_quantity,B.make_quantity,B.machine_no,B.card_type,B.card_money_produce
      from ic_out_date_plan A,ic_out_date_plan_detail B
      where A.bill_no =p_bill_no and
            A.bill_no = B.bill_no;
    end if;


    update t#ic_temp_plan_result A set A.es_worktype_name=(select B.es_worktype_name from ic_cod_es_work_type B where A.es_worktype_id = B.es_worktype_id)
          where exists(select B.es_worktype_name from ic_cod_es_work_type B where A.es_worktype_id = B.es_worktype_id);
    update t#ic_temp_plan_result A set A.card_type_name=(select B.card_type_name from t#ic_plan_card_type B where A.card_type = B.card_type)
          where exists(select B.card_type_name from t#ic_plan_card_type B where A.card_type = B.card_type);
     update t#ic_temp_plan_result A set A.area_name=(select B.area_name from ic_cod_area B where A.storage_id=B.storage_id and A.area_id = B.area_id)
          where exists(select B.area_name from ic_cod_area B where A.storage_id=B.storage_id and A.area_id = B.area_id);

     update t#ic_temp_plan_result A set A.chinese_name=(select B.chinese_name from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id)
          where exists(select B.chinese_name from ic_cod_station B where A.line_id=B.line_id and A.station_id = B.station_id);
     update t#ic_temp_plan_result A set A.ic_sub_desc=(select B.ic_sub_desc from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type)
          where exists(select B.ic_sub_desc from ic_cod_card_sub_type B where rtrim(A.ic_main_type)=B.ic_main_type and rtrim(A.ic_sub_type) = B.ic_sub_type);
     --添加多日票模式相关字段 更新出站站点名称
     --20151217 modify by mqf 增加出站线路关联
     update t#ic_temp_plan_result a set a.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_line_id=b.line_id and a.exit_station_id=b.station_id)
          where exists(select b.chinese_name from ic_cod_station b where a.exit_line_id=b.line_id and a.exit_station_id=b.station_id);
     --添加多日票模式相关字段 查询pub_flag 更新限制模式名称
     update t#ic_temp_plan_result a set a.mode_name=(select b.code_text from pub_flag b where a.model=b.code and b.type = 26)
          where exists(select b.code_text from pub_flag b where a.model=b.code and b.type = 26);

     open p_cur for
         select bill_no,out_bill_no,bill_date,form_maker,operator,verify_person,remarks,verify_date,
            vaild_date,
           draw_quantity,make_quantity,machine_no,card_type,card_money_produce,
           es_worktype_name,area_name, chinese_name, exit_stationid_name,mode_name,card_type_name, ic_sub_desc,'日工作计划' title
           from t#ic_temp_plan_result;
  else
     open p_cur for
       select '' bill_no,'' out_bill_no,'' bill_date,'' form_maker,'' operator,'' verify_person,'' remarks,'' verify_date,
          '' vaild_date,
         0 draw_quantity,-0 make_quantity,'' machine_no,'' card_type,'' card_money_produce,
         '' es_worktype_name,'' area_name,'' chinese_name,'' exit_stationid_name,'' mode_name,'' card_type_name,'' ic_sub_desc,'日工作计划' title
         from dual;

  end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_PLAN to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_PLAN to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_PLAN_CR
prompt ===========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_PLAN_CR"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2--出库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_OUT_PLAN_CR
  --功能:出库计划-单据导出-报表 --核查计划(HJ)/日工作计划(RJ)
  --创建者：  lindaquan
  --创建日期：20130718
  --输出: p_cur结果集
  --修改：20150518 ouyangwenling 判断条件IC_MAIN_TYPE添加trim函数 
  -------------------------------------------------------------------------------
IS

BEGIN
  IF p_bill_no IS NOT NULL THEN

     --20151226 modify by mqf 1、增加出站线路关联B.exit_line_id=F.line_id(+) and
     --核查计划(HJ)
     OPEN p_cur FOR
          select A.bill_no,A.out_bill_no out_bill_no,A.bill_date,A.form_maker,A.operator,A.verify_person,
           A.remark remarks,A.verify_date,B.vaild_date,B.draw_quantity,B.make_quantity,B.machine_no,B.card_type,B.card_money card_money_produce,
           C.es_worktype_name,D.AREA_NAME,E.Chinese_Name, F.Chinese_Name exit_stationid_name,G.CODE_TEXT mode_name,H.CODE_TEXT card_type_name,I.IC_SUB_DESC,'核查计划' title
          from ic_out_cancel_plan A,ic_out_cancel_plan_detail B,ic_cod_es_work_type C,ic_cod_area D,ic_cod_station E,ic_cod_station F,pub_flag G
         ,pub_flag H,ic_cod_card_sub_type I
          where A.bill_no =p_bill_no
                AND A.bill_no = B.bill_no
                AND B.es_worktype_id=C.es_worktype_id(+)
                AND B.STORAGE_ID=D.STORAGE_ID(+) AND B.area_id=D.area_id(+)
                AND B.line_id=E.LINE_ID(+) AND B.station_id=E.Station_Id(+)
                and trim(b.IC_MAIN_TYPE)=trim(I.IC_MAIN_TYPE)
                AND B.exit_line_id=F.line_id(+) and B.Exit_Station_Id=F.Station_Id(+)
                AND B.Model=G.Code(+) AND G.Type=26
                AND B.Card_Type=H.CODE(+)
                AND trim(B.ic_sub_type)=trim(I.IC_SUB_TYPE(+));

  ELSE
    --单号为空时,返回空值
    OPEN p_cur FOR
        select '' bill_no,'' out_bill_no,'' bill_date,'' form_maker,'' operator,'' verify_person,
         '' remarks,'' verify_date,'' vaild_date,'' draw_quantity,'' make_quantity,'' machine_no
         ,'' card_type,'' card_money_produce,
         '' es_worktype_name,'' AREA_NAME,'' Chinese_Name, '' exit_stationid_name,'' mode_name,'' card_type_name,'' IC_SUB_DESC,'核查计划' title
        from dual;

  END IF;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_PLAN_CR to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_PLAN_CR to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_QC
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_QC"
(
    p_cur     IN OUT sys_refcursor,--返回结果集
    p_bill_no IN varchar2         --出库单号
)
as
-------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_BL_OUT_QC
--功能描述：清洗出库-单据导出-报表
--创建者：  mqf
--创建日期：2013-08-21
-------------------------------------------------------------------------------
begin

    OPEN p_cur FOR

    select  bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,
                            verify_date,distribute_bill_no,remark,
                           reason_id,storage_id,area_id,ic_main_type,ic_sub_type,sum(out_num) as out_num,vaild_date,card_money,line_id,station_id,card_type,
                           es_worktype_id,make_num,card_money_produce,section_num,
                           reason_describe,area_name,ic_sub_desc,billNoMap
    from (
        select A.bill_no,A.bill_date,A.form_maker,A.drawer,A.administer,A.accounter,A.verify_person,A.verify_date,A.distribute_bill_no,A.remark,
             B.reason_id,B.storage_id,B.area_id,B.ic_main_type,B.ic_sub_type,
             case
                when C.section_num is not null and  C.section_num <>0 then  C.section_num
                else
                   B.out_num
             end as out_num
             ,
             B.vaild_date,B.card_money,B.line_id,B.station_id,B.card_type,
             B.es_worktype_id,B.make_num,B.card_money_produce,NVL(C.section_num,0) as section_num,
             E.reason_describe,F.area_name,G.chinese_name,H.ic_sub_desc,'对应清洗出库单:' as billNoMap
      from ic_out_bill A
           ,ic_out_bill_detail B
           ,ic_out_bill_detail_box C
           ,ic_cod_in_out E
           ,ic_cod_area F
           ,ic_cod_station G
           ,ic_cod_card_sub_type H
      where A.bill_no =p_bill_no
            and A.bill_no = B.bill_no
            and B.bill_no =C.bill_no(+)
            and substr(B.water_no,0,18) =C.water_no(+)
            and B.reason_id = E.reason_id(+)
            and B.storage_id=F.storage_id(+) and B.area_id = F.area_id(+)
            and B.line_id=G.line_id(+) and B.station_id = G.station_id(+)
            and B.ic_main_type=H.ic_main_type(+) and B.ic_sub_type = H.ic_sub_type(+)
    )
    group by  bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,verify_date,distribute_bill_no,remark,
                           reason_id,storage_id,area_id,ic_main_type,ic_sub_type,vaild_date,card_money,line_id,station_id,card_type,
                           es_worktype_id,make_num,card_money_produce,section_num,
                           reason_describe,area_name,ic_sub_desc,billNoMap;




end;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_QC to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_QC to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_OUT_XC
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_OUT_XC"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2--出库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_OUT_XC
  --功能:销毁出库(XC)-单据导出-报表
  --创建者：  lindaquan
  --创建日期：20130719
  --输出: p_cur结果集
  -- 修改 增加ic_main_type过滤条件 oywl 20150416  
  -------------------------------------------------------------------------------
IS

BEGIN
  IF p_bill_no IS NOT NULL THEN

     --20151226 modify by mqf 1、增加出站线路关联B.exit_line_id=J.line_id(+) and; 
     OPEN p_cur FOR
          SELECT bill_no,bill_date,form_maker,drawer,administer,accounter,verify_person,remarks,card_money,vaild_date,sum(out_num) out_num ,
                 reason_describe,area_name, ic_sub_desc,distribute_bill_no , billNoMap,mode_name,verify_date,detail_place,Chinese_Name,exit_stationid_name
          FROM (
            select A.bill_no,A.bill_date,A.form_maker,A.drawer,A.administer,A.accounter,A.verify_person,A.remark remarks,
                   B.card_money,B.vaild_date,A.verify_date,C.detail_place,
                   CASE when C.section_num is not null and  C.section_num <>0 then  C.section_num
                      ELSE B.out_num END out_num,
                   D.reason_describe,E.area_name, F.ic_sub_desc,A.distribute_bill_no ,'对应单:' billNoMap,H.CODE_TEXT mode_name
                   ,I.CHINESE_NAME,J.Chinese_Name exit_stationid_name
            from ic_out_bill A,ic_out_bill_detail B,ic_out_bill_detail_box C,ic_cod_in_out D,ic_cod_area E,ic_cod_card_sub_type F
                 ,pub_flag H,ic_cod_station I,ic_cod_station J
            where A.bill_no =p_bill_no and
                  A.bill_no = B.bill_no and
                  B.bill_no =C.bill_no(+) and
                  trim(to_char(B.water_no)) =trim(C.water_no(+))
                  AND B.Reason_Id = D.REASON_ID(+)
                  AND B.Storage_Id = E.Storage_Id(+) AND B.Area_Id = E.AREA_ID(+)
                  and RTRIM(B.Ic_Main_Type) = F.Ic_Main_Type(+)
                  AND RTRIM(B.Ic_Sub_Type)=F.Ic_Sub_Type(+)
                  AND B.Model=H.code(+) AND H.TYPE='26'
                  AND B.Station_Id=I.Station_Id(+)
                  AND B.exit_line_id=J.line_id(+) and B.Exit_Station_Id=J.Station_Id(+)
          )
          group by  bill_no,bill_date,form_maker,drawer,administer,accounter, verify_person,remarks,
                    reason_describe,area_name, ic_sub_desc ,distribute_bill_no,card_money,billNoMap,out_num
                    ,mode_name,verify_date,detail_place,Chinese_Name,exit_stationid_name,vaild_date;

  ELSE
    --单号为空时,返回空值
    OPEN p_cur FOR
       SELECT '' bill_no,'' bill_date,'' form_maker,'' drawer,'' administer,'' accounter,'' verify_person,'' remarks,
       '' card_money,''  out_num ,'' reason_describe,'' area_name, '' ic_sub_desc,'' distribute_bill_no , '' billNoMap,
       '' vaild_date,'' mode_name,'' verify_date,'' detail_place,'' Chinese_Name,'' exit_stationid_name
          FROM dual;

  END IF;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_XC to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_OUT_XC to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_PDU_USELESS
prompt ===========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_PDU_USELESS"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2--入库单号
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_PDU_USELESS
  --功能:生产工作单废票明细
  --创建者：  liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS
p_number INTEGER;

BEGIN
 IF p_bill_no IS NOT NULL THEN
     OPEN p_cur FOR
  select a.bill_no,a.order_no,a.card_money,a.card_no,case when a.card_type='2' then '人工废票'  when a.card_type='1'  then 'ES废票' else '遗失票' end card_type,
        a.exit_line_id,f.chinese_name,a.flag,c.ic_main_desc,b.ic_sub_desc,
        a.line_id,e.chinese_name,a.machine_no,d.code_text,a.phy_id,a.valid_date
 from IC_PDU_USELESS_DETAIL a,ic_cod_card_sub_type b,ic_cod_card_main_type c,pub_flag d,ic_cod_station e,ic_cod_station f
    where a.bill_no=p_bill_no
     and rtrim(a.ic_main_type)=b.ic_main_type(+)
     and rtrim(a.ic_sub_type)=b.ic_sub_type(+)
     and rtrim(a.ic_main_type)=c.ic_main_type(+)
     and a.model=d.code(+) and d.type=26
     and a.line_id=e.line_id(+)
     and a.station_id=e.station_id(+)
     and a.exit_line_id=f.line_id(+)
     and a.exit_station_id=f.station_id(+)
  order by a.order_no,a.card_no;

  ELSE
    OPEN p_cur FOR

      select '' bill_no,'' order_no,'' card_money,'' card_no,'' card_type,
        '' exit_line_id,'' chinese_name,'' flag,'' ic_main_desc,'' ic_sub_desc,
        '' line_id,'' chinese_name,'' machine_no,'' code_text,'' phy_id,'' valid_date
    from dual;

  END IF;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_PDU_USELESS to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_PDU_USELESS to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_PRODUCE
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_PRODUCE"(p_cur     IN OUT sys_refcursor, --返回结果集
                                                   p_bill_no IN VARCHAR2 --出库单号
                                                   )
---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_PRODUCE
  --功能:生产工作单-单据导出-报表
  --创建者：liangminglong
  --输出: p_cur结果集
  --修改：临时表t#ic_temp_produce_rpt增加ic_main_type字段，
  --      搜索条件增加关联ic_main_type字段
  -------------------------------------------------------------------------------
 AS
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  delete from t#ic_temp_produce_rpt;
  if p_bill_no is not null then
    insert into t#ic_temp_produce_rpt
      select a.bill_no,
             out_bill_no,
             c.bill_no,
             draw_total,
             es_worktype_id,
             ' ',
             es_useless_num,
             man_useless_num,
             lost_num,
             system_balance,
             real_balance,
             a.hand_man,
             a.receive_man,
             a.bill_date,
             a.verify_date,
             ic_sub_type,
             ' ',
             b.card_money,
             b.vaild_date,
             station_id,
             ' ',
             b.exit_station_id,
             '',
             b.model,
             ' ',
             b.draw_quantity,
             b.start_box_id,
             b.end_box_id,
             b.machine_no,
             a.remarks,
             ic_main_type
        from ic_pdu_produce_bill        a,
             ic_pdu_produce_bill_detail b,
             ic_in_store_bill           c
       where a.bill_no = b.bill_no
         and a.bill_no = c.related_bill_no(+)
         and a.bill_no = p_bill_no;
  
    update t#ic_temp_produce_rpt
       set (es_worktype_name, ic_sub_desc, station_name) =
           (select b.es_worktype_name, c.ic_sub_desc, d.chinese_name
              from t#ic_temp_produce_rpt a,
                   ic_cod_es_work_type   b,
                   ic_cod_card_sub_type  c,
                   ic_cod_station        d
             where a.es_worktype_id = b.es_worktype_id(+)
               and a.ic_sub_type = c.ic_sub_type(+)
               and a.ic_main_type = c.ic_main_type(+)
               and a.station_id = d.station_id(+))
     where exists (select b.es_worktype_name, c.ic_sub_desc, d.chinese_name
              from t#ic_temp_produce_rpt a,
                   ic_cod_es_work_type   b,
                   ic_cod_card_sub_type  c,
                   ic_cod_station        d
             where a.es_worktype_id = b.es_worktype_id(+)
               and rtrim(a.ic_sub_type) = c.ic_sub_type(+)
               and rtrim(a.ic_main_type) = c.ic_main_type(+)
               and a.station_id = d.station_id(+));
  
    --添加多日票模式相关字段 更新出站站点名称
    update t#ic_temp_produce_rpt
       set exit_stationid_name =
           (select b.chinese_name
              from t#ic_temp_produce_rpt a, ic_cod_station b
             where a.exit_station_id = b.station_id)
     where exists (select b.chinese_name
              from t#ic_temp_produce_rpt a, ic_cod_station b
             where a.exit_station_id = b.station_id);
  
    --添加多日票模式相关字段 查询pub_flag 更新限制模式名称
    update t#ic_temp_produce_rpt
       set mode_name =
           (select b.code_text
              from t#ic_temp_produce_rpt a, pub_flag b
             where a.model = b.code
               and b.type = 26)
     where exists (select b.code_text
              from t#ic_temp_produce_rpt a, pub_flag b
             where a.model = b.code
               and b.type = 26);
  
    open p_cur for
      select bill_no,
             out_bill_no,
             in_bill_no,
             draw_total,
             es_worktype_name,
             es_useless_num,
             man_useless_num,
             lost_num,
             system_balance,
             real_balance,
             hand_man,
             receive_man,
             bill_date,
             verify_date,
             ic_sub_desc,
             card_money,
             vaild_date,
             station_name,
             exit_stationid_name,
             mode_name,
             draw_quantity,
             start_box_id,
             end_box_id,
             machine_no,
             remarks,
             '12' as useless,
             '3' as lost
        from t#ic_temp_produce_rpt;
  
  else
    open p_cur for
      select '' bill_no,
             '' out_bill_no,
             '' in_bill_no,
             0 draw_total,
             '' es_worktype_name,
             '' es_useless_num,
             '' man_useless_num,
             '' lost_num,
             '' system_balance,
             '' real_balance,
             '' hand_man,
             '' receive_man,
             '' bill_date,
             '' verify_date,
             '' ic_sub_desc,
             '' card_money,
             '' vaild_date,
             '' station_name,
             '' exit_stationid_name,
             '' mode_name,
             0 draw_quantity,
             '' start_box_id,
             '' end_box_id,
             '' machine_no,
             '' remarks,
             '12' as useless,
             '3' as lost
        from dual;
  end if;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_PRODUCE to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_PRODUCE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_PRODUCE_ULS_12
prompt ==============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_PRODUCE_ULS_12"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2--出库单号,
--p_card_type   IN varchar2
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_PRODUCE_USELESS
  --功能:生产工作单--遗失票--单据导出-报表
  --创建者：liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS

v_card1 varchar(20);
v_card2 varchar(20);
v_card3 varchar(20);
v_card4 varchar(20);
v_start_card varchar(20);
v_end_card varchar(20)  ;
v_verify_date date ;
v_temp_nunber integer;
v_temp_nunber2 integer;
v_temp_nunber3 integer;
v_temp_nunber4 integer;
v_temp_nunber5 integer;
v_temp_nunber6 integer;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  if p_bill_no is not null then
    select count(*) into v_temp_nunber from IC_PDU_USELESS_DETAIL where bill_no=p_bill_no;
    if v_temp_nunber>0 then
--人工废票+es废票
        insert into t#ic_tmp_useless_card select card_no from IC_PDU_USELESS_DETAIL where (card_type='1' or card_type='2')  and bill_no=p_bill_no order by card_no;


      select min(card_no),max(card_no) into v_start_card,v_end_card from t#ic_tmp_useless_card;
      select v_start_card into v_card1 from dual;

      select count(*) into v_temp_nunber2 from t#ic_tmp_useless_card;
      if v_temp_nunber2>0 then
        while (v_card1!='max' and v_card2!='max' and v_card3!='max') loop
          select count(*) into v_temp_nunber3 from t#ic_tmp_useless_card where card_no>v_card1;
          select count(*) into v_temp_nunber4 from t#ic_tmp_useless_card where card_no>v_card2;
          select count(*) into v_temp_nunber5 from t#ic_tmp_useless_card where card_no>v_card3;
          select count(*) into v_temp_nunber6 from t#ic_tmp_useless_card where card_no>v_card4;
          if v_card1!='max' and v_temp_nunber3>0 then
            select min(card_no) into v_card2 from t#ic_tmp_useless_card where card_no>v_card1;
          else
            select 'max' into v_card2 from dual;
          end if;

          if v_card2!='max' and v_temp_nunber4>0 then
            select min(card_no) into v_card3 from t#ic_tmp_useless_card where card_no>v_card2;
          else
            select 'max' into v_card3 from dual;
          end if;

          if v_card3!='max' and v_temp_nunber5>0 then
            select min(card_no) into v_card4 from t#ic_tmp_useless_card where card_no>v_card3;
          else
            select 'max' into v_card4 from dual;
          end if;


          insert into t#ic_tmp_useless_detail
          values(case when v_card1='max' then '' else v_card1 end,
          case when v_card2='max' then ' ' else v_card2 end,
          case when v_card3='max' then ' ' else v_card3 end ,
          case when v_card4='max' then ' ' else v_card4 end);

          if v_card4!='max' and v_temp_nunber5>0 then
            select min(card_no) into v_card1 from t#ic_tmp_useless_card where card_no>v_card4;
          else
            select 'max' into v_card1 from dual;
          end if;
        end loop;
      end if;

    end if;

    open p_cur for
      select  card_no1,card_no2,card_no3,card_no4 from t#ic_tmp_useless_detail;

  else


    open p_cur for
      select  '' card_no1,'' card_no2,'' card_no3,'' card_no4 from dual;

  end if;


END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_PRODUCE_ULS_12 to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_PRODUCE_ULS_12 to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_PRODUCE_ULS_3
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_PRODUCE_ULS_3"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2--出库单号,
--p_card_type   IN varchar2
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_PRODUCE_USELESS
  --功能:生产工作单--遗失票--单据导出-报表
  --创建者：liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS

v_card1 varchar(20);
v_card2 varchar(20);
v_card3 varchar(20);
v_card4 varchar(20);
v_start_card varchar(20);
v_end_card varchar(20);
v_verify_date date ;
v_temp_nunber integer;
v_temp_nunber2 integer;
v_temp_nunber3 integer;
v_temp_nunber4 integer;
v_temp_nunber5 integer;
v_temp_nunber6 integer;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  if p_bill_no is not null then
    select count(*) into v_temp_nunber from IC_PDU_USELESS_DETAIL where bill_no=p_bill_no;
    if v_temp_nunber>0 then


        insert into t#ic_tmp_useless_card select card_no from IC_PDU_USELESS_DETAIL where card_type='3'  and bill_no=p_bill_no order by card_no;

      select min(card_no),max(card_no) into v_start_card,v_end_card from t#ic_tmp_useless_card;
      select v_start_card into v_card1 from dual;

      select count(*) into v_temp_nunber2 from t#ic_tmp_useless_card;
      if v_temp_nunber2>0 then
        while (v_card1!='max' and v_card2!='max' and v_card3!='max') loop
          select count(*) into v_temp_nunber3 from t#ic_tmp_useless_card where card_no>v_card1;
          select count(*) into v_temp_nunber4 from t#ic_tmp_useless_card where card_no>v_card2;
          select count(*) into v_temp_nunber5 from t#ic_tmp_useless_card where card_no>v_card3;
          select count(*) into v_temp_nunber6 from t#ic_tmp_useless_card where card_no>v_card4;
          if v_card1!='max' and v_temp_nunber3>0 then
            select min(card_no) into v_card2 from t#ic_tmp_useless_card where card_no>v_card1;
          else
            select 'max' into v_card2 from dual;
          end if;

          if v_card2!='max' and v_temp_nunber4>0 then
            select min(card_no) into v_card3 from t#ic_tmp_useless_card where card_no>v_card2;
          else
            select 'max' into v_card3 from dual;
          end if;

          if v_card3!='max' and v_temp_nunber5>0 then
            select min(card_no) into v_card4 from t#ic_tmp_useless_card where card_no>v_card3;
          else
            select 'max' into v_card4 from dual;
          end if;


          insert into t#ic_tmp_useless_detail
          values(case when v_card1='max' then ' ' else v_card1 end,
          case when v_card2='max' then ' ' else v_card2 end,
          case when v_card3='max' then ' ' else v_card3 end ,
          case when v_card4='max' then ' ' else v_card4 end);

          if v_card4!='max' and v_temp_nunber5>0 then
            select min(card_no) into v_card1 from t#ic_tmp_useless_card where card_no>v_card4;
          else
            select 'max' into v_card1 from dual;
          end if;
        end loop;
      end if;

    end if;

    open p_cur for
      select  card_no1,card_no2,card_no3,card_no4 from t#ic_tmp_useless_detail;

  else


    open p_cur for
      select  '' card_no1,'' card_no2,'' card_no3,'' card_no4 from dual;

  end if;


END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_PRODUCE_ULS_3 to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_PRODUCE_ULS_3 to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BL_PRODUCE_USELESS
prompt ===============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BL_PRODUCE_USELESS"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_bill_no      IN VARCHAR2,--出库单号,
p_card_type   IN varchar2
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_IC_RCT_BL_PRODUCE_USELESS
  --功能:生产工作单--遗失票--单据导出-报表
  --创建者：liangminglong
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
AS

v_card1 varchar(20);
v_card2 varchar(20);
v_card3 varchar(20);
v_card4 varchar(20);
v_start_card varchar(20);
v_end_card varchar(20);
v_verify_date date ;
v_temp_nunber integer;
v_temp_nunber2 integer;
v_temp_nunber3 integer;
v_temp_nunber4 integer;
v_temp_nunber5 integer;
v_temp_nunber6 integer;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  if p_bill_no is not null then
    select count(*) into v_temp_nunber from IC_PDU_USELESS_DETAIL where bill_no=p_bill_no;
    if v_temp_nunber>0 then
      if p_card_type='12' then  --人工废票+es废票
        insert into t#ic_tmp_useless_card select card_no from IC_PDU_USELESS_DETAIL where (card_type='1' or card_type='2')  and bill_no=p_bill_no order by card_no;
      end if;
      if p_card_type='3' then
        insert into t#ic_tmp_useless_card select card_no from IC_PDU_USELESS_DETAIL where card_type='3'  and bill_no=p_bill_no order by card_no;
      end if;
      select min(card_no),max(card_no) into v_start_card,v_end_card from t#ic_tmp_useless_card;
      select v_start_card into v_card1 from dual;

      select count(*) into v_temp_nunber2 from t#ic_tmp_useless_card;
      if v_temp_nunber2>0 then
        while (v_card1!='max' and v_card2!='max' and v_card3!='max') loop
          select count(*) into v_temp_nunber3 from t#ic_tmp_useless_card where card_no>v_card1;
          select count(*) into v_temp_nunber4 from t#ic_tmp_useless_card where card_no>v_card2;
          select count(*) into v_temp_nunber5 from t#ic_tmp_useless_card where card_no>v_card3;
          select count(*) into v_temp_nunber6 from t#ic_tmp_useless_card where card_no>v_card4;
          if v_card1!='max' and v_temp_nunber3>0 then
            select min(card_no) into v_card2 from t#ic_tmp_useless_card where card_no>v_card1;
          else
            select 'max' into v_card2 from dual;
          end if;

          if v_card2!='max' and v_temp_nunber4>0 then
            select min(card_no) into v_card3 from t#ic_tmp_useless_card where card_no>v_card2;
          else
            select 'max' into v_card3 from dual;
          end if;

          if v_card3!='max' and v_temp_nunber5>0 then
            select min(card_no) into v_card4 from t#ic_tmp_useless_card where card_no>v_card3;
          else
            select 'max' into v_card4 from dual;
          end if;


          insert into t#ic_tmp_useless_detail
          values(case when v_card1='max' then '' else v_card1 end,
          case when v_card2='max' then ' ' else v_card2 end,
          case when v_card3='max' then ' ' else v_card3 end ,
          case when v_card4='max' then ' ' else v_card4 end);

          if v_card4!='max' and v_temp_nunber5>0 then
            select min(card_no) into v_card1 from t#ic_tmp_useless_card where card_no>v_card4;
          else
            select 'max' into v_card1 from dual;
          end if;
        end loop;
      end if;

    end if;

    open p_cur for
      select  card_no1,card_no2,card_no3,card_no4 from t#ic_tmp_useless_detail;

  else


    open p_cur for
      select  '' card_no1,'' card_no2,'' card_no3,'' card_no4 from dual;

  end if;


END;
/
grant execute on ACC_TK.UP_IC_RCT_BL_PRODUCE_USELESS to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BL_PRODUCE_USELESS to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_BORROW
prompt ===================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_BORROW"
(  p_cur IN OUT Sys_Refcursor,
   p_begin_day  in      VARCHAR2,
   p_end_day    in      VARCHAR2,
   p_card_main_type in  VARCHAR2,
   p_card_sub_type  in  VARCHAR2,
   p_storage_id     in  VARCHAR2,
   p_area_id        in  VARCHAR2,
   p_borrow_unit_id in  VARCHAR2,
   p_return_flag    in  VARCHAR2,
   operatorId       in  VARCHAR2
)
---------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_BORROW
--功能描述：中心票库：车票借还统计
--输出参数  ：查询的开始与结束日期
--输出参数  :
--创建者：  李莉
--创建日期：20130719
--修改者:
--修改日期：
--注释:
--磁悬浮票务改造-添加仓库权限 by lindaquan in 20151202
-------------------------------------------------------------------------------
AS

   v_where varchar(500);
   v_temp_where varchar(2500);
   v_result_where varchar(50);
   v_group varchar(300);
   v_sql varchar(1024);
  -- v_returnFlag varchar(2);
   v_operatorName  varchar(16);
   v_storage_name  varchar(100);
   v_tmpCount int;
   v_storage_id varchar(100);

  BEGIN

    delete t#ic_rct_borrow_return_name;
    delete t#ic_rct_borrow_lend_bill_temp;
    delete t#ic_rct_borrow_lend_bill;
    delete t#ic_rct_borrow_return_bill;
    delete t#ic_rct_borrow_result;
--if p_begin_day is null or p_end_day is null or  p_card_main_type is null or p_card_sub_type is null
    --or  p_storage_id is null or p_area_id is null or   p_borrow_unit_id is null or p_return_flag is null or
    --operatorId is null then


   --查询条件
   -----------------------------------------------------------------------------
   v_where:=' where a.out_bill_no=b.out_bill_no and record_flag=''0'''||' and ';
   --v_temp_where := '';
   --v_result_where := '';

   if(p_begin_day is not null ) then
      v_where:=v_where||' a.verify_date>=to_date('||''''||p_begin_day||' 00:00:00'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')'||' and ';
   end if;

   if(p_end_day is not null ) then
     v_where:=v_where||' a.verify_date<=to_date('||''''||p_end_day||' 23:59:59'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')'||' and ';
   end if;

   if(p_card_main_type is not null ) then
     v_temp_where:=v_temp_where||'trim(ic_main_type)='||''''||p_card_main_type||''''||' and ';
   end if;

   if(p_card_sub_type is not null) then
     v_temp_where:=v_temp_where||'trim(ic_sub_type)='||''''||p_card_sub_type||''''||' and ';
   end if;

   --添加仓库权限 兼容多个权限
   v_storage_name := '全部';
   if(p_storage_id is not null ) then
     v_storage_id := ''''||p_storage_id||'''';
     select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
      from ic_cod_storage where instr(p_storage_id, storage_id) > 0;
     
     IF instr(p_storage_id,',')>0 THEN
        v_temp_where:=v_temp_where||'trim(storage_id) in ('||v_storage_id||')  and ';
     ELSE 
        v_temp_where:=v_temp_where||'trim(storage_id)='||v_storage_id||'  and ';
     END IF;
   end if;

   if(p_area_id is not null ) then
      v_temp_where:=v_temp_where||'trim(area_id)='||''''||p_area_id ||''''||' and ';
   end if;

   if(p_borrow_unit_id is not null ) then
     v_where:=v_where||'trim(unit_id)='||''''||p_borrow_unit_id||''''||' and ';
   end if ;

   if(p_return_flag is not null ) then
    -- v_returnFlag:=p_return_flag;
     v_result_where:=' where return_flag='||''''||p_return_flag ||'''';
   end if;

   if(v_where is not null) then
      v_where := substr(v_where,1,length(v_where)-4);
   end if;

   if(v_temp_where is not null) then
      v_temp_where := ' where '|| substr(v_temp_where,1,length(v_temp_where)-4);
   end if;
   ------------------------------------------------------------------------------------------
--归还标志中文描述
  insert into t#ic_rct_borrow_return_name(return_flag,name_return_flag) values('0','未归还');
   insert into t#ic_rct_borrow_return_name(return_flag,name_return_flag) values('1','已归还');
   insert into t#ic_rct_borrow_return_name(return_flag,name_return_flag) values('2','未完全归还');

  ----------------------------------------------------------------------------------------------
  --操作员名称
  select sys_operator_name into v_operatorName  from acc_st.op_sys_operator where   sys_operator_id=operatorId;

  ----先从出库单中取出明细记录
  v_sql:='insert into t#ic_rct_borrow_lend_bill_temp(out_bill_no,storage_id,area_id,ic_main_type,ic_sub_type,lend_water_no,lend_quantity,verify_date)
                select  A.bill_no ,A.storage_id ,A.area_id ,A.ic_main_type ,A.ic_sub_type,
       case when B.section_num is null then A.water_no
            else B.water_no_pk
            end,
       sum( case when B.section_num is null then A.out_num
                 else B.section_num
                 end),
                 A.vaild_date
             from ic_out_bill_detail A left join  ic_out_bill_detail_box B
                   on (A.bill_no =B.bill_no and
                   to_char(A.water_no)=B.water_no)';
  v_group:=' group by A.bill_no ,A.storage_id ,A.area_id ,A.ic_main_type ,A.ic_sub_type,A.vaild_date,
                    case when B.section_num is null then A.water_no
                    else B.water_no_pk
                    end ';
  execute immediate  v_sql||v_temp_where||v_group;

--DBMS_OUTPUT.PUT_LINE('v_sql||v_temp_where||v_group111='||v_sql||v_temp_where||v_group);

   --按条件取出借票单据数据

  v_sql:='insert into t#ic_rct_borrow_lend_bill(bill_no,lend_water_no,storage_id,area_id,ic_main_type,ic_sub_type,unit_id,lend_quantity,return_flag,verify_date,type) '
  ||'select a.bill_no,b.lend_water_no,b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type,a.unit_id,sum(b.lend_quantity),a.return_flag,a.verify_date,'||''''||'1'||''''
  ||' from ic_out_lend_bill a,t#ic_rct_borrow_lend_bill_temp b ';
  v_group:=' group by a.bill_no,b.lend_water_no,b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type,a.unit_id,a.return_flag,a.verify_date ';
   execute immediate v_sql||v_where||v_group;

  --DBMS_OUTPUT.PUT_LINE('v_sql||v_where||v_group222='||v_sql||v_where||v_group);
-------------------------------------------------------------------------------------------------------

  --取出归还数据
insert into t#ic_rct_borrow_return_bill(lend_bill_no,lend_water_no,ic_main_type,ic_sub_type,return_quantity,not_quantity,lost_quantity,verify_date)
              select lend_bill_no,b.lend_water_no,ic_main_type,ic_sub_type,sum(return_quantity),sum(not_quantity),sum(lost_quantity),max(verify_date)
                     from ic_in_return_bill a,ic_in_return_bill_detail b
                     where a.bill_no=b.bill_no and record_flag='0'
                   --  and a.delete_flag = '0' and b.delete_flag = '0'
                     and a.lend_bill_no in (select bill_no from t#ic_rct_borrow_lend_bill )
                     group by lend_bill_no,b.lend_water_no,ic_main_type,ic_sub_type;

  --归还数据按票卡类型合并
  update t#ic_rct_borrow_lend_bill a set (a.return_quantity,a.not_quantity,a.lost_quantity,a.return_verify_date)=(select b.return_quantity,b.not_quantity,b.lost_quantity,b.verify_date
      from t#ic_rct_borrow_return_bill b where a.bill_no=b.lend_bill_no and
      rtrim(a.ic_main_type)=rtrim(b.ic_main_type) and rtrim(a.ic_sub_type)=rtrim(b.ic_sub_type) and a.lend_water_no = b.lend_water_no)
  where exists  (select 1 from t#ic_rct_borrow_return_bill b where a.bill_no=b.lend_bill_no and
    rtrim(a.ic_main_type)=rtrim(b.ic_main_type) and rtrim(a.ic_sub_type)=rtrim(b.ic_sub_type) and a.lend_water_no = b.lend_water_no);


  v_sql:='insert into t#ic_rct_borrow_result(bill_no,storage_id,area_id,ic_main_type,ic_sub_type,unit_id,lend_quantity,verify_date,return_verify_date,return_quantity,not_quantity,lost_quantity,type,name_storage_id,name_area_id,name_ic_main_type,name_ic_sub_type,name_unit_id,name_return_flag)
                             select bill_no,storage_id,area_id,ic_main_type,ic_sub_type,unit_id,sum(lend_quantity),verify_date,return_verify_date,sum(return_quantity),sum(not_quantity),sum(lost_quantity),type,name_storage_id,name_area_id,name_ic_main_type,name_ic_sub_type,name_unit_id,name_return_flag
                             from t#ic_rct_borrow_lend_bill ';

  v_group:=' group by bill_no,storage_id,area_id,ic_main_type,ic_sub_type,unit_id,verify_date,return_verify_date,type,name_storage_id,name_area_id,name_ic_main_type,name_ic_sub_type,name_unit_id,name_return_flag ';

  --execute immediate v_sql||v_result_where||v_group  ;
  --归还标志条件改为更新归还标志后，再判断
  execute immediate v_sql||v_group  ;
  --DBMS_OUTPUT.PUT_LINE('v_sql||v_result_where||v_group333='||v_sql||v_result_where||v_group);

  update t#ic_rct_borrow_result set  return_flag='0'
                    where   return_quantity+not_quantity+lost_quantity = 0 or (return_quantity is null and not_quantity is null and lost_quantity is null);


   update t#ic_rct_borrow_result set  return_flag='1'
                    where   return_quantity+not_quantity+lost_quantity = lend_quantity;

   update t#ic_rct_borrow_result set  return_flag='2'
                    where   return_quantity+not_quantity+lost_quantity <> 0 and return_quantity+not_quantity+lost_quantity <> lend_quantity;
   --排除不符合归还标志条件的记录
   IF (p_return_flag is not null ) THEN
      v_sql:= 'delete t#ic_rct_borrow_result where return_flag !='||''''||p_return_flag ||'''';

      execute immediate v_sql;
   END IF;


--插入按卡类、票区统计的小计
  insert into t#ic_rct_borrow_result
    (storage_id,area_id,ic_main_type,ic_sub_type,lend_quantity,return_quantity,not_quantity,lost_quantity,type)
   select storage_id,area_id||'0',ic_main_type,ic_sub_type,sum(lend_quantity),sum(return_quantity),sum(not_quantity),sum(lost_quantity),'2'
   from t#ic_rct_borrow_result
   group by  ic_main_type,ic_sub_type,storage_id,area_id||'0';

  --插入按卡类统计的合计
  insert into t#ic_rct_borrow_result(storage_id,ic_main_type,ic_sub_type,lend_quantity,return_quantity,not_quantity,lost_quantity,type)
   select storage_id,ic_main_type,ic_sub_type||'0',sum(lend_quantity),sum(return_quantity),sum(not_quantity),sum(lost_quantity),'3'
   from t#ic_rct_borrow_result where type <>'2'   group by  storage_id,ic_main_type,ic_sub_type||'0' ;

   --更新仓库名称
   update t#ic_rct_borrow_result a
      set a.name_storage_id=(select b.storage_name from ic_cod_storage b where a.storage_id=b.storage_id)
   where exists (select 1 from ic_cod_storage b where a.storage_id=b.storage_id);

   --更新票区名称
   update t#ic_rct_borrow_result a
      set a.name_area_id=(select b.area_name from ic_cod_area b where a.storage_id=b.storage_id and a.area_id=b.area_id)
   where exists  (select 1 from ic_cod_area b where a.storage_id=b.storage_id and a.area_id=b.area_id);

   --更新子类名称
   update t#ic_rct_borrow_result a
      set a.name_ic_sub_type=(select b.ic_sub_desc from ic_cod_card_sub_type b where a.ic_main_type=b.ic_main_type and a.ic_sub_type=b.ic_sub_type )
   where exists (select 1 from ic_cod_card_sub_type b where a.ic_main_type=b.ic_main_type and a.ic_sub_type=b.ic_sub_type );

   --更借票单位名称
   update t#ic_rct_borrow_result a
      set a.name_unit_id=(select b.unit_name from ic_cod_borrow_unit b where a.unit_id=b.unit_id )
   where exists (select 1 from ic_cod_borrow_unit b where a.unit_id=b.unit_id );

   --更新归还标志名称
   update t#ic_rct_borrow_result a
      set a.name_return_flag=(select b.name_return_flag from t#ic_rct_borrow_return_name b where a.return_flag=b.return_flag)
   where exists (select 1 from t#ic_rct_borrow_return_name b where a.return_flag=b.return_flag);

   update t#ic_rct_borrow_result set name_area_id='小计' where type='2';

   update t#ic_rct_borrow_result set name_ic_sub_type='合计' where type='3' ;

   SELECT count(*) INTO v_tmpCount FROM T#ic_rct_borrow_result;
   IF v_tmpCount > 0 THEN
       OPEN p_cur FOR SELECT
            p_begin_day begin_day,
            p_end_day end_day,
            v_operatorName operator_name,
            v_storage_name title_storage_name,
            b.storage_name,
            a.ic_main_type,
            a.ic_sub_type,
            a.name_ic_sub_type as ic_sub_desc,
            a.storage_id,
            a.area_id,
            a.name_area_id as area_name,
            a.lend_quantity,
            a.verify_date as lend_date,
            a.return_verify_date as return_verify_date,
            a.name_unit_id as lend_unit,
            a.return_quantity,
            a.not_quantity,
            a.lost_quantity,
            a.name_return_flag as return_flag,
            a.bill_no as lend_no,
            ' ' as remarks
          FROM t#ic_rct_borrow_result a, ic_cod_storage b
         where a.storage_id = b.storage_id(+)
      order by a.ic_main_type,a.ic_sub_type,a.storage_id,a.area_id, a.verify_date;

   ELSE
       OPEN p_cur FOR SELECT
            p_begin_day begin_day,
            p_end_day end_day,
            v_operatorName operator_name,
            v_storage_name title_storage_name,
            v_storage_name storage_name,
            null ic_main_type,
            null ic_sub_type,
            null ic_sub_desc,
            null storage_id,
            null area_id,
            null area_name,
            null lend_quantity,
            null lend_date,
            null return_verify_date,
            null lend_unit,
            null return_quantity,
            null not_quantity,
            null lost_quantity,
            null return_flag,
            null lend_no,
            ' ' as remarks
          FROM dual;
   END IF;

END;
/
grant execute on ACC_TK.UP_IC_RCT_BORROW to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_BORROW to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_CHECK
prompt ==================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_CHECK"
(  p_cur IN OUT Sys_Refcursor,
   p_begin_day VARCHAR,
   p_end_day VARCHAR,
   p_card_main_type VARCHAR,
   p_card_sub_type VARCHAR,
   p_storage_id VARCHAR,
   p_area_id VARCHAR,
   operatorId VARCHAR
)
as---------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_CHECK
--功能描述：盘点表中央票库管理
--创建者：  LILI
--创建日期：2013-07-26
--修改记录：
--注释:
--修改日期:
--修改者:
--注释:
--磁悬浮票务改造-添加仓库权限 by lindaquan 20151202
-------------------------------------------------------------------------------
 v_operator_name VARCHAR(16);
 v_storage_name  varchar(100);
 v_sql VARCHAR(2048);
 v_where VARCHAR(1024);
 v_final VARCHAR(1024);
 v_group VARCHAR(1024);
 v_tmpCount int;
 v_storage_id varchar(100);

BEGIN
    --清空临时表
    delete t#ic_rct_check_rpt;

--if p_begin_day is null or p_end_day is null or  p_card_main_type is null or p_card_sub_type is null
    --or  p_storage_id is null or p_area_id is null  or
    --operatorId is null then

    v_where:=' AND a.verify_date>=to_date('||''''||p_begin_day||' 00:00:00'||''''||',''yyyy-mm-dd hh24:mi:ss'')';
    v_where:=v_where||' AND a.verify_date<=to_date('||''''||p_end_day||' 23:59:59'||''''||',''yyyy-mm-dd hh24:mi:ss'')';
    IF(p_card_main_type IS NOT NULL ) then
        v_where:=v_where||' AND ltrim(rtrim(b.ic_main_type))='||''''||
        p_card_main_type||'''';
    end if;
    IF(p_card_sub_type IS NOT NULL ) then
        v_where:=v_where||' AND ltrim(rtrim(b.ic_sub_type))='||''''||p_card_sub_type||'''';
    end if;
    
    --添加仓库权限 兼容多个权限
    v_storage_name := '全部';
    if p_storage_id is not null  then
       v_storage_id := ''''||p_storage_id||'''';
       select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
       from ic_cod_storage where instr(p_storage_id, storage_id) > 0;
        
       IF instr(p_storage_id,',')>0 THEN
          v_where := v_where||' AND b.storage_id in('||v_storage_id||')';
       ELSE 
          v_where := v_where||' AND b.storage_id='||v_storage_id;
       END IF;
    end if ;
    
    IF(p_area_id IS NOT NULL ) then
        v_where := v_where||' AND b.area_id='||''''||p_area_id||'''';
    end if;

      select sys_operator_name into v_operator_name  from acc_st.op_sys_operator    where   sys_operator_id=operatorId;

    v_sql:='
    INSERT INTO t#ic_rct_check_rpt
           SELECT
           b.area_id,
           '''',
           b.ic_main_type,
           b.ic_sub_type,
           '''',
           to_char(a.verify_date,''yyyy-mm-dd'')||'||''' '''||'||to_char(a.verify_date,''hh:mi''),
           sum(b.sys_amount),
           sum(b.real_amount),
           b.card_money,
           b.storage_id
           FROM ic_chk_storage a,ic_chk_storage_detail b
           WHERE a.check_bill_no=b.check_bill_no
           AND a.record_flag=''0'' ';

    v_group:=' GROUP BY b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type,b.card_money,to_char(a.verify_date,''yyyy-mm-dd'')||'||''' '''||'||to_char(a.verify_date,''hh:mi'') ORDER BY b.area_id ';
    v_sql:=v_sql||v_where||v_group;
    execute immediate v_sql;


    update t#ic_rct_check_rpt a set a.area_name=(select b.area_name from ic_cod_area b where a.storage_id=b.storage_id and a.areaid=b.area_id)
    where exists (select 1 from ic_cod_area b where a.storage_id=b.storage_id and a.areaid=b.area_id);

    update t#ic_rct_check_rpt a set a.typename=(select b.ic_sub_desc from ic_cod_card_sub_type b where trim(a.maintype)=b.ic_main_type and trim(a.subtype)=b.ic_sub_type)
    where exists (select 1 from ic_cod_card_sub_type b where trim(a.maintype)=b.ic_main_type and trim(a.subtype)=b.ic_sub_type);

     SELECT count(*) INTO v_tmpCount FROM T#ic_rct_check_rpt;
     IF v_tmpCount > 0 THEN
         OPEN p_cur FOR SELECT
             p_begin_day begin_day,p_end_day end_day ,v_operator_name operator_name,v_storage_name title_storage_name,b.storage_name,
             a.area_name,a.typename , a.check_date,a.sys_amount, a.real_amount,(a.real_amount-a.sys_amount) as balance,cardmoney,
             a.maintype,a.subtype
             FROM t#ic_rct_check_rpt a, ic_cod_storage b
             where a.storage_id = b.storage_id(+)
             ORDER BY  a.areaid,a.maintype,a.subtype,a.cardmoney,a.check_date;

     ELSE
         OPEN p_cur FOR SELECT
             p_begin_day begin_day,
             p_end_day end_day ,
             v_operator_name operator_name,
             v_storage_name title_storage_name,
             v_storage_name storage_name,
             '' area_name,
             '' typename ,
             '' check_date,
             '' sys_amount,
             '' real_amount,
             '' balance,
             '' cardmoney,
             '' maintype,
             '' subtype
             FROM dual;
     END IF;

end;
/
grant execute on ACC_TK.UP_IC_RCT_CHECK to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_CHECK to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_CT_IN
prompt ==================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_CT_IN"
(p_cur            IN OUT sys_refcursor,--返回结果集
p_storage_id      IN VARCHAR2,--票库
p_area_id         IN VARCHAR2,--票区
p_in_reason_id    IN VARCHAR2,--入库原因
p_card_main_type  IN VARCHAR2,--主类型
p_card_sub_type   IN VARCHAR2,--子类型
p_begin_day       IN VARCHAR2,--查询开始时间
p_end_day         IN VARCHAR2,--查询结束时间
operatorId      IN VARCHAR2--制表人
)
  ---------------------------------------------------------------------------------
  --过程名:  up_ic_rct_ct_in
  --功能:中心票库入库查询报表
  --创建者：  lindaquan
  --创建日期：20130716
  --输出: p_cur结果集
  --磁悬浮票务改造-添加仓库权限 by lindaquan in 20151201
  -------------------------------------------------------------------------------
 AS
  v_operator_name          varchar(16);
    v_storage_name           varchar(100);
    v_sql varchar(2048);
    v_where varchar(2048);
    v_group varchar(1024);
    v_tmpCount int;
    v_storage_id varchar(100);

BEGIN
    --清理临时数据
    DELETE FROM T#IC_RCT_CT_IN_RESULT;

    v_where := '';
    --参数处理 start---

    IF p_begin_day is not NULL THEN
       v_where := v_where ||' and a.verify_date >= to_date('''||p_begin_day||' 00:00:00'||''',''yyyy-MM-dd hh24:mi:ss'') ';
    END IF;

    IF p_end_day is not NULL THEN
       v_where := v_where ||' and a.verify_date <= to_date('''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';
    END IF;

    IF operatorId is not NULL THEN
       SELECT sys_operator_name INTO v_operator_name from acc_st.op_sys_operator where sys_operator_id=operatorId;
    END IF;

    --添加仓库权限 兼容多个权限
    v_storage_name :='全部';
    IF p_storage_id is not NULL THEN
      v_storage_id := ''''||p_storage_id||'''';
      select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
      from ic_cod_storage where instr(p_storage_id, storage_id) > 0;
      
      IF instr(p_storage_id,',')>0 THEN
        v_where :=v_where ||' and a.storage_id in('||v_storage_id||')';
      ELSE 
        v_where :=v_where ||' and a.storage_id='||v_storage_id;
      END IF;
    END IF;
    IF p_area_id is not NULL THEN
        v_where :=v_where ||' and a.area_id='||''''||p_area_id||'''';
    END IF;
    IF p_card_main_type is not NULL THEN
        v_where :=v_where ||' and rtrim(ltrim(a.ic_main_type))='||''''||p_card_main_type||'''';
    END IF;
    IF p_card_sub_type is not NULL THEN
        v_where :=v_where ||' and rtrim(ltrim(a.ic_sub_type))='||''''||p_card_sub_type||'''';
    END IF;
    IF p_in_reason_id is not NULL THEN
        v_where :=v_where ||' and a.reason_id='||''''||p_in_reason_id||'''';
    END IF;

    --参数处理 end---

    --明细表 插入数据到临时结果表
    --ic_sts_in 入库中间表
    v_sql :='insert into T#IC_RCT_CT_IN_RESULT(storage_id,area_id,ticket_main_type,ticket_sub_type,card_money,valid_date,station_id,station_id_reclaim,exit_station_id,model,in_bill_no,reason_id,num
                  ,area_name,ticket_sub_des,reason_des,chinese_name,mode_name,station_reclaim_name,exit_stationid_name)
                  select a.storage_id,a.area_id,a.ic_main_type,a.ic_sub_type,a.card_money,(case when a.area_id=''03'' and a.ic_main_type=''12'' then to_char(a.VALID_DATE,''yyyy-MM-dd'') else null end)
                  ,a.station_id,a.station_id_reclaim,a.exit_station_id,a.model,a.bill_no,a.reason_id,sum(nvl(a.in_num,0))
                  ,b.area_name,c.ic_sub_desc,d.reason_describe,e.chinese_name,f.code_text,e1.chinese_name,e2.chinese_name
                  from ic_sts_in a
                  ,ic_cod_area b,ic_cod_card_sub_type c,ic_cod_in_out d,ic_cod_station e,pub_flag f,ic_cod_station e1,ic_cod_station e2
                  WHERE a.storage_id=b.storage_id(+) and a.area_id=b.area_id(+)
                  AND trim(a.ic_main_type)=c.ic_main_type(+) AND trim(a.ic_sub_type)=c.ic_sub_type(+) AND a.reason_id=d.reason_id(+)
                  AND a.station_id=e.station_id(+) AND a.model=f.code(+) AND f.type=''26''
                  AND a.station_id_reclaim = e1.station_id(+) AND a.exit_station_id=e2.station_id(+)';
    v_group := '  group by a.storage_id,a.area_id,a.ic_main_type,a.ic_sub_type,a.card_money,(case when a.area_id=''03'' and a.ic_main_type=''12'' then to_char(a.VALID_DATE,''yyyy-MM-dd'') else null end),a.station_id,a.station_id_reclaim,a.exit_station_id,a.model,a.bill_no,a.reason_id
                  ,b.area_name,c.ic_sub_desc,d.reason_describe,e.chinese_name,f.code_text,e1.chinese_name,e2.chinese_name ';

    v_sql := v_sql || v_where || v_group;

    DBMS_OUTPUT.PUT_LINE(v_sql);

    EXECUTE immediate v_sql;

    --过滤数量为0记录 add by hejj
    delete from T#IC_RCT_CT_IN_RESULT where num=0;

    --插入小计
    insert into T#IC_RCT_CT_IN_RESULT
     select
       storage_id,
       area_id ,
       area_name,
       ticket_main_type ,
       ticket_sub_type||'09',
       '小计',
       null  ,
       null ,
       null ,
       null,
       null,null,null,null,null,null,
       null  ,
       null  ,
       null ,
       sum(num)
       from T#IC_RCT_CT_IN_RESULT group by storage_id,area_id,area_name,ticket_main_type,ticket_sub_type;


    --返回结果集到游标变量--
    SELECT count(*) INTO v_tmpCount FROM T#IC_RCT_CT_IN_RESULT;
    IF v_tmpCount > 0 THEN
        OPEN p_cur FOR
             select p_begin_day begin_day,p_end_day end_day,v_operator_name operator_name,b.storage_name,v_storage_name title_storage_name,
               a.storage_id,a.area_id,a.area_name,a.ticket_main_type,a.ticket_sub_type,a.ticket_sub_des,a.card_money,a.valid_date,a.chinese_name,a.station_reclaim_name,a.exit_stationid_name,a.mode_name,a.in_bill_no,a.reason_id,a.reason_des, a.num
              from T#IC_RCT_CT_IN_RESULT a, ic_cod_storage b
              where a.storage_id=b.storage_id(+)
              order by a.storage_id,a.area_id,a.ticket_main_type,a.ticket_sub_type,a.card_money,a.valid_date,a.chinese_name,a.station_reclaim_name,a.exit_stationid_name,a.mode_name,a.in_bill_no;
    ELSE
       OPEN p_cur FOR
       select p_begin_day begin_day,
              p_end_day end_day,
              v_operator_name operator_name,
              v_storage_name storage_name,
              v_storage_name title_storage_name,
              null storage_id,
              null area_id,
              null area_name,
              null ticket_main_type,
              null ticket_sub_type,
              null ticket_sub_des,
              null card_money,
              null valid_date,
              null chinese_name,
              null station_reclaim_name,
              null exit_stationid_name,
              null mode_name,
              null in_bill_no,
              null reason_id,
              null reason_des,
              null num
              from dual;
    END IF;

    --清理临时数据
    DELETE FROM T#IC_RCT_CT_IN_RESULT;

END;
/
grant execute on ACC_TK.UP_IC_RCT_CT_IN to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_CT_IN to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_CT_OUT
prompt ===================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_CT_OUT" (
p_cur                    IN OUT sys_refcursor,--返回结果集
p_storage_id    IN VARCHAR2,--票库
p_area_id             IN VARCHAR2,--票区
p_card_main_type         IN VARCHAR2,--主类型
p_card_sub_type         IN VARCHAR2,--子类型
p_out_reason_id         IN VARCHAR2,--出库原因
p_begin_day             IN VARCHAR2,--查询开始时间
p_end_day             IN VARCHAR2,--查询结束时间
operatorId             IN VARCHAR2--制表人
)
  ---------------------------------------------------------------------------------
  --过程名:  up_ic_rct_ct_out
  --功能:中心票库出库查询报表
  --创建者：  lindaquan
  --创建日期：20130715
  --输出: p_cur结果集
  --磁悬浮票务改造-添加仓库权限 by lindaquan in 20151130
  -------------------------------------------------------------------------------
 AS
    v_operator_name          varchar(16);
    v_storage_name           varchar(100);
    v_sql varchar(2048);
    v_where varchar(2048);
    v_where2 varchar(2048);
    v_group varchar(1024);
    v_tmpCount int;
    v_storage_id varchar(100);

BEGIN
    --清理临时数据
    DELETE FROM T#IC_RCT_CT_DETAIL;
    DELETE FROM T#IC_RCT_CT_RESULT;
    v_where := '';
    --参数处理 start---

    IF p_begin_day is not NULL THEN
       v_where := v_where ||' and f.verify_date >= to_date('''||p_begin_day||' 00:00:00'||''',''yyyy-MM-dd hh24:mi:ss'') ';
    END IF;

    IF p_end_day is not NULL THEN
       v_where := v_where ||' and f.verify_date <= to_date('''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';
    END IF;

    IF operatorId is not NULL THEN
       SELECT sys_operator_name INTO v_operator_name from acc_st.op_sys_operator where sys_operator_id=operatorId;
    END IF;

    --添加仓库权限 兼容多个权限
    v_storage_name :='全部';
    IF p_storage_id is not NULL THEN
      v_storage_id := ''''||p_storage_id||'''';
      select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
      from ic_cod_storage where instr(p_storage_id, storage_id) > 0;
      
      IF instr(p_storage_id,',')>0 THEN
        v_where :=v_where ||' and a.storage_id in('||v_storage_id||')';
      ELSE 
        v_where :=v_where ||' and a.storage_id='||v_storage_id;
      END IF;
    END IF;
    IF p_area_id is not NULL THEN
        v_where :=v_where ||' and a.area_id='||''''||p_area_id||'''';
    END IF;
    IF p_card_main_type is not NULL THEN
        v_where :=v_where ||' and rtrim(ltrim(e.ic_main_type))='||''''||p_card_main_type||'''';
    END IF;
    IF p_card_sub_type is not NULL THEN
        v_where :=v_where ||' and rtrim(ltrim(e.ic_sub_type))='||''''||p_card_sub_type||'''';
    END IF;
    v_where2 :=v_where;
    IF p_out_reason_id is not NULL THEN
        v_where :=v_where ||' and b.reason_id='||''''||p_out_reason_id||'''';
        v_where2 :=v_where2 ||' and b.adjust_id='||''''||p_out_reason_id||'''';
    END IF;
    --参数处理 end---

    --明细表
    --除调帐出
    v_sql :='insert into T#IC_RCT_CT_DETAIL
       select
        a.storage_id,a.area_id,a.area_name,e.ic_main_type,e.ic_sub_type,e.ic_sub_desc,b.card_money, (case when a.area_id=''03'' and b.ic_main_type=''12'' then  to_char(b.vaild_date,''yyyy-MM-dd'') else null end) ,b.station_id,b.exit_station_id,b.model,b.bill_no,b.reason_id,c.reason_describe,
        sum(nvl((case when d.section_num is null then out_num else d.section_num end),0))
       from ic_cod_area a
       inner join ic_out_bill_detail b on a.storage_id = b.storage_id and a.area_id =b.area_id
       inner join ic_cod_in_out c on b.reason_id = c.reason_id
      inner join ic_out_bill f on b.bill_no = f.bill_no
      left outer join ic_out_bill_detail_box d on to_char(b.water_no)=d.water_no
       inner join ic_cod_card_sub_type e on trim(b.ic_main_type) = e.ic_main_type and trim(b.ic_sub_type) = e.ic_sub_type
    where f.record_flag = ''0''';
    v_group := ' group by a.storage_id,a.area_id,a.area_name,e.ic_main_type,e.ic_sub_type,e.ic_sub_desc,b.card_money,(case when a.area_id=''03'' and b.ic_main_type=''12'' then  to_char(b.vaild_date,''yyyy-MM-dd'') else null end),b.station_id,b.exit_station_id,b.model,b.bill_no,b.reason_id,c.reason_describe ';

    v_sql := v_sql || v_where || v_group;
    DBMS_OUTPUT.PUT_LINE(v_sql);

    EXECUTE immediate v_sql;

    --调账出库信息
    v_sql :='insert into T#IC_RCT_CT_DETAIL
       select
        a.storage_id,a.area_id,a.area_name,e.ic_main_type,e.ic_sub_type,e.ic_sub_desc,b.card_money,(case when a.area_id=''03'' and b.ic_main_type=''12'' then  to_char(b.vaild_date,''yyyy-MM-dd'') else null end),b.station_id,b.exit_station_id,b.model,b.bill_no,b.adjust_id,c.reason_describe,sum(nvl(error_quantity,0))
       from ic_cod_area a
       inner join ic_out_adjust_bill_detail b on a.storage_id = b.storage_id and a.area_id =b.area_id
       inner join ic_cod_in_out c on b.adjust_id = c.reason_id
       inner join ic_out_adjust_bill f on b.bill_no = f.bill_no
       inner join ic_cod_card_sub_type e on trim(b.ic_main_type) = e.ic_main_type and trim(b.ic_sub_type) = e.ic_sub_type
    where f.record_flag = ''0''';
    v_group := ' group by a.storage_id,a.area_id,a.area_name,e.ic_main_type,e.ic_sub_type,e.ic_sub_desc,b.card_money,(case when a.area_id=''03'' and b.ic_main_type=''12'' then  to_char(b.vaild_date,''yyyy-MM-dd'') else null end),b.station_id,b.exit_station_id,b.model,b.bill_no,b.adjust_id,c.reason_describe ';

    v_sql := v_sql || v_where2 || v_group;
    DBMS_OUTPUT.PUT_LINE('sql2:'||v_sql);

    EXECUTE immediate V_sql;

    --插入数据到临时结果表
    insert into T#IC_RCT_CT_RESULT
        select
             a.storage_id,
             a.area_id,
             a.area_name,
             a.ticket_main_type,
             a.ticket_sub_type,
             a.ticket_sub_des,
             a.card_money,
             a.valid_date,
             a.station_id,
             b.chinese_name,
             a.exit_station_id,
             c.chinese_name,
             a.model,
             d.code_text,
             a.out_bill_no,
             a.reason_id,
             a.reason_des,
             a.num
        from T#IC_RCT_CT_DETAIL a,ic_cod_station b,ic_cod_station c,pub_flag d
        where a.station_id=b.station_id(+)
             AND a.exit_station_id=c.station_id(+)--出站站点中文名c.chinese_name
             AND a.model=d.code(+) AND d.type = 26;--返回报表显示的限制模式中文名d.code_text

    --插入小计
    insert into T#IC_RCT_CT_RESULT
        select
            a.storage_id,
            a.area_id,
            a.area_name,
            a.ticket_main_type,
            a.ticket_sub_type||'09',
            '小计',
            NULL,
            null,
            null,
            null,
            null,null,null,null,
            null,
            null,
            null,
            sum(a.num)
            from T#IC_RCT_CT_DETAIL a group by a.storage_id,a.area_id,a.area_name,a.ticket_main_type,a.ticket_sub_type;

    --返回结果集到游标变量--
    --BEGIN
    SELECT count(*) INTO v_tmpCount FROM T#IC_RCT_CT_RESULT;
    IF v_tmpCount > 0 THEN
        OPEN p_cur FOR
           select p_begin_day begin_day,p_end_day end_day,v_operator_name operator_name,b.storage_name,v_storage_name title_storage_name,
                a.storage_id,a.area_id,a.area_name,a.ticket_sub_type,a.ticket_sub_des,a.card_money,a.valid_date,
                a.station_name,a.exit_stationid_name,a.mode_name,a.out_bill_no,a.reason_id,a.reason_des,a.num
          from T#IC_RCT_CT_RESULT a, ic_cod_storage b
          where a.storage_id=b.storage_id(+)
          order by storage_id,area_id,area_name,ticket_main_type,ticket_sub_type,ticket_sub_des,card_money,out_bill_no;
        --END;
    ELSE
        OPEN p_cur FOR
           select p_begin_day begin_day,
                 p_end_day end_day,
                 v_operator_name operator_name,
                 v_storage_name storage_name,
                 v_storage_name title_storage_name,
                null storage_id,
                null area_id,
                null area_name,
                null ticket_sub_type,
                null ticket_sub_des,
                null card_money,
                null valid_date,
                null station_name,
                null exit_stationid_name,
                null mode_name,
                null out_bill_no,
                null reason_id,
                null reason_des,
                null num
          from dual;
    END IF;

    --清理临时数据
    DELETE FROM T#IC_RCT_CT_DETAIL;
    DELETE FROM T#IC_RCT_CT_RESULT;

end up_ic_rct_ct_out;
/
grant execute on ACC_TK.UP_IC_RCT_CT_OUT to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_CT_OUT to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_IN_EXCHANGE
prompt ========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_IN_EXCHANGE" (

    p_cur        IN OUT SYS_REFCURSOR,
    p_begin_day  IN VARCHAR2,
    p_end_day    IN VARCHAR2,
    p_storage_id IN VARCHAR2,
    operatorId   IN VARCHAR2
)
---------------------------------------------------------------------------------
--name：  UP_IC_RCT_IN_EXCHANGE
--describe：中心票库入库交接查询报表    　
--author：  mqf
--date：2013-10-22

--磁悬浮票务改造-添加仓库权限 by lindaquan 20151210
-------------------------------------------------------------------------------
AS

   v_operator_name VARCHAR(16);
   v_sql VARCHAR(2048);
   v_where VARCHAR(1024);
   v_group VARCHAR(1024);
   v_final VARCHAR(1024);
   v_tmpCount int;
   v_storage_name  varchar(100);
   v_storage_id varchar(100);

BEGIN
      DELETE FROM T#IC_RCT_IN_EXCHANGE_RESULT ;

      SELECT count(*) into v_tmpCount FROM acc_st.op_sys_operator WHERE sys_operator_id=operatorId;
      IF v_tmpCount >0 THEN
        SELECT sys_operator_name into v_operator_name FROM acc_st.op_sys_operator WHERE sys_operator_id=operatorId;
      END IF;
      
      --添加仓库权限 兼容多个权限
     v_storage_name := '全部';
     if p_storage_id is not null  then
        v_storage_id := ''''||p_storage_id||'''';
        select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
        from ic_cod_storage where instr(p_storage_id, storage_id) > 0;

        IF instr(p_storage_id,',')>0 THEN
           v_final:=' and '||' b.storage_id in( '||v_storage_id ||')';
        ELSE 
           v_final:=' and '||' b.storage_id= '||v_storage_id;
        END IF;
     end if ;


      IF p_begin_day IS NOT NULL THEN
          v_final := v_final||' AND a.verify_date>=to_date('||''''||p_begin_day||' 00:00:00'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';  
      END IF;
      IF p_end_day IS NOT NULL THEN
          v_final := v_final||' AND a.verify_date<=to_date('||''''||p_end_day||' 00:00:00'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
      END IF;

      v_group := ' GROUP BY a.bill_no,b.storage_id,b.area_id,c.area_name,b.ic_main_type,b.ic_sub_type,d.ic_sub_desc,a.hand_man,a.administer ';

      v_sql :='INSERT INTO T#IC_RCT_IN_EXCHANGE_RESULT(index1,billno,reason_des,storage_id,area_id,area_name,ticket_main_type,ticket_sub_type,ticket_sub_des,hand_man,ticket_man,num)
              SELECT rownum,bill_no,reason_des,storage_id,area_id,area_name,ic_main_type,ic_sub_type,ic_sub_desc,hand_man,administer,in_num
              from (
                    SELECT a.bill_no,NULL reason_des,b.storage_id,b.area_id,c.area_name,b.ic_main_type,b.ic_sub_type,d.ic_sub_desc,a.hand_man,a.administer,sum(NVL(b.in_num,0)) in_num
                    FROM ic_in_store_bill a,ic_sts_in b,ic_cod_area c,ic_cod_card_sub_type d WHERE
                        a.bill_no=b.bill_no
                        AND a.record_flag=''0''
                        AND substr(a.bill_no,1,2) <>''TR''
                        AND b.storage_id=c.storage_id
                        AND b.area_id=c.area_id
                        AND trim(b.ic_main_type)=d.ic_main_type
                        AND trim(b.ic_sub_type)=d.ic_sub_type '
              || v_final || v_group
              ||' ) e ORDER BY e.bill_no ';




    EXECUTE IMMEDIATE v_sql;
    DBMS_OUTPUT.PUT_LINE(v_sql);

    UPDATE T#IC_RCT_IN_EXCHANGE_RESULT SET reason_des='生产入库' WHERE substr(billno,1,2)='SR';
    UPDATE T#IC_RCT_IN_EXCHANGE_RESULT SET reason_des='回收入库' WHERE substr(billno,1,2)='HR';
    UPDATE T#IC_RCT_IN_EXCHANGE_RESULT SET reason_des='清洗入库' WHERE substr(billno,1,2)='QR';
    UPDATE T#IC_RCT_IN_EXCHANGE_RESULT SET reason_des='核销入库' WHERE substr(billno,1,2)='CR';
    UPDATE T#IC_RCT_IN_EXCHANGE_RESULT SET reason_des='归还入库' WHERE substr(billno,1,2)='JR';
    UPDATE T#IC_RCT_IN_EXCHANGE_RESULT SET reason_des='新票入库' WHERE substr(billno,1,2)='XR';

    SELECT count(*) INTO v_tmpCount FROM T#IC_RCT_IN_EXCHANGE_RESULT;
    IF v_tmpCount > 0 THEN
        OPEN p_cur FOR
        SELECT p_begin_day begin_day,
               p_end_day end_day ,
               v_operator_name operator_name,
               rownum index1,
               a.billno,
               a.reason_des,
               a.area_name,
               a.ticket_sub_des,
               a.hand_man,
               a.ticket_man,
               a.num,
               v_storage_name title_storage_name,
               b.storage_name
        FROM T#IC_RCT_IN_EXCHANGE_RESULT a, ic_cod_storage b
         where a.storage_id = b.storage_id(+)
        --ORDER BY index1;
        ORDER BY rownum, a.billno,a.area_id;
    ELSE
        OPEN p_cur FOR
        SELECT p_begin_day begin_day,
               p_end_day end_day ,
               v_operator_name operator_name,
               null index1,
               ' ' billno,
               ' ' reason_des,
               ' ' area_name,
               ' ' ticket_sub_des,
               ' ' hand_man,
               ' ' ticket_man,
               null num,
               v_storage_name title_storage_name,
               v_storage_name storage_name
        FROM dual;

    END IF;
END;
/
grant execute on ACC_TK.UP_IC_RCT_IN_EXCHANGE to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_IN_EXCHANGE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_OUTIN_DIFF
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_OUTIN_DIFF"
(
    p_out_cur IN OUT Sys_Refcursor,
    p_storage_id           in  VARCHAR2,
    p_area_id              in  VARCHAR2,
    p_card_main_type       in  VARCHAR2,
    p_card_sub_type        in  VARCHAR2,
    p_begin_day            in  VARCHAR2,
    p_end_day              in  VARCHAR2,
    p_adjust_reason_id     in  VARCHAR2,
    p_bill_no              in  VARCHAR2,
    operatorId             in  VARCHAR2
)
---------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_OUTIN_DIFF
--功能描述：票库：车票误差调帐记录报表-数量误差统计
--输出参数  ：调帐的开始与结束日期
--输出参数  :
--创建者：  mqf
--创建日期：20131111

--修改者:   moqf
--修改日期: 20140427 
--修改内容：修改b.ic_main_type = d.ic_main_type改trim(b.ic_main_type) = d.ic_main_type,
--         b.ic_sub_type = d.ic_sub_type为trim(b.ic_sub_type) = d.ic_sub_type

--磁悬浮票务改造-添加仓库权限 by lindaquan in 20151201
---------------------------------------------------------------------------------
AS
     v_sql   varchar(2048);
     v_where varchar(2048);
     v_final varchar(1024);
     --新票少票 票区信息来源 使用条件变量
     v_finalout varchar(1024);
     --"核销入库"误差反映原则 使用条件变量
     v_finalcheck varchar(1024);
     v_group varchar(1024);
     v_operator_name      varchar(16);
     v_storage_name       varchar(100);
     v_storage_id varchar(100);

BEGIN


    delete t#ic_rct_outindiff_result;
    delete t#ic_rct_outindiff_tmp_result;
    delete t#ic_rct_outindiff_store_in;
    delete t#ic_rct_outindiff_store_out;
    delete t#ic_rct_outindiff_total ;
   --处理参数

      select sys_operator_name into v_operator_name  from acc_st.op_sys_operator where   sys_operator_id=operatorId;

      v_final:= ' and a.verify_date>=to_date('||''''||p_begin_day||' 00:00:00'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
      v_final:=v_final||' and a.verify_date<=to_date('||''''||p_end_day||' 23:59:59'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';

      v_finalout := v_final;
      v_finalcheck := v_final;


      IF p_card_main_type is not null and p_card_main_type<>' ' THEN
          v_finalout := v_finalout||' and '||' rtrim(ltrim(a.ic_main_type))= '||''''||p_card_main_type||'''';
          v_final := v_final||' and '||' rtrim(ltrim(b.ic_main_type))= '||''''||p_card_main_type||'''';

          v_finalcheck := v_final;
      END IF;

      IF p_card_sub_type is not null and p_card_sub_type<>' ' THEN
          v_final := v_final||' and '||' rtrim(ltrim(b.ic_sub_type))= '||''''||p_card_sub_type||'''';
          v_finalout := v_finalout||' and '||' rtrim(ltrim(a.ic_sub_type))= '||''''||p_card_sub_type||'''';

          v_finalcheck := v_final;
      END IF;

      --添加仓库权限 兼容多个权限
      --v_storage_name := '全部';
      IF p_storage_id is not null and p_storage_id<>' ' THEN
          v_storage_id := ''''||p_storage_id||'''';
          select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
          from ic_cod_storage where instr(p_storage_id, storage_id) > 0;
      
          IF instr(p_storage_id,',')>0 THEN
            v_final := v_final||' and '||' rtrim(ltrim(b.storage_id)) in('||v_storage_id||')';
            v_finalout := v_finalout||' and '||' rtrim(ltrim(a.storage_id)) in('||v_storage_id||')';
          ELSE 
            v_final := v_final||' and '||' rtrim(ltrim(b.storage_id))= '||v_storage_id;
            v_finalout := v_finalout||' and '||' rtrim(ltrim(a.storage_id))= '||v_storage_id;
          END IF;
          v_finalcheck := v_final;
      END IF;

      --if(p_area_id is not null and p_area_id<>'')
      --begin
        --select v_final=v_final+' and '+' rtrim(ltrim(b.area_id))='+''''+p_area_id+''''
        --select v_finalout=v_finalout+' and '+' rtrim(ltrim(a.area_id))='+''''+p_area_id+''''
      --end

      IF p_bill_no is not null and p_bill_no<>' ' THEN
          v_final := v_final||' and a.bill_no= '||''''||p_bill_no||'''';
          v_finalout := v_finalout||' and a.bill_no= '||''''||p_bill_no||'''';
          v_finalcheck := v_finalcheck||' and a.bill_no= '||''''||p_bill_no||'''';
      END IF;
   --入库调帐

      IF p_adjust_reason_id is not null and p_adjust_reason_id<>' ' THEN
         IF p_adjust_reason_id = '0' THEN
               v_sql := 'INSERT INTO t#ic_rct_outindiff_result
                          SELECT c.area_name,
                          d.ic_sub_desc,
                          a.bill_no,
                          sum(b.sys_amount),
                          sum(b.real_amount),
                          sum(b.real_amount - b.sys_amount),
                            '''',
                          ''盘点调增'',
                          a.form_maker,
                          to_char(a.verify_date,''yyyymmdd''),
                            b.storage_id,b.area_id,d.ic_main_type,d.ic_sub_type
                          FROM ic_in_store_bill a,ic_chk_storage_detail b, ic_cod_area c, ic_cod_card_sub_type d
                          WHERE a.related_bill_no = b.check_bill_no
                                AND a.record_flag = ''0''
                                AND b.area_id = c.area_id
                                AND b.storage_id = c.storage_id
                                AND trim(b.ic_main_type) = d.ic_main_type
                                AND trim(b.ic_sub_type) = d.ic_sub_type ';
                 v_group := ' GROUP BY c.area_name,d.ic_sub_desc,a.bill_no,a.form_maker,to_char(a.verify_date,''yyyymmdd''),b.storage_id,b.area_id,d.ic_main_type,d.ic_sub_type ';
                 v_where := ' HAVING sum(b.real_amount - b.sys_amount)>0 ';
                 v_sql := v_sql||v_final||v_group||v_where;
                 EXECUTE IMMEDIATE v_sql;

       --调账出库
         ELSIF p_adjust_reason_id = '1' THEN
                v_sql := 'INSERT INTO t#ic_rct_outindiff_result
                            SELECT c.area_name,
                                   d.ic_sub_desc,
                                   a.bill_no,
                                   sum(b.sys_amount),
                                   sum(b.real_amount),
                                   sum(b.real_amount - b.sys_amount),
                                   '''',
                                   ''盘点调减'',
                                   a.operator,
                                   to_char(a.verify_date,''yyyymmdd''),
                                   b.storage_id,b.area_id,d.ic_main_type,d.ic_sub_type
                            FROM ic_out_adjust_bill a,ic_chk_storage_detail b, ic_cod_area c, ic_cod_card_sub_type d
                            WHERE  a.out_bill_no = b.check_bill_no
                               AND a.record_flag = ''0''
                               AND b.area_id = c.area_id
                               AND b.storage_id = c.storage_id
                               AND trim(b.ic_main_type) = d.ic_main_type
                               AND trim(b.ic_sub_type) = d.ic_sub_type ';
                    v_group := ' GROUP BY c.area_name,d.ic_sub_desc,a.bill_no,a.operator,to_char(a.verify_date,''yyyymmdd''),b.storage_id,b.area_id,d.ic_main_type,d.ic_sub_type ';
                    v_where := ' HAVING sum(b.real_amount - b.sys_amount)<0';
                    v_sql := v_sql||v_final||v_group||v_where;

                    EXECUTE IMMEDIATE v_sql;

           ELSIF p_adjust_reason_id = '2' THEN   --核销入库
                --关联ic_sts_in表
                 v_sql := 'INSERT INTO t#ic_rct_outindiff_tmp_result
                          SELECT distinct null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                a.bill_no,
                                c.out_num,
                                  (c.out_num+c.out_in_diff),
                                c.out_in_diff,
                                  '''',
                               ''核销入库'',
                                a.form_maker,
                                to_char(a.verify_date,''yyyymmdd'')
                            from ic_in_store_bill a,ic_sts_in b,ic_in_out_diff c
                            where a.bill_no=c.in_bill_no
                                and a.bill_no=b.bill_no
                                AND c.out_in_diff !=0
                                AND a.record_flag=''0''
                                AND substr(a.bill_no,1,2)=''CR''';

                v_sql := v_sql||v_finalcheck;
                EXECUTE IMMEDIATE v_sql;

        ELSIF p_adjust_reason_id = '3'  THEN -- 清洗入库
             --关联ic_sts_in表
             v_sql := 'INSERT INTO t#ic_rct_outindiff_tmp_result
                      SELECT distinct null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            a.bill_no,
                            c.out_num,
                            (c.out_num+c.out_in_diff),
                            c.out_in_diff,
                              '''',
                            ''清洗入库'',
                            a.form_maker,
                            to_char(a.verify_date,''yyyymmdd'')
                      from ic_in_store_bill a,ic_sts_in b,ic_in_out_diff c
                      where a.bill_no=c.in_bill_no
                          and a.bill_no=b.bill_no
                          AND c.out_in_diff !=0
                          AND a.record_flag=''0''
                          AND substr(a.bill_no,1,2)= ''QR''';
              v_sql := v_sql||v_final;

              EXECUTE IMMEDIATE v_sql;

        ELSIF p_adjust_reason_id = '4' THEN   -- 生产入库

                  --关联ic_sts_in表
                  v_sql := 'INSERT INTO t#ic_rct_outindiff_tmp_result
                      SELECT distinct null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            a.bill_no,
                            c.out_num,
                              (c.out_num+c.out_in_diff),
                            c.out_in_diff,
                              c.diff_id,
                            d.diff_desc,
                            a.form_maker,
                            to_char(a.verify_date,''yyyymmdd'')
                      from ic_in_store_bill a,ic_sts_in b,ic_in_out_diff_produce c,ic_cod_diff_reason d
                      where a.bill_no=c.in_bill_no
                          and a.bill_no=b.bill_no
                          AND c.out_in_diff !=0
                          AND a.record_flag=''0''
                          AND c.diff_id=d.diff_id
                          AND substr(a.bill_no,1,2) =''SR''';
                 v_sql := v_sql||v_final;

                 EXECUTE IMMEDIATE v_sql;
        END IF;
        --全部
    ELSE
        --入库调帐
          v_sql := 'INSERT INTO t#ic_rct_outindiff_result
                   SELECT c.area_name,
                      d.ic_sub_desc,
                      a.bill_no,
                      sum(b.sys_amount),
                      sum(b.real_amount),
                      sum(b.real_amount - b.sys_amount),
                        '''',
                      ''盘点调增'',
                      a.form_maker,
                      to_char(a.verify_date,''yyyymmdd''),
                      b.storage_id,b.area_id ,d.ic_main_type,d.ic_sub_type
                   FROM ic_in_store_bill a,ic_chk_storage_detail b, ic_cod_area c, ic_cod_card_sub_type d
                   WHERE a.related_bill_no = b.check_bill_no
                          AND a.record_flag = ''0''
                          AND b.area_id = c.area_id
                          AND b.storage_id = c.storage_id
                          AND trim(b.ic_main_type) = d.ic_main_type
                          AND trim(b.ic_sub_type) = d.ic_sub_type ';

          v_group := ' GROUP BY c.area_name,d.ic_sub_desc,a.bill_no,a.form_maker,to_char(a.verify_date,''yyyymmdd''),
              b.storage_id,b.area_id ,d.ic_main_type,d.ic_sub_type ';
          v_where := ' HAVING sum(b.real_amount - b.sys_amount)>0 ';
          v_sql := v_sql||v_final||v_group||v_where;

          EXECUTE IMMEDIATE v_sql;

     --调账出库
          v_sql := 'INSERT INTO t#ic_rct_outindiff_result
                   SELECT c.area_name,
                      d.ic_sub_desc,
                      a.bill_no,
                      sum(b.sys_amount),
                      sum(b.real_amount),
                      sum(b.real_amount - b.sys_amount),
                      '''',
                      ''盘点调减'',
                      a.operator,
                      to_char(a.verify_date,''yyyymmdd'') ,
                      b.storage_id,b.area_id,d.ic_main_type,d.ic_sub_type
                    FROM ic_out_adjust_bill a,ic_chk_storage_detail b, ic_cod_area c, ic_cod_card_sub_type d
                    WHERE a.out_bill_no = b.check_bill_no
                        AND a.record_flag = ''0''
                        AND b.area_id = c.area_id
                        AND b.storage_id = c.storage_id
                        AND trim(b.ic_main_type) = d.ic_main_type
                        AND trim(b.ic_sub_type) = d.ic_sub_type ';

            v_group := ' GROUP BY c.area_name,d.ic_sub_desc,a.bill_no,a.operator,to_char(a.verify_date,''yyyymmdd''),
                b.storage_id,b.area_id,d.ic_main_type,d.ic_sub_type ';
            v_where := ' HAVING sum(b.real_amount - b.sys_amount)<0 ';
            v_sql := v_sql||v_final||v_group||v_where;

            EXECUTE IMMEDIATE v_sql;
            --关联ic_sts_in表
            v_sql :='INSERT INTO t#ic_rct_outindiff_tmp_result
                    SELECT distinct null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        a.bill_no,
                        c.out_num,
                        (c.out_num+c.out_in_diff),
                        c.out_in_diff,
                        '''',
                        ''核销入库'',
                        a.form_maker,
                        to_char(a.verify_date,''yyyymmdd'')
                    from ic_in_store_bill a,ic_sts_in b,ic_in_out_diff c
                    where a.bill_no=c.in_bill_no
                        and a.bill_no=b.bill_no
                        AND c.out_in_diff !=0
                        AND a.record_flag=''0''
                        AND substr(a.bill_no,1,2)=''CR''';
            v_sql := v_sql||v_finalcheck;
            EXECUTE IMMEDIATE v_sql;

           --关联ic_sts_in表
            v_sql :='INSERT INTO t#ic_rct_outindiff_tmp_result
                          SELECT distinct null,
                             null,
                             null,
                             null,
                             null,
                             null,
                            a.bill_no,
                            c.out_num,
                            (c.out_num+c.out_in_diff),
                            c.out_in_diff,
                              '''',
                            ''清洗入库'',
                            a.form_maker,
                            to_char(a.verify_date,''yyyymmdd'')
                          from ic_in_store_bill a,ic_sts_in b,ic_in_out_diff c
                          where  a.bill_no=c.in_bill_no
                              and a.bill_no=b.bill_no
                              AND c.out_in_diff !=0
                              AND a.record_flag=''0''
                              AND substr(a.bill_no,1,2)= ''QR''';
            v_sql := v_sql||v_final;

            EXECUTE IMMEDIATE v_sql;

            --关联ic_sts_in表
            v_sql := 'INSERT INTO t#ic_rct_outindiff_tmp_result
                      SELECT distinct null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        a.bill_no,
                        c.out_num,
                        (c.out_num+c.out_in_diff),
                        c.out_in_diff,
                        c.diff_id,
                        d.diff_desc,
                        a.form_maker,
                        to_char(a.verify_date,''yyyymmdd'')
                      from ic_in_store_bill a,ic_sts_in b,ic_in_out_diff_produce c,ic_cod_diff_reason d
                      where a.bill_no=c.in_bill_no
                          and a.bill_no=b.bill_no
                          AND c.out_in_diff !=0
                          AND a.record_flag=''0''
                          AND c.diff_id=d.diff_id
                          AND substr(a.bill_no,1,2)=''SR''';
           v_sql := v_sql||v_final;

           EXECUTE IMMEDIATE v_sql;
    END IF;

     v_sql := '
                insert   into t#ic_rct_outindiff_store_in
                select b.bill_no,b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type,count(*)
                from ic_in_store_bill a,ic_sts_in b where a.bill_no=b.bill_no and substr(a.bill_no,1,2) in(''SR'',''QR'',''CR'') ';

     v_group := ' group by b.bill_no,b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type ';

     v_sql := v_sql||v_final||v_group;
     EXECUTE IMMEDIATE v_sql;

     --新票多票和新票少票由出库信息得到 票区情况
     v_sql := '
                insert   into t#ic_rct_outindiff_store_out
                select b.in_bill_no,a.storage_id,a.area_id,a.ic_main_type,a.ic_sub_type,count(*)
                from ic_stat_out a,ic_in_out_diff_produce b where a.bill_no=b.out_bill_no and substr(b.in_bill_no,1,2) in(''SR'',''QR'',''CR'') ';

     v_group := ' group by b.in_bill_no,a.storage_id,a.area_id,a.ic_main_type,a.ic_sub_type ';

     v_sql := v_sql||v_finalout||v_group;
     EXECUTE IMMEDIATE v_sql;


    update t#ic_rct_outindiff_tmp_result a set (a.storage_id,a.area_id,a.maintype,a.subtype)=(select b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type
            from t#ic_rct_outindiff_store_in b where a.bill_no=b.bill_no and rownum=1)
            where exists (select 1 from t#ic_rct_outindiff_store_in b where a.bill_no=b.bill_no and rownum=1);
                            --and a.adjust_id not in (select diff_id from ic_cod_diff_reason)


    update t#ic_rct_outindiff_tmp_result a set (a.storage_id,a.area_id,a.maintype,a.subtype)=(select b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type
            from t#ic_rct_outindiff_store_out b where a.bill_no=b.bill_no)
            where exists (select 1 from t#ic_rct_outindiff_store_out b where a.bill_no=b.bill_no);
                            --and a.adjust_id not in (select diff_id from ic_cod_diff_reason)



    update t#ic_rct_outindiff_tmp_result a set (a.area_name,a.typename)=(select b.area_name,c.ic_sub_desc
            from ic_cod_area b,ic_cod_card_sub_type c where a.area_id=b.area_id and a.maintype=c.ic_main_type and a.subtype=c.ic_sub_type)
            where exists (select 1 from ic_cod_area b,ic_cod_card_sub_type c where a.area_id=b.area_id and a.maintype=c.ic_main_type and a.subtype=c.ic_sub_type);


   v_sql := '
        insert into t#ic_rct_outindiff_result
        select area_name,
            typename,
            bill_no,
            outnum,
            realnum,
            errnum,
            adjust_id,
            reason,
            operator,
            verify_date,
            storage_id,area_id,maintype,subtype
            from t#ic_rct_outindiff_tmp_result b ';

   EXECUTE IMMEDIATE v_sql;



      insert into t#ic_rct_outindiff_total
        SELECT p_begin_day begin_day,
               p_end_day end_day,
               v_operator_name as operator_name,
               b.storage_name,
               a.area_id_name,
               a.card_type_name,
               a.bill_no,
               sum(a.draw_quantity) draw_quantity,
               sum(a.real_quantity) real_quantity,
               sum(a.err_quantity) err_quantity,
               a.adjust_reason,
               a.operator,
               a.verify_date,
               a.storage_id,
               a.area_id,
               a.ic_main_type,
               a.ic_sub_type
          FROM t#ic_rct_outindiff_result a, ic_cod_storage b
         where a.storage_id = b.storage_id(+)
         GROUP BY a.storage_id,
                  a.area_id,
                  a.ic_main_type,
                  a.ic_sub_type,
                  a.area_id_name,
                  a.card_type_name,
                  a.bill_no,
                  a.adjust_reason,
                  a.operator,
                  a.verify_date,
                  b.storage_name;


      --"核销入库"误差反映原则为：核查多票时，
      --车票的误差数量在循环区反映；核查少票时，车票的误差数量在待注销区反映
      v_sql := 'update t#ic_rct_outindiff_total set area_id = ''04'',area_id_name = ''循环区'' where adjust_reason = ''核销入库'' and  err_quantity >0 ';

      EXECUTE IMMEDIATE v_sql;


      v_sql :=' update t#ic_rct_outindiff_total set area_id = ''05'',area_id_name = ''待注销区'' where adjust_reason = ''核销入库''  and  err_quantity <0 ';

      EXECUTE IMMEDIATE v_sql;


      --因为上面更新的票区，所以去掉票区不在的票
      IF p_area_id is not null and p_area_id<>' ' THEN

          delete from t#ic_rct_outindiff_total where area_id <> p_area_id or area_id is null;
      END IF;


      OPEN p_out_cur FOR
      SELECT
          v_storage_name title_storage_name,begin_day,end_day,operator_name,storage_name,area_id_name,card_type_name,bill_no,draw_quantity ,real_quantity,
          err_quantity,adjust_reason,operator,verify_date,storage_id,area_id,ic_main_type,ic_sub_type
      FROM t#ic_rct_outindiff_total
      order by area_id,verify_date;

   END;
/
grant execute on ACC_TK.UP_IC_RCT_OUTIN_DIFF to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_OUTIN_DIFF to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_OUT_EXCHANGE
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_OUT_EXCHANGE" (
    p_cur        IN OUT SYS_REFCURSOR,
    p_storage_id in VARCHAR2,
    p_begin_day  IN VARCHAR2,
    p_end_day    IN VARCHAR2,
    operatorId   IN VARCHAR2
)
---------------------------------------------------------------------------------
--name：  UP_IC_RCT_OUT_EXCHANGE
--describe：中心票库出库交接查询报表    　
--author：  mqf
--date：2013-10-22

--磁悬浮票务改造-添加仓库权限 by lindaquan 20151210
---------------------------------------------------------------------------------
AS

 v_sql VARCHAR(2048);
 v_final VARCHAR(1024);
 v_where VARCHAR (1024);
 v_group VARCHAR(1024);
 v_operator_name VARCHAR(16);
 v_tmpCount int;
 v_storage_name  varchar(100);
 v_storage_id varchar(100);

BEGIN

    DELETE FROM T#IC_RCT_OUT_EXCHANGE_RESULT;

    SELECT count(*) into v_tmpCount FROM acc_st.op_sys_operator WHERE sys_operator_id=operatorId;
    IF v_tmpCount >0 THEN
      SELECT sys_operator_name into v_operator_name FROM acc_st.op_sys_operator WHERE sys_operator_id=operatorId;
    END IF;
    
    --添加仓库权限 兼容多个权限
    v_storage_name := '全部';
    if p_storage_id is not null  then
        v_storage_id := ''''||p_storage_id||'''';
        select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
        from ic_cod_storage where instr(p_storage_id, storage_id) > 0;

        IF instr(p_storage_id,',')>0 THEN
           v_final:=' and '||' b.storage_id in( '||v_storage_id ||')';
        ELSE 
           v_final:=' and '||' b.storage_id= '||v_storage_id;
        END IF;
    end if ;

    IF p_begin_day IS NOT NULL THEN
        v_final :=v_final||' AND a.verify_date>=to_date('||''''||p_begin_day||' 00:00:00'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';  
    END IF;
    IF p_end_day IS NOT NULL THEN
        v_final := v_final||' AND a.verify_date<=to_date('||''''||p_end_day||' 00:00:00'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
    END IF;

    v_group  :=' GROUP BY a.bill_no,b.storage_id,b.area_id,d.area_name,b.ic_main_type,b.ic_sub_type,e.ic_sub_desc,a.drawer,a.administer ';

    v_sql :='INSERT INTO T#IC_RCT_OUT_EXCHANGE_RESULT(index1,billno,reason_des,storage_id,area_id,area_name,ticket_main_type,ticket_sub_type,ticket_sub_des,hand_man,ticket_man,num)
          SELECT rownum,bill_no,reason_des,storage_id,area_id,area_name,ic_main_type,ic_sub_type,ic_sub_desc,drawer,administer,out_num
          from (
              SELECT a.bill_no,NULL reason_des,b.storage_id,b.area_id,d.area_name,b.ic_main_type,b.ic_sub_type,e.ic_sub_desc,a.drawer,a.administer,sum(NVL(out_num,0)) out_num
              FROM ic_out_bill a,ic_stat_out b,ic_cod_area d,ic_cod_card_sub_type e WHERE
              a.bill_no=b.bill_no
              AND a.record_flag=''0''
              AND substr(a.bill_no,1,2)<>''TC''
              AND b.storage_id=d.storage_id
              AND b.area_id=d.area_id
              AND trim(b.ic_main_type)=e.ic_main_type
              AND trim(b.ic_sub_type)=e.ic_sub_type'
          ||v_final|| v_group
          || ') f ORDER BY f.bill_no ';



    EXECUTE IMMEDIATE v_sql;

    UPDATE T#IC_RCT_OUT_EXCHANGE_RESULT a
          set a.hand_man=(select b.oper_name
                          from iccs_operator b where a.hand_man=ltrim(rtrim(substr(to_char(b.oper_id),1,20))) and substr(a.billno,1,2)='SC')
    WHERE EXISTS(select 1  from iccs_operator b where a.hand_man=ltrim(rtrim(substr(to_char(b.oper_id),1,20))) and substr(a.billno,1,2)='SC');

    UPDATE T#IC_RCT_OUT_EXCHANGE_RESULT set reason_des='借票出库' WHERE substr(billno,1,2)='JC';
    UPDATE T#IC_RCT_OUT_EXCHANGE_RESULT set reason_des='核销出库' WHERE substr(billno,1,2)='HC';
    UPDATE T#IC_RCT_OUT_EXCHANGE_RESULT set reason_des='配票出库' WHERE substr(billno,1,2)='PC';
    UPDATE T#IC_RCT_OUT_EXCHANGE_RESULT set reason_des='清洗出库' WHERE substr(billno,1,2)='QC';
    UPDATE T#IC_RCT_OUT_EXCHANGE_RESULT set reason_des='生产出库' WHERE substr(billno,1,2)='SC';
    UPDATE T#IC_RCT_OUT_EXCHANGE_RESULT set reason_des='销毁出库' WHERE substr(billno,1,2)='XC';

    SELECT count(*) INTO v_tmpCount FROM T#IC_RCT_OUT_EXCHANGE_RESULT;
    IF v_tmpCount > 0 THEN
        OPEN p_cur FOR
        SELECT p_begin_day begin_day,p_end_day end_day,v_operator_name operator_name,
            rownum index1,a.billno,a.reason_des,a.area_name,a.ticket_sub_des,a.hand_man,a.ticket_man,a.num,
            v_storage_name title_storage_name,b.storage_name
        FROM T#IC_RCT_OUT_EXCHANGE_RESULT a, ic_cod_storage b
         where a.storage_id = b.storage_id(+)
        --ORDER BY index1;
        ORDER BY a.billno,a.area_id;
    ELSE
        OPEN p_cur FOR
        SELECT p_begin_day begin_day,
            p_end_day end_day,
            v_operator_name operator_name,
            null index1,
            ' ' billno,
            ' ' reason_des,
            ' ' area_name,
            ' ' ticket_sub_des,
            ' ' hand_man,
            ' ' ticket_man,
            null num,
            v_storage_name title_storage_name,
            v_storage_name storage_name
        FROM dual;
    END IF;
END;
/
grant execute on ACC_TK.UP_IC_RCT_OUT_EXCHANGE to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_OUT_EXCHANGE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_PRODUCE
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_PRODUCE" (
  p_cur            IN OUT sys_refcursor,--返回结果集
  p_storage_id     IN varchar2,--票库
  p_card_main_type IN varchar2,--主类型
  p_card_sub_type IN varchar2,--子类型
  p_begin_day     IN varchar2,--查询开始时间
  p_end_day       IN varchar2,--查询结束时间
  operatorId    IN varchar2  --制表人
  )
as

-------------------------------------------------------------------------------
--过程名：  up_ic_rct_produce
--功能描述：生产量统计中央票库管理
--创建者：  mqf
--创建日期：2013-07-18
--磁悬浮票务改造-添加仓库权限 by lindaquan 20151202
-------------------------------------------------------------------------------

 v_sql varchar(2048);
 v_where varchar(2048);
 v_group varchar(1024);
 v_operator_name varchar(16);
 v_storage_name  varchar(100);
 v_his_table  varchar(40);
 v_tmpCount integer;
 v_storage_id varchar(100);
 v_tmp_where varchar(1024);

begin

    --清理临时数据
    DELETE FROM T#IC_RCT_PRODUCE;
    DELETE FROM T#IC_RCT_PRODUCE_WASH;

    --添加仓库权限 兼容多个权限
   v_tmp_where := '';
   v_storage_name := '全部';
   if p_storage_id is not null and p_storage_id<>' ' then
       v_storage_id := ''''||p_storage_id||'''';
       select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
       from ic_cod_storage where instr(p_storage_id, storage_id) > 0;
        
       IF instr(p_storage_id,',')>0 THEN
          v_tmp_where := v_tmp_where || ' and d.storage_id in('||v_storage_id||') ';
       ELSE 
          v_tmp_where := v_tmp_where || ' and d.storage_id='||v_storage_id;
       END IF;
   end if;
   
  select sys_operator_name into v_operator_name from acc_st.op_sys_operator where sys_operator_id=operatorId;

  v_where :=' and a.verify_date>=to_date('||''''  ||p_begin_day ||' 00:00:00 '||''',''yyyy-MM-dd hh24:mi:ss'')';
  v_where :=v_where ||' and a.verify_date<=to_date('||''''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';

  if p_card_main_type is not null and p_card_main_type<>' ' then
      v_where := v_where||' and '||' trim(b.ic_main_type)='||''''||p_card_main_type||'''';
  end if;
  if p_card_sub_type is not null and p_card_sub_type<>' ' then
      v_where := v_where||' and '||' trim(b.ic_sub_type)='||''''||p_card_sub_type||'''';
  end if;

  --初始化值 es_worktype_id='00'
  v_sql := '
  insert into T#IC_RCT_PRODUCE
    select
    b.ic_main_type,
    b.ic_sub_type,
    su.ic_sub_desc,
    NVL(sum(b.draw_quantity),0),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    d.storage_id
     from
       ic_pdu_produce_bill a,
       ic_pdu_produce_bill_detail b,
       ic_cod_card_sub_type su,
       ic_out_bill_detail d
     where a.bill_no=b.bill_no
       and a.record_flag=''0''
       and a.es_worktype_id=''00''
       and trim(b.ic_main_type)=su.ic_main_type
       and trim(b.ic_sub_type)=su.ic_sub_type
       and a.out_bill_no = d.bill_no ';
   v_group :=' group by b.ic_main_type,b.ic_sub_type, su.ic_sub_desc, d.storage_id';

   v_sql := v_sql || v_where || v_tmp_where || v_group;
   --DBMS_OUTPUT.PUT_LINE(v_sql);
   EXECUTE immediate v_sql;

  --预赋值
  v_sql := '
  insert into T#IC_RCT_PRODUCE
  select   b.ic_main_type,
    b.ic_sub_type,
    su.ic_sub_desc,
      0,
      NVL(sum(b.draw_quantity),0),
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      d.storage_id
       from
       ic_pdu_produce_bill a,
       ic_pdu_produce_bill_detail b,
       ic_cod_card_sub_type su,
       ic_out_bill_detail d
     where a.bill_no=b.bill_no
       and a.record_flag=''0''
       and a.es_worktype_id=''01''
       and trim(b.ic_main_type)=su.ic_main_type
       and trim(b.ic_sub_type)=su.ic_sub_type
       and a.out_bill_no = d.bill_no ';

  v_sql := v_sql || v_where || v_tmp_where || v_group;
  --DBMS_OUTPUT.PUT_LINE(v_sql);
  EXECUTE immediate v_sql;

  --重编码
  v_sql := '
  insert into T#IC_RCT_PRODUCE
  select   b.ic_main_type,
    b.ic_sub_type,
    su.ic_sub_desc,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      NVL(sum(b.draw_quantity),0),
      d.storage_id
       from
       ic_pdu_produce_bill a,
       ic_pdu_produce_bill_detail b,
       ic_cod_card_sub_type su,
       ic_out_bill_detail d
     where a.bill_no=b.bill_no
       and a.record_flag=''0''
       and a.es_worktype_id=''02''
       and trim(b.ic_main_type)=su.ic_main_type
       and trim(b.ic_sub_type)=su.ic_sub_type
       and a.out_bill_no = d.bill_no ';

  v_sql := v_sql || v_where || v_tmp_where || v_group;
  --DBMS_OUTPUT.PUT_LINE(v_sql);
  EXECUTE immediate v_sql;

  --注销
  v_sql :='
  insert into T#IC_RCT_PRODUCE
  select b.ic_main_type,
          b.ic_sub_type,
          su.ic_sub_desc,
          0,
          0,
          NVL(sum(b.draw_quantity),0),
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          d.storage_id
           from
           ic_pdu_produce_bill a,
           ic_pdu_produce_bill_detail b,
           ic_cod_card_sub_type su,
           ic_out_bill_detail d
         where a.bill_no=b.bill_no
           and a.record_flag=''0''
           and a.es_worktype_id=''03''
           and trim(b.ic_main_type)=su.ic_main_type
           and trim(b.ic_sub_type)=su.ic_sub_type
           and a.out_bill_no = d.bill_no ';

  v_sql := v_sql || v_where || v_tmp_where || v_group;
  --DBMS_OUTPUT.PUT_LINE(v_sql);
  EXECUTE immediate v_sql;

  --+核销入库
  --票务要求注销票数量由有效票数量改为有效票数量+人工废票数量
  v_sql := '
  insert into T#IC_RCT_PRODUCE
  select d.ic_main_type,
          d.ic_sub_type,
          su.ic_sub_desc,
          0,
          0,
          NVL(sum(b.valid_num+b.man_useless_num),0),
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          d.storage_id 
          from
           ic_in_store_bill a,
           ic_in_out_diff b,
           ic_stat_out d,
           ic_cod_card_sub_type su
           where a.bill_no=b.in_bill_no
           and a.record_flag=''0''
           and substr(b.in_bill_no,1,2) =''CR''
           and b.out_bill_no=d.bill_no
           and trim(d.ic_main_type)=su.ic_main_type
           and trim(d.ic_sub_type)=su.ic_sub_type ';
  v_where :=' and a.verify_date>=to_date('||''''||p_begin_day ||' 00:00:00'||''',''yyyy-MM-dd hh24:mi:ss'')';
  v_where := v_where || ' and a.verify_date<=to_date('||''''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';

  if p_card_main_type is not null and p_card_main_type<>' ' then
      v_where := v_where ||' and '||' trim(d.ic_main_type)='||''''||p_card_main_type||'''';
  end if;
  if p_card_sub_type is not null and p_card_sub_type<>' ' then
      v_where := v_where ||' and '||' trim(d.ic_sub_type)='||''''||p_card_sub_type||'''';
  end if;

  v_group :=' group by d.ic_main_type,d.ic_sub_type, su.ic_sub_desc, d.storage_id';
  v_sql := v_sql || v_where || v_tmp_where || v_group;
  --DBMS_OUTPUT.PUT_LINE(v_sql);
  EXECUTE immediate v_sql;

  --编码票
  v_sql := '
  insert into  T#IC_RCT_PRODUCE
    select d.ic_main_type,
          d.ic_sub_type,
          su.ic_sub_desc,
          0,
          0,
          0,
          sum(d.out_num),
          0,
          0,
          0,
          0,
          0,
          0,d.storage_id
        from
           ic_out_bill a,
           ic_stat_out d,
           ic_cod_card_sub_type su
        where a.bill_no=d.bill_no
           and substr(a.bill_no,1,2)=''PC''
           and a.record_flag=''0''
           and d.area_id=''02''
           and trim(d.ic_main_type)=su.ic_main_type
           and trim(d.ic_sub_type)=su.ic_sub_type ';
  v_where := ' and a.verify_date>=to_date('||''''||p_begin_day ||' 00:00:00'||''',''yyyy-MM-dd hh24:mi:ss'')';
  v_where := v_where ||' and a.verify_date<=to_date('||''''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';

  if p_card_main_type is not null and p_card_main_type<>' ' then
      v_where := v_where||' and '||' trim(d.ic_main_type)='||''''||p_card_main_type||'''';
  end if;
  if p_card_sub_type is not null and p_card_sub_type<>' ' then
      v_where :=v_where||' and '||' trim(d.ic_sub_type)='||''''||p_card_sub_type||'''';
  end if;

  v_group := ' group by d.ic_main_type,d.ic_sub_type,su.ic_sub_desc, d.storage_id';
  v_sql := v_sql || v_where || v_tmp_where || v_group;
  --DBMS_OUTPUT.PUT_LINE(v_sql);
  EXECUTE immediate v_sql;

  --赋值票
  v_sql := '
  insert into  T#IC_RCT_PRODUCE
    select d.ic_main_type,
          d.ic_sub_type,
          su.ic_sub_desc,
          0,
          0,
          0,
          0,
          sum(d.out_num),
          0,
          0,
          0,
          0,
          0,d.storage_id
        from
          ic_stat_out d,
          ic_cod_card_sub_type su
         where
          substr(d.bill_no,1,2)=''PC''
           and d.area_id=''03''
           and trim(d.ic_main_type)=su.ic_main_type
           and trim(d.ic_sub_type)=su.ic_sub_type ';
  v_where := ' and d.verify_date>=to_date('||''''||p_begin_day ||' 00:00:00'||''',''yyyy-MM-dd hh24:mi:ss'')';
  v_where := v_where ||' and d.verify_date<=to_date('||''''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';

  if p_card_main_type is not null and p_card_main_type<>' ' then
      v_where := v_where||' and '||' trim(d.ic_main_type)='||''''||p_card_main_type||'''';
  end if;
  if p_card_sub_type is not null and p_card_sub_type<>' ' then
      v_where := v_where||' and '||' trim(d.ic_sub_type)='||''''||p_card_sub_type||'''';
  end if;

  v_group := ' group by d.ic_main_type,d.ic_sub_type,su.ic_sub_desc, d.storage_id';
  v_sql := v_sql||v_where||v_tmp_where||v_group;
  --DBMS_OUTPUT.PUT_LINE(v_sql);
  EXECUTE immediate v_sql;


  --回收量 待注销区
  v_sql := '
  insert into T#IC_RCT_PRODUCE
      select  d.ic_main_type,
              d.ic_sub_type,
              su.ic_sub_desc,
              0,
              0,
              0,
              0,
              0,
              NVL(sum(d.in_num),0),
              0,
              0,
              0,
              0,d.storage_id
            from
              ic_sts_in d,
              ic_cod_card_sub_type su
            where
              trim(d.ic_main_type)=su.ic_main_type
              and trim(d.ic_sub_type)=su.ic_sub_type
              and d.area_id=''05''
              and substr(d.bill_no,1,2) = ''HR''';
  v_where :=' and d.verify_date>=to_date('||''''||p_begin_day ||' 00:00:00'||''',''yyyy-MM-dd hh24:mi:ss'')';
  v_where := v_where ||' and d.verify_date<=to_date('||''''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';

  if p_card_main_type is not null and p_card_main_type<>' ' then
      v_where := v_where||' and '||' trim(d.ic_main_type)='||''''||p_card_main_type||'''';
  end if;
  if p_card_sub_type is not null and p_card_sub_type<>' ' then
      v_where := v_where||' and '||' trim(d.ic_sub_type)='||''''||p_card_sub_type||'''';
  end if;

  v_group := ' group by d.ic_main_type,d.ic_sub_type,su.ic_sub_desc, d.storage_id';
  v_sql := v_sql||v_where||v_tmp_where||v_group;
  --DBMS_OUTPUT.PUT_LINE(v_sql);
  EXECUTE immediate v_sql;

  --回收量 回收区
  v_sql := '
  insert into T#IC_RCT_PRODUCE
      select  d.ic_main_type,
              d.ic_sub_type,
              su.ic_sub_desc,
              0,
              0,
              0,
              0,
              0,
              0,
              NVL(sum(d.in_num),0),
              0,
              0,
              0,d.storage_id
              from
              ic_sts_in d,
              ic_cod_card_sub_type su
              where
              trim(d.ic_main_type)=su.ic_main_type
              and trim(d.ic_sub_type)=su.ic_sub_type
              and d.area_id=''07''
              and substr(d.bill_no,1,2) =''HR''';
  v_where :=' and d.verify_date>=to_date('||''''||p_begin_day ||' 00:00:00'||''',''yyyy-MM-dd hh24:mi:ss'')';
  v_where := v_where ||' and d.verify_date<=to_date('||''''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';

  if p_card_main_type is not null and p_card_main_type<>' ' then
      v_where := v_where||' and '||' trim(d.ic_main_type)='||''''||p_card_main_type||'''';
  end if;
  if p_card_sub_type is not null and p_card_sub_type<>' ' then
      v_where := v_where||' and '||' trim(d.ic_sub_type)='||''''||p_card_sub_type||'''';
  end if;

  v_group := ' group by d.ic_main_type,d.ic_sub_type,su.ic_sub_desc, d.storage_id';
  v_sql := v_sql||v_where||v_tmp_where||v_group;
  --DBMS_OUTPUT.PUT_LINE(v_sql);
  EXECUTE immediate v_sql;

  --回收量  TVM废票
  --substr(to_char(b.TICKETTYPE_ID),1,2)=su.ic_main_type
  --改为b.ic_main_type=su.ic_main_type and b.ic_sub_type=su.ic_sub_type
  --b.TICKETTYPE_ID=19改为 b.ic_main_type=''12'' and b.ic_sub_type=''22''
  v_sql := '
              insert into T#IC_RCT_PRODUCE
      select  d.ic_main_type,
              d.ic_sub_type,
              su.ic_sub_desc,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              NVL(SUM(d.in_num),0),
              0,
              0,d.storage_id
              from
              ic_in_store_bill a,
              ic_in_store_detail d,
              ic_cod_card_sub_type su
              where
              a.bill_no=d.bill_no
              and trim(d.ic_main_type)=su.ic_main_type and trim(d.ic_sub_type)=su.ic_sub_type
              and d.area_id=''04''
              and substr(d.bill_no,1,2) =''HR''
              and d.ic_main_type=''12'' and d.ic_sub_type=''22''';
  v_where := ' and a.verify_date>=to_date('||''''||p_begin_day ||' 00:00:00'||''',''yyyy-MM-dd hh24:mi:ss'')';
  v_where := v_where ||' and a.verify_date<=to_date('||''''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';

  v_group := ' group by d.ic_main_type,d.ic_sub_type,su.ic_sub_desc, d.storage_id';
  v_sql := v_sql || v_where||v_tmp_where || v_group;
  --DBMS_OUTPUT.PUT_LINE(v_sql);
  EXECUTE immediate v_sql;


  --按原票种计算  TVM废票 查询历史表
  --and substr(to_char(b.TICKETTYPE_ID),1,2)=su.ic_main_type改为 and trim(b.ic_main_type)=su.ic_main_type and trim(b.ic_sub_type)=su.ic_sub_type
  --b.TICKETTYPE_ID=19改为 b.ic_main_type=''12'' and b.ic_sub_type=''22''
  select count(*) into v_tmpCount from ic_idx_history where recd_type='in' and his_table like '%ic_in_store_detai%';
  if v_tmpCount>0 then

       --将已审核的入库明细中记录导入表单号在其区间的历史表
         DECLARE cursor cur_1 IS select his_table from ic_idx_history where recd_type='in' and his_table like '%ic_in_store_detai%'
                          order by  his_table desc;
         BEGIN
            open cur_1;
              LOOP
                fetch cur_1 into v_his_table;
                exit when cur_1%notfound;

               v_sql := '
              insert into T#IC_RCT_PRODUCE
      select  d.ic_main_type,
              d.ic_sub_type,
              su.ic_sub_desc,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              NVL(SUM(d.in_num),0),
              0,
              0,d.storage_id
              from
              ic_in_store_bill a,
              '||v_his_table||' d,
              ic_cod_card_sub_type su
              where
              a.bill_no=d.bill_no

              and trim(d.ic_main_type)=su.ic_main_type and trim(d.ic_sub_type)=su.ic_sub_type
              and d.area_id=''04''
              and substr(d.bill_no,1,2) =''HR''
              and d.ic_main_type=''12'' and d.ic_sub_type=''22''';

               v_where :=' and a.verify_date>=to_date('||''''||p_begin_day ||' 00:00:00'||''',''yyyy-MM-dd hh24:mi:ss'')';
               v_where := v_where ||' and a.verify_date<=to_date('||''''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';

               v_group := ' group by d.ic_main_type,d.ic_sub_type,su.ic_sub_desc, d.storage_id';
               v_sql := v_sql||v_where||v_tmp_where||v_group;
--DBMS_OUTPUT.PUT_LINE('v_sql||v_where||v_group=--'||v_sql||v_where||v_group);

               EXECUTE immediate v_sql;

              END LOOP;
            close cur_1;
          END;

    end if;


   --车票清洗

  insert into T#IC_RCT_PRODUCE_WASH
      select
      a.bill_no,
      null,
      null,
      null,
      null,
      b.valid_num
      from ic_in_store_bill a,ic_in_out_diff b
      where a.bill_no=b.in_bill_no--.related_bill_no
      and a.record_flag='0'
      and substr(a.bill_no,1,2)='QR'
      and a.verify_date>=to_date(p_begin_day||' 00:00:00','yyyy-MM-dd hh24:mi:ss')
      and a.verify_date<=to_date(p_end_day||' 23:59:59','yyyy-MM-dd hh24:mi:ss');

  --首先查询 当前表
  --ic_in_store_detail第1条匹配 and rownum=1
  update T#IC_RCT_PRODUCE_WASH a
      set (a.maintype,a.subtype,a.storage_id)
      =(select b.ic_main_type,b.ic_sub_type,b.storage_id
        from ic_in_store_detail b where a.billno=b.bill_no and rownum=1)
     where EXISTS (select 1 from ic_in_store_detail b where a.billno=b.bill_no);


  --清洗 查询历史表
  select count(*) into v_tmpCount from ic_idx_history where recd_type='in' and his_table like '%ic_in_store_detai%';
  if v_tmpCount>0 then

       --将已审核的入库明细中记录导入表单号在其区间的历史表
          DECLARE cursor cur_1 IS select his_table from ic_idx_history where recd_type='in' and his_table like '%ic_in_store_detai%'
                          order by  his_table desc;
         BEGIN
            open cur_1;
              LOOP
                fetch cur_1 into v_his_table;
                exit when cur_1%notfound;

               v_sql := '
               update T#IC_RCT_PRODUCE_WASH a
                   set (a.maintype,a.subtype,a.storage_id)=(select b.ic_main_type,b.ic_sub_type,b.storage_id
                   from '|| v_his_table ||' b where a.billno=b.bill_no and rownum=1)' ||
               'where exists (select 1 from '|| v_his_table ||' b where a.billno=b.bill_no) ';

               EXECUTE immediate v_sql;


              END LOOP;
            close cur_1;
         END;
      end if;
  --


  update T#IC_RCT_PRODUCE_WASH a
      set a.typename=(select c.ic_sub_desc
        from ic_cod_card_sub_type c where trim(a.maintype)=c.ic_main_type and trim(a.subtype)=c.ic_sub_type)
     where EXISTS (select 1 from ic_cod_card_sub_type c where trim(a.maintype)=c.ic_main_type and trim(a.subtype)=c.ic_sub_type);



  v_sql := '
  insert into T#IC_RCT_PRODUCE
  select NVL(maintype,''00''),
          NVL(subtype,''00''),
          NVL(typename,''00''),
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          NVL(sum(num),0),
          0,
          storage_id
          from
          T#IC_RCT_PRODUCE_WASH
          where num!=0 ';

  v_where := ' ';
  if p_card_main_type is not null and p_card_main_type<>' ' then
      v_where := v_where||' and '||' maintype='||''''||p_card_main_type||'''';
  end if;
  if p_card_sub_type is not null and p_card_sub_type<>' ' then
      v_where := v_where||' and '||'subtype='||''''||p_card_sub_type||'''';
  end if;
  if p_storage_id is not null and p_storage_id<>' ' then
      v_where := v_where||' and storage_id='||''''||p_storage_id||'''';
  end if;

  v_group := ' group by maintype,subtype,typename,storage_id';
  v_sql := v_sql || v_group;
  --DBMS_OUTPUT.PUT_LINE(v_sql);
  EXECUTE immediate v_sql;

  --make_count1 初始化
  --make_count2 预赋值
  --make_count3 注销
  --make_count4 重编码
  --con_count1 编码票
  --con_cont2 赋值票
  --call_count1 待注销票
  --call_count2 回收票
  --call_count3 TVM废票
  --wash_count 清洗
  --返回结果集到游标变量--
  SELECT count(*) INTO v_tmpCount FROM T#IC_RCT_PRODUCE;
  IF v_tmpCount > 0 THEN
      OPEN p_cur FOR
      select
        p_begin_day begin_day,p_end_day end_day,v_operator_name operator_name,v_storage_name title_storage_name,b.storage_name,
        a.cardmaintype,
        a.cardsubtype,
        a.typename,
        sum(a.make_count1) as make_count1,
        sum(a.make_count2) as make_count2,
        sum(a.make_count3) as make_count3,
        sum(a.con_count1) as con_count1,
        sum(a.con_count2) as con_cont2,
        sum(a.call_count1) as call_count1,
        sum(a.call_count2) as call_count2,
        sum(a.call_count3) as call_count3,
        sum(a.wash_count) as wash_count,
        sum(a.make_count4) as make_count4
        from T#IC_RCT_PRODUCE a, ic_cod_storage b
        where a.storage_id = b.storage_id(+) and a.cardmaintype <>'00' 
        group by a.cardmaintype,a.cardsubtype,a.typename,b.storage_name;
    ELSE
        OPEN p_cur FOR
        select
          p_begin_day begin_day,
          p_end_day end_day,
          v_operator_name operator_name,
          v_storage_name title_storage_name,
          v_storage_name storage_name,
          ' ' cardmaintype,
          ' ' cardsubtype,
          ' ' typename,
          null as make_count1,
          null as make_count2,
          null as make_count3,
          null as con_count1,
          null as con_cont2,
          null as call_count1,
          null as call_count2,
          null as call_count3,
          null as wash_count,
          null as make_count4
          from dual;
    END IF;

    --清理临时数据
    DELETE FROM T#IC_RCT_PRODUCE;
    DELETE FROM T#IC_RCT_PRODUCE_WASH;
end;
/
grant execute on ACC_TK.UP_IC_RCT_PRODUCE to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_PRODUCE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_SIGN_CARD_PRODUCE
prompt ==============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_SIGN_CARD_PRODUCE"
(p_cur     IN OUT sys_refcursor,--返回结果集
   p_begin_day  in      VARCHAR2,
   p_end_day    in      VARCHAR2,
   p_card_main_type in  VARCHAR2,
   p_card_sub_type  in  VARCHAR2,

   operatorId IN VARCHAR2--制作人

 )
---------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_SIGN_CARD_PRODUCE
--功能描述：记名卡生产报表
--修改者：  mqf
--修改日期：
---------------------------------------------------
--修改者：mqf
--修改内容：1、普通储值票重用,新增ES储值票重编码记录表acc_tk.IC_ES_AGAIN_INFO_SVT，原表IC_ES_AGAIN_INFO为ES单程票重编码记录表。
--修改日期：2017-04-05
---------------------------------------------------
AS
  v_sql1 VARCHAR(2048);
  v_sql2 VARCHAR(2048);
  v_all_sql VARCHAR(2048);
  v_where VARCHAR(1024);

  v_order_no_sql VARCHAR(2048);
  v_order_no_where VARCHAR(1024);
  v_his_table VARCHAR(50);
  v_his_tbl_sql VARCHAR(2048);
  v_all_his_tbl_sql VARCHAR(2048);
  v_min_order_no_date VARCHAR(20);
  v_max_order_no_date VARCHAR(20);
  v_tmpCount int;
  v_operator_name VARCHAR(16);
  v_memo   varchar(500);
BEGIN

   DELETE FROM T#IC_RCT_SIGN_CARD_PRODUCE;

   SELECT count(*) INTO v_tmpCount FROM acc_st.op_sys_operator WHERE sys_operator_id = operatorId;
   IF v_tmpCount > 0 THEN
      SELECT sys_operator_name INTO v_operator_name FROM acc_st.op_sys_operator WHERE sys_operator_id = operatorId;
   END IF;

   v_order_no_where:= ' WHERE a.out_bill_no=c.out_bill_no
       and a.record_flag=''0''
       and c.finish_flag =''1''';

   v_where:= ' WHERE a.bill_no=b.related_bill_no
       and a.out_bill_no=c.out_bill_no
       and c.order_no=d.order_no
       and d.req_no =e.req_no
       and rtrim(e.card_main_id)=f.card_main_type(+) and rtrim(e.card_sub_id) = f.card_sub_type(+)
     and rtrim(f.ic_main_type)=g.ic_main_type(+) and rtrim(f.ic_sub_type) = g.ic_sub_type(+)
       and a.record_flag=''0''
     and b.record_flag=''0''
       and c.finish_flag =''1''
       and e.hdl_flag=''2''';



   if(p_begin_day is not null ) then
      v_where:=v_where||' and a.bill_date>=to_date('||''''||p_begin_day||' 00:00:00'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
    v_order_no_where:=v_order_no_where||' and a.bill_date>=to_date('||''''||p_begin_day||' 00:00:00'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
   end if;

   if(p_end_day is not null ) then
     v_where:=v_where||' and a.bill_date<=to_date('||''''||p_end_day||' 23:59:59'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
   v_order_no_where:=v_order_no_where||' and a.bill_date<=to_date('||''''||p_end_day||' 23:59:59'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
   end if;

   if p_card_main_type is not null and p_card_main_type<>' ' then
      v_where := v_where||' and '||' trim(g.ic_main_type)='||''''||p_card_main_type||'''';
   end if;
   if p_card_sub_type is not null and p_card_sub_type<>' ' then
      v_where := v_where||' and '||' trim(g.ic_sub_type)='||''''||p_card_sub_type||'''';
   end if;

   v_sql1 := ' insert into T#IC_RCT_SIGN_CARD_PRODUCE(produce_datetime,ic_main_type,ic_sub_type,ic_sub_desc,apply_name,apply_sex_code,tel_no,identity_id,logical_id,remark)
   select to_char(a.bill_date,''yyyyMMdd''),
         f.ic_main_type,
         f.ic_sub_type,
         g.ic_sub_desc,
         e.apply_name,
         e.apply_sex,
         e.tel_no,
         e.identity_id,
         d.logical_id,
         b.remark
  FROM
      acc_tk.ic_pdu_produce_bill a,
      acc_tk.ic_in_store_bill b,
      acc_tk.ic_pdu_plan_order_mapping c,
      acc_tk.ic_es_initi_info d,
      acc_st.st_list_sign_card e,
    acc_tk.IC_COD_CARD_TYPE_CONTRAST f,
      acc_tk.ic_cod_card_sub_type g';
   --ic_pdu_plan_order_mapping 一个出库单对应多个订单

   v_all_sql := v_sql1 || v_where;
   --DBMS_OUTPUT.PUT_LINE(v_all_sql);
   EXECUTE immediate v_all_sql;


   v_order_no_sql := 'select min(substr(c.order_no,3,8)),max(substr(c.order_no,3,8))
   FROM acc_tk.ic_pdu_produce_bill a,
    acc_tk.ic_pdu_plan_order_mapping c';

   --查询order_no范围，确定ic_es_initi_info、ic_es_again_info的分表
   v_order_no_sql := v_order_no_sql || v_order_no_where;
   --DBMS_OUTPUT.PUT_LINE(v_order_no_sql);
   EXECUTE immediate v_order_no_sql
           into v_min_order_no_date,v_max_order_no_date;

    --DBMS_OUTPUT.PUT_LINE(v_min_order_no_date);
    --DBMS_OUTPUT.PUT_LINE(v_max_order_no_date);

   --查询ES初始化历史表
   if v_min_order_no_date is not null and v_min_order_no_date<>' ' then
       DECLARE cursor cur_1 IS select his_table from ic_idx_history
                            where origin_table_name='ic_es_initi_info'
                      and to_char(to_date(end_time,'yyyy-mm-dd hh24:mi:ss'),'yyyymmdd') >= v_min_order_no_date
                            order by his_table;
                 BEGIN
                   open cur_1;
                       LOOP
                       fetch cur_1 into v_his_table;
                       exit when cur_1%notfound;
                              begin
                   select REGEXP_REPLACE(v_sql1,'ic_es_initi_info',v_his_table) into v_his_tbl_sql from dual;
                           v_all_his_tbl_sql := v_his_tbl_sql || v_where;
                    --dbms_output.put_line(v_all_his_tbl_sql);
                                 EXECUTE IMMEDIATE v_all_his_tbl_sql;

                                 exception when others then
                                      rollback;
                                      v_memo := 'ES初始化表游标:插入历史数据出错! '||v_his_table;


                                      --insert into oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
                                      dbms_output.put_line(v_memo);
                                      return;
                             end;
                       END LOOP;
                   close cur_1;
                 END;
   end if;


   --查询重编码
   select REGEXP_REPLACE(v_sql1,'ic_es_initi_info','ic_es_again_info') into v_sql2 from dual;

   v_all_sql := v_sql2 || v_where;
   --DBMS_OUTPUT.PUT_LINE(v_all_sql);
   EXECUTE immediate v_all_sql;

   --20170405 add by mqf 查询新增的ES储值票重编码记录表ic_es_again_info_svt
   select REGEXP_REPLACE(v_sql1,'ic_es_initi_info','ic_es_again_info_svt') into v_sql2 from dual;

   v_all_sql := v_sql2 || v_where;
   --DBMS_OUTPUT.PUT_LINE(v_all_sql);
   EXECUTE immediate v_all_sql;
   --end 20170405 add by mqf

   --查询ES重编码历史表
   if v_min_order_no_date is not null and v_min_order_no_date<>' ' then
       DECLARE cursor cur_1 IS select his_table from ic_idx_history
                            where origin_table_name='ic_es_again_info'
                      and to_char(to_date(end_time,'yyyy-mm-dd hh24:mi:ss'),'yyyymmdd') >= v_min_order_no_date
                            order by his_table;
                 BEGIN
                   open cur_1;
                       LOOP
                       fetch cur_1 into v_his_table;
                       exit when cur_1%notfound;
                              begin
                   select REGEXP_REPLACE(v_sql1,'ic_es_initi_info',v_his_table) into v_his_tbl_sql from dual;
                           v_all_his_tbl_sql := v_his_tbl_sql || v_where;
                   --dbms_output.put_line(v_all_his_tbl_sql);
                                 EXECUTE IMMEDIATE v_all_his_tbl_sql;

                                 exception when others then
                                      rollback;
                                      v_memo := 'ES重编码表游标:插入历史数据出错! '||v_his_table;


                                      --insert into oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
                                      dbms_output.put_line(v_memo);
                                      return;
                             end;
                       END LOOP;
                   close cur_1;
                 END;
   end if;


   --更新性别
   update T#IC_RCT_SIGN_CARD_PRODUCE a
          set a.apply_sex=(select b.code_text from IC_ET_PUB_FLAG b where b.type='6' and a.apply_sex_code=b.code)
   where exists (select 1 from IC_ET_PUB_FLAG b where b.type='6' and a.apply_sex_code=b.code);




  --返回结果集到游标变量--
  SELECT count(*) INTO v_tmpCount FROM T#IC_RCT_SIGN_CARD_PRODUCE;


  IF v_tmpCount > 0 THEN
  -- 添加多日票模式相关字段 返回报表显示的限制模式，出站站点
  open p_cur for
  SELECT
      p_begin_day begin_day,
      p_end_day end_day,
      v_operator_name operator_name,
      produce_datetime,
      ic_main_type,
      ic_sub_type,
      ic_sub_desc,
      apply_name,
      apply_sex,
      tel_no,
      identity_id,
      logical_id,
      remark
  FROM
      T#IC_RCT_SIGN_CARD_PRODUCE
      order by produce_datetime,ic_main_type,ic_sub_type;

  else
  open p_cur for
  SELECT
       p_begin_day begin_day,
       p_end_day end_day,
       v_operator_name operator_name,
       null as produce_datetime,
       ' ' ic_main_type,
       ' ' ic_sub_type,
       ' ' ic_sub_desc,
       ' ' apply_name,
       ' ' apply_sex,
       ' ' tel_no,
       ' ' identity_id,
       ' ' logical_id,
       ' ' remark
  FROM
      dual;
  end if;

  DELETE FROM T#IC_RCT_SIGN_CARD_PRODUCE;

END;
/
grant execute on ACC_TK.UP_IC_RCT_SIGN_CARD_PRODUCE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_STORAGE
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_STORAGE" (

   p_cur IN OUT Sys_Refcursor,
   p_begin_day      in         VARCHAR2,
   p_card_main_type in         VARCHAR2,
   p_card_sub_type  in         VARCHAR2,
   p_storage_id     in         VARCHAR2,
   p_area_id        in         VARCHAR2,
   operatorId       in         VARCHAR2
)
---------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_STORAGE
--功能描述 : 票库：中心票库库存现状统计
--输出参数 :
--输出参数  :
--创建者 :  mqf
--创建日期 : 20131026
--修改者:
--修改日期：
--注释:
--磁悬浮票务改造-添加仓库权限 by lindaquan 20151202
--修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票,屏蔽原有'9'
---------------------------------------------------------------------------                                                   -------------
AS
   v_sql varchar(2048);
   v_final varchar(1024);
   v_where varchar(2048);
   v_group varchar(1024);
   v_operator_name varchar(16);
   v_storage_name  varchar(100);
   v_msg  varchar(2048);
   v_tmpCount int;
   v_storage_id varchar(100);

BEGIN
      DELETE FROM T#IC_RCT_STORAGE_RESULT;
      DELETE FROM T#IC_RCT_STORAGE_RESULT_GP;

      --处理参数
      select sys_operator_name into v_operator_name  from acc_st.op_sys_operator where  sys_operator_id=operatorId;

      v_final := '';
      IF p_card_main_type is not null and p_card_main_type<>' ' THEN
          v_final := v_final||' and '||' rtrim(ltrim(b.ic_main_type)) = '||''''||p_card_main_type||'''';
      END IF;

      IF p_card_sub_type is not null and p_card_sub_type<>' ' THEN
          v_final := v_final||' and '||' rtrim(ltrim(b.ic_sub_type)) = '||''''||p_card_sub_type||'''';
      END IF;

      --添加仓库权限 兼容多个权限
      v_storage_name := '全部';
      IF p_storage_id is not null and p_storage_id<>' ' THEN
          v_storage_id := ''''||p_storage_id||'''';
          select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name
          from ic_cod_storage where instr(p_storage_id, storage_id) > 0;

          IF instr(p_storage_id,',')>0 THEN
             v_final := v_final||' and '||' b.storage_id in( '||v_storage_id ||')';
          ELSE
             v_final := v_final||' and '||' b.storage_id= '||v_storage_id;
          END IF;
      END IF;

      IF p_area_id is not null and p_area_id <>' ' THEN
          v_final := v_final||' and '||' b.area_id= '||''''||p_area_id||'''';
      END IF;

      --添加多日票模式相关字段 加入null值

      --表ic_storage_import已删除
      /*
      insert into #tmp_result
          select a.storage_id,
                 a.area_id,
                 null,
                 a.ic_main_type,
                 a.ic_sub_type,
                 null,
                 a.pre_money,
                 null,null,null,
                 null,null,null,null,
                 sum(a.card_num),
                 0,0,0
                 from ic_storage_import a
                 where a.ic_main_type like +(case when @p_card_main_type is not null and @p_card_main_type<>'' then @p_card_main_type else null end )+'%'
                 and a.ic_sub_type like (case when @p_card_sub_type is not null and @p_card_sub_type<>'' then @p_card_sub_type else null end)+'%'
                 and a.storage_id like (case when @p_storage_id is not null and @p_storage_id<>'' then @p_storage_id else null end)+'%'
                 and a.area_id like (case when @p_area_id is not null and @p_area_id<>'' then @p_area_id else null end)+'%'
                 group by a.storage_id,a.area_id,a.ic_main_type,a.ic_main_type,a.ic_sub_type,a.pre_money
      --select @msg=''
      */

      --上日前入库
      --v_where :=' and b.verify_date<'||''''||p_begin_day ||'''';
      v_where :=' and b.verify_date<to_date('||''''||p_begin_day||' 00:00:00'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';

    --(case when b.area_id=''02'' or b.area_id=''03'' or b.ic_main_type=''6'' or b.ic_main_type=''9'' then b.card_money else 0 end),
      v_sql := '
          INSERT INTO T#IC_RCT_STORAGE_RESULT
             SELECT
             b.storage_id,
                b.area_id,
                null,
                b.ic_main_type,
                b.ic_sub_type,
                null,
                (case when b.area_id=''02'' or b.area_id=''03'' or b.ic_main_type=''6'' then b.card_money else 0 end),
                (case when b.area_id=''03'' and b.ic_main_type=''12'' then to_char(b.valid_date,''yyyyMMdd'') else null end),
                (case when b.area_id=''03'' then  b.station_id else null end),
                null,
                b.exit_station_id,null,b.model,null,
                sum(NVL(b.in_num,0)),
                0,
                0,
                0
             FROM  ic_sts_in b
             WHERE b.area_id=b.area_id ';
  --(case when b.area_id=''02'' or b.area_id=''03'' or b.ic_main_type=''6'' or b.ic_main_type=''9'' then b.card_money else 0 end),
      v_group := ' group by b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type,
                  (case when b.area_id=''02'' or b.area_id=''03'' or b.ic_main_type=''6'' then b.card_money else 0 end),
                  (case when b.area_id=''03'' and b.ic_main_type=''12'' then to_char(b.valid_date,''yyyyMMdd'') else null end),
                  (case when b.area_id=''03'' then  b.station_id else null end),b.exit_station_id,b.model ';
      v_sql := v_sql||v_where||v_final||v_group;

      EXECUTE IMMEDIATE v_sql;

      --select @msg=@msg+' 执行查询上日前入库耗时'+convert(varchar,datediff(ss,@time,getdate()))+'秒'

      --上日前出库
      --添加多日票模式相关字段

      v_sql := '
          INSERT INTO T#IC_RCT_STORAGE_RESULT
             SELECT
             b.storage_id,
                b.area_id,
                null,
                b.ic_main_type,
                b.ic_sub_type,
                null,
                b.card_money,
                (case when b.area_id=''03'' and ic_main_type=''12'' then to_char(b.vaild_date,''yyyyMMdd'') else null end),
                (case when b.area_id=''03'' and b.station_id is not null and b.station_id<>'' '' and b.card_money>0 then b.station_id else null end),
                null,
                b.exit_station_id,null,b.model,null,
               -sum(b.out_num),
                0,
                0,
                0
                FROM ic_stat_out b
                WHERE b.bill_no = b.bill_no ';
    v_group :=' group by b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type,b.card_money,
                    (case when b.area_id=''03'' and b.ic_main_type=''12'' then to_char(b.vaild_date,''yyyyMMdd'')  else null end),
                    (case when   b.area_id=''03'' and b.station_id is not null and b.station_id<>'' '' and b.card_money>0 then b.station_id else null end),
                    b.exit_station_id,b.model ';

    v_sql := v_sql||v_where||v_final||v_group;

    EXECUTE IMMEDIATE v_sql;

      --select @msg=@msg+'  执行查询上日前出库耗时'+convert(varchar,datediff(ss,@time,getdate()))+'秒'
         --上日前调帐出库
           --modify 20120426 luojun 添加多日票模式相关字段

    --v_where :=' and a.verify_date<'||''''||p_begin_day ||'''';
    v_where :=' and a.verify_date<to_date('||''''||p_begin_day||' 00:00:00'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
    v_sql := '
          INSERT INTO T#IC_RCT_STORAGE_RESULT
             SELECT
             b.storage_id,
                b.area_id,
                null,
                b.ic_main_type,
                b.ic_sub_type,
                null,
                b.card_money,
                (case when b.area_id=''03'' and b.ic_main_type=''12''  then to_char(b.vaild_date,''yyyyMMdd'') else null end),
                (case when b.area_id=''03'' and b.station_id is not null and b.station_id<>'' '' and b.card_money>0  then b.station_id else null end),
                null,
                b.exit_station_id,null,b.model,null,
                 -sum(NVL(b.error_quantity,0)),
                0,
                0,
                0
             FROM ic_out_adjust_bill a, ic_out_adjust_bill_detail b
             WHERE a.bill_no = b.bill_no
             AND a.record_flag=''0''';
    v_sql := v_sql||v_where||v_final||v_group;
    EXECUTE IMMEDIATE v_sql;





            --当日入库
            -- 添加多日票模式相关字段

      v_where := ' and to_char(b.verify_date,''yyyyMMdd'') ='||''''||p_begin_day||'''';

      select count(*) into v_tmpCount from   ic_sts_in  where to_char(verify_date,'yyyyMMdd') =p_begin_day;
      IF v_tmpCount > 0 THEN
      --select v_where=' and a.verify_date> convert(char(8),dateadd(dd,-1,'+''''+p_begin_day +''''+'),112) and a.verify_date< convert(char(8),dateadd(dd,1,'+''''+p_begin_day+''''+'),112)'
    --(case when b.area_id=''02'' or b.area_id=''03'' or b.ic_main_type=''6'' or b.ic_main_type=''9'' then b.card_money else 0 end),
          v_sql := '
              INSERT INTO T#IC_RCT_STORAGE_RESULT
                   SELECT
                    b.storage_id,
                    b.area_id,
                    null,
                    b.ic_main_type,
                    b.ic_sub_type,
                    null,
                    (case when b.area_id=''02'' or b.area_id=''03'' or b.ic_main_type=''6'' then b.card_money else 0 end),
                    (case when b.area_id=''03'' and b.ic_main_type=''12'' then to_char(b.valid_date,''yyyyMMdd'') else null end),
                    (case when b.area_id=''03'' then b.station_id else null end ),
                    null,
                    b.exit_station_id,null,b.model,null,
                    0,
                    sum(NVL(b.in_num,0)),
                    0,
                    0
                 FROM  ic_sts_in b
                 WHERE b.bill_no = b.bill_no ';
         --(case when b.area_id=''02'' or b.area_id=''03''or b.ic_main_type=''6'' or b.ic_main_type=''9'' then b.card_money else 0 end),
         v_group := ' group by b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type,
                    (case when b.area_id=''02'' or b.area_id=''03''or b.ic_main_type=''6'' then b.card_money else 0 end),
                    (case when b.area_id=''03'' and b.ic_main_type=''12'' then to_char(b.valid_date,''yyyyMMdd'') else null end),
                    (case when b.area_id=''03'' then b.station_id else null end ),b.exit_station_id,b.model ';
         v_sql := v_sql||v_where||v_final||v_group;


         EXECUTE IMMEDIATE v_sql;
      END IF;
      --select @msg=@msg+'  执行当日入库耗时'+convert(varchar,datediff(ss,@time,getdate()))+'秒'


            --当日出库
            --添加多日票模式相关字段
      select count(*) into v_tmpCount from  ic_stat_out  where   to_char(verify_date,'yyyyMMdd') =p_begin_day;
      IF v_tmpCount > 0 THEN
          v_sql := '
              INSERT INTO T#IC_RCT_STORAGE_RESULT
                 SELECT
                 b.storage_id,
                    b.area_id,
                    null,
                    b.ic_main_type,
                    b.ic_sub_type,
                    null,
                    b.card_money,
                    (case when b.area_id=''03'' and b.ic_main_type=''12'' then to_char(b.vaild_date,''yyyyMMdd'') else null end),
                    (case when b.area_id=''03'' and b.station_id is not null and b.station_id<>'' '' and b.card_money>0 then b.station_id else null end),
                    null,
                    b.exit_station_id,null,b.model,null,
                    0,
                    0,
                    sum(b.out_num),
                    0
                 FROM ic_stat_out b
                 WHERE b.bill_no = b.bill_no ';
         v_group :=' group by b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type,b.card_money,
                    (case when b.area_id=''03'' and b.ic_main_type=''12''  then to_char(b.vaild_date,''yyyyMMdd'') else null end),
                    (case when  b.area_id=''03'' and b.station_id is not null and b.station_id<>'' '' and b.card_money>0 then b.station_id else null end),
                    b.exit_station_id,b.model ';
         v_sql := v_sql||v_where||v_final||v_group;

         EXECUTE IMMEDIATE v_sql;
      END IF;

      --select @msg=@msg+'  执行当日出库耗时'+convert(varchar,datediff(ss,@time,getdate()))+'秒'
        -- 添加多日票模式相关字段
        --当日调帐出库
      v_where := ' and to_char(a.verify_date,''yyyyMMdd'') ='||''''||p_begin_day||'''';


      select count(*) into v_tmpCount from  ic_out_adjust_bill a, ic_out_adjust_bill_detail b
      where a.bill_no = b.bill_no and  a.record_flag='0' and to_char(a.verify_date,'yyyyMMdd') =p_begin_day;
      IF v_tmpCount >0 THEN
          v_sql := '
              INSERT INTO T#IC_RCT_STORAGE_RESULT
                 SELECT
                 b.storage_id,
                    b.area_id,
                    null,
                    b.ic_main_type,
                    b.ic_sub_type,
                    null,
                    b.card_money,
                    (case when b.area_id=''03'' and b.ic_main_type=''12''  then to_char(b.vaild_date,''yyyyMMdd'') else null end),
                    (case when b.area_id=''03'' and b.station_id is not null and b.station_id<>'' '' and b.card_money>0 then b.station_id else null end),
                    null,
                    b.exit_station_id,null,b.model,null,
                    0,
                    0,
                    sum(NVL(b.error_quantity,0)),
                    0
                 FROM ic_out_adjust_bill a, ic_out_adjust_bill_detail b
                 WHERE a.bill_no = b.bill_no
             AND a.record_flag=''0''';

           v_sql := v_sql||v_where||v_final||v_group;
           EXECUTE IMMEDIATE v_sql;
      END IF;




      --根据上日库存，今日出库，今日入库 得出今日结存
      update T#IC_RCT_STORAGE_RESULT set today_total_quantity=(last_total_quantity+today_in_quantity-today_out_quantity)  ;

      update T#IC_RCT_STORAGE_RESULT a
          set a.station_name=(select b.chinese_name from ic_cod_station b where a.station_id=b.station_id)
      where exists (select 1 from ic_cod_station b where a.station_id=b.station_id);

      --添加多日票模式相关字段 更新出站站点名称
      update T#IC_RCT_STORAGE_RESULT a
          set a.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_station_id=b.station_id)
      where exists (select 1 from ic_cod_station b where a.exit_station_id=b.station_id);

      --添加多日票模式相关字段 查询pub_flag 更新限制模式名称
      update T#IC_RCT_STORAGE_RESULT a
          set a.model_name=(select b.code_text from pub_flag b where a.model=b.code and b.type = 26)
      where exists (select 1 from pub_flag b where a.model=b.code and b.type = 26);


      update T#IC_RCT_STORAGE_RESULT a
          set a.area_name=(select b.area_name from ic_cod_area b where a.area_id=b.area_id and a.storage_id=b.storage_id)
      where exists (select 1 from ic_cod_area b where a.area_id=b.area_id and a.storage_id=b.storage_id);

      update T#IC_RCT_STORAGE_RESULT a
          set a.ic_sub_desc=(select b.ic_sub_desc from ic_cod_card_sub_type b where trim(a.ic_main_type)=b.ic_main_type and trim(a.ic_sub_type)=b.ic_sub_type)
      where exists (select 1 from ic_cod_card_sub_type b where trim(a.ic_main_type)=b.ic_main_type and trim(a.ic_sub_type)=b.ic_sub_type);

      --添加多日票模式相关字段 除去NULL值
      update T#IC_RCT_STORAGE_RESULT set station_name=' ' where station_name is null;
      update T#IC_RCT_STORAGE_RESULT set valid_date=' ' where valid_date is null;
      update T#IC_RCT_STORAGE_RESULT set exit_stationid_name=' ' where exit_stationid_name is null;
      update T#IC_RCT_STORAGE_RESULT set model_name=' ' where model_name is null;


      --新票区、编码区不进行进站、出站、限制模式 分组统计
      insert into T#IC_RCT_STORAGE_RESULT_GP(storage_id,area_id,area_name,ic_sub_type,ic_sub_desc,card_money,valid_date,
            last_total_quantity,today_in_quantity,today_out_quantity,today_total_quantity)
      select
             --p_begin_day begin_day,v_operator_name operator_name,v_storage_name storage_name,
             storage_id,area_id,area_name,ic_sub_type,ic_sub_desc,card_money,valid_date,
              sum(NVL(last_total_quantity,0)) as last_total_quantity ,
              sum(NVL(today_in_quantity,0)) as today_in_quantity ,
              sum(NVL(today_out_quantity,0)) as today_out_quantity ,
              sum(NVL(today_total_quantity,0)) as today_total_quantity

      from T#IC_RCT_STORAGE_RESULT
      where area_id in ('01','02')
      group by storage_id,area_id,area_name,ic_sub_type,ic_sub_desc,card_money,valid_date
      having  not (
                    sum(NVL(last_total_quantity,0)) =0 and
                    sum(NVL(today_in_quantity,0)) =0 and
                    sum(NVL(today_out_quantity,0)) =0 and
                    sum(NVL(today_total_quantity,0)) =0

                );

      --除了新票区、编码区，进行进站、出站、限制模式分组
      insert into T#IC_RCT_STORAGE_RESULT_GP(storage_id,area_id,area_name,ic_sub_type,ic_sub_desc,card_money,valid_date,station_name,exit_stationid_name,model_name,
            last_total_quantity,today_in_quantity,today_out_quantity,today_total_quantity)
      select
             --p_begin_day begin_day,v_operator_name operator_name,v_storage_name storage_name,
             storage_id,area_id,area_name,ic_sub_type,ic_sub_desc,card_money,valid_date,station_name,exit_stationid_name,model_name,
              sum(NVL(last_total_quantity,0)) as last_total_quantity ,
              sum(NVL(today_in_quantity,0)) as today_in_quantity ,
              sum(NVL(today_out_quantity,0)) as today_out_quantity ,
              sum(NVL(today_total_quantity,0)) as today_total_quantity

      from T#IC_RCT_STORAGE_RESULT
      where area_id not in ('01','02')
      group by storage_id,area_id,area_name,ic_sub_type,ic_sub_desc,card_money,valid_date,station_name,exit_stationid_name,model_name
      having  not (
                    sum(NVL(last_total_quantity,0)) =0 and
                    sum(NVL(today_in_quantity,0)) =0 and
                    sum(NVL(today_out_quantity,0)) =0 and
                    sum(NVL(today_total_quantity,0)) =0

                );

      SELECT count(*) INTO v_tmpCount FROM T#IC_RCT_STORAGE_RESULT_GP;
      IF v_tmpCount > 0 THEN
          OPEN p_cur FOR
          select
                 p_begin_day begin_day,v_operator_name operator_name,b.storage_name,v_storage_name title_storage_name,
                 a.storage_id,a.area_id,a.area_name,a.ic_sub_type,a.ic_sub_desc,a.card_money,a.valid_date,
                 a.station_name,a.exit_stationid_name,a.model_name,
                 a.last_total_quantity ,a.today_in_quantity ,a.today_out_quantity ,a.today_total_quantity

          from T#IC_RCT_STORAGE_RESULT_GP a, ic_cod_storage b
          where a.storage_id = b.storage_id(+)
          order by a.area_id,a.ic_sub_type,a.card_money,a.valid_date;
      ELSE
          OPEN p_cur FOR
          select
                 p_begin_day begin_day,
                 v_operator_name operator_name,
                 v_storage_name storage_name,
                 v_storage_name title_storage_name,
                 null storage_id,
                 null area_id,
                 null area_name,
                 null ic_sub_type,
                 null ic_sub_desc,
                 null card_money,
                 null valid_date,
                 null station_name,
                 null exit_stationid_name,
                 null model_name,
                 null last_total_quantity ,
                 null today_in_quantity ,
                 null today_out_quantity ,
                 null today_total_quantity

          from dual;
      END IF;


 END;
/
grant execute on ACC_TK.UP_IC_RCT_STORAGE to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_STORAGE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_STORAGE_LIST
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_STORAGE_LIST" (
   p_cur IN OUT Sys_Refcursor,
   p_storage_id  VARCHAR2,
   p_begin_day VARCHAR2,
   p_card_main_type VARCHAR2,
   p_card_sub_type VARCHAR2,
   operatorId VARCHAR2
)
---------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_STORAGE_LIST
--功能描述：票库：车票存量统计
--输出参数
--输出参数  :
--创建者 :  李莉
--创建日期：20130722
--修改人:
--修改日期：
--磁悬浮票务改造-添加仓库权限 by lindaquan 20151202
-------------------------------------------------------------------------------
AS
   v_sql varchar(2048);
   v_where varchar(1024) ;
   v_final varchar(1024);
   v_group varchar(1024);
   v_operator_name     varchar(16);

   v_para_main  varchar(2);
   v_para_sub   varchar(2);

   v_init_sub  varchar(2);
   v_init_sub_desc varchar(30);
   v_init_main varchar(2);

   v_storage_name  varchar(100);

   v_tem_begin_day varchar(80);
   v_count int;
   v_storage_id varchar(100);

   BEGIN


      --建立结果临时表

     delete t#ic_rct_storageList_temp;
     delete t#ic_rct_storageList_result;
     delete t#ic_rct_storageList_del;
     delete t#ic_rct_storageList_in ;
     delete t#ic_rct_storageList_lend;
     delete t#ic_rct_storageList_return ;
     delete t#ic_rct_storageList_total ;

    --v_tem_begin_day:='';

      if p_begin_day is not null then
         v_tem_begin_day:='and a.verify_date<=to_date('||''''||p_begin_day||' 23:59:59'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
       end if;

   --处理参数
    select sys_operator_name into v_operator_name  from acc_st.op_sys_operator where  sys_operator_id=operatorId;

     v_where:=' and b.verify_date<=to_date('||''''||p_begin_day||' 23:59:59'||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
     v_final:='';
     if p_card_main_type is not null then
        v_final:=v_final||' and '||' rtrim(ltrim(b.ic_main_type))= '||''''||p_card_main_type||'''';
     end if ;
     if p_card_sub_type is not null then
       v_final:=v_final||' and '||' rtrim(ltrim(b.ic_sub_type))= '||''''||p_card_sub_type||'''';
     end if  ;

     --添加仓库权限 兼容多个权限
     v_storage_name := '全部';
     if p_storage_id is not null  then
        v_storage_id := ''''||p_storage_id||'''';
        select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
        from ic_cod_storage where instr(p_storage_id, storage_id) > 0;

        IF instr(p_storage_id,',')>0 THEN
           v_final:=v_final||' and '||' b.storage_id in( '||v_storage_id ||')';
        ELSE 
           v_final:=v_final||' and '||' b.storage_id= '||v_storage_id;
        END IF;
     end if ;

     if p_card_main_type is null then
        v_para_main:=null;
     else
        v_para_main:=p_card_main_type;
     end if;

     if p_card_sub_type is null then
        v_para_sub:=null;
     else
        v_para_sub:=p_card_sub_type;
     end if;

-- qu yuan shi ku cun
/*insert into #rpt_temp
    select b.storage_id,
           b.area_id,
           b.ic_sub_type,
           b.pre_money,
           sum(b.card_num)
           from ic_storage_import b
           where b.ic_main_type like ||(case when p_card_main_type is not null and p_card_main_type<>'' then p_card_main_type else '%' end )
           and b.ic_sub_type like (case when p_card_sub_type is not null and p_card_sub_type<>'' then p_card_sub_type else '%' end)
           and b.storage_id like (case when p_storage_id is not null and p_storage_id<>'' then p_storage_id else '%' end)
           group by b.storage_id,b.area_id,b.ic_sub_type,b.pre_money
 */

    --入库
    --(case when b.area_id=''02'' or b.area_id=''03'' or b.ic_main_type=''6'' or b.ic_main_type=''9'' then b.card_money else 0 end),
    v_sql:='
          INSERT INTO t#ic_rct_storageList_temp
             SELECT b.storage_id,
            b.area_id,
            b.IC_MAIN_TYPE,
            b.ic_sub_type,
            (case when b.area_id=''02'' or b.area_id=''03'' then b.card_money else 0 end),
                sum(nvl(b.in_num,0))
             FROM  ic_sts_in b
             WHERE b.bill_no=b.bill_no ' ;

    --v_group :=' group by b.storage_id,b.area_id,b.IC_MAIN_TYPE,b.ic_sub_type,(case when b.area_id=''02'' or b.area_id=''03'' or b.ic_main_type=''6'' or b.ic_main_type=''9'' then b.card_money else 0 end) ';
    v_group :=' group by b.storage_id,b.area_id,b.IC_MAIN_TYPE,b.ic_sub_type,(case when b.area_id=''02'' or b.area_id=''03''  then b.card_money else 0 end) ';

    v_sql:=v_sql||v_where||v_final||v_group;

    execute immediate v_sql;



          --出库
    v_sql:='
          INSERT INTO t#ic_rct_storageList_temp
             SELECT b.storage_id,
                b.area_id,
                b.IC_MAIN_TYPE,
                b.ic_sub_type,
                b.card_money,
            -sum(nvl(b.out_num,0))
             FROM ic_stat_out b
             WHERE b.bill_no = b.bill_no ';

    v_group :=' group by b.storage_id,b.area_id,b.IC_MAIN_TYPE,b.ic_sub_type, b.card_money ' ;
    v_sql:=v_sql||v_where||v_final||v_group;
    execute immediate v_sql;

       --调帐出库
    v_sql:='
          INSERT INTO t#ic_rct_storageList_temp
             SELECT b.storage_id,
                b.area_id,
                b.IC_MAIN_TYPE,
                b.ic_sub_type,
                b.card_money,
                - sum(nvl(b.error_quantity,0))
             FROM ic_out_adjust_bill a, ic_out_adjust_bill_detail b
             WHERE a.bill_no = b.bill_no
         and a.record_flag=''0''';
    v_where :=' and a.verify_date<=to_date('||''''||p_begin_day||' 23:59:59'||''','''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
    v_group :=' group by b.storage_id,b.area_id,b.IC_MAIN_TYPE,b.ic_sub_type,b.card_money ' ;
    v_sql:=v_sql||v_where||v_final||v_group;

    execute immediate v_sql;

          --获得票区票种的数量

    update  t#ic_rct_storageList_temp set card_money=0 where card_main_type = '12' and card_id='22';

          INSERT INTO t#ic_rct_storageList_result
             SELECT b.storage_id,
                b.area_id,' ',
                B.CARD_MAIN_TYPE,
                b.card_id,' ' ,
                b.card_money,
                SUM(b.num)
             FROM t#ic_rct_storageList_temp b
              GROUP BY  b.storage_id,b.area_id,B.CARD_MAIN_TYPE,b.card_id, b.card_money;


    update t#ic_rct_storageList_result a
        set a.area_name=(select b.area_name  from ic_cod_area b where a.storage_id=b.storage_id and a.area_id=b.area_id)
    where exists (select 1  from ic_cod_area b where a.storage_id=b.storage_id and a.area_id=b.area_id);


    update t#ic_rct_storageList_result a
        set a.card_name=(select b.ic_sub_desc from ic_cod_card_sub_type b where trim(a.card_id)=trim(b.ic_sub_type) and trim(a.CARD_MAIN_TYPE)=trim(b.ic_main_type))
    where exists (select 1 from ic_cod_card_sub_type b where trim(a.card_id)=trim(b.ic_sub_type) and trim(a.CARD_MAIN_TYPE)=trim(b.ic_main_type));


      --计算合计，小计

    INSERT INTO t#ic_rct_storageList_result
       SELECT storage_id,
       '91',
       '小计',
          CARD_MAIN_TYPE,
          card_id,
          card_name,
          card_money,
          SUM(num)
          FROM t#ic_rct_storageList_result
          WHERE area_id <> '06'  --待销毁区
          GROUP BY storage_id,CARD_MAIN_TYPE,card_id,card_name,card_money;

    --92 待销毁区
    update t#ic_rct_storageList_result set area_id='92' where area_id='06';
      INSERT INTO t#ic_rct_storageList_result
         SELECT a.storage_id,
         '93',
         trim(b.storage_name)||'小计',
         a.CARD_MAIN_TYPE,
            a.card_id,
            a.card_name,
            a.card_money,
            SUM(a.num)
            FROM t#ic_rct_storageList_result a, ic_cod_storage b
            WHERE (a.area_id = '91' or a.area_id = '92') and a.storage_id = b.storage_id(+)  -- 小计  待销毁区
            GROUP BY a.storage_id,b.storage_name,a.CARD_MAIN_TYPE,a.card_id,a.card_name,a.card_money;


--OPEN p_cur FOR  select * from t#ic_rct_storageList_result where --card_id=(select max(card_id) from t#ic_rct_storageList_result );

      --加入物资部库存，其它库存两列
  select count(*)  into v_count from t#ic_rct_storageList_result where card_id=(select max(card_id) from t#ic_rct_storageList_result );
  if v_count > 0 then
      select distinct card_Main_Type,card_id,card_name  into v_init_main,v_init_sub,v_init_sub_desc from t#ic_rct_storageList_result where card_id=(select max(card_id) from t#ic_rct_storageList_result ) and rownum=1;
  end if;



  select count(*) into v_count from ic_prm_report_storageList a
  where to_char(input_date,'yyyymmdd')=p_begin_day
      and ic_main_type like case when p_card_main_type is not null  then p_card_main_type else '%' end
      and ic_sub_type like case when p_card_sub_type is not null  then p_card_sub_type else '%' end;

   if v_count>0 then
       INSERT INTO t#ic_rct_storageList_result
          SELECT a.storage_id,'94','站存',nvl(b.ic_main_type,null),nvl(b.ic_sub_type,null),nvl(b.ic_sub_desc,null),nvl(a.card_money,0),nvl(a.station_dept,0)
          from ic_prm_report_storageList a,ic_cod_card_sub_type b
          where a.ic_main_type=b.ic_main_type
          and a.ic_sub_type=b.ic_sub_type
          AND to_char(a.input_date,'yyyymmdd')=p_begin_day
          and trim(a.ic_main_type) like case when p_card_main_type is not null then p_card_main_type else '%' end
          and trim(a.ic_sub_type) like case when p_card_sub_type is not null  then p_card_sub_type else '%' end;

       INSERT INTO t#ic_rct_storageList_result
          SELECT a.storage_id,'95','物资部库存',nvl(b.ic_main_type,null),nvl(b.ic_sub_type,null),nvl(b.ic_sub_desc,null),nvl(a.card_money,0),nvl(a.store_dept,0)
          from   ic_prm_report_storageList a,ic_cod_card_sub_type b
          where a.ic_main_type=b.ic_main_type
          and a.ic_sub_type=b.ic_sub_type
          AND to_char(a.input_date,'yyyymmdd')=p_begin_day
          and trim(a.ic_main_type) like case when p_card_main_type is not null  then p_card_main_type else '%' end
          and trim(a.ic_sub_type) like case when p_card_sub_type is not null  then p_card_sub_type else '%' end;

      INSERT INTO t#ic_rct_storageList_result
      SELECT a.storage_id,'96','其它库存',nvl(b.ic_main_type,null),nvl(b.ic_sub_type,null),nvl(b.ic_sub_desc,null),nvl(a.card_money,0),nvl(a.other_dept,0)
      from ic_prm_report_storageList a,ic_cod_card_sub_type b
      where a.ic_main_type=b.ic_main_type
      and a.ic_sub_type=b.ic_sub_type
              AND to_char(a.input_date,'yyyymmdd')=p_begin_day
              and trim(a.ic_main_type) like (case when p_card_main_type is not null then p_card_main_type else '%' end )
              and trim(a.ic_sub_type) like (case when p_card_sub_type is not null  then p_card_sub_type else '%' end);

       INSERT INTO t#ic_rct_storageList_result
          SELECT a.storage_id,'97','收益室存量',nvl(b.ic_main_type,null),nvl(b.ic_sub_type,null),nvl(b.ic_sub_desc,null),nvl(a.card_money,0),nvl(a.income_dept,0)
          from   ic_prm_report_storageList a,ic_cod_card_sub_type b
          where a.ic_main_type=b.ic_main_type
          and a.ic_sub_type=b.ic_sub_type
          AND to_char(a.input_date,'yyyymmdd')=p_begin_day
          and trim(a.ic_main_type) like (case when p_card_main_type is not null then p_card_main_type else '%' end )
          and trim(a.ic_sub_type) like (case when p_card_sub_type is not null then p_card_sub_type  else '%' end);
   else
              INSERT INTO t#ic_rct_storageList_result 
                     select storage_id,'94','站存',v_init_main,v_init_sub,v_init_sub_desc, 0,0 from ic_cod_storage;
              INSERT INTO t#ic_rct_storageList_result 
                     select storage_id,'95','物资部库存',v_init_main,v_init_sub,v_init_sub_desc, 0,0 from ic_cod_storage;
              INSERT INTO t#ic_rct_storageList_result 
                     select storage_id,'96','其它库存',v_init_main,v_init_sub,v_init_sub_desc, 0,0 from ic_cod_storage;
              INSERT INTO t#ic_rct_storageList_result 
                     select storage_id,'97','收益室存量',v_init_main,v_init_sub,v_init_sub_desc,0,0 from ic_cod_storage;
   end if;


    --统计借出未归还数量修改
    --统计借出数据 的SQL 语句改成动态SQL
    --添加仓库权限 兼容多个权限
    v_sql:='insert into t#ic_rct_storageList_lend(storage_id,ic_main_type,ic_sub_type,card_money,out_num)
            select b.storage_id,b.ic_main_type,b.ic_sub_type,b.card_money,sum(nvl(b.lend_quantity,0))
                      FROM ic_out_lend_bill a, ic_out_lend_bill_detail b
                      WHERE  a.bill_no=b.bill_no '||v_tem_begin_day ||'
                      and a.record_flag=''0''
                      and trim(b.ic_main_type) like (case when '''||p_card_main_type||''' is not null then '''||p_card_main_type||''' else ''%'' end )
                      and trim(b.ic_sub_type) like (case when '''||p_card_sub_type||''' is not null then '''||p_card_sub_type||''' else ''%'' end)';
     IF p_storage_id is not null and p_storage_id<>' ' THEN
        v_sql := v_sql || ' and trim(b.storage_id) in ('||v_storage_id||')';
     END IF;
     
     v_sql := v_sql || ' group by b.storage_id,b.ic_main_type,b.ic_sub_type,b.card_money';
     execute immediate v_sql;

    --统计归还数量
    --统计归还数量   的SQL 语句改成动态SQL
    --添加仓库权限 兼容多个权限
    v_sql:= 'insert into t#ic_rct_storageList_return(storage_id,ic_main_type,ic_sub_type,card_money,in_num)
              SELECT b.storage_id,b.ic_main_type,b.ic_sub_type,b.card_money,sum(nvl(b.return_quantity,0))
              FROM ic_in_return_bill a, ic_in_return_bill_detail b
              WHERE  a.bill_no=b.bill_no '||v_tem_begin_day ||'
                     and a.record_flag=''0''
                     and trim(b.ic_main_type) like (case when ''' ||p_card_main_type||''' is not null then '''||p_card_main_type||''' else ''%'' end )
                     and trim(b.ic_sub_type) like (case when '''||p_card_sub_type||''' is not null then '''||p_card_sub_type||''' else ''%''  end)';

    IF p_storage_id is not null and p_storage_id<>' ' THEN
       v_sql := v_sql || ' and trim(b.storage_id) in ('||v_storage_id||')';
    END IF;
     
    v_sql := v_sql || ' group by b.storage_id,b.ic_main_type,b.ic_sub_type,b.card_money';          
    execute immediate v_sql;

    --统计借出数量

    --统计未归还数量
    --借出、归还票种相同
    insert into t#ic_rct_storageList_total(storage_id,ic_main_type,ic_sub_type,card_money,total_num)
    select a.storage_id,a.ic_main_type,a.ic_sub_type,a.card_money,a.out_num-b.in_num
    from t#ic_rct_storageList_lend a,t#ic_rct_storageList_return b
    where a.ic_main_type=b.ic_main_type and a.ic_sub_type=b.ic_sub_type 
          and a.card_money=b.card_money and a.storage_id = b.storage_id;

    --借出票种存在，归还票种不存在
    insert into t#ic_rct_storageList_total(storage_id,ic_main_type,ic_sub_type,card_money,total_num)
    select storage_id,ic_main_type,ic_sub_type,card_money,out_num
    from t#ic_rct_storageList_lend b
    where not exists(select * from t#ic_rct_storageList_return where ic_main_type=b.ic_main_type 
    and ic_sub_type=b.ic_sub_type and card_money=b.card_money);

    --归还票种存在，借出票种不存在
    insert into t#ic_rct_storageList_total(storage_id,ic_main_type,ic_sub_type,card_money,total_num)
    select storage_id,ic_main_type,ic_sub_type,card_money,0-in_num
    from t#ic_rct_storageList_return b
    where not exists(select * from t#ic_rct_storageList_lend where ic_main_type=b.ic_main_type and ic_sub_type=b.ic_sub_type and card_money=b.card_money);

    --更新票种名称
    update t#ic_rct_storageList_total a set ic_sub_type_desc=(select b.ic_sub_desc from ic_cod_card_sub_type b
    where trim(a.ic_main_type)=b.ic_main_type and trim(a.ic_sub_type)=b.ic_sub_type);

    --单程票面值全部作0处理
    update t#ic_rct_storageList_total set card_money=0  where ic_main_type='12' and ic_sub_type='22';

    --放入结果集
    select count(*) into v_count from t#ic_rct_storageList_total;
    if v_count>0 then
      INSERT INTO t#ic_rct_storageList_result
      select  storage_id,'98','借出未归还总计', ic_main_type,ic_sub_type,ic_sub_type_desc,card_money,    sum(total_num)
      from t#ic_rct_storageList_total
      group  by storage_id,ic_main_type,ic_sub_type,ic_sub_type_desc,card_money;
    else
       INSERT INTO t#ic_rct_storageList_result VALUES     (' ','98','借出总计',v_init_main,v_init_sub,v_init_sub_desc,0,0);
    end if ;

    INSERT INTO  t#ic_rct_storageList_result
        SELECT  storage_id,'99','总存量', card_main_type,card_id,card_name,card_money,sum(num)
        from t#ic_rct_storageList_result
        where area_id in ('93' ,'94','95','96','97','98') group by storage_id,card_main_type,card_id,card_name,card_money;

    update t#ic_rct_storageList_result b
    set b.card_id=case when b.card_id='22' then '10'
                      when b.card_id='2' then '20'
                      when b.card_id='4' then  '30'
                      when b.card_id='5' then  '40'
                      when b.card_id='23' then  '50'
                      when b.card_id='7' then  '60'
                      when b.card_id='34' then  '70'
                      when b.card_id='9' then  '80'
                      when b.card_id='32' then '90'
                      when b.card_id='90' then  '91'
                      when b.card_id='91' then '92'
                      when b.card_id='92' then  '93'
                      when b.card_id='93' then '94'
                      when b.card_id='19' then  '95'
                      when b.card_id='30' then  '96'
                      else '97' end  ;

    --加上 card_main_type
    insert into t#ic_rct_storageList_del(storage_id,card_main_type,card_id,card_money,num)
         select storage_id,card_main_type,card_id,card_money,sum(num)
          from t#ic_rct_storageList_result
          group by storage_id,card_main_type,card_id,card_money
           having sum(num)=0;

    delete from t#ic_rct_storageList_result
    where  card_main_type||'-'||card_id||'-'||to_char(card_money) in (select card_main_type||'-'||card_id||'-'||to_char(card_money) from t#ic_rct_storageList_del);





     SELECT count(*) into v_count FROM t#ic_rct_storageList_result;
     IF v_count > 0 THEN
         OPEN p_cur FOR
         SELECT p_begin_day begin_day,v_operator_name operator_name,b.storage_name,v_storage_name title_storage_name,
         (a.card_id||a.card_name) card_name,(a.area_id||a.area_name) area_name,
                a.card_money,a.num
         FROM t#ic_rct_storageList_result a, ic_cod_storage b
         where a.storage_id = b.storage_id(+)
         order by b.storage_name,a.card_name,a.card_money,a.area_name;
     ELSE
         OPEN p_cur FOR
         SELECT p_begin_day begin_day,
               v_operator_name operator_name,
               v_storage_name title_storage_name,
               v_storage_name storage_name,
               ' ' card_name,
               ' ' area_name,
               '' card_money,
               '' num
         FROM dual;
     END IF;

END;
/
grant execute on ACC_TK.UP_IC_RCT_STORAGE_LIST to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_STORAGE_LIST to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_STORAGE_LIST_REMARK
prompt ================================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_STORAGE_LIST_REMARK" (
   p_cur            IN OUT SYS_REFCURSOR,
   p_begin_day      IN VARCHAR2,
   p_card_main_type IN VARCHAR2,
   p_card_sub_type  IN VARCHAR2
 )
 ---------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_STORAGE_LIST_REMARK
--功能描述：票库：车票存量统计-备注子报表
--创建者 :  mqf
--创建日期：20131024
-------------------------------------------------------------------------------
 as
    v_where varchar(1024);
    v_sql varchar(1024);
 begin


    DELETE FROM T#IC_RCT_STORAGELIST_REMARK_RS;

    v_sql := 'insert into T#IC_RCT_STORAGELIST_REMARK_RS(input_date,remark) select input_date, remark from ic_prm_report_storageList ' ;
    v_where :=' where  remark is not null and trim(remark) <>'||''' '''||' and input_date<=to_date('||''''||p_begin_day||' 23:59:59' ||''''||','||''''||'yyyy-mm-dd hh24:mi:ss'||''''||')';
    IF p_card_main_type is not null and p_card_main_type <>' ' THEN
        v_where := v_where ||' and trim(ic_main_type)='||''''||p_card_main_type||'''';
    END IF;
    IF p_card_sub_type is not null and  p_card_sub_type <>' ' THEN
        v_where := v_where ||' and trim(ic_sub_type)='||''''||p_card_sub_type||'''';
    END IF;

    v_sql := v_sql||v_where;

    EXECUTE IMMEDIATE v_sql;

    OPEN p_cur FOR
    select to_char(input_date,'yyyyMMdd') input_date,remark from T#IC_RCT_STORAGELIST_REMARK_RS order by input_date;





 end;
/
grant execute on ACC_TK.UP_IC_RCT_STORAGE_LIST_REMARK to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_STORAGE_LIST_REMARK to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RCT_STORAGE_LIST_SUB
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RCT_STORAGE_LIST_SUB" (
   p_cur            IN OUT SYS_REFCURSOR,
   p_storage_id     IN VARCHAR2,
   p_card_main_type IN VARCHAR2,
   p_card_sub_type  IN VARCHAR2,
   p_begin_day      IN VARCHAR2,
   operatorId       IN VARCHAR2
)
---------------------------------------------------------------------------------
--过程名：  UP_IC_RCT_STORAGE_LIST_SUB
--功能描述：票库：车票存量一览表―子报表
--创建者 : mqf
--创建日期：20131025

--磁悬浮票务改造-添加仓库权限 by lindaquan 20151209
-------------------------------------------------------------------------------
AS
    v_sql      varchar(2048);
    v_wherestr varchar(2048);
    v_final    varchar(2048);
    v_groupstr varchar(1024);
    v_operator_name  varchar(16);
    -- @temp_balance_day varchar(8)
    v_wherecard    varchar(500);
    v_storage_name varchar(100);
    v_storage_id varchar(100);

BEGIN
      --建立结果临时表
      --modify 2       0120426 luojun 添加多日票模式出站站点，限制模式字段
      /*
      CREATE TABLE T#IC_RCT_STORAGE_LIST_SUB_RS(
         storage_id     varchar(4) null,
         area_id     varchar(30) null,
         area_name      varchar(30) null,
         sub_type       varchar(2) null,
         card_name      varchar(30) null,
         card_money   int null,
         valid_date     varchar(30) null,
         station_id     varchar(4) null,
         station_name   varchar(20) null,
         exit_station_id     varchar(4) null,
         exit_stationid_name   varchar(20) null,
         model           varchar(3) null,
         model_name      varchar(20) null,
         num       int null
      )
      */

   DELETE FROM T#IC_RCT_STORAGE_LIST_SUB_RS;

   --统计普通单程票、多日票
   --处理参数
     select sys_operator_name into v_operator_name from acc_st.op_sys_operator where sys_operator_id=operatorId;

     v_wherestr :=' and a.verify_date <=to_date('||''''||p_begin_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';
     v_final := ' ';

     --添加仓库权限 兼容多个权限
     v_storage_name := '全部';
     if p_storage_id is not null and p_storage_id<>' ' then
        v_storage_id := ''''||p_storage_id||'''';
        select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
        from ic_cod_storage where instr(p_storage_id, storage_id) > 0;

        IF instr(p_storage_id,',')>0 THEN
           v_final:=v_final||' and '||' a.storage_id in( '||v_storage_id ||')';
        ELSE 
           v_final:=v_final||' and '||' a.storage_id= '||v_storage_id;
        END IF;
     end if ;

     -- qu yuan shi ku cun
     IF p_card_main_type is null or p_card_main_type=' ' or p_card_main_type='12' or p_card_main_type='40' THEN


         IF p_card_main_type is null or p_card_main_type=' ' THEN
              v_wherecard := ' and ((ic_sub_type=''22'' and ic_main_type=''12'') or (ic_sub_type=''41'' and ic_main_type=''40'')) ';
         ELSE
             IF p_card_main_type='12' THEN
                v_wherecard :=' and ((ic_sub_type=''22'' and ic_main_type=''12'')) ';
             ELSE
                v_wherecard :=' and ((ic_sub_type=''41'' and ic_main_type=''40'')) ';
             END IF;
         END IF;

           --select '@wherecard='+@wherecard
         --仅查找单程票的库存、多日票没有
         --添加多日票模式相关字段 加入null值


         --ic_storage_import已删除
         /*
         IF p_card_main_type is null or p_card_main_type=' ' or p_card_main_type='12'  THEN

            insert into T#IC_RCT_STORAGE_LIST_SUB_RS
            select
                 b.storage_id,
                 b.area_id,
                 null,
                 b.ic_sub_type,
                 ' ',
                 b.pre_money,
                 b.vaild_date,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 sum(b.card_num)
                 from ic_storage_import b
                 where b.ic_sub_type='22' and b.ic_main_type='12'
                 and area_id='03'
                 and b.storage_id like (case when p_storage_id is not null and p_storage_id<>' ' then p_storage_id else '%' end)
                 group by b.storage_id,b.area_id,b.ic_sub_type,b.pre_money,b.vaild_date;
          END IF;
          */

            --入库
            --modify 20120426 luoju  n 添加多日票模式相关字段
      /*
      v_sql := '
            INSERT INTO T#IC_RCT_STORAGE_LIST_SUB_RS
               SELECT a.storage_id,
                  a.area_id,
                  null,
                  a.ic_sub_type,
                  '' '',
                   a.card_money,
                   to_char(a.valid_date,''yyyyMMdd''),
                 a.station_id,
                  null,
                  a.exit_station_id,null,a.model,null,
                  sum(a.in_num)
               FROM ic_sts_in a
               WHERE  a.area_id=''03''';
               --modify by hejj 2011-12-26
               --and ((a.ic_main_type=''12'' and a.ic_sub_type=''22'') or (a.ic_main_type=''40'' and a.ic_sub_type=''41''))'

      v_groupstr := ' group by a.storage_id,a.area_id,a.ic_sub_type, a.card_money ,to_char(a.valid_date,''yyyyMMdd''),a.exit_station_id,a.model ';
     */


     /*
     SELECT b.storage_id,
                  b.area_id,
                  null,
                  b.ic_main_type,
                  b.ic_sub_type,
                  '' '',
                   b.card_money,
                   b.valid_date,
                  b.station_id,
                  null,
                  b.exit_station_id,null,b.model,null,
                  b.in_num
               FROM (
     */
     v_sql := '
            INSERT INTO T#IC_RCT_STORAGE_LIST_SUB_RS

                     SELECT a.storage_id,
                        a.area_id,
                        null,
                        a.ic_main_type,
                        a.ic_sub_type,
                        '' '',
                        a.card_money,
                        to_char(a.valid_date,''yyyyMMdd'') valid_date,
                        a.station_id,
                        null,
                        a.exit_station_id,
                        null,
                        a.model,
                        null,
                        sum(a.in_num) in_num
                     FROM ic_sts_in a
                     WHERE  a.area_id=''03''';
               --modify by hejj 2011-12-26
               --and ((a.ic_main_type=''12'' and a.ic_sub_type=''22'') or (a.ic_main_type=''40'' and a.ic_sub_type=''41''))'

      v_groupstr := ' group by a.storage_id,a.area_id,a.ic_main_type,a.ic_sub_type, a.card_money ,to_char(a.valid_date,''yyyyMMdd''),a.exit_station_id,a.model,a.station_id ';


       --动态票卡条件

      --v_sql := v_sql||v_wherecard||v_wherestr||v_final||v_groupstr||' ) b ';
      v_sql := v_sql||v_wherecard||v_wherestr||v_final||v_groupstr;

      EXECUTE IMMEDIATE v_sql;

            --出库
            --添加多日票模式相关字段
      /*
       SELECT b.storage_id,
                  b.area_id,
                  null,
                  b.ic_main_type,
                  b.ic_sub_type,
                  '' '',
                  b.card_money,
                  b.vaild_date,
                  b.station_id,
                  null,
                  b.exit_station_id,null,b.model,null,
                  b.out_num
               FROM (
      */
      v_sql := '
            INSERT INTO T#IC_RCT_STORAGE_LIST_SUB_RS

                      SELECT a.storage_id,
                        a.area_id,
                        null,
                        a.ic_main_type,
                        a.ic_sub_type,
                        '' '',
                        a.card_money,
                        to_char(a.vaild_date,''yyyyMMdd'') vaild_date,
                        (case when a.station_id is not null and a.station_id<>'' ''  then a.station_id else null end) station_id,
                        null,
                        a.exit_station_id,
                        null,
                        a.model,
                        null,
                        -sum(out_num) out_num
                     FROM ic_stat_out a
                     WHERE  a.area_id=''03''';
                 --modify by hejj 2011-12-26
                --and ((a.ic_sub_type=''22'' and a.ic_main_type=''12'') or (a.ic_sub_type=''41'' and a.ic_main_type=''40'') )'

      v_groupstr := ' group by a.storage_id,a.area_id,a.ic_main_type,a.ic_sub_type,a.card_money, to_char(a.vaild_date,''yyyyMMdd''),(case when a.station_id is not null and a.station_id<>'' '' then a.station_id else null end), a.exit_station_id,a.model ';
       --动态票卡条件
      --v_sql := v_sql||v_wherecard||v_wherestr||v_final||v_groupstr||' ) b ';
      v_sql := v_sql||v_wherecard||v_wherestr||v_final||v_groupstr;

      EXECUTE IMMEDIATE v_sql;


         --调帐出库
           --修正原车站NULL值处理
           --添加多日票模式相关字段
      /*
      SELECT c.storage_id,
                  c.area_id,
                  null,
                  c.ic_main_type,
                  c.ic_sub_type,
                  '' '',
                  c.card_money,
                  c.vaild_date,
                  c.station_id,
                  null,
                  c.exit_station_id,null,c.model,null,
                  c.error_quantity
               FROM (
      */
      v_sql := '
            INSERT INTO T#IC_RCT_STORAGE_LIST_SUB_RS

                     SELECT b.storage_id,
                        b.area_id,
                        null,
                        b.ic_main_type,
                        b.ic_sub_type,
                        '' '',
                        b.card_money,
                         to_char(b.vaild_date,''yyyyMMdd'') vaild_date,
                        (case when b.station_id is  null   then '' '' else b.station_id end) station_id,
                        null,
                        b.exit_station_id,
                        null,
                        b.model,
                        null,
                        - sum(b.error_quantity) error_quantity
                     FROM ic_out_adjust_bill a, ic_out_adjust_bill_detail b
                     WHERE a.bill_no = b.bill_no
                     and b.area_id=''03''
                 and a.record_flag=''0''';

      v_groupstr :=' group by b.storage_id,b.area_id,b.ic_main_type,b.ic_sub_type,b.card_money,to_char(b.vaild_date,''yyyyMMdd''),(case when b.station_id is  null   then '' '' else b.station_id end),b.exit_station_id,b.model ';

      if p_storage_id is not null and p_storage_id<>' ' then
        v_storage_id := ''''||p_storage_id||'''';
        IF instr(p_storage_id,',')>0 THEN
           v_final:=' and '||' b.storage_id in( '||v_storage_id ||')';
        ELSE 
           v_final:=' and '||' b.storage_id= '||v_storage_id;
        END IF;
      end if ;

      --动态票卡条件
      --v_sql := v_sql||v_wherecard||v_wherestr||v_final||v_groupstr||' ) c ';
      v_sql := v_sql||v_wherecard||v_wherestr||v_final||v_groupstr;


      EXECUTE IMMEDIATE v_sql;


      update T#IC_RCT_STORAGE_LIST_SUB_RS a
          set a.station_name=(select b.chinese_name from ic_cod_station b where a.station_id=b.station_id)
      where exists (select 1 from ic_cod_station b where a.station_id=b.station_id);

      --添加多日票模式相关字段 更新出站站点名称
      update T#IC_RCT_STORAGE_LIST_SUB_RS a
          set a.exit_stationid_name=(select b.chinese_name from ic_cod_station b where a.exit_station_id=b.station_id)
      where exists (select 1 from ic_cod_station b where a.exit_station_id=b.station_id);

      --添加多日票模式相关字段 查询pub_flag 更新限制模式名称
      update T#IC_RCT_STORAGE_LIST_SUB_RS a
          set a.model_name=(select b.code_text from pub_flag b where a.model=b.code and b.type = 26)
      where exists (select 1 from pub_flag b where a.model=b.code and b.type = 26);

      update T#IC_RCT_STORAGE_LIST_SUB_RS a
          set a.area_name=(select b.area_name from  ic_cod_area b where a.storage_id=b.storage_id and a.area_id=b.area_id)
      where exists (select 1 from  ic_cod_area b where a.storage_id=b.storage_id and a.area_id=b.area_id);

      --更新票卡名称
      update T#IC_RCT_STORAGE_LIST_SUB_RS a
          set a.card_name=(select b.ic_sub_desc from ic_cod_card_sub_type b where  a.main_type=b.ic_main_type and a.sub_type=b.ic_sub_type)
      where exists (select 1 from ic_cod_card_sub_type b where  a.main_type=b.ic_main_type and a.sub_type=b.ic_sub_type);



END IF;
    --除去NULL值
    update T#IC_RCT_STORAGE_LIST_SUB_RS set station_id=' ' where station_id is null;
    update T#IC_RCT_STORAGE_LIST_SUB_RS set station_name=' ' where station_name is null;
    update T#IC_RCT_STORAGE_LIST_SUB_RS set valid_date=' ' where valid_date is null;

    --添加多日票模式相关字段 除去NULL值
    update T#IC_RCT_STORAGE_LIST_SUB_RS set exit_station_id=' ' where exit_station_id is null;
    update T#IC_RCT_STORAGE_LIST_SUB_RS set exit_stationid_name=' ' where exit_stationid_name is null;
    update T#IC_RCT_STORAGE_LIST_SUB_RS set model=' ' where model is null;
    update T#IC_RCT_STORAGE_LIST_SUB_RS set model_name=' ' where model_name is null;


     --添加多日票模式相关字段 返回报表显示的限制模式，进站站点，出站站点
     OPEN p_cur FOR
     SELECT
      p_begin_day begin_day,v_operator_name operator_name,b.storage_name,
      v_storage_name title_storage_name,
         a.area_id,
         a.area_name,
         a.sub_type,
         a.card_name,
         a.card_money,
         a.valid_date,
         a.station_id,
         a.station_name,
         a.exit_station_id,a.exit_stationid_name,a.model,a.model_name,
         sum(a.num) num
     FROM T#IC_RCT_STORAGE_LIST_SUB_RS a, ic_cod_storage b
         where a.storage_id = b.storage_id(+)
     group by b.storage_name,a.area_id,a.area_name,a.sub_type,a.card_name,a.card_money,a.valid_date,a.station_id,a.station_name,
              a.exit_station_id,a.exit_stationid_name,a.model,a.model_name
     having  sum(a.num) <>0;
END;
/
grant execute on ACC_TK.UP_IC_RCT_STORAGE_LIST_SUB to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RCT_STORAGE_LIST_SUB to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_ROT_BUY
prompt ================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ROT_BUY" (
   p_cur            IN OUT SYS_REFCURSOR,
   operatorId       IN VARCHAR2,
   p_year           IN VARCHAR2,
   p_year_end       IN VARCHAR2,
   p_card_main_type IN VARCHAR2,
   p_card_sub_type  IN VARCHAR2,
   p_storage_id     in VARCHAR2
) 
--过程名：ACC_TK.UP_IC_ROT_BUY
--功能类型：综合类报表，到货统计报表
--制作者：wangkejia
--完成时间：2013-07-29
--修改者:   moqf
--修改日期: 20140413 
--修改内容：使用ic_cod_card_sub_type_ALL表改为使用ic_cod_card_sub_type，ic_cod_card_main_type_ALL表改为使用ic_cod_card_main_type

--磁悬浮票务改造-添加仓库权限 by lindaquan 20151214

AS
   v_year_begin char(4);
   v_year_end char(4);
   v_where VARCHAR2(1000);
   v_beginTime VARCHAR2(19);
   v_endTime VARCHAR2(19);
   v_timeWhere VARCHAR2(100);
   v_cardMainTypeWhere VARCHAR2(100);
   v_cardSubTypeWhere VARCHAR2(100);
   v_sql VARCHAR2(1024);
   v_operatorName VARCHAR2(50);
   v_yearName VARCHAR2(50);
   v_yearNameEnd VARCHAR2(50);
   v_cardName VARCHAR2(50);
   v_tmpCount int;
   v_storage_name  varchar(100);
   v_storage_id varchar(100);
BEGIN

   DELETE FROM T#IC_ROT_BUY_RESULT;
   
   v_where := ' where para_flag=''3'' ';
   --年份条件
   IF p_year IS NOT NULL 
   THEN
      BEGIN
         v_begintime := p_year||'-01-01 00:00:00';
         v_timewhere := 'and rpt_date>=to_date('''||v_begintime||''',''yyyy-MM-dd hh24:mi:ss'') ';
         v_where := v_where||v_timeWhere;
         v_yearName:=p_year;
      END;
    ELSE  
      v_where := v_where;
      v_yearName:='所有年份';
   END IF;
   IF p_year_end IS NOT NULL 
   THEN
      BEGIN
         v_endTime := p_year_end||'-12-31 23:59:59';
         v_timewhere := 'and rpt_date<=to_date('''||v_endtime||''',''yyyy-MM-dd hh24:mi:ss'') ';
         v_where := v_where||v_timeWhere;
         v_yearNameend:=p_year_end;
      END;
   ELSE
      v_where := v_where;
      v_yearNameend:='所有年份';
   END IF;
   
   --添加仓库权限 兼容多个权限
    v_storage_name := '全部';
    IF p_storage_id is not null and p_storage_id<>' ' THEN
        v_storage_id := ''''||p_storage_id||'''';
        select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
        from ic_cod_storage where instr(p_storage_id, storage_id) > 0;
      
        IF instr(p_storage_id,',')>0 THEN
           v_where := v_where||'and storage_id in( '||v_storage_id ||') ';
        ELSE 
           v_where := v_where||'and storage_id= '||v_storage_id||' ';
        END IF;
    END IF;
   
   
   --加入票卡类型条件
   IF p_card_main_type IS NOT NULL 
      AND p_card_sub_type IS NOT NULL 
   THEN
      BEGIN
         v_cardMainTypeWhere := ' and trim(ic_main_type) ='||''''||p_card_main_type||''''
              ||' and trim(ic_sub_type) ='||''''||p_card_sub_type||'''';
         v_where := v_where||v_cardMainTypeWhere;
         --ic_cod_card_sub_type_ALL改为ic_cod_card_sub_type
         SELECT count(*) INTO v_tmpCount  FROM ic_cod_card_sub_type 
             WHERE ic_main_type = p_card_main_type AND ic_sub_type = p_card_sub_type;
         IF v_tmpCount > 0 THEN  
             --ic_cod_card_sub_type_ALL改为ic_cod_card_sub_type
             SELECT ic_sub_desc INTO v_cardName FROM ic_cod_card_sub_type 
                WHERE ic_main_type = p_card_main_type AND ic_sub_type = p_card_sub_type;
         END IF;
      END;
   ELSIF p_card_main_type IS NOT NULL 
      AND p_card_sub_type IS NULL 
   THEN
      v_cardMainTypeWhere := ' and ic_main_type ='||''''||p_card_main_type||'''';
      v_where := v_where||v_cardMainTypeWhere;
      
      --ic_cod_card_main_type_ALL改为ic_cod_card_main_type
      SELECT count(*) INTO v_tmpCount  FROM ic_cod_card_main_type
          WHERE ic_main_type = p_card_main_type;
      IF v_tmpCount > 0 THEN
        --ic_cod_card_main_type_ALL改为ic_cod_card_main_type
        SELECT ic_main_desc INTO v_cardName FROM ic_cod_card_main_type WHERE ic_main_type = p_card_main_type;
      END IF;
   ELSE
      v_cardMainTypeWhere := ' ';
      v_where := v_where||v_cardMainTypeWhere;
      v_cardname:='所有票卡';
   END IF;
   
   
   v_sql := 
     'insert into T#IC_ROT_BUY_RESULT(ic_main_type,ic_sub_type,rpt_year,rpt_date,num,storage_id)
     select ic_main_type,ic_sub_type,TO_CHAR(rpt_date,''YYYY'') as rpt_year ,
     TO_CHAR(rpt_date,''YYYYMMDD'') as rpt_date,sum(new_num),storage_id
     from ic_prm_token_para';
   v_sql := v_sql||v_where;
   
   v_sql := v_sql||' group by storage_id,ic_main_type,ic_sub_type,rpt_date' ;
   DBMS_OUTPUT.PUT_LINE(v_sql);
   EXECUTE IMMEDIATE v_sql;
   
   --查询人名称
   SELECT count(*) INTO v_tmpCount FROM acc_st.op_sys_operator WHERE sys_operator_id = operatorId;
   IF v_tmpCount > 0 THEN
      SELECT sys_operator_name INTO v_operatorName FROM acc_st.op_sys_operator WHERE sys_operator_id = operatorId;
   END IF;
   --结果集设置票卡名称
   --ic_cod_card_sub_type_all改为ic_cod_card_sub_type
   UPDATE T#IC_ROT_BUY_RESULT A SET ic_sub_type_desc = (SELECT IC_SUB_DESC FROM ic_cod_card_sub_type B 
          WHERE trim(A.IC_MAIN_TYPE) = B.IC_MAIN_TYPE AND trim(A.ic_sub_type) = B.ic_sub_type)
   WHERE EXISTS (SELECT 1 FROM ic_cod_card_sub_type B WHERE trim(A.IC_MAIN_TYPE) = B.IC_MAIN_TYPE AND trim(A.ic_sub_type) = B.ic_sub_type);
   --返回结果
   
   SELECT count(*) INTO v_tmpCount FROM T#IC_ROT_BUY_RESULT;
   IF v_tmpCount > 0 THEN
       OPEN p_cur FOR 
       SELECT a.ic_main_type,
          a.ic_sub_type,
          a.rpt_date,
          TO_NUMBER(a.num / 10000, '9999D9999') AS num,
          a.ic_sub_type_desc,
          a.rpt_year,
          v_operatorname operatorname,
          v_yearName yearName,
          v_yearNameEnd yearNameEnd,
          v_cardName cardName,
          b.storage_name,
          v_storage_name title_storage_name 
       FROM T#IC_ROT_BUY_RESULT a, ic_cod_storage b
       where a.storage_id = b.storage_id(+)
       ORDER BY a.rpt_year, a.ic_main_type, a.ic_sub_type, a.rpt_date;
   ELSE 
       OPEN p_cur FOR 
       SELECT ' ' ic_main_type,
          ' ' ic_sub_type,
          null rpt_date,
          null num,
          ' ' ic_sub_type_desc,
          ' ' rpt_year,
          v_operatorname  operatorname,
          v_yearName  yearName,
          v_yearNameEnd  yearNameEnd,
          v_cardName  cardName,
          v_storage_name storage_name,
          v_storage_name title_storage_name
       FROM DUAL;
   END IF;
END;
/
grant execute on ACC_TK.UP_IC_ROT_BUY to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_ROT_BUY to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_ROT_BUY_REMARK
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ROT_BUY_REMARK" (
 p_cur IN OUT SYS_REFCURSOR,
 p_year               IN VARCHAR2,
 p_year_end           IN VARCHAR2,
 p_card_main_type     IN VARCHAR2,
 p_card_sub_type      IN VARCHAR2,
 p_storage_id         IN VARCHAR2
 )
 --过程名：ACC_TK.UP_IC_ROT_BUY_REMARK
--功能类型：综合类报表，到货统计报表-到货备注子报表
--制作者：mqf
--完成时间：2013-10-21

--磁悬浮票务改造-添加仓库权限 by lindaquan 20151214

 as
     v_where varchar(1024);
     v_sql varchar(1024);
     v_storage_id varchar(100);
 begin

    DELETE FROM T#IC_ROT_BUY_REMARK_RESULT;

    v_where := '  where para_flag=''3'' and remark is not null  and rtrim(ltrim(remark)) <>'' '' ';
    IF p_year is not null and  p_year <>' ' THEN
        v_where := v_where || ' and rpt_date>=to_date('''||p_year||'-01-01 00:00:00'',''yyyy-MM-dd hh24:mi:ss'')';
    END IF;
    IF p_year_end is not null and  p_year_end <>' ' THEN
        v_where := v_where || ' and rpt_date<=to_date('''||p_year_end||'-12-31 23:59:59'',''yyyy-MM-dd hh24:mi:ss'')';
    END IF;
    IF p_card_main_type is not null and p_card_main_type<>' ' THEN
        v_where := v_where ||' and ic_main_type ='|| ''''||p_card_main_type||'''';
    END IF;
    IF p_card_sub_type is not null and p_card_sub_type <>' ' THEN
         v_where := v_where ||' and ic_sub_type ='|| ''''||p_card_sub_type||'''';
    END IF;
    --添加仓库权限 兼容多个权限
    IF p_storage_id is not null and p_storage_id<>' ' THEN
        v_storage_id := ''''||p_storage_id||'''';
        IF instr(p_storage_id,',')>0 THEN
           v_where := v_where||' and storage_id in( '||v_storage_id ||') ';
        ELSE 
           v_where := v_where||' and storage_id= '||v_storage_id||' ';
        END IF;
    END IF;

    v_sql :='insert into T#IC_ROT_BUY_REMARK_RESULT(rpt_date,remark) select rpt_date,remark from ic_prm_token_para ';
    v_sql := v_sql||v_where;
    EXECUTE IMMEDIATE v_sql;

    OPEN p_cur FOR
    select to_char(a.rpt_date, 'yyyyMMdd') rpt_date, a.remark
      from T#IC_ROT_BUY_REMARK_RESULT a
     order by to_char(a.rpt_date, 'yyyyMMdd');

 end;
/
grant execute on ACC_TK.UP_IC_ROT_BUY_REMARK to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_ROT_BUY_REMARK to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_ROT_ES_PRODUCE
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ROT_ES_PRODUCE" (
   p_cur IN OUT SYS_REFCURSOR,
   p_begin_day IN VARCHAR2, --开始日期
   p_end_day IN VARCHAR2, --结束日期
   p_device_id IN VARCHAR2, --设备ID
   p_worktype_id IN VARCHAR2, --操作类型
   p_card_main_type IN VARCHAR2, --主票种
   p_card_sub_type IN VARCHAR2, --子票种
   p_storage_id   IN VARCHAR2,
   p_operator_id IN VARCHAR2, --操作员id
   operatorId IN VARCHAR2--制作者

)
-------------------------------------------------------------------------------------------
--过程名：UP_IC_ROT_ES_PRODUCE
--功能类型：综合报表，ES制卡统计
--制作者：wangkejia
--完成时间：2013-07-29

--修改者:   moqf
--修改日期: 20140407
--修改内容：小计、合计 操作员显示'-----'改为显示operator_id

--磁悬浮票务改造-添加仓库权限 by lindaquan 20151210
-------------------------------------------------------------------------------------------
AS
   v_operator_name VARCHAR2(16);
   v_sql VARCHAR2(2048);
   v_where VARCHAR2(1024);
   v_begin_day varchar2(20);
   v_end_day VARCHAR2(20);
   v_card_type_table VARCHAR2(20);
   v_storage_name    varchar(100);
   v_tmpCount int;
   v_storage_id varchar(100);
   v_tmp_where varchar(1024);
BEGIN

   DELETE FROM T#IC_ROT_ES_PRODUCE_RPT;
   DELETE FROM T#IC_ROT_ES_PRODUCE_RESULT;

   select count(*) into v_tmpCount from acc_st.op_sys_operator where sys_operator_id=operatorId;
   IF v_tmpCount >0 THEN
      select sys_operator_name into v_operator_name from acc_st.op_sys_operator where sys_operator_id=operatorId;
   END IF;


   --时间条件
   v_begin_day:=p_begin_day||' 00:00:00';
   v_where := ' and a.verify_date >= to_date('''||v_begin_day||''',''yyyy-MM-dd hh24:mi:ss'')';

   v_end_day:=p_end_day||' 23:59:59';
   v_where := v_where||' and a.verify_date <= to_date('''||v_end_day||''',''yyyy-MM-dd hh24:mi:ss'')';


   IF p_card_main_type IS NOT NULL AND p_card_main_type <> ' ' THEN
         v_where := v_where||' and rtrim(ltrim(b.ic_main_type))='||''''||p_card_main_type|| '''';
   END IF;

   IF p_card_sub_type IS NOT NULL AND p_card_sub_type <> ' ' THEN
         v_where := v_where||' and rtrim(ltrim(b.ic_sub_type))='||''''||p_card_sub_type|| '''';
   END IF;

   --加入设备id
   IF p_device_id IS NOT NULL AND p_device_id <> ' ' THEN
         v_where := v_where||'and b.machine_no='||''''||p_device_id||'''';
   END IF;

   --加入操作类型
   IF p_worktype_id IS NOT NULL AND p_worktype_id <> ' ' THEN
         v_where := v_where||' and a.es_worktype_id ='||''''||p_worktype_id|| '''';
   END IF;

   --加入管理员
   IF p_operator_id IS NOT NULL AND p_operator_id <> ' ' THEN
         v_where:= v_where||' and a.es_operator ='||''''||p_operator_id||'''';
   END IF;
   
   v_storage_name := '全部';
   v_tmp_where := '';
   if p_storage_id is not null and p_storage_id<>' ' then
       v_storage_id := ''''||p_storage_id||'''';
       select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
        from ic_cod_storage where instr(p_storage_id, storage_id) > 0;
        
       IF instr(p_storage_id,',')>0 THEN
          v_tmp_where := v_tmp_where || ' and e.storage_id in('||v_storage_id||') ';
       ELSE 
          v_tmp_where := v_tmp_where || ' and e.storage_id='||v_storage_id;
       END IF;
   end if;

   v_sql :=
   'insert into T#IC_ROT_ES_PRODUCE_RPT
    select  b.machine_no,b.machine_no,a.es_worktype_id,c.es_worktype_name,b.ic_main_type,b.ic_sub_type,
    d.ic_sub_desc,b.draw_quantity,a.es_useless_num,a.es_operator,e.storage_id
    from acc_tk.ic_pdu_produce_bill a,acc_tk.ic_pdu_produce_bill_detail b,
    acc_tk.ic_cod_es_work_type c,acc_tk.ic_cod_card_sub_type d, acc_tk.ic_out_bill_detail e
      where a.bill_no = b.bill_no
          and a.out_bill_no = e.bill_no
      and a.es_worktype_id = c.es_worktype_id
      and trim(b.ic_sub_type) = d.ic_sub_type and trim(b.ic_main_type)=d.ic_main_type
      and a.record_flag = ''0''';
   v_sql := v_sql||v_where||v_tmp_where;


   EXECUTE IMMEDIATE v_sql;

   --插入结果集
   INSERT INTO T#IC_ROT_ES_PRODUCE_RESULT
   SELECT es_id,
      es_desc,
      es_worktype_id,
      es_worktype_desc,
      card_main_type,
      card_sub_type,
      sub_type_desc,
      SUM(fini_pronum),
      SUM(trashy_num),
      ( CASE
        WHEN SUM(fini_pronum) = 0 AND SUM(trashy_num) = 0 THEN 0.000
        WHEN SUM(trashy_num) = 0 THEN 0.000
        ELSE
          ROUND((SUM(trashy_num) * 100.000) / SUM(fini_pronum + trashy_num),3)
        END
      )  trashy_rate,
      operator_id,
      storage_id
   FROM T#IC_ROT_ES_PRODUCE_RPT
   GROUP BY es_id, es_desc, es_worktype_id, es_worktype_desc, card_main_type,
   card_sub_type, sub_type_desc, operator_id,storage_id;

   --小计
   INSERT INTO T#IC_ROT_ES_PRODUCE_RESULT
   SELECT es_id,
      es_desc,
      '999',
      '小计',
      card_main_type,
      card_sub_type,
      sub_type_desc,
      SUM(fini_pronum),
      SUM(trashy_num),
      (CASE
        WHEN SUM(fini_pronum) = 0 AND SUM(trashy_num) = 0 THEN 0.000
        WHEN SUM(trashy_num) = 0 THEN 0.000
        ELSE
          ROUND((SUM(trashy_num) * 100.000) / SUM(fini_pronum + trashy_num),3)
        END
      )  trashy_rate,
      --'-----'
      operator_id,
      storage_id
   FROM T#IC_ROT_ES_PRODUCE_RPT
   GROUP BY es_id, es_desc, card_main_type, card_sub_type, sub_type_desc,operator_id,storage_id;

   --合计
   INSERT INTO T#IC_ROT_ES_PRODUCE_RESULT
   SELECT '99999',
      '合计',
      es_worktype_id,
      es_worktype_desc,
      card_main_type,
      card_sub_type,
      sub_type_desc,
      SUM(fini_pronum),
      SUM(trashy_num),
      null,
      --'-----'
      operator_id,
      storage_id
   FROM T#IC_ROT_ES_PRODUCE_RPT
   GROUP BY es_worktype_id, es_worktype_desc, card_main_type, card_sub_type,
   sub_type_desc,operator_id,storage_id;


   --返回结果集
   SELECT count(*) INTO v_tmpCount FROM T#IC_ROT_ES_PRODUCE_RESULT;
   IF v_tmpCount > 0 THEN
       OPEN p_cur FOR
       SELECT p_begin_day begin_day,
          p_end_day end_day,
          v_operator_name operator_name,
          v_storage_name title_storage_name,
          b.storage_name,
          a.es_id,
          a.es_desc,
          a.es_worktype_id,
          a.es_worktype_desc,
          a.card_main_type,
          a.card_sub_type,
          a.sub_type_desc,
          a.fini_pronum,
          a.trashy_num,
          a.trashy_rate,
          (case when a.es_id='99999' then TO_CHAR(a.trashy_rate) else  TO_CHAR(a.trashy_rate, '9990d999')||'%' end) as trashy_rate_Str,
          a.operator_id
       FROM T#IC_ROT_ES_PRODUCE_RESULT a, ic_cod_storage b
        where a.storage_id = b.storage_id(+)
       --where a.es_id is not null and a.es_id <>' '
       ORDER BY a.es_id, a.es_desc, a.card_sub_type, a.sub_type_desc, a.es_worktype_id
       , a.es_worktype_desc;
   ELSE
       OPEN p_cur FOR
       SELECT p_begin_day begin_day,
          p_end_day end_day,
          v_operator_name operator_name,
          v_storage_name title_storage_name,
          v_storage_name storage_name,
          null es_id,
          null es_desc,
          null es_worktype_id,
          null es_worktype_desc,
          null card_main_type,
          null card_sub_type,
          null sub_type_desc,
          null fini_pronum,
          null trashy_num,
          null trashy_rate,
          null as trashy_rate_Str,
          null operator_id
       FROM dual;
   END IF;


END;
/
grant execute on ACC_TK.UP_IC_ROT_ES_PRODUCE to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_ROT_ES_PRODUCE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_ROT_HOLD
prompt =================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ROT_HOLD" (
p_cur            IN OUT sys_refcursor,--返回结果集
p_begin_day      IN varchar2,
p_card_main_type IN varchar2,
p_card_sub_type  IN varchar2,
p_storage_id IN VARCHAR2,
operatorId     IN varchar2
)
as

-------------------------------------------------------------------------------
--过程名：  up_ic_rot_hold
--功能描述：持有量统计--综合统计报表
--创建者：  mqf
--创建日期：2013-07-18

--磁悬浮票务改造-添加仓库权限 by lindaquan 20151215
-------------------------------------------------------------------------------
    v_beginTime varchar(30);
    v_endTime   varchar(30);
    v_numImport integer;

    ----至报表所需的起始的起始时间前的总入库数量
    v_inNumOrg integer;
    v_inNumOrgReturn integer;

    ----至报表所需的起始时间前的总出库数量
    v_outNumOrg integer;
    v_outNumOrgLend integer;
    v_outNumOrgAdjust integer;

    --累计时使用的临时变量
    v_num integer;
    v_total integer;
    v_yearMonth varchar(6);
     ----至报表所需的起始时间前的总新票数量
    v_newNumOrg integer;

    v_operatorName varchar(50);
    v_cardName varchar(50);
    v_tmpCount int;
    
    v_storage_name  varchar(100);

begin

    --添加仓库权限 兼容多个权限
    v_storage_name := '全部';
    if p_storage_id is not null  then
      select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
      from ic_cod_storage where instr(p_storage_id, storage_id) > 0;
    end if ;

    if p_begin_day is null or p_begin_day=' ' then
         OPEN p_cur FOR
         select year_month,new_num,store_num,reserve_num,
           ' '  operatorName, ' ' cardName,month_name,v_storage_name storage_name,v_storage_name title_storage_name
           from T#IC_ROT_HOLD_RESULT order by year_month;
         return;
    end if;

    v_beginTime := substr(p_begin_day,1,4)||'-01-01 00:00:00';
    v_endTime := p_begin_day||' 23:59:59'; --.999
    v_numImport := 0;

    insert into acc_tk.T#IC_ROT_HOLD_SUM_TEMP(value_name, sum_num, storage_id)
           select 'v_newNumOrg',nvl(sum(new_num),0),storage_id from ic_prm_token_para
           where rpt_date < to_date(v_beginTime, 'yyyy-MM-dd hh24:mi:ss')
           and trim(ic_main_type) = p_card_main_type and trim(ic_sub_type) = p_card_sub_type and para_flag = '2'
           and instr(p_storage_id,storage_id) > 0 group by storage_id;

    --统计起始至终止时间段各月的新票数量
    insert into T#IC_ROT_HOLD_NEW(year_month,new_num,storage_id)
    select substr(to_char(rpt_date,'yyyyMMdd'),1,6),sum(NVL(new_num,0)),storage_id from ic_prm_token_para
          where rpt_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') 
            and rpt_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
            and trim(ic_main_type)=p_card_main_type and trim(ic_sub_type)=p_card_sub_type
            and para_flag='2' and instr(p_storage_id,storage_id) > 0
            group by substr(to_char(rpt_date,'yyyyMMdd'),1,6),storage_id;

     -------------------------------------------------------------------------------
    ---------计算中心票库各月库存-------------------------------------------------


    --累计至统计的起始时间止的所有入库数量
    insert into acc_tk.T#IC_ROT_HOLD_SUM_TEMP(value_name, sum_num, storage_id)
     select 'v_inNumOrg',nvl(sum(in_num),0),storage_id from ic_sts_in
            where verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and trim(ic_main_type)=p_card_main_type 
            and trim(ic_sub_type)=p_card_sub_type and instr(p_storage_id,storage_id) > 0 group by storage_id;


    --累计至统计的起始时间止的所有出库数量
    insert into acc_tk.T#IC_ROT_HOLD_SUM_TEMP(value_name, sum_num, storage_id)
     select 'v_outNumOrg',nvl(sum(out_num),0),storage_id from ic_stat_out
            where verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and trim(ic_main_type)=p_card_main_type 
            and trim(ic_sub_type)=p_card_sub_type and instr(p_storage_id,storage_id) > 0 group by storage_id;
    --累计至统计的起始时间止的所有借票出库数量

    ----借出未归还数量统计使用
    --借出未归还数量=借出数量-归还数量，借出数量统计时记在入库中，归还数量记在出库中
    --累计至统计的起始时间止的所有借票出库数量
    insert into acc_tk.T#IC_ROT_HOLD_SUM_TEMP(value_name, sum_num, storage_id)
     select 'v_outNumOrgLend',nvl(sum(B.lend_quantity),0),B.storage_id from ic_out_lend_bill A,ic_out_lend_bill_detail B
         where A.verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and A.record_flag='0' and
               trim(B.ic_main_type)=p_card_main_type and trim(B.ic_sub_type)=p_card_sub_type and
               A.bill_no=B.bill_no and instr(p_storage_id,B.storage_id) > 0 group by B.storage_id;
    --累计至统计的起始时间止的所有归还入库库数量
    insert into acc_tk.T#IC_ROT_HOLD_SUM_TEMP(value_name, sum_num, storage_id)
     select 'v_inNumOrgReturn',nvl(sum(B.return_quantity),0),B.storage_id from ic_in_return_bill A,ic_in_return_bill_detail B
         where A.verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and A.record_flag='0' and
               trim(B.ic_main_type)=p_card_main_type and trim(B.ic_sub_type)=p_card_sub_type and
               A.bill_no=B.bill_no and instr(p_storage_id,B.storage_id) > 0 group by B.storage_id;

    --累计至统计的起始时间止的所有调帐出库数量
    insert into acc_tk.T#IC_ROT_HOLD_SUM_TEMP(value_name, sum_num, storage_id)
     select 'v_outNumOrgAdjust',nvl(sum(B.error_quantity),0),B.storage_id from ic_out_adjust_bill A,ic_out_adjust_bill_detail B
         where A.verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and  A.record_flag='0' and
               trim(B.ic_main_type)=p_card_main_type and trim(B.ic_sub_type)=p_card_sub_type and
               A.bill_no=B.bill_no and instr(p_storage_id,B.storage_id) > 0 group by B.storage_id;

    --统计起始至终止时间段各月的入库数量
    insert into T#IC_ROT_HOLD_STORE_IN(year_month,in_num, storage_id)
     select substr(to_char(verify_date,'yyyyMMdd'),1,6),sum(in_num), storage_id from ic_sts_in
          where verify_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') 
          and verify_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
          and trim(ic_main_type)=p_card_main_type and trim(ic_sub_type)=p_card_sub_type
          and instr(p_storage_id,storage_id) > 0
          group by substr(to_char(verify_date,'yyyyMMdd'),1,6), storage_id;

    --统计人工输入的跨月未入库数量
    insert into T#IC_ROT_HOLD_STORE_IN_NOT(year_month,in_num, storage_id)
     select substr(to_char(rpt_date,'yyyyMMdd'),1,6),sum(not_in_num), storage_id from ic_prm_token_para
          where rpt_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') 
           and rpt_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
           and trim(ic_main_type)=p_card_main_type and trim(ic_sub_type)=p_card_sub_type
           and para_flag='2' and instr(p_storage_id,storage_id) > 0
           group by substr(to_char(rpt_date,'yyyyMMdd'),1,6), storage_id;


    --统计起始至终止时间段各月的出库数量
    insert into T#IC_ROT_HOLD_STORE_OUT(year_month,out_num, storage_id)
      select substr(to_char(verify_date,'yyyyMMdd'),1,6),sum(out_num), storage_id from ic_stat_out
         where verify_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') 
         and verify_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
         and trim(ic_main_type)=p_card_main_type and trim(ic_sub_type)=p_card_sub_type
         and instr(p_storage_id,storage_id) > 0
         group by substr(to_char(verify_date,'yyyyMMdd'),1,6), storage_id;


    --统计起始至终止时间段各月的借票出库数量
   --借出未归还统计使用
   insert into T#IC_ROT_HOLD_STORE_IN(year_month,in_num, storage_id)
    select substr(to_char(A.verify_date,'yyyyMMdd'),1,6),sum(B.lend_quantity), B.storage_id 
    from ic_out_lend_bill A,ic_out_lend_bill_detail B
         where A.verify_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') 
         and A.verify_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')  and A.record_flag='0'
         and trim(B.ic_main_type)=p_card_main_type and trim(B.ic_sub_type)=p_card_sub_type and A.bill_no=B.bill_no
         and instr(p_storage_id,B.storage_id) > 0
         group by substr(to_char(A.verify_date,'yyyyMMdd'),1,6), B.storage_id;

    --统计起始至终止时间段各月的归还的入库数量
    --借出未归还统计使用
   insert into T#IC_ROT_HOLD_STORE_OUT(year_month,out_num, storage_id)
    select substr(to_char(A.verify_date,'yyyyMMdd'),1,6),sum(B.return_quantity), B.storage_id
    from ic_in_return_bill A,ic_in_return_bill_detail B
         where A.verify_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') 
         and A.verify_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')  and A.record_flag='0'
         and trim(B.ic_main_type)=p_card_main_type and trim(B.ic_sub_type)=p_card_sub_type and A.bill_no=B.bill_no
         and instr(p_storage_id,B.storage_id) > 0
         group by substr(to_char(A.verify_date,'yyyyMMdd'),1,6), B.storage_id;


   --统计起始至终止时间段各月的调帐
   insert into T#IC_ROT_HOLD_STORE_OUT(year_month,out_num, storage_id)
    select substr(to_char(A.verify_date,'yyyyMMdd'),1,6),sum(B.error_quantity), B.storage_id
    from ic_out_adjust_bill A,ic_out_adjust_bill_detail B
         where A.verify_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') 
         and A.verify_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss') and A.record_flag='0'
         and trim(B.ic_main_type)=p_card_main_type and trim(B.ic_sub_type)=p_card_sub_type and A.bill_no=B.bill_no
         and instr(p_storage_id,B.storage_id) > 0
         group by substr(to_char(A.verify_date,'yyyyMMdd'),1,6), B.storage_id;

    insert into T#IC_ROT_HOLD_STORE_OUT(year_month,out_num, storage_id)
        select year_month,0, storage_id from T#IC_ROT_HOLD_STORE_IN 
        where year_month||storage_id not in(select year_month||storage_id from T#IC_ROT_HOLD_STORE_OUT);
    insert into T#IC_ROT_HOLD_STORE_IN(year_month,in_num, storage_id)
        select year_month,0, storage_id from T#IC_ROT_HOLD_STORE_OUT 
        where year_month||storage_id not in(select year_month||storage_id from T#IC_ROT_HOLD_STORE_IN);

    ----------------------------------------------------------------------------------
    --统计各月的累计入库库存
    insert into acc_tk.T#IC_ROT_HOLD_SUM_TEMP(value_name,sum_num,storage_id)
           select 'v_total',nvl(sum(sum_num),0),storage_id from acc_tk.T#IC_ROT_LOST_SUM_TEMP
           where instr('v_inNumOrg,v_outNumOrgLend',value_name)>0
           group by storage_id;
    
    declare cursor csr_total is select value_name,sum_num,storage_id
       from acc_tk.T#IC_ROT_HOLD_SUM_TEMP where value_name='v_total';

     cursor csr is select year_month,sum(in_num) in_num,storage_id
       from T#IC_ROT_HOLD_STORE_IN group by year_month,storage_id;

     begin
       for c_row_total in csr_total loop
             for c_row in csr loop
                    if c_row_total.storage_id = c_row.storage_id then
                      insert into T#IC_ROT_HOLD_STORE_IN_TOTAL(year_month,in_num,storage_id)
                      values(c_row.year_month,c_row_total.sum_num+c_row.in_num,c_row.storage_id);
                    end if;
              end loop;
        end loop;
      end;    

    --累加跨月未入库数量，与手工帐保持一致
    update T#IC_ROT_HOLD_STORE_IN_TOTAL a
      set a.in_num=a.in_num+(select b.in_num
        from T#IC_ROT_HOLD_STORE_IN_NOT b where a.year_month=B.year_month and A.STORAGE_ID=B.STORAGE_ID)
     where EXISTS (select 1 from T#IC_ROT_HOLD_STORE_IN_NOT b where a.year_month=b.year_month and A.STORAGE_ID=B.STORAGE_ID);
    --统计各月的累计入库库存 结束
    -------------------------------------                               -----------------------------------------------

    ------------------------------------------------------------------------------------
    --统计各月的累计出库库存
    delete from acc_tk.T#IC_ROT_HOLD_SUM_TEMP where value_name='v_total';
    insert into acc_tk.T#IC_ROT_HOLD_SUM_TEMP(value_name, sum_num, storage_id)
           select 'v_total',nvl(sum(sum_num),0),storage_id from acc_tk.T#IC_ROT_HOLD_SUM_TEMP
           where instr('v_outNumOrg,v_outNumOrgAdjust,v_inNumOrgReturn',value_name)>0
           group by storage_id;
    
    declare cursor csr_total is
             select value_name,sum_num,storage_id from acc_tk.T#IC_ROT_HOLD_SUM_TEMP where value_name='v_total';

     cursor csr is
            select year_month,sum(out_num) out_num,storage_id from T#IC_ROT_HOLD_STORE_OUT group by year_month,storage_id;

   --借出未归还数量统计需将归还数量统计到出库库
   begin
     for c_row_total in csr_total loop
             for c_row in csr loop
                  if c_row_total.storage_id = c_row.storage_id then
                    insert into T#IC_ROT_HOLD_STORE_OUT_TOTAL(year_month,out_num,storage_id)
                    values(c_row.year_month,c_row_total.sum_num+c_row.out_num,c_row.storage_id) ;
                  end if;
             end loop;
      end loop;
    end;


    --统计各月的累计出库库存 结束
    ------------------------------------------------------------------             ----------------------
    --统计各月的经过出入库后的库存
    --同一月：库存=入库-出库

   insert into T#IC_ROT_HOLD_STORE_TOTAL(year_month,num,storage_id)
      select A.year_month,v_numImport+A.in_num-B.out_num,A.storage_id from T#IC_ROT_HOLD_STORE_IN_TOTAL A,T#IC_ROT_HOLD_STORE_OUT_TOTAL B
      where A.year_month=B.year_month and A.Storage_Id=B.Storage_Id;

    ---------------------------------------------------------------------------------
    ------------------计算站存、其他部门存、收益室存、物资部存-----------------------

    insert into T#IC_ROT_HOLD_STORE_MANU
      (year_month, num_station, num_store, num_income, num_other,storage_id)
      select substr(to_char(input_date, 'yyyyMMdd'), 1, 6),
             sum(NVL(station_dept, 0)),
             sum(NVL(store_dept, 0)),
             sum(NVL(income_dept, 0)),
             sum(NVL(other_dept, 0)),
             storage_id
        from ic_prm_report_storageList
       where input_date >= to_date(v_beginTime, 'yyyy-MM-dd hh24:mi:ss')
         and input_date <= to_date(v_endTime, 'yyyy-MM-dd hh24:mi:ss')
         and trim(ic_main_type) = p_card_main_type
         and trim(ic_sub_type) = p_card_sub_type
         and instr(p_storage_id,storage_id) > 0
       group by substr(to_char(input_date, 'yyyyMMdd'), 1, 6),storage_id;

      ----------------------------------------------------------------------------------
   -----------------总结存=票库库存+站存+其他部门存+收益室存+物资部存
   update T#IC_ROT_HOLD_STORE_TOTAL a
      set a.num=a.num+(select b.num_station+b.num_store+b.num_income+b.num_other
        from T#IC_ROT_HOLD_STORE_MANU b where a.year_month=b.year_month and A.Storage_Id=B.Storage_Id)
     where EXISTS (select 1 from T#IC_ROT_HOLD_STORE_MANU b where a.year_month=b.year_month and A.Storage_Id=B.Storage_Id);

    ----------------------------------------------------------------------------------

    --插入有结存数据而没有新票到货数据的月份，该月份数据为0
    insert into T#IC_ROT_HOLD_NEW(year_month,new_num,storage_id)
            select year_month,0,storage_id from T#IC_ROT_HOLD_STORE_TOTAL 
            where year_month||storage_id not in(select year_month||storage_id from T#IC_ROT_HOLD_NEW);


    --统计各月的累计新票库存
    delete from acc_tk.T#IC_ROT_HOLD_SUM_TEMP where value_name='v_total';
    insert into acc_tk.T#IC_ROT_HOLD_SUM_TEMP(value_name, sum_num, storage_id)
           select 'v_total',nvl(sum(sum_num),0),storage_id from acc_tk.T#IC_ROT_HOLD_SUM_TEMP
           where instr('v_newNumOrg',value_name)>0
           group by storage_id;
    
    declare cursor csr_total is
             select value_name,sum_num,storage_id from acc_tk.T#IC_ROT_HOLD_SUM_TEMP where value_name='v_total';

     cursor csr is
            select year_month,sum(new_num) new_num,storage_id from T#IC_ROT_HOLD_NEW group by year_month,storage_id;

    begin
     for c_row_total in csr_total loop
             for c_row in csr loop
                  if c_row_total.storage_id = c_row.storage_id then
                    insert into T#IC_ROT_HOLD_NEW_TOTAL(year_month,new_num,storage_id)
                    values(c_row.year_month,c_row_total.sum_num+c_row.new_num,c_row.storage_id) ;
                  end if;
             end loop;
      end loop;
    end;

    --统计各月的累计新票库存  结束
    ------------------------------------------------------------------------------------

    --统计各月持有量
    insert into T#IC_ROT_HOLD_RESULT(year_month,new_num,store_num,reserve_num,storage_id)
                    select A.year_month,A.new_num,B.num,A.new_num-B.num,A.storage_id
                            from T#IC_ROT_HOLD_NEW_TOTAL A,T#IC_ROT_HOLD_STORE_TOTAL B
                            where A.year_month=B.year_month and A.Storage_Id=B.Storage_Id;


   --制表人名称
    select sys_operator_name into v_operatorName from acc_st.op_sys_operator where sys_operator_id=operatorId;

    update T#IC_ROT_HOLD_RESULT set month_name=to_char(substr(year_month,-2,2))||'月';

    select ic_sub_desc into v_cardName from ic_cod_card_sub_type where trim(ic_main_type)=p_card_main_type and trim(ic_sub_type)=p_card_sub_type;

    --返回结果集到游标变量--
    SELECT count(*) INTO v_tmpCount FROM T#IC_ROT_HOLD_RESULT;
    IF v_tmpCount > 0 THEN
        OPEN p_cur FOR
        select a.year_month,
               a.new_num,
               a.store_num,
               a.reserve_num,
               v_operatorName operatorName,
               v_cardName     cardName,
               a.month_name,
               b.storage_name,
               v_storage_name title_storage_name
          from T#IC_ROT_HOLD_RESULT a, ic_cod_storage b
         where a.storage_id = b.storage_id(+)
         order by a.year_month;
    ELSE
        OPEN p_cur FOR
        select ' ' year_month,
              0 new_num,
              0 store_num,
              0 reserve_num,
              v_operatorName operatorName,
              v_cardName cardName,
              ' 'month_name,
               v_storage_name storage_name,
               v_storage_name title_storage_name
        from dual;
    END IF;

end;
/
grant execute on ACC_TK.UP_IC_ROT_HOLD to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_ROT_HOLD to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_ROT_LOSS
prompt =================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ROT_LOSS"
(
 p_cur IN OUT Sys_Refcursor,
 p_year     in VARCHAR2,
 p_storage_id IN VARCHAR2,
 operatorId in VARCHAR2
 )
as
---------------------------------------------------------------------------------
--过程名：  UP_IC_ROT_LOSS
--功能描述：普通TOKEN流失统计报表
--创建者：  LILI
--创建日期：2013-07-23
--修改记录:
--注释:

--磁悬浮票务改造-添加仓库权限 by lindaquan 20151211
--------------------------------------------------------------------------------

    --报表所需的起始、终止时间
    v_beginTime varchar(38);
    v_endTime  varchar(38);

    ----至报表所需的起始的起始时间前的总入库数量
    v_inNumOrg int ;
    ----至报表所需的起始的起始时间前的总借票归还数量
    v_inNumOrgReturn int ;

    ----至报表所需的起始时间前的总出库数量
    v_outNumOrg int;
    v_outNumOrgLend int;
    v_outNumOrgAdjust int;

    --系统运营开始导入的库存
    v_numImport int ;

    --累计时使用的临时变量
    v_num int;
    v_total int;
    v_yearMonth varchar(6);

    v_lastYear varchar(4);
    v_lastMonth varchar(2);
    v_lastYearMonth varchar(6);
    v_lastNum int;

    v_operatorName varchar(50);
    v_tmpCount int;

    v_storage_name  varchar(100);

 begin
    --清空临时表
    delete t#ic_rot_lost_store_in;
    delete t#ic_rot_lost_store_in_not;
    delete t#ic_rot_lost_store_in_total;
    delete t#ic_rot_lost_store_out;
    delete t#ic_rot_lost_store_out_total;
    delete t#ic_rot_lost_store_total;
    delete t#ic_rot_lost_store_manu;
    delete t#ic_rot_lost_store_output;
    delete t#ic_rot_lost_store_manu_1;
    delete t#ic_rot_lost_store_sell;
    delete t#ic_rot_lost_store_sell_total;
    delete t#ic_rot_lost_result;

    --添加仓库权限 兼容多个权限
    v_storage_name := '全部';
    if p_storage_id is not null  then
      select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name
      from ic_cod_storage where instr(p_storage_id, storage_id) > 0;
    end if ;

    if(p_year is null) then
          OPEN p_cur FOR
          select '' operatorName, year_month,year_month_desc,
              num_last,num_current,num_useless,num_new,num_sell,num_loss,
              num_loss_rate,num_useless_rate,'' remark,v_storage_name storage_name,v_storage_name title_storage_name
          from t#ic_rot_lost_result order by year_month;
        return;
    end if;

    --统计的终止时间为输入年的最后一天
    v_endTime:=p_year||'-12-31 23:59:59';
    --统计的起始时间为输入年的前一年的最后二个月的第一天
    v_beginTime:=to_char(to_number(p_year)-1)||'-11-01 00:00:00';

    --系统运营开始导入的库存
    --单程票新票区：1075233 编码区：3503292 待注销区：66582 循环区：323695 待销毁区：96844
    --select v_numImport:=323695||3503292||1075233||66582||96844
    --select sum(card_num) into v_numImport from ic_ini_storage_import where ic_main_type='12' and ic_sub_type='22';
    --ic_ini_storage_import表已经删除v_numImport赋0
    v_numImport:=0;
    -------------------------------------------------------------------------------
    ---------计算票库各月库存-------------------------------------------------

    --插入临时统计表 20151214
    --累计至统计的起始时间止的所有入库数量
    insert into acc_tk.T#IC_ROT_LOST_SUM_TEMP(value_name, sum_num, storage_id)
           select 'v_inNumOrg',nvl(sum(in_num),0),storage_id from ic_sts_in
           where verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and ic_main_type='12' and ic_sub_type='22'
           and instr(p_storage_id, storage_id) > 0 group by storage_id;
    --累计至统计的起始时间止的所有出库数量
    insert into acc_tk.T#IC_ROT_LOST_SUM_TEMP(value_name, sum_num, storage_id)
           select 'v_outNumOrg',nvl(sum(out_num),0),storage_id from ic_stat_out
           where verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and ic_main_type='12' and ic_sub_type='22'
           and instr(p_storage_id, storage_id) > 0 group by storage_id;

    ----借出未归还数量统计使用
    --借出未归还数量=借出数量-归还数量，借出数量统计时记在入库中，归还数量记在出库中
    --累计至统计的起始时间止的所有借票出库数量
    select count(*) into v_tmpCount from ic_out_lend_bill A,ic_out_lend_bill_detail B
           where A.verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and A.record_flag='0'
           and B.ic_main_type='12' and B.ic_sub_type='22' and A.bill_no=B.bill_no
           and instr(p_storage_id, B.storage_id) > 0;
    if v_tmpCount > 0 then
        insert into acc_tk.T#IC_ROT_LOST_SUM_TEMP(value_name, sum_num, storage_id)
           select 'v_outNumOrgLend',nvl(sum(B.lend_quantity),0),B.storage_id from ic_out_lend_bill A,ic_out_lend_bill_detail B
               where A.verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and A.record_flag='0'
               and B.ic_main_type='12' and B.ic_sub_type='22' and A.bill_no=B.bill_no
               and instr(p_storage_id, B.storage_id) > 0
               group by B.storage_id;
    end if;

    --累计至统计的起始时间止的所有归还入库库数量
    select count(*) into v_tmpCount from ic_in_return_bill A,ic_in_return_bill_detail B
    where A.verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and A.record_flag='0' and B.ic_main_type='12'
          and B.ic_sub_type='22' and A.bill_no=B.bill_no and instr(p_storage_id, B.storage_id) > 0;
    if v_tmpCount > 0 then
        insert into acc_tk.T#IC_ROT_LOST_SUM_TEMP(value_name, sum_num, storage_id)
          select 'v_inNumOrgReturn',nvl(sum(B.return_quantity),0),B.storage_id from ic_in_return_bill A,ic_in_return_bill_detail B
               where A.verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and A.record_flag='0'
               and B.ic_main_type='12' and B.ic_sub_type='22' and A.bill_no=B.bill_no
               and instr(p_storage_id, B.storage_id) > 0
               group by B.storage_id;
    end if;

    --累计至统计的起始时间止的所有调帐出库数量
    insert into acc_tk.T#IC_ROT_LOST_SUM_TEMP(value_name, sum_num, storage_id)
    select 'v_outNumOrgAdjust',nvl(sum(B.error_quantity),0),B.storage_id from ic_out_adjust_bill A,ic_out_adjust_bill_detail B
      where A.verify_date<to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss') and  A.record_flag='0' and B.ic_main_type='12' and B.ic_sub_type='22'
      and A.bill_no=B.bill_no and instr(p_storage_id, B.storage_id) > 0
      group by B.storage_id;

    --统计起始至终止时间段各月的入库数量
    insert into t#ic_rot_lost_store_in(year_month,in_num,storage_id)
    select substr(to_char(verify_date,'yyyymmdd'),1,6),sum(in_num),storage_id from ic_sts_in
        where verify_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss')
        and verify_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
        and ic_main_type='12' and ic_sub_type='22' and instr(p_storage_id, storage_id) > 0
        group by substr(to_char(verify_date,'yyyymmdd'),1,6),storage_id;

    --统计人工输入的跨月未入库数量
     insert into t#ic_rot_lost_store_in_not(year_month,in_num,storage_id)
     select substr(to_char(rpt_date,'yyyymmdd'),1,6),sum(not_in_num),storage_id from ic_prm_token_para
            where rpt_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss')
              and rpt_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
              and ic_main_type='12' and ic_sub_type='22' and para_flag='1' and instr(p_storage_id, storage_id) > 0
              group by substr(to_char(rpt_date,'yyyymmdd'),1,6),storage_id;

     --统计起始至终止时间段各月的出库数量
    insert into t#ic_rot_lost_store_out(year_month,out_num,storage_id)
    select substr(to_char(verify_date,'yyyymmdd'),1,6),sum(out_num),storage_id from ic_stat_out
           where verify_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss')
            and verify_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
            and ic_main_type='12' and ic_sub_type='22' and instr(p_storage_id, storage_id) > 0
            group by substr(to_char(verify_date,'yyyymmdd'),1,6),storage_id;

   --统计起始至终止时间段各月的借票出库数量
   --借出未归还统计使用
   insert into t#ic_rot_lost_store_in(year_month,in_num,storage_id)
    select substr(to_char(a.verify_date,'yyyymmdd'),1,6),sum(B.lend_quantity),B.storage_id
    from ic_out_lend_bill A,ic_out_lend_bill_detail B
    where A.verify_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss')
        and A.verify_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
        and A.record_flag='0' and B.ic_main_type='12' and B.ic_sub_type='22' and A.bill_no=B.bill_no
        and instr(p_storage_id, B.storage_id) > 0
    group by substr(to_char(a.verify_date,'yyyymmdd'),1,6),B.storage_id;

    --统计起始至终止时间段各月的归还的入库数量
    --借出未归还统计使用
   insert into t#ic_rot_lost_store_out(year_month,out_num,storage_id)
    select substr(to_char(a.verify_date,'yyyymmdd'),1,6),sum(B.return_quantity),B.storage_id
      from ic_in_return_bill A,ic_in_return_bill_detail B
      where A.verify_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss')
          and A.verify_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
          and A.record_flag='0' and B.ic_main_type='12' and B.ic_sub_type='22' and A.bill_no=B.bill_no
          and instr(p_storage_id, B.storage_id) > 0
      group by substr(to_char(a.verify_date,'yyyymmdd'),1,6),B.storage_id;

     --统计起始至终止时间段各月的调帐出库数量
     insert into t#ic_rot_lost_store_out(year_month,out_num,storage_id)
     select substr(to_char(a.verify_date,'yyyymmdd'),1,6),sum(B.error_quantity),B.storage_id
       from ic_out_adjust_bill A,ic_out_adjust_bill_detail B
       where A.verify_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss')
         and A.verify_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss') and A.record_flag='0'
         and B.ic_main_type='12' and B.ic_sub_type='22' and A.bill_no=B.bill_no
         and instr(p_storage_id, B.storage_id) > 0
       group by substr(to_char(a.verify_date,'yyyymmdd'),1,6),B.storage_id;

   --出库有而入库无的月：入库为0
   insert into t#ic_rot_lost_store_in(year_month,in_num,storage_id)
   select year_month,0,storage_id from t#ic_rot_lost_store_out
          where year_month||storage_id not in (select year_month||storage_id from t#ic_rot_lost_store_in);

   --入库有而出库无的月：出库为0
   insert into t#ic_rot_lost_store_out(year_month,out_num,storage_id)
   select year_month,0,storage_id from t#ic_rot_lost_store_in
          where year_month||storage_id  not in(select year_month||storage_id from t#ic_rot_lost_store_out);


   ----------------------------------------------------------------------------------
    --统计各月的累计入库库存
    --借出未归还数量统计需将借出数量统计到入库
    --v_total:=v_inNumOrg+v_outNumOrgLend;
    insert into acc_tk.T#IC_ROT_LOST_SUM_TEMP(value_name,sum_num,storage_id)
           select 'v_total',nvl(sum(sum_num),0),storage_id from acc_tk.T#IC_ROT_LOST_SUM_TEMP
           where instr('v_inNumOrg,v_outNumOrgLend',value_name)>0
           group by storage_id;

     declare cursor csr_total is select value_name,sum_num,storage_id
       from acc_tk.T#IC_ROT_LOST_SUM_TEMP where value_name='v_total';

     cursor csr is select year_month,sum(in_num) in_num,storage_id
       from t#ic_rot_lost_store_in group by year_month,storage_id;

     begin
       for c_row_total in csr_total loop
             for c_row in csr loop
                    if c_row_total.storage_id = c_row.storage_id then
                      insert into t#ic_rot_lost_store_in_total(year_month,in_num,storage_id)
                      values(c_row.year_month,c_row_total.sum_num+c_row.in_num,c_row.storage_id);
                    end if;
              end loop;
        end loop;
      end;

   --累加跨月未入库数量，与手工帐保持一致
    update t#ic_rot_lost_store_in_total a
    set in_num=(select  A.in_num+B.in_num from t#ic_rot_lost_store_in_not B
    where A.year_month=B.year_month and A.STORAGE_ID=B.STORAGE_ID);

--统计各月的累计入库库存 结束
-----------------------------------------------------------------------------------


   --统计各月的累计出库库存
   --v_total:=v_outNumOrg+v_outNumOrgAdjust+v_inNumOrgReturn;
   delete from acc_tk.T#IC_ROT_LOST_SUM_TEMP where value_name='v_total';
   insert into acc_tk.T#IC_ROT_LOST_SUM_TEMP(value_name, sum_num, storage_id)
           select 'v_total',nvl(sum(sum_num),0),storage_id from acc_tk.T#IC_ROT_LOST_SUM_TEMP
           where instr('v_outNumOrg,v_outNumOrgAdjust,v_inNumOrgReturn',value_name)>0
           group by storage_id;

   declare cursor csr_total is
           select value_name,sum_num,storage_id from acc_tk.T#IC_ROT_LOST_SUM_TEMP where value_name='v_total';

   cursor csr is
          select year_month,sum(out_num) out_num,storage_id from t#ic_rot_lost_store_out group by year_month,storage_id;

   --借出未归还数量统计需将归还数量统计到出库库
   begin
     for c_row_total in csr_total loop
             for c_row in csr loop
                  if c_row_total.storage_id = c_row.storage_id then
                    insert into t#ic_rot_lost_store_out_total(year_month,out_num,storage_id)
                    values(c_row.year_month,c_row_total.sum_num+c_row.out_num,c_row.storage_id) ;
                  end if;
             end loop;
      end loop;
    end;

 --统计各月的累计出库库存 结束
    ----------------------------------------------------------------------------------------
   --统计各月的经过出入库后的库存
   --同一月：库存=入库-出库
   insert into t#ic_rot_lost_store_total(year_month,num,storage_id)
   select A.year_month,v_numImport+A.in_num-B.out_num,A.STORAGE_ID from t#ic_rot_lost_store_in_total A,t#ic_rot_lost_store_out_total B
    where A.year_month=B.year_month and A.STORAGE_ID=B.STORAGE_ID;

   -------------------------------------------------------------------------------
    ---------计算票库各月库存结束-------------------------------------------------
---------------------------------------------------------------------------------

    ------------------计算站存、其他部门存、收益室存、物资部存-----------------------

    insert into t#ic_rot_lost_store_manu(year_month,num_station,num_store,num_income,num_other,storage_id)
    select substr(to_char(input_date,'yyyymmdd'),1,6),sum(nvl(station_dept,0)),sum(nvl(store_dept,0)),sum(nvl(income_dept,0)),sum(nvl(other_dept,0)),storage_id
    from ic_prm_report_storageList
    where input_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss')
        and input_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
        and ic_main_type='12'  and ic_sub_type='22' and instr(p_storage_id, storage_id) > 0
    group by substr(to_char(input_date,'yyyymmdd'),1,6),storage_id;

----------------------------------------------------------------------------------
   -----------------总结存=票库库存+站存+其他部门存+收益室存+物资部存
    update t#ic_rot_lost_store_total a set a.num=(select A.num+B.num_station+B.num_store+B.num_income+B.num_other
    from t#ic_rot_lost_store_manu b
    where a.year_month=b.year_month and a.storage_id=b.storage_id);

---整理成上月结存、本月结存-----------------------------------------------------------
     insert into t#ic_rot_lost_store_output(year_month,num_last,num_current,storage_id)
     select a.year_month,nvl(b.num,0),nvl(a.num,0),a.storage_id
        from t#ic_rot_lost_store_total a
        left join t#ic_rot_lost_store_total b
        on a.storage_id=b.storage_id and
            (to_number(substr(a.year_month,1,4))-to_number(substr(b.year_month,1,4)))*12
            + to_number(substr(a.year_month,-2,2))
            - to_number(substr(b.year_month,-2,2)) = 1
        order by a.storage_id,a.year_month;
--整理成上月结存、本月结存结束-----------------------------------------------------------


    --用户输入废票数、新票数

    insert into t#ic_rot_lost_store_manu_1(year_month,num_useless,num_new,storage_id)
    select substr(to_char(rpt_date,'yyyymmdd'),1,6), sum(nvl(useless_num,0)),sum(nvl(new_num,0)),storage_id
    from ic_prm_token_para
    where rpt_date>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss')
        and rpt_date<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
        and ic_main_type='12' and ic_sub_type='22' and para_flag='1' and instr(p_storage_id, storage_id) > 0
    group by substr(to_char(rpt_date,'yyyymmdd'),1,6),storage_id;

   --单程票售卖客流-----------------------------------------------------------------------------
   --单程票
   --20131230 mqf 车站售存数据表结构改变 saleNum 改为currentTotal
    insert into t#ic_rot_lost_store_sell(year_month,num_sell,storage_id)
    select substr(to_char(REPORTDATE,'yyyymmdd'),1,6),to_number(sum(nvl(saleNum,0))),storage_id from ic_inf_station_sale
    where   --TICKETTYPE_ID =22 (运营中心单程票：0100)
        TICKETTYPE_ID ='0100' and instr(p_storage_id, storage_id) > 0
        and REPORTDATE>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss')
        and REPORTDATE<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
    group by substr(to_char(REPORTDATE,'yyyymmdd'),1,6),storage_id;

   /* 现系统没有TICKETTYPE_ID =11对应的不限期预制票
   --预制票
    insert into t#ic_rot_lost_store_sell(year_month,num_sell)
    select substr(to_char(REPORTDATE,'yyyymmdd'),1,6),to_number(sum(nvl(OP101SOLDNUM,0))) from ic_inf_station_sale
    where  TICKETTYPE_ID =11 and REPORTDATE>=to_date(v_beginTime,'yyyy-MM-dd hh24:mi:ss')
        and REPORTDATE<=to_date(v_endTime,'yyyy-MM-dd hh24:mi:ss')
    group by substr(to_char(REPORTDATE,'yyyymmdd'),1,6);
    */
    insert into t#ic_rot_lost_store_sell_total(year_month,num_sell,storage_id)
    select year_month,sum(num_sell),storage_id from t#ic_rot_lost_store_sell group by year_month,storage_id;

    --生成报表所需的基本要素年月、上月结存、本月结存、废票数、新票到货数、单成票售卖数客流
    insert into t#ic_rot_lost_result(year_month,num_last,num_current,num_useless,num_new,num_sell,storage_id)
    select A.year_month,nvl(A.num_last,0),nvl(A.num_current,0),nvl(B.num_useless,0),nvl(B.num_new,0),nvl(C.num_sell,0),A.STORAGE_ID
    from t#ic_rot_lost_store_output A
           left join t#ic_rot_lost_store_manu_1 B on A.year_month =B.year_month and A.STORAGE_ID=B.STORAGE_ID
           right join t#ic_rot_lost_store_sell_total C on A.year_month=C.year_month AND A.STORAGE_ID=C.STORAGE_ID;


   --统计季节、年数据
   --计算年月所属季节
   update t#ic_rot_lost_result set season=to_char(to_date(year_month||'01','yyyy-mm-dd'),'q')
   where year_month is not null;
   --按季统计结果
   insert into t#ic_rot_lost_result_season(year_month,season,num_last,num_current,num_useless,num_new,num_sell,storage_id)
   select '',season,sum(nvl(num_last,0)),sum(nvl(num_current,0)),sum(nvl(num_useless,0)),sum(nvl(num_new,0)),sum(nvl(num_sell,0)),storage_id
   from t#ic_rot_lost_result
   where substr(year_month,1,4)=p_year group by season,storage_id;

   --按年统计结果    年的seaon字段填5
   insert into t#ic_rot_lost_result_season(year_month,season,num_last,num_current,num_useless,num_new,num_sell,storage_id)
   select '',5,nvl(sum(num_last),0),nvl(sum(num_current),0),nvl(sum(num_useless),0),nvl(sum(num_new),0),nvl(sum(num_sell),0),storage_id
   from t#ic_rot_lost_result
   where substr(year_month,1,4)=p_year group by storage_id;

   insert into t#ic_rot_lost_result_season(year_month,season,num_last,num_current,num_useless,num_new,num_sell,storage_id)
   select '',6,nvl(sum(num_last),0),nvl(sum(num_current),0),nvl(sum(num_useless),0),nvl(sum(num_new),0),nvl(sum(num_sell),0),storage_id
   from t#ic_rot_lost_result group by storage_id;

   --一季度
   update t#ic_rot_lost_result_season set year_month=p_year||'0301' where season=1 ;
   --二季度
   update t#ic_rot_lost_result_season set year_month=p_year||'0601' where season=2;
   --三季度
   update t#ic_rot_lost_result_season set year_month=p_year||'0901' where season=3;
   --四季度
   update t#ic_rot_lost_result_season set year_month=p_year||'1201' where season=4;
   --年
   update t#ic_rot_lost_result_season set year_month=p_year||'1202' where season=5;

   --开通至今合计
   update t#ic_rot_lost_result_season set year_month=p_year||'1203' where season=6;
   --季、年、开通至今合计合并到各月结果
   insert into t#ic_rot_lost_result(year_month,season,num_last,num_current,num_useless,num_new,num_sell,storage_id)
   select year_month,season,num_last,num_current,num_useless,num_new,num_sell,storage_id
   from t#ic_rot_lost_result_season;

   --计算流失率、废票率
   --  计算流失率=流失量/单程票售卖总数 废票率=废票数/单程票售卖总数                            /*
   update t#ic_rot_lost_result set num_loss=num_last+num_new-num_current-num_useless  ;

   update t#ic_rot_lost_result set
      num_loss_rate=to_number(round(to_number(( to_number(num_loss)/to_number(num_sell) )*to_number(100)),2)),
      num_useless_rate=to_number(round(to_number((to_number(num_useless)/to_number(num_sell) )*to_number(100)),2)) where num_sell<>0;

   --录入月份、季、年中文名称
   update t#ic_rot_lost_result set year_month_desc=to_char(to_number(substr(year_month,-2,2)))||'月'
      where length(year_month)=6;
   update t#ic_rot_lost_result set year_month_desc='承上年'
      where year_month=to_char(to_number(p_year)-1)||'12';
   update t#ic_rot_lost_result set year_month_desc='一季度小计' where substr(year_month,5,4)='0301';
   update t#ic_rot_lost_result set year_month_desc='二季度小计' where substr(year_month,5,4)='0601';
   update t#ic_rot_lost_result set year_month_desc='三季度小计' where substr(year_month,5,4)='0901';
   update t#ic_rot_lost_result set year_month_desc='四季度小计' where substr(year_month,5,4)='1201';
   update t#ic_rot_lost_result set year_month_desc='本年合计'   where substr(year_month,5,4)='1202';
   update t#ic_rot_lost_result set year_month_desc='开通至今合计'   where substr(year_month,5,4)='1203';

   --取出操作员名称
   select sys_operator_name into v_operatorName  from acc_st.op_sys_operator where sys_operator_id=operatorId;

   --季、年 上月结存、本月结存不显示
   update t#ic_rot_lost_result set num_last=null,num_current=null where substr(year_month,5,4) in ('0301','0601','0901','1201','1202','1203');

    select count(*) into v_tmpCount from t#ic_rot_lost_result;
    IF v_tmpCount > 0 THEN
        OPEN p_cur FOR
        select v_operatorName operatorName,
               a.year_month,
               a.year_month_desc,
               a.num_last,
               a.num_current,
               a.num_useless,
               a.num_new,
               a.num_sell,
               a.num_loss,
               --TO_NUMBER(num_loss_rate, '9990d99'),TO_NUMBER(num_useless_rate, '9990d99')
               a.num_loss_rate,
               a.num_useless_rate,
               b.storage_name,
               v_storage_name title_storage_name
          from t#ic_rot_lost_result a, ic_cod_storage b
         where a.storage_id = b.storage_id(+)
         order by a.year_month;
     ELSE
        OPEN p_cur FOR
        select v_operatorName as operatorName,
               p_year as year_month,
              ' ' year_month_desc,
              0 num_last,
              0 num_current,
              0 num_useless,
              0 num_new,
              0 num_sell,
              0 num_loss,
              0 num_loss_rate,
              0 num_useless_rate,
              v_storage_name storage_name,
              v_storage_name title_storage_name
              from dual;
     END IF;



end "UP_IC_ROT_LOSS";
/
grant execute on ACC_TK.UP_IC_ROT_LOSS to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_ROT_LOSS to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_ROT_LOSS_REMARK
prompt ========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ROT_LOSS_REMARK" (

   p_cur    IN OUT SYS_REFCURSOR,
   p_year  IN VARCHAR2,
   p_storage_id IN VARCHAR2
)
 as
 ---------------------------------------------------------------------------------
--过程名：  UP_IC_ROT_LOSS_REMARK
--功能描述：普通TOKEN流失统计报表 --备注子报表
--创建者：  mqf
--创建日期：2013-10-24

--磁悬浮票务改造-添加仓库权限 by lindaquan 20151215
--------------------------------------------------------------------------------
 begin
    OPEN p_cur FOR

    select  to_char(rpt_date,'yyyyMMdd') rpt_date, remark from ic_prm_token_para
    where rpt_date<=to_date(p_year||'-12-31 23:59:59','yyyy-MM-dd hh24:mi:ss')
        and para_flag='1' and trim(ic_main_type)='12' and trim(ic_sub_type)='22' 
        and remark is not null  and trim(remark) <>' ' and instr(p_storage_id,storage_id)>0
    order by rpt_date;

 end  "UP_IC_ROT_LOSS_REMARK";
/
grant execute on ACC_TK.UP_IC_ROT_LOSS_REMARK to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_ROT_LOSS_REMARK to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_ROT_MB_PRODUCE
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ROT_MB_PRODUCE"(p_cur         IN OUT SYS_REFCURSOR,
                                                   p_begin_day   IN VARCHAR2, --开始日期
                                                   p_end_day     IN VARCHAR2, --结束日期
                                                   p_worktype_id IN VARCHAR2 --操作类型
                                                   )
-------------------------------------------------------------------------------------------
  --过程名：UP_IC_ROT_MB_PRODUCE
  --功能类型：综合报表，车票生产报表
  --制作者：oywl
  --完成时间：2016-01-13

  -------------------------------------------------------------------------------------------
 AS
  v_sql       VARCHAR2(2048);
  v_where     VARCHAR2(1024);
  v_begin_day varchar2(20);
  v_end_day   VARCHAR2(20);
BEGIN
  DELETE FROM T#IC_ROT_MB_PRODUCE_RPT;
  DELETE FROM T#IC_ROT_MB_PRODUCE_RESULT;
  --时间条件
  if p_begin_day is not null and p_begin_day<>' ' then
  v_begin_day := p_begin_day || ' 00:00:00';
  v_where     := ' and a.ACHIEVE_TIME >= to_date(''' || v_begin_day ||
                 ''',''yyyy-MM-dd hh24:mi:ss'')';
  end if ;
  
  if p_end_day is not null and p_end_day<>' ' then                 
  v_end_day := p_end_day || ' 23:59:59';
  v_where   := v_where || ' and a.ACHIEVE_TIME <= to_date(''' || v_end_day ||
               ''',''yyyy-MM-dd hh24:mi:ss'')';
  end if ;
  
  --加入操作类型
  IF p_worktype_id IS NOT NULL AND p_worktype_id <> ' ' THEN
    v_where := v_where || ' and a.es_worktype_id =' || '''' ||
               p_worktype_id || '''';
  END IF;
  
  v_sql := 'insert into T#IC_ROT_MB_PRODUCE_RPT
   (ORDER_NO,ES_WORKTYPE_ID,ES_WORKTYPE_DESC,DRAW_NUM,FINI_PRONUM,SURPLUS_NUM,
   TRASHY_NUM,HDL_FLAG,ACHIEVE_date,ORDER_MEMO )
   select a.ORDER_NO,a.ES_WORKTYPE_ID,c.es_worktype_name,a.DRAW_NUM,a.FINI_PRONUM,a.SURPLUS_NUM,
  a.TRASHY_NUM,a.HDL_FLAG,to_char(a.ACHIEVE_TIME,''yyyyMMdd'') as ACHIEVE_TIME,a.ORDER_MEMO
  from acc_tk.IC_MB_PDU_ORDER_FORM a ,acc_tk.ic_cod_es_work_type c
  where a.es_worktype_id=c.es_worktype_id ';
  v_sql := v_sql || v_where;
  EXECUTE IMMEDIATE v_sql;
  
    insert INTO T#IC_ROT_MB_PRODUCE_RESULT
    (indexid,
     indexidstr,
     ORDER_NO,
     ES_WORKTYPE_ID,
     ES_WORKTYPE_DESC,
     DRAW_NUM,
     FINI_PRONUM,
     SURPLUS_NUM,
     TRASHY_NUM,
     HDL_FLAG,
     ACHIEVE_date,
     ORDER_MEMO)
    select '0',
           '0',
           ORDER_NO,
           ES_WORKTYPE_ID,
           ES_WORKTYPE_DESC,
           DRAW_NUM,
           FINI_PRONUM,
           SURPLUS_NUM,
           TRASHY_NUM,
           HDL_FLAG,
           achieve_date,
           ORDER_MEMO
      from T#IC_ROT_MB_PRODUCE_RPT
     order by achieve_date asc;
     
  insert INTO T#IC_ROT_MB_PRODUCE_RESULT
    (indexid,
     indexidstr,
     ORDER_NO,
     ES_WORKTYPE_ID,
     ES_WORKTYPE_DESC,
     DRAW_NUM,
     FINI_PRONUM,
     SURPLUS_NUM,
     TRASHY_NUM,
     HDL_FLAG,
     ACHIEVE_date,
     ORDER_MEMO)
    select '0',
           '类型小计',
           null as ORDER_NO,
           ES_WORKTYPE_ID,
           ES_WORKTYPE_DESC,
           sum(DRAW_NUM),
           sum(FINI_PRONUM),
           sum(SURPLUS_NUM),
           sum(TRASHY_NUM),
           null as HDL_FLAG,
           achieve_date,
           null as ORDER_MEMO
      from T#IC_ROT_MB_PRODUCE_RPT
     group by ES_WORKTYPE_ID, ES_WORKTYPE_DESC, achieve_date
     order by achieve_date asc;

  insert INTO T#IC_ROT_MB_PRODUCE_RESULT

    (indexid,
     indexidstr,
     ORDER_NO,
     ES_WORKTYPE_ID,
     ES_WORKTYPE_DESC,
     DRAW_NUM,
     FINI_PRONUM,
     SURPLUS_NUM,
     TRASHY_NUM,
     HDL_FLAG,
     ACHIEVE_date,
     ORDER_MEMO)
    select '0',
           '日小计',
           null as ORDER_NO,
           null as ES_WORKTYPE_ID,
           null as ES_WORKTYPE_DESC,
           sum(DRAW_NUM),
           sum(FINI_PRONUM),
           sum(SURPLUS_NUM),
           sum(TRASHY_NUM),
           null as HDL_FLAG,
           achieve_date,
           null as ORDER_MEMO
      from T#IC_ROT_MB_PRODUCE_RPT
     group by achieve_date
     order by achieve_date asc;

  insert INTO T#IC_ROT_MB_PRODUCE_RESULT
    (indexid,
     indexidstr,
     ORDER_NO,
     ES_WORKTYPE_ID,
     ES_WORKTYPE_DESC,
     DRAW_NUM,
     FINI_PRONUM,
     SURPLUS_NUM,
     TRASHY_NUM,
     HDL_FLAG,
     ACHIEVE_date,
     ORDER_MEMO)
    select '99999',
           '合计',
           null as ORDER_NO,
           null as ES_WORKTYPE_ID,
           null as ES_WORKTYPE_DESC,
           sum(DRAW_NUM),
           sum(FINI_PRONUM),
           sum(SURPLUS_NUM),
           sum(TRASHY_NUM),
           null as HDL_FLAG,
           null as achieve_date,
           null as ORDER_MEMO
      from T#IC_ROT_MB_PRODUCE_RPT;

  OPEN p_cur FOR
    select indexid,
           (case
             when indexidStr = '0' then
              to_char(rowIndex)
             else
              indexidStr
           end) as indexidStr,
           ORDER_NO,
           ES_WORKTYPE_ID,
           ES_WORKTYPE_DESC,
           DRAW_NUM,
           FINI_PRONUM,
           SURPLUS_NUM,
           TRASHY_NUM,
           HDL_FLAG,
           ACHIEVE_date,
           ORDER_MEMO
           from 
           (
           select indexid,
           indexidStr,
           ORDER_NO,
           ES_WORKTYPE_ID,
           ES_WORKTYPE_DESC,
           DRAW_NUM,
           FINI_PRONUM,
           SURPLUS_NUM,
           TRASHY_NUM,
           HDL_FLAG,
           ACHIEVE_date,
           ORDER_MEMO,
           rownum as rowIndex
           from T#IC_ROT_mb_PRODUCE_RESULT
           )
      ;
end;
/
grant execute on ACC_TK.UP_IC_ROT_MB_PRODUCE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_ROT_SALE
prompt =================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ROT_SALE"
(  p_cur IN OUT Sys_Refcursor,
	p_year 			     in  VARCHAR2,
  p_storage_id     in  VARCHAR2,
	p_line_id        in  VARCHAR2,
	p_card_main_type in  VARCHAR2,
	p_card_sub_type  in  VARCHAR2,
	operatorId       in  VARCHAR2
)
AS
---------------------------------------------------------------------------------
--过程名：  UP_IC_ROT_SALE
--功能描述：车票售出量统计报表
--输出参数  : 无
--数据来源  ： 将票务管理系统传递过来的收益数据生成车站出售量报表
--创建者：  李莉
--创建日期：20120726

--修改者： moqf 
--修改日期：20140415
--修改内容：--更新票卡类型名称 改为to_number(b.ic_main_type) = to_number((substr(a.ticket_type_id,1,2))) and to_number(b.ic_sub_type) = to_number((substr(a.ticket_type_id,3,4))))

--修改者:   LINDAQUAN
--修改日期: 20151228
--修改内容：添加传入参数p_storage_id 仓库选项
-------------------------------------------------------------------------------

    v_year           varchar(4);
    v_line_id        varchar(100);
    v_card_main_type varchar(2);
    v_card_sub_type  varchar(5);
    v_operator_name  varchar(16);
    v_sql_str        varchar(2048);
    v_where_str      varchar(1024);
    v_group_str      varchar(1024);
    v_msg            varchar(1024);
    v_begintime      date;
    v_tempCount       int;

BEGIN
   --清空临时表
   delete t#ic_rot_sale_temp;
   delete t#ic_rot_sale_his;
   delete t#ic_rot_sale_return;

   --参数处理
   --添加传入参数p_storage_id
   select listagg(substr('00'||rtrim(ltrim(line_id)),-2,2),''',''') within group (order by line_id) into v_line_id from ic_cod_storage_line 
   where instr(p_storage_id,storage_id)>0;
   if (p_line_id is not null) then
       v_line_id := substr('00'||rtrim(ltrim(p_line_id)),-2,2);
   end if;    
   
   select sys_operator_name into v_operator_name  from acc_st.op_sys_operator    where   sys_operator_id=operatorId;
   
   if (p_card_main_type is not null) then
     v_card_main_type:=substr('00'||rtrim(ltrim(p_card_main_type)),-2,2); 
   else
     v_card_main_type:=null;
   end if;
   
   if (p_card_sub_type is not null) then
     v_card_sub_type:=substr('00'||rtrim(ltrim(p_card_sub_type)),-2,2); 
   else
     v_card_sub_type:=null;
   end if;
   
   v_year := trim(p_year);

   --首先将开通以来的所有数据保存在缓存表
   --按照年，月，线路，票卡类型将发售数量插入缓存表
   --OP101SOLDNUM改为 saleNum
   --select  substr(to_char(REPORTDATE,''yyyymm''),1,4) , to_number(substr(to_char(REPORTDATE,''yyyymm''),5,2)) ,to_char(DEPT_ID)  ,TICKETTYPE_ID  ,sum(OP101SOLDNUM),sum(ICCSDEALNUM)
    v_sql_str:='
      insert into t#ic_rot_sale_temp 
      select substr(to_char(a.REPORTDATE,''yyyymm''),1,4), to_number(substr(to_char(a.REPORTDATE,''yyyymm''),5,2)),
             to_number(substr(a.DEPT_ID,1,2)),to_number(substr(a.DEPT_ID,3,2)),a.TICKETTYPE_ID,sum(a.saleNum),null
      from ic_inf_station_sale a,ic_cod_station b,IC_COD_STATION_CONTRAST f,IC_COD_CARD_TYPE_CONTRAST e
      where substr(a.DEPT_ID,1,2)=f.line_code and substr(a.DEPT_ID,3,2)=f.station_code 
      and to_number(f.line_id)=to_number(b.line_id) and to_number(f.station_id)=to_number(b.station_id) 
      and substr(a.TICKETTYPE_ID,1,2)=e.card_main_type and substr(a.TICKETTYPE_ID,3,2)=e.card_sub_type ';
    v_where_str:=' and to_char(a.REPORTDATE,''yyyy'')<='||''''||v_year||'''';
    if(v_line_id is not null) then
         v_where_str:=v_where_str||'
         and substr(''00''||rtrim(ltrim(f.line_id)),-2,2) in ('||''''||v_line_id||''''||')';  
    end if;
    
    if(v_card_main_type is not null) then
      v_where_str:=v_where_str||'  
      and to_number(e.ic_main_type) = to_number('||''''||v_card_main_type||''''||')';
    end if;

    if(v_card_sub_type is not null) then
      v_where_str:=v_where_str||'  
      and to_number(e.ic_sub_type) = to_number('||''''||v_card_sub_type||''''||')';
    end if;        
    
    --v_group_str:=' group by  substr(to_char(REPORTDATE,''yyyymm''),1,4) , to_number(substr(to_char(REPORTDATE,''yyyymm''),5,2)) ,to_char(DEPT_ID)  ,TICKETTYPE_ID  HAVING  sum(OP101SOLDNUM)>0  or sum(ICCSDEALNUM)>0';
    v_group_str:=' group by substr(to_char(a.REPORTDATE,''yyyymm''),1,4),to_number(substr(to_char(a.REPORTDATE,''yyyymm''),5,2)),to_number(substr(a.DEPT_ID,1,2)),to_number(substr(a.DEPT_ID,3,2)),a.TICKETTYPE_ID HAVING sum(saleNum)>0 ';
    v_sql_str:=v_sql_str||v_where_str||v_group_str;
    execute immediate v_sql_str;
    
    --update  t#ic_rot_sale_temp set sold_num=sold_num_sjt where ticket_type_id=22;
    --modify 20131214 mqf ic_inf_station_sale TICKETTYPE_ID改为 VARCHAR2(4 BYTE)
    --modify 20131230 mqf sold_num 已有值
    --update  t#ic_rot_sale_temp set sold_num=sold_num_sjt where ticket_type_id='1222';
    
    insert into t#ic_rot_sale_his
      select a.report_year,
             a.month_id,
             '',
             to_number(b.line_id),
             '',
             a.ticket_type_id,
             '',
             sum(a.sold_num)
        from t#ic_rot_sale_temp a, ic_cod_station b
       where a.station_id = b.station_id
         and to_number(a.line_id) = b.line_id
       group by a.report_year,
                a.month_id,
                to_number(b.line_id),
                a.ticket_type_id;
            
    --本年度的
     insert into  t#ic_rot_sale_return
       select report_year, month_id, report_month, line_id, line_name, ticket_type_id, ticket_type_name, sold_num
       from t#ic_rot_sale_his
       where report_year = v_year;


    --生成线路合计
    insert into  t#ic_rot_sale_return
       select report_year,month_id,'',99,'合计',ticket_type_id,'',sum(sold_num)
       from t#ic_rot_sale_return
       where report_year = v_year
       group by report_year,month_id,ticket_type_id;


    --生成上半年合计
    insert into  t#ic_rot_sale_return
    select report_year,6.5,'上半年发售合计',99,'合计',ticket_type_id,'',sum(sold_num)   from t#ic_rot_sale_return
    where report_year = v_year and (month_id  between 1 and 6  ) and line_id!=99
    group by report_year,ticket_type_id;


     --生成下半年合计
    insert into  t#ic_rot_sale_return
    select report_year,12.5,'下半年发售合计',99,'合计',ticket_type_id,'',sum(sold_num)
    from t#ic_rot_sale_return
    where report_year = v_year 
    and (month_id  between 7 and 12 ) 
    and line_id!=99
    group by report_year,ticket_type_id;


      --生成全年合计 改为t#ic_rot_sale_return
      insert into  t#ic_rot_sale_return
        select report_year,13,'全年发售合计',99,'合计',ticket_type_id,'',sum(sold_num)
        --from t#ic_rot_sale_his
        from t#ic_rot_sale_return
        where report_year = v_year and  (month_id=6.5 or month_id =12.5 )
        group by report_year,ticket_type_id;




     --生成开通至今的发售合计
     insert into  t#ic_rot_sale_return
      select report_year,14,'开通至今发售合计',99,'合计',ticket_type_id,'',sum(sold_num)
      from t#ic_rot_sale_his
      where report_year <= v_year and (month_id  between 1 and 12 ) and month_id!=6.5 and line_id!=99  group by report_year,ticket_type_id;



     --更新月份名称名称

     update t#ic_rot_sale_return a
        set report_month = rtrim(to_char(to_number(month_id)))|| '月'
        where month_id!=6.5 and (month_id between 1 and 12 );



     --更新线路名称
     update t#ic_rot_sale_return a
        set a.line_name = (select b.line_name from ic_cod_line b where to_number(b.line_id) = a.line_id)
     where exists (select 1 from ic_cod_line b where to_number(b.line_id) = a.line_id);
             


     --更新票卡类型名称
     update t#ic_rot_sale_return a
        set a.ticket_type_name =(select  b.ic_sub_desc from ic_cod_card_sub_type b 
        where to_number(b.ic_main_type) = to_number((substr(a.ticket_type_id,1,2))) and to_number(b.ic_sub_type) = to_number((substr(a.ticket_type_id,3,4))))
     where exists (select 1 from ic_cod_card_sub_type b where to_number(b.ic_main_type) = to_number((substr(a.ticket_type_id,1,2))) and to_number(b.ic_sub_type) = to_number((substr(a.ticket_type_id,3,4))));
        
      
     --返回
     select count(*) into v_tempCount from t#ic_rot_sale_return;
     IF v_tempCount > 0 THEN
        OPEN p_cur FOR 
        select
            v_operator_name operator_name,
            report_year, 
            month_id,
            report_month ,
            line_id, 
            line_name,
            ticket_type_id, 
            ticket_type_name, 
            sold_num 
        from t#ic_rot_sale_return
        order by month_id asc ,line_id asc;
     ELSE
        OPEN p_cur FOR 
        select
            v_operator_name operator_name,
            v_year report_year, 
            ' ' month_id,
            ' ' report_month , 
            ' ' line_id, 
            ' ' line_name,
            ' ' ticket_type_id, 
            ' ' ticket_type_name, 
            null sold_num 
        from dual
        order by month_id asc ,line_id asc;
     END IF;
 END;
/
grant execute on ACC_TK.UP_IC_ROT_SALE to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_ROT_SALE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_ROT_TK_PRODUCE
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_ROT_TK_PRODUCE" (
   p_cur IN OUT SYS_REFCURSOR,
   p_begin_day IN VARCHAR2, --开始日期
   p_end_day IN VARCHAR2, --结束日期
   p_device_id IN VARCHAR2, --设备ID
   p_worktype_id IN VARCHAR2, --操作类型
   p_card_main_type IN VARCHAR2, --主票种
   p_card_sub_type IN VARCHAR2, --子票种
   p_storage_id   IN VARCHAR2,
   p_operator_id IN VARCHAR2, --操作员id
   operatorId IN VARCHAR2--制作者

)
-------------------------------------------------------------------------------------------
--过程名：UP_IC_ROT_TK_PRODUCE
--功能类型：综合报表，车票生产报表
--制作者：mqf
--完成时间：2015-08-29

--磁悬浮票务改造-添加仓库权限 by lindaquan 20151210
-------------------------------------------------------------------------------------------
AS
   v_operator_name VARCHAR2(16);
   v_sql VARCHAR2(2048);
   v_where VARCHAR2(1024);
   v_begin_day varchar2(20);
   v_end_day VARCHAR2(20);
   v_card_type_table VARCHAR2(20);
   v_storage_name    varchar(100);
   v_tmpCount int;
   v_storage_id varchar(100);
   v_tmp_where varchar(1024);
BEGIN

   DELETE FROM T#IC_ROT_TK_PRODUCE_RPT;
   DELETE FROM T#IC_ROT_TK_PRODUCE_RESULT;

   select count(*) into v_tmpCount from acc_st.op_sys_operator where sys_operator_id=operatorId;
   IF v_tmpCount >0 THEN
      select sys_operator_name into v_operator_name from acc_st.op_sys_operator where sys_operator_id=operatorId;
   END IF;

   --时间条件
   v_begin_day:=p_begin_day||' 00:00:00';
   v_where := ' and a.verify_date >= to_date('''||v_begin_day||''',''yyyy-MM-dd hh24:mi:ss'')';

   v_end_day:=p_end_day||' 23:59:59';
   v_where := v_where||' and a.verify_date <= to_date('''||v_end_day||''',''yyyy-MM-dd hh24:mi:ss'')';


   IF p_card_main_type IS NOT NULL AND p_card_main_type <> ' ' THEN
         v_where := v_where||' and rtrim(ltrim(b.ic_main_type))='||''''||p_card_main_type|| '''';
   END IF;

   IF p_card_sub_type IS NOT NULL AND p_card_sub_type <> ' ' THEN
         v_where := v_where||' and rtrim(ltrim(b.ic_sub_type))='||''''||p_card_sub_type|| '''';
   END IF;

   --加入设备id
   IF p_device_id IS NOT NULL AND p_device_id <> ' ' THEN
         v_where := v_where||'and b.machine_no='||''''||p_device_id||'''';
   END IF;

   --加入操作类型
   IF p_worktype_id IS NOT NULL AND p_worktype_id <> ' ' THEN
         v_where := v_where||' and a.es_worktype_id ='||''''||p_worktype_id|| '''';
   END IF;

   --加入管理员
   IF p_operator_id IS NOT NULL AND p_operator_id <> ' ' THEN
         v_where:= v_where||' and trim(a.es_operator) ='||''''||p_operator_id||'''';
   END IF;
   
   v_storage_name := '全部';
   v_tmp_where := '';
   if p_storage_id is not null and p_storage_id<>' ' then
       v_storage_id := ''''||p_storage_id||'''';
       select listagg(trim(storage_name), ',') within group(order by storage_id) into v_storage_name 
        from ic_cod_storage where instr(p_storage_id, storage_id) > 0;
        
       IF instr(p_storage_id,',')>0 THEN
          v_tmp_where := v_tmp_where || ' and e.storage_id in('||v_storage_id||') ';
       ELSE 
          v_tmp_where := v_tmp_where || ' and e.storage_id='||v_storage_id;
       END IF;
   end if;


   v_sql :=
   'insert into T#IC_ROT_TK_PRODUCE_RPT(bill_date,card_main_type,card_sub_type,sub_type_desc,es_worktype_id,es_worktype_desc,
            card_money,vaild_date,fini_pronum,man_useless_num,es_useless_num,real_balance,operator_id,storage_id,es_id,es_desc,out_bill_no)
    select  to_char(a.bill_date,''yyyyMMdd''),b.ic_main_type,b.ic_sub_type,d.ic_sub_desc,a.es_worktype_id,c.es_worktype_name,
            b.card_money,to_char(b.vaild_date,''yyyyMMdd''),b.draw_quantity,a.man_useless_num,a.es_useless_num,a.real_balance,a.es_operator,e.storage_id,b.machine_no,b.machine_no,a.out_bill_no
    from acc_tk.ic_pdu_produce_bill a,acc_tk.ic_pdu_produce_bill_detail b,acc_tk.ic_cod_es_work_type c,acc_tk.ic_cod_card_sub_type d, acc_tk.ic_out_bill_detail e
      where a.bill_no = b.bill_no
          and a.out_bill_no = e.bill_no
      and a.es_worktype_id = c.es_worktype_id
      and trim(b.ic_sub_type) = d.ic_sub_type and trim(b.ic_main_type)=d.ic_main_type
      and a.record_flag = ''0''';
   v_sql := v_sql||v_where||v_tmp_where;
   --DBMS_OUTPUT.PUT_LINE(v_sql);

   EXECUTE IMMEDIATE v_sql;

   --更新押金
   update T#IC_ROT_TK_PRODUCE_RPT a
        set a.deposit_amnt =(select  b.deposit_amnt from ACC_ST.OP_PRM_CARD_PARA b
        where b.record_flag = '0' and to_number(a.card_main_type) = to_number(b.card_main_id) and to_number(a.card_sub_type) = to_number(b.card_sub_id))
   where exists (select 1 from ACC_ST.OP_PRM_CARD_PARA b  where b.record_flag = '0' and to_number(a.card_main_type) = to_number(b.card_main_id) and to_number(a.card_sub_type) = to_number(b.card_sub_id));

   --更新生产订单号
   update T#IC_ROT_TK_PRODUCE_RPT a
        set a.order_no =(select  listagg(b.order_no,'/') within GROUP (order by b.order_no) from ACC_TK.ic_pdu_plan_order_mapping b
        where b.finish_flag= '1' and a.out_bill_no = b.out_bill_no group by b.out_bill_no )
   where exists (select 1 from ACC_TK.ic_pdu_plan_order_mapping b  where b.finish_flag= '1' and a.out_bill_no = b.out_bill_no  group by b.out_bill_no );





   --插入结果集
   INSERT INTO T#IC_ROT_TK_PRODUCE_RESULT(indexid,indexidStr,bill_date,card_main_type,card_sub_type,sub_type_desc,es_worktype_id,es_worktype_desc,
            order_no,card_money,vaild_date,fini_pronum,man_useless_num,es_useless_num,real_balance,trashy_rate,operator_id,storage_id,es_id,es_desc)
   SELECT
      '0' indexid,
      '0' indexidStr,
      bill_date,
      card_main_type,
      card_sub_type,
      sub_type_desc,
      es_worktype_id,
      es_worktype_desc,
      order_no,
      card_money,
      vaild_date,
      fini_pronum,
      man_useless_num,
      es_useless_num,
      real_balance,
      ( CASE
        WHEN fini_pronum = 0 AND es_useless_num = 0 THEN 0.000
        WHEN es_useless_num = 0 THEN 0.000
        ELSE
          ROUND((es_useless_num * 100.000) / (fini_pronum + es_useless_num),3)
        END
      )  trashy_rate,
      operator_id,
      storage_id,
      es_id,
      es_desc
   FROM T#IC_ROT_TK_PRODUCE_RPT;



   --小计 按每天、每人、每一票种,不同金额
   INSERT INTO T#IC_ROT_TK_PRODUCE_RESULT(indexid,indexidStr,bill_date,card_main_type,card_sub_type,sub_type_desc,es_worktype_id,es_worktype_desc,
            order_no,deposit_amnt,card_money,vaild_date,fini_pronum,man_useless_num,es_useless_num,real_balance,trashy_rate,operator_id,storage_id,es_id,es_desc)
   SELECT
      '0' indexid,
      '小计' indexidStr,
      bill_date,
      card_main_type,
      card_sub_type,
      sub_type_desc,
      null es_worktype_id,
      null es_worktype_desc,
      null order_no,
      null deposit_amnt,
      card_money,
      null vaild_date,
      SUM(fini_pronum),
      SUM(man_useless_num),
      SUM(es_useless_num),
      SUM(real_balance),
      (CASE
        WHEN SUM(fini_pronum) = 0 AND SUM(es_useless_num) = 0 THEN 0.000
        WHEN SUM(es_useless_num) = 0 THEN 0.000
        ELSE
          ROUND((SUM(es_useless_num) * 100.000) / SUM(fini_pronum + es_useless_num),3)
        END
      )  trashy_rate,
      operator_id,
      storage_id,
      null es_id,
      null es_desc
   FROM T#IC_ROT_TK_PRODUCE_RPT
   GROUP BY bill_date,card_main_type,card_sub_type,sub_type_desc,card_money,operator_id,storage_id;

   --类型小计 按每天、每一票种、操作类型
   INSERT INTO T#IC_ROT_TK_PRODUCE_RESULT(indexid,indexidStr,bill_date,card_main_type,card_sub_type,sub_type_desc,es_worktype_id,es_worktype_desc,
            order_no,deposit_amnt,card_money,vaild_date,fini_pronum,man_useless_num,es_useless_num,real_balance,trashy_rate,operator_id,storage_id,es_id,es_desc)
   SELECT
      '0' indexid,
      '类型小计' indexidStr,
      bill_date,
      card_main_type,
      card_sub_type,
      sub_type_desc,
      es_worktype_id,
      es_worktype_desc,
      null order_no,
      null deposit_amnt,
      null card_money,
      null vaild_date,
      SUM(fini_pronum),
      SUM(man_useless_num),
      SUM(es_useless_num),
      SUM(real_balance),
      (CASE
        WHEN SUM(fini_pronum) = 0 AND SUM(es_useless_num) = 0 THEN 0.000
        WHEN SUM(es_useless_num) = 0 THEN 0.000
        ELSE
          ROUND((SUM(es_useless_num) * 100.000) / SUM(fini_pronum + es_useless_num),3)
        END
      )  trashy_rate,
      null operator_id,
      storage_id,
      null es_id,
      null es_desc
   FROM T#IC_ROT_TK_PRODUCE_RPT
   GROUP BY bill_date,card_main_type,card_sub_type,sub_type_desc,es_worktype_id,es_worktype_desc,storage_id;

   --小计 按每天
   INSERT INTO T#IC_ROT_TK_PRODUCE_RESULT(indexid,indexidStr,bill_date,card_main_type,card_sub_type,sub_type_desc,es_worktype_id,es_worktype_desc,
            order_no,deposit_amnt,card_money,vaild_date,fini_pronum,man_useless_num,es_useless_num,real_balance,trashy_rate,operator_id,storage_id,es_id,es_desc)
   SELECT
      '0' indexid, --'9999' indexid,
      '日小计' indexidStr,
      bill_date,
      null card_main_type,
      null card_sub_type,
      null sub_type_desc,
      null es_worktype_id,
      null es_worktype_desc,
      null order_no,
      null deposit_amnt,
      null card_money,
      null vaild_date,
      SUM(fini_pronum),
      SUM(man_useless_num),
      SUM(es_useless_num),
      SUM(real_balance),
      (CASE
        WHEN SUM(fini_pronum) = 0 AND SUM(es_useless_num) = 0 THEN 0.000
        WHEN SUM(es_useless_num) = 0 THEN 0.000
        ELSE
          ROUND((SUM(es_useless_num) * 100.000) / SUM(fini_pronum + es_useless_num),3)
        END
      )  trashy_rate,
      null operator_id,
      storage_id,
      null es_id,
      null es_desc
   FROM T#IC_ROT_TK_PRODUCE_RPT
   GROUP BY bill_date,storage_id;



   --合计
   INSERT INTO T#IC_ROT_TK_PRODUCE_RESULT(indexid,indexidStr,bill_date,card_main_type,card_sub_type,sub_type_desc,es_worktype_id,es_worktype_desc,
            order_no,deposit_amnt,card_money,vaild_date,fini_pronum,man_useless_num,es_useless_num,real_balance,trashy_rate,operator_id,storage_id,es_id,es_desc)
   SELECT
      '99999' indexid,
      '合计' indexidStr,
      null bill_date,
      null card_main_type,
      null card_sub_type,
      null sub_type_desc,
      null es_worktype_id,
      null es_worktype_desc,
      null order_no,
      null deposit_amnt,
      null card_money,
      null vaild_date,
      SUM(fini_pronum),
      SUM(man_useless_num),
      SUM(es_useless_num),
      SUM(real_balance),
      null trashy_rate,

      null operator_id,
      storage_id,
      null es_id,
      null es_desc
   FROM T#IC_ROT_TK_PRODUCE_RPT
   group by storage_id;



   --返回结果集
   SELECT count(*) INTO v_tmpCount FROM T#IC_ROT_TK_PRODUCE_RESULT;
   IF v_tmpCount > 0 THEN
       OPEN p_cur FOR
       SELECT begin_day,
          end_day,
          operator_name,
          v_storage_name title_storage_name,
          storage_name,
          indexid,
          (case when indexidStr='0' then to_char(rowIndex)  else indexidStr  end) as indexidStr,
          bill_date,
          card_main_type,
          card_sub_type,
          sub_type_desc,
          es_worktype_id,
          es_worktype_desc,
          order_no,
          deposit_amnt,
          card_money,
          vaild_date,
          fini_pronum,
          man_useless_num,
          es_useless_num,
          real_balance,
          trashy_rate,
          trashy_rate_Str,
          operator_id,
          storage_id,
          es_id,
          es_desc
       FROM (
       SELECT begin_day,
          end_day,
          operator_name,
          storage_name,
          indexid,
          indexidStr,
          bill_date,
          card_main_type,
          card_sub_type,
          sub_type_desc,
          es_worktype_id,
          es_worktype_desc,
          order_no,
          deposit_amnt,
          card_money,
          vaild_date,
          fini_pronum,
          man_useless_num,
          es_useless_num,
          real_balance,
          trashy_rate,
          trashy_rate_Str,
          operator_id,
          storage_id,
          es_id,
          es_desc,
      rownum as rowIndex

       FROM
     (
     SELECT p_begin_day begin_day,
          p_end_day end_day,
          v_operator_name operator_name,
          b.storage_name,
          a.indexid,
          a.indexidStr,
          a.bill_date,
          a.card_main_type,
          a.card_sub_type,
          a.sub_type_desc,
          a.es_worktype_id,
          a.es_worktype_desc,
          a.order_no,
          a.deposit_amnt,
          a.card_money,
          a.vaild_date,
          a.fini_pronum,
          a.man_useless_num,
          a.es_useless_num,
          a.real_balance,
          a.trashy_rate,
          (case when a.trashy_rate is not null then (TO_CHAR(a.trashy_rate, '9990d999')||'%') else null  end) as trashy_rate_Str,
          a.operator_id,
          a.storage_id,
          a.es_id,
          a.es_desc

       FROM T#IC_ROT_TK_PRODUCE_RESULT a, ic_cod_storage b
        where a.storage_id = b.storage_id(+) 
       ORDER BY TO_NUMBER(a.indexid),a.indexidStr,a.bill_date,a.card_main_type,a.card_sub_type,a.operator_id,a.es_worktype_id
     )

       ) ORDER BY TO_NUMBER(indexid),bill_date,card_main_type,card_sub_type,operator_id,es_worktype_id,rowIndex;--字段位置不能变
   ELSE
       OPEN p_cur FOR
       SELECT p_begin_day begin_day,
          p_end_day end_day,
          v_operator_name operator_name,
          v_storage_name title_storage_name,
          v_storage_name storage_name,
          null indexid,
          null indexidStr,
          null bill_date,
          null card_main_type,
          null card_sub_type,
          null sub_type_desc,
          null es_worktype_id,
          null es_worktype_desc,
          null order_no,
          null deposit_amnt,
          null card_money,
          null vaild_date,
          null fini_pronum,
          null man_useless_num,
          null es_useless_num,
          null real_balance,
          null trashy_rate,
          null as trashy_rate_Str,
          null operator_id,
          null storage_id,
          null es_id,
          null es_desc
       FROM dual;
   END IF;


END;
/
grant execute on ACC_TK.UP_IC_ROT_TK_PRODUCE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RST_HANDIN_DETAIL
prompt ==========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RST_HANDIN_DETAIL"
(p_cur IN OUT Sys_Refcursor,
 p_storage_id in         VARCHAR2,
 p_begin_day  in  VARCHAR2,
 p_end_day    in  VARCHAR2,
 operatorId   in  VARCHAR2)
AS

/*
  *************************************************************
  *存储过程名：UP_IC_RST_HANDIN_DETAIL
  *功能描述：  弃票/回收箱储值票明细
  *[输入参数： 起始日期、结束日期]
  *[输出参数： ]
  * [返回：(说明返回值，返回值的含义和约定)]
  *创建人： lili
  *创建时间：2013-07-15

  *************************************************************
*/
--修改者:   moqf
--修改日期: 20140407
--修改内容：改为统计所有IC储值卡 and b.ic_main_type='1'

--修改者:   LINDAQUAN
--修改日期: 20151207
--修改内容：添加传入参数p_storage_id 仓库选项

 v_operator_name  varchar(16);
 v_tmpCount int;
 v_line_id  varchar(100);

BEGIN
    DELETE FROM T#IC_HANDIN_DETAIL;

    --添加传入参数p_storage_id
    select listagg(substr('00'||rtrim(ltrim(line_id)),-2,2),''',''') within group (order by line_id) into v_line_id from ic_cod_storage_line
    where instr(p_storage_id,storage_id)>0;

    select sys_operator_name into v_operator_name  from acc_st.op_sys_operator    where   sys_operator_id=operatorId;
    --IC车票(学生SVT、成人储值票、老人SVT、纪念票)
    --现在没有老免票


    --card_para 改为 ACC_ST.OP_PRM_CARD_PARA
    insert into T#IC_HANDIN_DETAIL
        select v_operator_name as operator_name,REPORTDATE,b.ic_sub_type,b.ic_sub_desc,IDSTART,to_number(nvl(d.deposit_amnt,'0')) as deposit,VALUE,e.chinese_name
        from ic_inf_station_handin a,ic_cod_card_sub_type b,IC_COD_CARD_TYPE_CONTRAST c,ACC_ST.OP_PRM_CARD_PARA  d,ic_cod_station e, IC_COD_STATION_CONTRAST f
        where   --a.TICKETTYPE_ID=To_number(b.ic_sub_type)
            to_number((substr(a.TICKETTYPE_ID,1,2)))=to_number(c.card_main_type) and to_number((substr(a.TICKETTYPE_ID,3,2)))=to_number(c.card_sub_type)
            and b.ic_main_type=c.ic_main_type and b.ic_sub_type=c.ic_sub_type
            and c.card_main_type=d.card_main_id and c.card_sub_type=d.card_sub_id and d.record_flag='0'
            --and DEPT_ID=To_number(e.station_id)
            and substr(a.DEPT_ID,1,2)=f.line_code and substr(a.DEPT_ID,3,2)=f.station_code
            and to_number(f.line_id)=to_number(e.line_id) and to_number(f.station_id)=to_number(e.station_id)
            and (a.ISABANDON = '1' or to_number(nvl(trim(a.HANDINTYPE_ID),0)) = 5)
            --and b.ic_sub_type in('2','23','4','5')
            --and ((b.ic_main_type='1' and b.ic_sub_type = '12')
            --      or (b.ic_main_type='1' and b.ic_sub_type = '11')
            --      or (b.ic_main_type='1' and b.ic_sub_type = '13'))
            and b.ic_main_type='1'
            and instr(v_line_id,substr('00'||rtrim(ltrim(e.line_id)),-2,2))>0
            and a.REPORTDATE between to_date(p_begin_day||'00:00:00','yyyy-mm-dd hh24:mi:ss') and to_date(p_end_day||'23:59:59','yyyy-mm-dd hh24:mi:ss');


    SELECT count(*) INTO v_tmpCount FROM T#IC_HANDIN_DETAIL;
    IF v_tmpCount > 0 THEN
        OPEN p_cur FOR
        select operator_name,REPORTDATE,ic_sub_type,ic_sub_desc,IDSTART,deposit,VALUE,chinese_name
        from T#IC_HANDIN_DETAIL
        order by REPORTDATE,ic_sub_type;
    ELSE
        OPEN p_cur FOR
        select v_operator_name as operator_name,
        null REPORTDATE,
        ' ' ic_sub_type,
        ' ' ic_sub_desc,
        null IDSTART,
        null deposit,
        null VALUE,
        ' ' chinese_name
        from dual;
    END IF;

 END;
/
grant execute on ACC_TK.UP_IC_RST_HANDIN_DETAIL to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RST_HANDIN_DETAIL to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RST_HANDIN_DETAIL_REMARK
prompt =================================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RST_HANDIN_DETAIL_REMARK" (
  p_cur          IN OUT sys_refcursor,--返回结果集
  p_begin_day    IN VARCHAR2,
  p_end_day      IN VARCHAR2
)
as
    v_where varchar(2048);
begin

    OPEN p_cur FOR
    select to_char(report_date,'yyyyMMdd') report_date,remark
            from ic_prm_abandon_ticket_para
            where report_date>=to_date(p_begin_day||' 00:00:00','yyyy-mm-dd hh24:mi:ss')
            and report_date<=to_date(p_end_day||' 23:59:59','yyyy-mm-dd hh24:mi:ss')
            order by report_date;
end;
/
grant execute on ACC_TK.UP_IC_RST_HANDIN_DETAIL_REMARK to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RST_HANDIN_DETAIL_REMARK to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RST_HANDIN_MONTH
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RST_HANDIN_MONTH"
(p_cur IN OUT Sys_Refcursor,
 p_year     in  VARCHAR2,   
 p_month    in  VARCHAR2,
 p_storage_id     in         VARCHAR2, 
 p_line_id  in VARCHAR2,
 operatorId in  VARCHAR2)
AS
/*
  *************************************************************
  *存储过程名：UP_IC_RST_HANDIN_MONTH
  *功能描述：  弃票/回收箱储值票上交月报
  *[输入参数： 月份、线路]
  *[输出参数： ]
  * [返回：(说明返回值，返回值的含义和约定)]
  *创建人： lili
  *创建时间：2013-07-15

  *************************************************************
*/

--修改者:   moqf
--修改日期: 20140407 
--修改内容：修改老人SVT为 IC_MAIN_TYPE=1,IC_SUB_TYPE=13----对应运营代码老人卡是0203

--修改者:   LINDAQUAN
--修改日期: 20151207
--修改内容：添加传入参数p_storage_id 仓库选项


  v_line_id         varchar(100);
  v_begin_day       varchar(8);
  v_operator_name   varchar(16);
  v_deposit_cr      decimal(10,2) ;      --押金
  v_deposit_xs      decimal(10,2);
  v_deposit_lr      decimal(10,2);
  --v_deposit_om      decimal(10,2);
  v_tmpCount int;


BEGIN 
  --清空临时表
   delete t#ic_handin_month;
   delete t#ic_line_id_name;
   --设置参数
    select sys_operator_name into v_operator_name  from acc_st.op_sys_operator where   sys_operator_id=operatorId;
    
    --添加传入参数p_storage_id
    select listagg(substr('00'||rtrim(ltrim(line_id)),-2,2),''',''') within group (order by line_id) into v_line_id from ic_cod_storage_line 
    where instr(p_storage_id,storage_id)>0;
  
    v_line_id := case when p_line_id is null then v_line_id else substr('00'||rtrim(ltrim(p_line_id)),-2,2) end ;
    v_begin_day :=p_year || '-'||p_month;
 
    --插入押金
    --card_para改为ACC_ST.OP_PRM_CARD_PARA
    select to_number(nvl(deposit_amnt,'0')) into v_deposit_cr  from ACC_ST.OP_PRM_CARD_PARA where card_main_id='02' and card_sub_id='00' and record_flag = '0';
    select to_number(nvl(deposit_amnt,'0')) into v_deposit_xs from ACC_ST.OP_PRM_CARD_PARA where card_main_id='02' and card_sub_id='01' and record_flag = '0';
    select to_number(nvl(deposit_amnt,'0')) into v_deposit_lr from ACC_ST.OP_PRM_CARD_PARA where card_main_id='02' and card_sub_id='03' and record_flag = '0';
    --select to_number(nvl(deposit_amnt,'0')) into v_deposit_om from ACC_ST.OP_PRM_CARD_PARA where card_main_id='02' and card_sub_id='02' and record_flag = '0';
    v_deposit_cr := v_deposit_cr/100;
    v_deposit_xs := v_deposit_xs/100;
    v_deposit_lr := v_deposit_lr/100;
    --v_deposit_om := v_deposit_om/100;
    

      --插入临时线路表
      insert into t#ic_line_id_name
        select to_number(a.line_id),a.line_name
        from ic_cod_line a
        where  instr(v_line_id,substr('00'||rtrim(ltrim(a.line_id)),-2,2))>0;
     
      --设置返回格式
      insert into t#ic_handin_month
        select a.line_id,a.line_name,0,0,0,0,0,0,0,0,0,0
        from t#ic_line_id_name a;
        
         
     --成人储值票 IC_MAIN_TYPE=1,IC_SUB_TYPE=11 (运营0200)
     insert into t#ic_handin_month
       select to_number(b.line_id),c.line_name,
          sum(v_deposit_cr),sum(to_number(nvl(a.VALUE,0))),0,0,0,0,0,0,0,0
       from ic_inf_station_handin a,ic_cod_station b,t#ic_line_id_name c,IC_COD_STATION_CONTRAST f
       where substr(a.DEPT_ID,1,2)=f.line_code and substr(a.DEPT_ID,3,2)=f.station_code
          and to_number(f.line_id)=to_number(b.line_id) and to_number(f.station_id)=to_number(b.station_id)
          and to_number(b.line_id)=to_number(c.line_id)
          and instr(v_line_id,substr('00'||rtrim(ltrim(b.line_id)),-2,2))>0
          and to_char(a.REPORTDATE,'yyyy-mm')=v_begin_day
          and a.TICKETTYPE_ID='0200'
          and (a.HANDINTYPE_ID = '5' or nvl(trim(a.ISABANDON),0) = 1)
          and a.QUANTITY>0  
       group by  to_number(b.line_id),c.line_name;
    
    --学生SVT IC_MAIN_TYPE=1,IC_SUB_TYPE=12 (运营0201)
     insert into t#ic_handin_month
       select to_number(b.line_id),c.line_name,
          0,0,sum(v_deposit_xs),sum(to_number(nvl(a.VALUE,0))),0,0,0,0,0,0
       from ic_inf_station_handin a,ic_cod_station b,t#ic_line_id_name c,IC_COD_STATION_CONTRAST f
       where substr(a.DEPT_ID,1,2)=f.line_code and substr(a.DEPT_ID,3,2)=f.station_code
          and to_number(f.line_id)=to_number(b.line_id) and to_number(f.station_id)=to_number(b.station_id)
          and to_number(b.line_id)=to_number(c.line_id)
          and instr(v_line_id,substr('00'||rtrim(ltrim(b.line_id)),-2,2))>0
          and to_char(a.REPORTDATE,'yyyy-mm')=v_begin_day
          and a.TICKETTYPE_ID='0201'
          and (a.HANDINTYPE_ID = '5' or nvl(trim(a.ISABANDON),0) = 1)
          and a.QUANTITY>0
       group by  to_number(b.line_id),c.line_name;
  
       --老人SVT IC_MAIN_TYPE=1,IC_SUB_TYPE=13 (运营老免卡0203)
      insert into t#ic_handin_month
       select to_number(b.line_id),c.line_name,
          0,0,0,0,sum(v_deposit_lr),sum(to_number(nvl(a.VALUE,0))),0,0,0,0
       from ic_inf_station_handin a,ic_cod_station b,t#ic_line_id_name c,IC_COD_STATION_CONTRAST f
       where substr(a.DEPT_ID,1,2)=f.line_code and substr(a.DEPT_ID,3,2)=f.station_code
          and to_number(f.line_id)=to_number(b.line_id) and to_number(f.station_id)=to_number(b.station_id)
          and to_number(b.line_id)=to_number(c.line_id)
          and instr(v_line_id,substr('00'||rtrim(ltrim(b.line_id)),-2,2))>0
          and to_char(a.REPORTDATE,'yyyy-mm')=v_begin_day
          and a.TICKETTYPE_ID='0203'
          and (a.HANDINTYPE_ID = '5' or nvl(trim(a.ISABANDON),0) = 1)
          and a.QUANTITY>0
       group by  to_number(b.line_id),c.line_name;
     
  /*
       --老免卡 IC_MAIN_TYPE=1,IC_SUB_TYPE=14
      insert into t#ic_handin_month
       select to_number(b.line_id),c.line_name,
          0,0,0,0,0,0,sum(v_deposit_om),sum(to_number(nvl(a.VALUE,0))),0,0
       from ic_inf_station_handin a,ic_cod_station b,t#ic_line_id_name c
       where 
          --a.DEPT_ID=to_number(b.station_id)
          to_number((substr(a.DEPT_ID,3,2)))=to_number(b.station_id)
          and to_number(b.line_id)=to_number(c.line_id)
          and substr('00'||rtrim(ltrim(b.line_id)),-1,2) like '%'||v_line_id||'%'
          and to_char(a.REPORTDATE,'yyyy-mm')=v_begin_day
          --and a.TICKETTYPE_ID=5
          and a.TICKETTYPE_ID='0114'
          and (a.HANDINTYPE_ID = 5 or a.ISABANDON = 1)
          and a.QUANTITY>0
       group by  to_number(b.line_id),c.line_name;


       --横合计
       update t#ic_handin_month
       set deposit_total = deposit_cr + deposit_xs + deposit_lr + deposit_om,
           --remain_value_total =  remain_value_lr + remain_value_om;
           remain_value_total = remain_value_cr + remain_value_xs + remain_value_lr + remain_value_om;
  */           
       --横合计
       update t#ic_handin_month
       set deposit_total = deposit_cr + deposit_xs + deposit_lr,
           remain_value_total = remain_value_cr + remain_value_xs + remain_value_lr;    

       --合计
      insert into t#ic_handin_month
      select 999,'合计',
          sum(nvl(deposit_cr,0)) , sum(to_number(nvl(remain_value_cr,0))),
          sum(nvl(deposit_xs,0)) , sum(to_number(nvl(remain_value_xs,0))),
          sum(nvl(deposit_lr,0)) , sum(to_number(nvl(remain_value_lr,0))),
          --sum(nvl(deposit_om,0))  ,sum(to_number(nvl(remain_value_om,0))),
          0,0,
          sum(nvl(deposit_total,0)) , sum(to_number(nvl(remain_value_total,0))) 
      from t#ic_handin_month;
    
 
    --返回表  
    SELECT count(*) INTO v_tmpCount FROM t#ic_handin_month;
    IF v_tmpCount > 0 THEN
        OPEN p_cur FOR
        select p_year stat_year,p_month stat_month,v_operator_name operator_name,
             line_id,line_name,
             to_char(sum(deposit_cr)) deposit_cr, to_char(sum(remain_value_cr)) remain_value_cr,
             to_char(sum(deposit_xs)) deposit_xs, to_char(sum(remain_value_xs)) remain_value_xs,
             to_char(sum(deposit_lr)) deposit_lr, to_char(sum(remain_value_lr)) remain_value_lr,
             --to_char(sum(deposit_om)) deposit_om,to_char(sum(remain_value_om)) remain_value_om,
             to_char(0) deposit_om,to_char(0) remain_value_om,
             to_char(sum(deposit_total)) deposit_total,to_char(sum(remain_value_total)) remain_value_total
        from t#ic_handin_month
        group by line_id,line_name;
    ELSE
        OPEN p_cur FOR
        select p_year stat_year,
              p_month stat_month,
              v_operator_name operator_name,
             null line_id,
             null line_name,
             null deposit_cr, null remain_value_cr,
             null deposit_xs, null remain_value_xs,
             null deposit_lr, null remain_value_lr,
             null deposit_om, null remain_value_om,
             null deposit_total, null remain_value_total
        from dual;
    END IF;


end;
/
grant execute on ACC_TK.UP_IC_RST_HANDIN_MONTH to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RST_HANDIN_MONTH to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RST_HANDIN_MONTH_REMARK
prompt ================================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RST_HANDIN_MONTH_REMARK" (
  p_cur          IN OUT sys_refcursor,--返回结果集
  p_line_id      IN VARCHAR2,
  p_year         IN VARCHAR2,
  p_month        IN VARCHAR2
)

as

begin
    OPEN p_cur FOR
    select to_char(report_date,'yyyyMMdd') report_date,remark
            from ic_prm_abandon_ticket_para
            where to_char(report_date,'yyyyMM')=p_year||p_month and
                  line_id like
                  case
                    when p_line_id is not null and p_line_id <>' '
                    then
                        p_line_id
                    else
                        '%'
                  end
            order by report_date;
end;
/
grant execute on ACC_TK.UP_IC_RST_HANDIN_MONTH_REMARK to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RST_HANDIN_MONTH_REMARK to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RST_LINE_DISTRIBUTE
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RST_LINE_DISTRIBUTE"
(   p_cur IN OUT Sys_Refcursor,
    p_bill_no        in         VARCHAR2,          --单号
    p_storage_id     in         VARCHAR2,
    p_line_id        in         VARCHAR2,        
    p_card_main_type in         VARCHAR2,         --主类型(只是为了页面传参，不能作为关系字段)
    p_card_sub_type  in         VARCHAR2,           --子类型(改为使用)
    p_begin_day      in         VARCHAR2,
    p_end_day        in         VARCHAR2,
    operatorId       in         VARCHAR2          --操作员ID
)    
aS 
---------------------------------------------------------------------------------
--过程名：  UP_IC_RST_LINE_DISTRIBUTE
--功能描述：票务管理--配票量线路汇总
--创建者：  李莉
--创建日期：20130727

--修改者:   moqf
--修改日期: 20140407 
--修改内容：改为p_card_main_type、p_card_sub_type传入票卡主、子类型，统计所有票卡类型

--修改者:   LINDAQUAN
--修改日期: 20151207
--修改内容：添加传入参数p_storage_id 仓库选项
-------------------------------------------------------------------------------

   v_bill_no                     varchar(12);
   v_line_id                     varchar(100);
   v_operatorName                varchar(20);
   v_title                       varchar(50);
   v_tempCount                   int;
   v_sql varchar(2048);
   v_where varchar(2048);
   v_group varchar(1024);

 BEGIN
    --清临时表
    delete t#ic_linedistri_detail_card;
    delete t#ic_linedistri_result;
    delete t#ic_linedistri_detail_money ;
  --设置参数
  v_bill_no := trim(p_bill_no);
  IF p_bill_no is not NULL THEN
    v_where :=v_where ||' and a.bill_no='||''''||p_bill_no||'''';
  END IF;
  
  --添加传入参数p_storage_id
  select listagg(substr('00'||rtrim(ltrim(line_id)),-2,2),''',''') within group (order by line_id) into v_line_id from ic_cod_storage_line 
  where instr(p_storage_id,storage_id)>0;
  
  v_line_id := case when p_line_id is null then v_line_id else substr('00'||trim(p_line_id),-2,2) end;
  IF v_line_id is not NULL THEN
    v_where :=v_where ||' and substr(''00''||rtrim(ltrim(a.distribute_line_id)),-2,2)in('||''''||v_line_id||''''||')';
  END IF;
  IF p_card_main_type is not NULL THEN
      v_where :=v_where ||' and rtrim(ltrim(a.ic_main_type))='||''''||p_card_main_type||'''';
  END IF;
  IF p_card_sub_type is not NULL THEN
      v_where :=v_where ||' and rtrim(ltrim(a.ic_sub_type))='||''''||p_card_sub_type||'''';
  END IF;
  IF p_begin_day is not NULL THEN
     v_where := v_where ||' and b.bill_date>=to_date('''||p_begin_day||' 00:00:00'||''',''yyyy-MM-dd hh24:mi:ss'') ';
  END IF;

  IF p_end_day is not NULL THEN
     v_where := v_where ||' and b.bill_date<=to_date('''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';
  END IF;
     
  select sys_operator_name into v_operatorName  from acc_st.op_sys_operator where  sys_operator_id=operatorId;
  

  --查所有
  if ( p_card_main_type=' '  or p_card_main_type is null ) then
     v_title:='车票配票量查询汇总表';
     --成人储,学生储,老人储,赋值OCT
     insert into t#ic_linedistri_detail_card 
       select distribute_line_id,null,distribute_station_id ,
            substr('00'||rtrim(ltrim(a.ic_main_type)),-2,2),substr('00'||rtrim(ltrim(a.ic_sub_type)),-2,2),c.ic_sub_desc,
            sum(nvl((case when d.water_no is null then distribute_quantity else d.section_num end),0))   
       from ic_out_distribute_detail a
               join ic_out_distribute_bill b 
                  on a.bill_no=b.bill_no and b.record_flag='0' 
                  and  b.bill_date>=to_date(p_begin_day||' 00:00:00','yyyy-mm-dd hh24:mi:ss') and b.bill_date<=to_date(p_end_day||' 23:59:59','yyyy-mm-dd hh24:mi:ss')
               join ic_cod_card_sub_type c 
                  on  to_number(trim(a.ic_main_type)) = to_number(trim(c.ic_main_type)) and to_number(trim(a.ic_sub_type)) = to_number(trim(c.ic_sub_type))
               left join ic_out_distribute_dtl_box d
                  on to_char(a.water_no) =d.water_no 
       where instr(v_line_id,substr('00'||rtrim(ltrim(a.distribute_line_id)),-2,2))>0  and a.bill_no like '%'||v_bill_no||'%' 
       group by  distribute_line_id,distribute_station_id,a.ic_main_type,a.ic_sub_type,c.ic_sub_desc;
     
  else  --
      --预制单程票
      /*
      if (p_card_main_type='1201') then
         v_title:='预制单程票配票量查询明细表';
         insert into t#ic_linedistri_detail_money 
         select distribute_line_id,null,distribute_station_id ,'12','22','预制票',to_char(a.card_money/100)||'元',
            sum(nvl((case when d.water_no is null then distribute_quantity else d.section_num end),0)) 
         from ic_out_distribute_detail a
              join ic_out_distribute_bill b
                on a.bill_no=b.bill_no and b.record_flag='0'
                and  b.bill_date>=to_date(p_begin_day||' 00:00:00','yyyy-mm-dd hh24:mi:ss') and b.bill_date<=to_date(p_end_day||' 23:59:59','yyyy-mm-dd hh24:mi:ss')
              left join ic_out_distribute_dtl_box d
                on  to_char(a.water_no) =d.water_no
         where substr('00'||trim(a.distribute_line_id),-2,2) like '%'||v_line_id||'%'
              and a.bill_no like '%'||v_bill_no||'%'
              and a.ic_main_type = '12'
              and a.ic_sub_type = '22'
              and a.card_money != 0
              and (line_id is null )
              --and (station_id is null )
         group by  distribute_line_id,distribute_station_id,to_char(a.card_money/100)||'元';
         */
         --------------------------------------

             v_title:='配票量查询明细表';
             v_sql :='insert into t#ic_linedistri_detail_money 
             select distribute_line_id,null,distribute_station_id ,a.ic_main_type,a.ic_sub_type, a.ic_sub_type,to_char(a.card_money/100)||''元'',
                sum(nvl((case when d.water_no is null then distribute_quantity else d.section_num end),0)) 
             from ic_out_distribute_detail a
                  join ic_out_distribute_bill b
                    on a.bill_no=b.bill_no and b.record_flag=''0''
                    
                  left join ic_out_distribute_dtl_box d
                    on  to_char(a.water_no) =d.water_no
                  left join ic_cod_card_sub_type e 
                    on trim(a.ic_main_type) = e.ic_main_type and trim(a.ic_sub_type) = e.ic_sub_type  
             where  (line_id is null ) ';
                  --and (station_id is null )
                  --a.card_money != 0
                  --and
            v_group := ' group by  distribute_line_id,distribute_station_id,a.ic_main_type,a.ic_sub_type, a.ic_sub_type,to_char(a.card_money/100)||''元''';
            v_sql := v_sql || v_where || v_group;
            DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE immediate v_sql;
         

      
      
  end if;

  --返回格式,没包配票到部门的
  if (p_card_main_type=' '  or p_card_main_type is null ) then
      insert into t#ic_linedistri_result
        select  e.line_id,e.line_name,a.ic_sub_des,num
        from t#ic_linedistri_detail_card a,ic_cod_line e
        where to_number(e.line_id) = to_number(a.line_id);
  else
      insert into t#ic_linedistri_result 
        select  e.line_id,e.line_name,to_char(card_money), num   
        from  t#ic_linedistri_detail_money a,ic_cod_line e
        where to_number(e.line_id) =to_number(a.line_id) ;
  end if;        


  --返回
    select count(*) into v_tempCount from t#ic_linedistri_result;
    IF v_tempCount > 0 THEN
        OPEN p_cur FOR
        select p_begin_day begin_day,
              p_end_day as end_day,
              v_title as title,
              v_operatorName as operator_name ,
              line_id,
              line_name,
              card_money as sub_card_money,
              sum(num) as num
        from t#ic_linedistri_result
        group by  line_id,line_name,card_money;
        
    ELSE   
        OPEN p_cur FOR
        select p_begin_day begin_day,
               p_end_day end_day,
               ' '  title,
               v_operatorName  operator_name ,
               ' '  line_id,
               ' '  line_name,
               ' '  sub_card_money,
               null num
        from dual;
    END IF;

end;
/
grant execute on ACC_TK.UP_IC_RST_LINE_DISTRIBUTE to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RST_LINE_DISTRIBUTE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_RST_RECLAIM_LINE
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_RST_RECLAIM_LINE"
(in_out_cur IN OUT Sys_Refcursor,
    p_storage_id     in         VARCHAR2,        
    p_line_id        in    VARCHAR2,
    p_card_main_type  in   VARCHAR2,
    p_card_sub_type   in   VARCHAR2,
    p_begin_day       in   VARCHAR2,
    p_end_day         in   VARCHAR2,
    operatorId        in   VARCHAR2
)
as
---------------------------------------------------------------------------------
--过程名：  UP_IC_RST_RECLAIM_LINE
--功能描述：回收量查询线路汇总车站库存
--创建者：  lili
--创建日期：20130728

--修改者:   moqf
--修改日期: 20140407 
--修改内容：改为p_card_main_type、p_card_sub_type传入票卡主、子类型，统计所有票卡类型

--修改者:   LINDAQUAN
--修改日期: 20151207
--修改内容：添加传入参数p_storage_id 仓库选项,添加票卡类型、线路车站代码的票务、运营系统关联表查询（车站上交数据由通讯系统解析LCC文件产生）
-------------------------------------------------------------------------------

    v_title           varchar(50);
    v_line_name       varchar(16);
    v_line_id         varchar(100);
    v_begin_day       varchar(10);
    v_end_day         varchar(10);
    v_operator_name   varchar(16);
    v_tempCount       int;
    v_sql varchar(2048);
    v_where varchar(2048);
    v_group varchar(1024);

BEGIN
    --明细表
    delete t#ic_reclaim_line_detail;
    delete t#ic_reclaim_line_result;
    
    --设置参数
    --添加传入参数p_storage_id
    select listagg(substr('00'||rtrim(ltrim(line_id)),-2,2),''',''') within group (order by line_id) into v_line_id from ic_cod_storage_line 
    where instr(p_storage_id,storage_id)>0;
    
    v_line_id := case when p_line_id = ' ' or p_line_id is null then v_line_id else substr('00'||ltrim(rtrim(p_line_id)),-2,2) end;
    IF v_line_id is not NULL THEN
      v_where :=v_where ||' and substr(''00''||rtrim(ltrim(b.line_id)),-2,2)in('||''''||v_line_id||''''||')';
    END IF;
    IF p_card_main_type is not NULL THEN
      v_where :=v_where ||' and rtrim(ltrim(c.ic_main_type))='||''''||p_card_main_type||'''';
    END IF;
    IF p_card_sub_type is not NULL THEN
        v_where :=v_where ||' and rtrim(ltrim(c.ic_sub_type))='||''''||p_card_sub_type||'''';
    END IF;
    IF p_begin_day is not NULL THEN
       v_where := v_where ||' and a.REPORTDATE>=to_date('''||p_begin_day||' 00:00:00'||''',''yyyy-MM-dd hh24:mi:ss'') ';
    END IF;
  
    IF p_end_day is not NULL THEN
       v_where := v_where ||' and a.REPORTDATE<=to_date('''||p_end_day||' 23:59:59'||''',''yyyy-MM-dd hh24:mi:ss'')';
    END IF;

    v_line_name := '所有';
    
  --取出操作员名称
    select sys_operator_name into v_operator_name  from acc_st.op_sys_operator       where   sys_operator_id=operatorId;
 
    --v_begin_day := p_begin_day;
    --v_end_day := p_end_day;

    --查所有
    if (p_card_main_type = ' ' or p_card_main_type is null) then
         v_title := '线路车票回收量查询报表';

        --普通TOKEN,预制票单程票,成人储,老免卡,学生储,老人储,赋值OCT,纸票
        insert into t#ic_reclaim_line_detail
              select to_number(b.line_id),to_number((substr(a.DEPT_ID,3,2))),c.chinese_name,to_char(a.TICKETTYPE_ID),e.ic_sub_desc,sum(to_number(nvl(a.QUANTITY,0)))
              from ic_inf_station_handin a
                  inner join IC_COD_STATION_CONTRAST b on substr(a.DEPT_ID,1,2)=b.line_code and substr(a.DEPT_ID,3,2)=b.station_code
                  inner join ic_cod_station c on to_number(b.line_id)=to_number(c.line_id) and to_number(b.station_id)=to_number(c.station_id)
                  --ic_inf_station_handin没有ic_main_type字段
                  inner join IC_COD_CARD_TYPE_CONTRAST d on substr(a.TICKETTYPE_ID,1,2)=d.card_main_type and substr(a.TICKETTYPE_ID,3,2)=d.card_sub_type
                  inner join ic_cod_card_sub_type e on to_number(d.ic_main_type)=to_number(e.ic_main_type) and to_number(d.ic_sub_type)=to_number(e.ic_sub_type)
              where instr(v_line_id,substr('00'||rtrim(ltrim(b.line_id)),-2,2))>0
                     and a.REPORTDATE>=to_date(p_begin_day||' 00:00:00','yyyy-mm-dd hh24:mi:ss')
                     and a.REPORTDATE<=to_date(p_end_day||' 23:59:59','yyyy-mm-dd hh24:mi:ss')
              group by  to_number(b.line_id),to_number((substr(a.DEPT_ID,3,2))),c.chinese_name,to_char(a.TICKETTYPE_ID),e.ic_sub_desc;
    else  --
        --预制单程票
        --现系统没有ic_sub_type对应TICKETTYPE_ID = 11 的子卡类型 (不限期预制票)
           v_title := '回收量查询报表';
           v_sql :='insert into t#ic_reclaim_line_detail
               select to_number(c.line_id),to_number((substr(a.DEPT_ID,3,2))),c.chinese_name,to_char(to_number(a.VALUE)),to_char(to_number(a.VALUE))||''元'',sum(to_number(nvl(a.QUANTITY,0)))
               from ic_inf_station_handin a
                   inner join IC_COD_STATION_CONTRAST b on substr(a.DEPT_ID,1,2)=b.line_code and substr(a.DEPT_ID,3,2)=b.station_code
                   inner join ic_cod_station c on to_number(c.line_id)=to_number(b.line_id) and to_number(c.station_id)=to_number(b.station_id)
                   inner join IC_COD_CARD_TYPE_CONTRAST d on substr(a.TICKETTYPE_ID,1,2)=d.card_main_type and substr(a.TICKETTYPE_ID,3,2)=d.card_sub_type
                   inner join ic_cod_card_sub_type e on to_number(e.ic_main_type)=to_number(c.ic_main_type) and to_number(b.ic_sub_type)=to_number(c.ic_sub_type)                 
               where 1=1 ';
                  -- substr('00'||rtrim(ltrim(b.line_id)),-2,2) like '%'||v_line_id||'%'
                  -- and a.REPORTDATE>=to_date(v_begin_day||' 00:00:00','yyyy-mm-dd hh24:mi:ss')
                 --  and a.REPORTDATE<=to_date(v_end_day||' 23:59:59','yyyy-mm-dd hh24:mi:ss')
                   --现系统没有ic_sub_type对应TICKETTYPE_ID = 11 的子卡类型 (不限期预制票)
                   --and a.TICKETTYPE_ID = 11
                  -- and a.TICKETTYPE_ID = '1222'
               v_group := ' group by  to_number(c.line_id),to_number((substr(a.DEPT_ID,3,2))),c.chinese_name,to_char(to_number(a.VALUE))';
               v_sql := v_sql || v_where || v_group;
               DBMS_OUTPUT.PUT_LINE(v_sql);
               EXECUTE immediate v_sql;
           /*    
           insert into t#ic_reclaim_line_detail
               select to_number(b.line_id),to_number((substr(a.DEPT_ID,3,2))),b.chinese_name,to_char(to_number(a.VALUE)),to_char(to_number(a.VALUE))||'元',sum(to_number(nvl(a.QUANTITY,0)))
               from ic_inf_station_handin a
                   inner join ic_cod_station b on to_number((substr(a.DEPT_ID,1,2)))=to_number(b.line_id) and to_number((substr(a.DEPT_ID,3,2)))=to_number(b.station_id)
                   inner join ic_cod_card_sub_type c on to_number((substr(a.TICKETTYPE_ID,1,2)))=to_number(c.ic_main_type) and to_number((substr(a.TICKETTYPE_ID,3,2)))=to_number(c.ic_sub_type)
               where
                   substr('00'||rtrim(ltrim(b.line_id)),-2,2) like '%'||v_line_id||'%'
                   and a.REPORTDATE>=to_date(v_begin_day||' 00:00:00','yyyy-mm-dd hh24:mi:ss')
                   and a.REPORTDATE<=to_date(v_end_day||' 23:59:59','yyyy-mm-dd hh24:mi:ss')
                   --现系统没有ic_sub_type对应TICKETTYPE_ID = 11 的子卡类型 (不限期预制票)
                   --and a.TICKETTYPE_ID = 11
                   and a.TICKETTYPE_ID = '1222'
               group by  to_number(b.line_id),to_number((substr(a.DEPT_ID,3,2))),b.chinese_name,to_char(to_number(a.VALUE));
            */   

        
     end if;
     

    --返回表

    insert into t#ic_reclaim_line_result
        select a.line_id,b.line_name,coln_code,coln_name,sum(num)
        from t#ic_reclaim_line_detail a,ic_cod_line b
        where to_number(a.line_id)=to_number(b.line_id) 
        group by a.line_id,b.line_name,coln_code,coln_name;

    --返回
    --luojun  20121016 选择票价时 票价按数字排序
       select count(*) into v_tempCount from t#ic_reclaim_line_result;
       IF v_tempCount > 0 THEN
           OPEN in_out_cur FOR 
           select
                v_title title,p_begin_day as begin_day,p_end_day as end_day,line_name as line_name_des,v_operator_name operator_name,
                line_id ,line_name, coln_code,
                case when length(coln_name) <4 then ' '||coln_name else coln_name end as coln_name,sum(num) num
           from t#ic_reclaim_line_result
           group by line_id,line_name,coln_code,
           case when length(coln_name) <4 then ' '||coln_name else coln_name end
           order by line_id;
       ELSE
           OPEN in_out_cur FOR 
           select
                ' ' title,p_begin_day begin_day,p_end_day end_day,' ' line_name_des,v_operator_name operator_name,
                ' ' line_id ,' ' line_name, ' ' coln_code,
                ' ' coln_name,null num
           from dual;
           
       END IF;

end;
/
grant execute on ACC_TK.UP_IC_RST_RECLAIM_LINE to ACC_TK_APP;
grant execute on ACC_TK.UP_IC_RST_RECLAIM_LINE to ACC_TK_RPT;


prompt
prompt Creating procedure UP_IC_STS_GEN_IN
prompt ===================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_STS_GEN_IN"



---------------------------------------------------------------------------------

--功能描述：产生出入库中间统计数据
--创建者：  mqf
--创建日期：20131104
---------------------------------------------------------------------------------

AS

    v_num int;
    v_his_recd_limit int;
    v_max_in      int;
    v_his_table  char(40);
    v_his_count  int;
    v_curr_his   char(20);
    v_sql   varchar(1024);
    v_sql1   varchar(1024);
    v_sql2   varchar(1024);
    v_sql3   varchar(1024);
    v_new   char(1);
    v_bill_begin   varchar(10);
    v_bill_end   varchar(10);
    v_memo   varchar(500);
    v_max_end_bill varchar(10);
    v_min_begin varchar(10);
    v_bill_no char(12);

    v_tempCount int;
    v_tempCount2 int;

    isNoOutData char(1);

    --v_begin_datetime Date;
    --v_cost_seconds int;




begin
      --v_begin_datetime := sysdate;
      DELETE FROM T#IC_STS_GEN_IN;
      DELETE FROM T#IC_STS_GEN_IN_STORE_DETAIL;
      DELETE FROM T#IC_STS_GEN_IN_TABLE;
      DELETE FROM T#IC_STS_GEN_IN_OUT_STAT;
      DELETE FROM T#IC_STS_GEN_IN_OUT_BILL;

      --检查出库有没有未处理的已审核记录
      SELECT count(*)  into v_tempCount FROM acc_tk.ic_out_bill a, acc_tk.ic_out_bill_detail b
      WHERE a.bill_no = b.bill_no and a.record_flag='0'
            and substr(a.bill_no,3,12) >( select max(substr(bill_no,3,12)) from acc_tk.ic_stat_out );
      IF v_tempCount <= 0 THEN
                isNoOutData := '1';
      END IF;

      IF isNoOutData = '1' THEN
        --ic_in_store_detail定期迁移数据到历史表
          select count(*) into v_tempCount from  acc_tk.ic_in_store_detail a,acc_tk.ic_in_store_bill b  where  a.bill_no=b.bill_no  and b.record_flag='0';
          IF v_tempCount <= 0 THEN
                v_memo := '票务处理：没有未处理的已审核记录！';
                insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
                dbms_output.put_line(v_memo);
                return;
          END IF;
      END IF;


  -----产生入库中间表统计,开始---------
   --多日票有效天数、多日票限制出站线路、多日票限制出站站点、多日票限制模式
   begin
       insert into T#IC_STS_GEN_IN_STORE_DETAIL
                    select b.bill_no,verify_date,reason_id,storage_id,area_id,ic_main_type,ic_sub_type,
                            in_num,valid_date,card_money,line_id_reclaim,station_id_reclaim,line_id,station_id,b.related_bill_no,
                            card_ava_days,exit_line_id,exit_station_id,model
                            from acc_tk.ic_in_store_detail a,acc_tk.ic_in_store_bill b
                            where  a.bill_no=b.bill_no  and b.record_flag='0'
                            --modify 20131105
                             and verify_date is not null;
       exception when others then
          rollback;
          v_memo := '票务处理：插入T#IC_STS_GEN_IN_STORE_DETAIL出错!';
          insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
          dbms_output.put_line(v_memo);

          return;
   end;

   --删除T#IC_STS_GEN_IN_STORE_DETAIL表ic_sts_in已存在的重复数据
   begin
        DELETE T#IC_STS_GEN_IN_STORE_DETAIL  where bill_no in( select distinct(bill_no) from acc_tk.ic_sts_in );
        exception when others then
            rollback;
            v_memo := '更新T#IC_STS_GEN_IN_STORE_DETAIL出错';
            insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
            dbms_output.put_line(v_memo);
            return;
   end;

   -- 多日票有效天数、多日票限制出站线路、多日票限制出站站点、多日票限制模式
   begin
       insert into T#IC_STS_GEN_IN
                select bill_no,verify_date,reason_id,storage_id,area_id,
                       ic_main_type,ic_sub_type,sum(in_num),valid_date,card_money,line_id_reclaim,station_id_reclaim,line_id,station_id,related_bill_no,
                       card_ava_days,exit_line_id,exit_station_id,model
                        from T#IC_STS_GEN_IN_STORE_DETAIL
                        group by    bill_no,verify_date,reason_id,storage_id,area_id,
                                    ic_main_type,ic_sub_type,valid_date,card_money,line_id_reclaim,station_id_reclaim,line_id,station_id,related_bill_no,
                                    card_ava_days,exit_line_id,exit_station_id,model;
       exception when others then
          rollback;
          v_memo := '票务处理：插入T#IC_STS_GEN_IN出错!';
          insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
          dbms_output.put_line(v_memo);
          return;
   end;


   select count(*) into v_tempCount from T#IC_STS_GEN_IN where line_id ='0' or line_id='00' or line_id is null;
   IF v_tempCount > 0 THEN
       begin
           update T#IC_STS_GEN_IN set line_id=' ' where line_id='0' or line_id='00' or line_id is null;
           exception when others then
              rollback;
              v_memo := '票务处理：修改line_id出错!';
              insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
              dbms_output.put_line(v_memo);
              return;
       end;

   END IF;

   select count(*) into v_tempCount from T#IC_STS_GEN_IN where station_id='0' or station_id='00' or station_id is null;
   IF v_tempCount > 0 THEN
       begin
           update T#IC_STS_GEN_IN set station_id=' ' where station_id='0' or station_id='00' or station_id is null;
           exception when others then
              rollback;
              v_memo := '票务处理：修改station_id出错!';
              insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
              dbms_output.put_line(v_memo);
              return;
       end;
   END IF;
   --多日票有效天数、多日票限制出站线路、多日票限制出站站点、多日票限制模式
   begin
       insert into  acc_tk.ic_sts_in(bill_no,verify_date,reason_id,storage_id,area_id,ic_main_type,ic_sub_type,in_num,valid_date,card_money,
                                line_id_reclaim,station_id_reclaim,line_id,station_id,related_bill_no,
                                card_ava_days,exit_line_id,exit_station_id,model)
                                select  bill_no,verify_date,reason_id,storage_id,area_id,ic_main_type,ic_sub_type,in_num,valid_date,
                                        card_money,line_id_reclaim,station_id_reclaim,line_id,station_id,related_bill_no,
                                        card_ava_days,exit_line_id,exit_station_id,model
                                        from T#IC_STS_GEN_IN;
       exception when others then
          rollback;
          v_memo := '票务处理：插入ic_sts_in出错!';
          insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
          dbms_output.put_line(v_memo);
          return;
   end;
   --------产生入库中间统计表，结束

   --------产生出库中间统计表，开始
    begin
        INSERT INTO T#IC_STS_GEN_IN_OUT_BILL
            SELECT a.bill_no,a.verify_date from acc_tk.ic_out_bill a WHERE  a.record_flag='0';

        exception when others then
            rollback;
            v_memo := '导入数据至T#IC_STS_GEN_IN_OUT_BILL出错';
            insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
            dbms_output.put_line(v_memo);
            return;
    end;

    begin
        DELETE T#IC_STS_GEN_IN_OUT_BILL  where bill_no in( select distinct(bill_no) from acc_tk.ic_stat_out );
        exception when others then
            rollback;
            v_memo := '更新T#IC_STS_GEN_IN_OUT_BILL出错';
            insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
            dbms_output.put_line(v_memo);
            return;
    end;

    -- 多日票有效天数、多日票限制出站线路、多日票限制? 稣菊镜恪⒍嗳掌毕拗颇Ｊ?
    begin
        INSERT INTO T#IC_STS_GEN_IN_OUT_STAT
        SELECT     a.bill_no,
                   a.verify_date,
                   b.reason_id,
                   b.storage_id,
                   b.area_id,
                   b.ic_main_type,
                   b.ic_sub_type,
                   sum(NVL((case when d.section_num is null then b.out_num else d.section_num end),0)),
                   b.vaild_date,
                   b.card_money,
                   b.line_id,
                   b.station_id,
                   b.card_ava_days,b.exit_line_id,b.exit_station_id,b.model
                   FROM T#IC_STS_GEN_IN_OUT_BILL a, acc_tk.ic_out_bill_detail b,acc_tk.ic_out_bill_detail_box d
                   WHERE a.bill_no = b.bill_no
                          AND to_char(b.water_no) = d.water_no(+) --盒明细表不需转换成varchar modify by hejj 20110524
                   group by a.bill_no,a.verify_date,b.reason_id,b.storage_id,b.area_id,
                            b.ic_main_type,b.ic_sub_type,b.vaild_date,b.card_money,b.line_id,b.station_id,
                            b.card_ava_days,b.exit_line_id,b.exit_station_id,b.model;
            exception when others then
                rollback;
                v_memo := '插 入T#IC_STS_GEN_IN_OUT_STAT出错';
                insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
                dbms_output.put_line(v_memo);
                return;
    end;
        begin
            --select count(*) into v_tempCount from ic_stat_out where line_id is null or line_id='0' or line_id='00';
      select count(*) into v_tempCount from T#IC_STS_GEN_IN_OUT_STAT where line_id is null or line_id='0' or line_id='00'; --20150429 modify by mqf
            IF v_tempCount > 0 THEN
                UPDATE T#IC_STS_GEN_IN_OUT_STAT set line_id=' '   where line_id is null or line_id='0' or line_id='00';
            END IF;

            exception when others then
                rollback;
                v_memo := '更新line_id出错';
                insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
                dbms_output.put_line(v_memo);
                return;
        end;

        begin
            select count(*) into v_tempCount from acc_tk.ic_stat_out where station_id is null or station_id='0' or station_id='00';
            IF v_tempCount > 0 THEN
                UPDATE T#IC_STS_GEN_IN_OUT_STAT set station_id=' ' where station_id is null or station_id='0' or station_id='00';
            END IF;
            exception when others then
                rollback;
                v_memo := '更 新station_id出错';
                insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
                dbms_output.put_line(v_memo);
                return;
        end;

        -- 多日票有效天数、多日票限制出站线路、多日票限制出站站点、多日票限制模式
        begin
            INSERT INTO acc_tk.ic_stat_out
               SELECT  bill_no,
                       verify_date,
                       reason_id,
                       storage_id,
                       area_id,
                       ic_main_type,
                       ic_sub_type,
                       out_num,
                       vaild_date,
                       card_money,
                       line_id,
                       station_id,
                       card_ava_days,exit_line_id,exit_station_id,model
                       FROM T#IC_STS_GEN_IN_OUT_STAT;

            exception when others then
                rollback;
                v_memo := '插入ic_stat_out出错';
                insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);
                dbms_output.put_line(v_memo);
                return;
        end;
        --------产生出库中间统计表，结束



   v_memo := '票务处理:出入库中间统计完成!';
   insert into acc_tk.oper_logging  values(SERIAL_NO.nextval,' ', sysdate,' ','统计',v_memo);

   --v_cost_seconds := ROUND(TO_NUMBER(sysdate - v_begin_datetime) * 24 * 60 * 60);
   --to_char(v_begin_datetime,'yyyy-mm-dd hh24:mi:ss')
   --to_char(sysdate,'yyyy-mm-dd hh24:mi:ss')

   --up_dm_tk_mv_log(null,null,null,null,v_begin_datetime,sysdate, v_cost_seconds,null,v_memo,null);

   commit;

   dbms_output.put_line(v_memo);

end;
/
grant execute on ACC_TK.UP_IC_STS_GEN_IN to ACC_TK_APP;


prompt
prompt Creating procedure UP_IC_TK_OUT_GETDETAIL
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_IC_TK_OUT_GETDETAIL" (p_bill_no in VARCHAR2)
AS
/*
--------------------------------------------------


--------------------------------------------------
*/
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  begin
    insert into t#ic_get_result(  bill_no,ic_main_type,ic_sub_type,distribute_quantity,card_money,
                        vaild_date,line_id,station_id,exit_line_id,exit_station_id,model,distribute_line_id,distribute_station_id,
                        detail_place,start_box_id,end_box_id,start_logical_id,end_logical_id,section_num )
               select  B.bill_no,B.ic_main_type,B.ic_sub_type,B.distribute_quantity,B.card_money,
                        B.valid_date,B.line_id,B.station_id,B.exit_line_id,B.exit_station_id,B.model,B.distribute_line_id,B.distribute_station_id,
                      C.detail_place,C.start_box_id,C.end_box_id,C.start_logical_id,C.end_logical_id,C.section_num
                       from ic_out_distribute_detail B,ic_out_distribute_dtl_box C
               where B.bill_no =p_bill_no and
                    B.bill_no = C.bill_no(+) and B.water_no =C.water_no(+);

               update t#ic_get_result set distribute_quantity= section_num where  section_num is not null and section_num <>0;
  exception when others then
    rollback;
    return;
  end;


END;
/
grant execute on ACC_TK.UP_IC_TK_OUT_GETDETAIL to ACC_TK_APP;


prompt
prompt Creating procedure UP_NON_RETURN_ACTION
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_NON_RETURN_ACTION" (i_id          in int, --????id
                                                 i_applybill   in varchar2, --??????????????????
                                                 i_applyaction in varchar2, --????????
                                                 i_processbom  in varchar2, --????bom
                                                 o_resultset   out sys_refcursor --????out??????????????
                                                 )
    ---------------------------------------------------------------------------------
    --??????: up_non_return_action
    -------------------------------------------------------------------------------
 as
    tkTime       varchar(8); --????????
    shiftId      varchar(2); --????????????
    lineId       varchar(2); --????????????
    stationId    varchar(2); --????????????
    deviceId     varchar(4); --????????????id
    receiptId    varchar(4); --????????
    devicetypeId varchar(2); --????????
    isneedBaseinfo int; --????????????????
    tklogicno      varchar(16);
    audt      varchar(1);
    applytime date;
    actionQuery  varchar(1); --????
    actionApply  varchar(1); --????????
    actionFinish varchar(1); --????????
    hdlFlagPermit   varchar(1); --????
    hdlflagUnandle varchar(1); --??????
    hdlflagHandle   varchar(1); --iccs????????
    hdlflagFinish   varchar(1); --????????
    hdlflagError    varchar(1); --????????
    procesingDoing   varchar(1); --????????
    procesingNodoing varchar(1); --????????
    v_temp_counts  int;
    v_temp_counts1 int;
    v_temp_counts2 int;
begin
    ---------------------------------????????????-------------------------------------------------------------
    begin
        begin
            --????????????
            --20080616-01-0101-0001-0002
            select substr(i_applybill, 1, 8),
                   substr(i_applybill, 10, 2),
                   substr(i_applybill, 13, 2),
                   substr(i_applybill, 15, 2),
                   substr(i_applybill, 18, 4),
                   substr(i_applybill, 23, 4),
                   '03'
              into tkTime,--??????
                   shiftId,--BOM????????
                   lineId,--????????
                   stationId,--????????
                   deviceId,--????ID
                   receiptId,--????????????????ID
                   devicetypeId--????????
              from dual;
        end;
        begin
            --????????
            hdlflagFinish   := '1';--??????????
            hdlflagUnandle := '2';--??????????
            hdlflagHandle   := '3';--????????????????
            hdlflagError    := '5';--??????????????????????????????
            hdlFlagPermit   := '7';--????????????????
            --??????????????1?????? 2?????????? 3??????????
            actionQuery  := '1'; --????
            actionApply  := '2'; --????
            actionFinish := '3'; --????????????
            --??????
            procesingDoing   := '1';
            procesingNodoing := '0';
            --????????????????????
            isneedBaseinfo := 0;
        end;
        --????????????????????
        if (actionQuery = i_applyaction or actionApply = i_applyaction) then
            begin
                isneedBaseinfo := 1;
            end;
        end if;
    end;
    ---------------------------------????????????????-------------------------------------------------------------
    begin
        if (isneedBaseinfo = 1) then
            begin
                insert into t#st_results_non_return
                    (tk_logic_no,
                     amount,
                     bala,
                     actual_return_bala,
                     penalty,
                     penalty_reason,
                     audt,
                     hdl_flag,
                     tk_time)
                    select tk_logic_no,
                           amount * 100 amount,
                           bala * 100 bala,
                           actual_return_bala * 100 actual_return_bala,
                           penalty * 100 penalty,
                           penalty_reason,
                           audt,
                           hdl_flag,
                           tk_time
                      from st_que_non_return
                     where line_id = lineId
                       and station_id = stationId
                       and dev_type_id = devicetypeId
                       and device_id = deviceId
                       and receipt_id = receiptId
                       and to_char(tk_time, 'yyyymmdd') = tkTime
                       and shift_id = shiftId;
            end;
            --
            select 1
              into v_temp_counts
              from t#st_results_non_return
             where rownum = 1;
            if (v_temp_counts = 1) then
         select audt,tk_time into audt,applytime from t#st_results_non_return;
                --????????????????????????7????????????????????
                if (audt <> '1' or
                   round(to_number(sysdate - applytime)) < 7) then
                    update t#st_results_non_return
                       set hdl_flag           = hdlflagUnandle,
                           amount             = 0,
                           bala               = 0,
                           actual_return_bala = 0,
                           penalty            = 0,
                           penalty_reason     = '0';
                end if;
        ----??????????????????????????????????????????????????????,????????????????
            else
                select tk_print_no
                  into tklogicno
                  from st_err_non_return
                 where line_id = lineId
                   and station_id = stationId
                   and dev_type_id = devicetypeId
                   and device_id = deviceId
                   and receipt_id = receiptId
                   and to_char(tk_time, 'yyyymmdd') = tkTime
                   and shift_id = shiftId
                   and err_code in
                       ('01', '03', '04', '06', '07', '08', '41');
                insert into t#st_results_non_return
                    (tk_logic_no,
                     amount,
                     bala,
                     actual_return_bala,
                     penalty,
                     penalty_reason,
                     audt,
                     hdl_flag)
                values
                    ('', 0, 0, 0, 0, '', '', hdlflagError);
            end if;
        end if;
    end;
    ---------------------------------????????????????????????--------------------------------
    --------------------------------????-----------------------------------------------------
    begin
        if (i_applyaction = actionQuery) then
            --????????????
            insert into st_flow_non_return
                (id, apply_bill, apply_action, return_flag, return_time)
                select i_id, i_applybill, actionQuery, hdl_flag, sysdate
                  from t#st_results_non_return;
            ----????????????
            open o_resultset for
                select tk_logic_no,
                       amount,
                       bala,
                       actual_return_bala,
                       penalty,
                       penalty_reason,
                       hdl_flag
                  from t#st_results_non_return;
        end if;
    end;
    --------------------------------????????-----------------------------------------------------
    -----------------------------------????????----------------------------------------------------
    begin
        if (i_applyaction = actionApply) then
            --??????????????????????: ??????????????????????????????????????????????????????????????????????????????????????????
            --????????????????????????????????3??????????,????????7????????
            begin
                select count(*)
                  into v_temp_counts
                  from st_flow_non_return
                 where apply_bill = i_applybill
                   and apply_action = actionApply
                   and processing = procesingDoing;
                select count(*)
                  into v_temp_counts1
                  from st_flow_non_return
                 where apply_bill = i_applybill
                   and return_flag = hdlflagFinish;
                select count(*)
                  into v_temp_counts2
                  from st_flow_non_return
                 where id = i_id
                   and apply_bill = i_applybill
                   and apply_action = actionQuery
                   and return_flag = hdlflagHandle;
                if (v_temp_counts = 0 and v_temp_counts1 = 0 and
                   v_temp_counts2 > 0) then
                    begin
                        update t#st_results_non_return
                           set hdl_flag = hdlFlagPermit;
                    end;
                end if;
                --????????????????????????????????(????????????????????)
                insert into st_flow_non_return
                    (id,
                     apply_bill,
                     apply_action,
                     return_flag,
                     return_time,
                     processing)
                    select i_id,
                           i_applybill,
                           actionApply,
                           hdl_flag,
                           sysdate,
                           procesingDoing
                      from t#st_results_non_return;
                --????????????
                open o_resultset for
                    select tk_logic_no,
                           amount,
                           bala,
                           actual_return_bala,
                           penalty,
                           penalty_reason,
                           hdl_flag
                      from t#st_results_non_return;
            end;
        end if;
    end;
    -----------------------------------------------????????????----------------------------------------------------
    ----------------------------------------------????????????????--------------------------------------------------
    begin
        if (i_applyaction = actionFinish) then
            begin
                insert into t#st_flag_non_return
                    (return_flag)
                    select return_flag
                      from st_flow_non_return
                     where id = i_id
                       and apply_bill = i_applybill;
                select count(*)
                  into v_temp_counts1
                  from t#st_flag_non_return
                 where return_flag = hdlflagHandle;
                select count(*)
                  into v_temp_counts2
                  from t#st_flag_non_return
                 where return_flag = hdlFlagPermit;
            end;
            if (v_temp_counts1 > 0 and v_temp_counts2 > 0) then
                --??????????????????????????????????????????????????????
                begin
                    --????????????:??????????1??????
                    insert into st_flow_non_return
                        (id,
                         apply_bill,
                         apply_action,
                         return_flag,
                         return_time)
                    values
                        (i_id,
                         i_applybill,
                         actionFinish,
                         hdlflagFinish,
                         sysdate);
                    --????????????????????????????
                    update st_que_non_return
                       set hdl_flag           = hdlflagFinish,
                           return_line_id     = substr(i_processbom, 1, 2),
                           return_station_id  = substr(i_processbom, 3, 2),
                           return_dev_type_id = substr(i_processbom, 5, 2),
                           return_device_id   = substr(i_processbom, 7, 4)
                     where line_id = lineId
                       and station_id = stationId
                       and dev_type_id = devicetypeId
                       and device_id = deviceId
                       and receipt_id = receiptId
                       and to_char(tk_time, 'yyyymmdd') = tkTime
                       and shift_id = shiftId;
                end;
            else
                begin
                    --???????????? ????????????????????????????
                    insert into st_flow_non_return
                        (id,
                         apply_bill,
                         apply_action,
                         return_flag,
                         return_time)
                    values
                        (i_id, i_applybill, actionFinish, '', sysdate);
                end;
            end if;
            begin
                --????????????????????
                update st_flow_non_return
                   set processing = procesingNodoing
                 where id = i_id
                   and apply_bill = i_applybill
                   and apply_action = actionApply;
                --????????
                open o_resultset for
                    select tk_logic_no,
                           amount,
                           bala,
                           actual_return_bala,
                           penalty,
                           penalty_reason,
                           hdl_flag
                      from t#st_results_non_return;
            end;
        end if;
    end;
    ----------------------------------------------????????????????????--------------------------------------------------
    execute immediate ('truncate table t#st_flag_non_return');
    execute immediate ('truncate table t#st_results_non_return');
    commit;
    -----------------------------------------------------------------------------------------------------
end up_non_return_action;
/
grant execute on ACC_TK.UP_NON_RETURN_ACTION to ACC_TK_APP;


prompt
prompt Creating procedure UP_ST_DWN_BLACKLIST
prompt ======================================
prompt
create or replace procedure acc_tk.up_st_dwn_blacklist
(
piBalanceWaterNo in varchar,
poRetCode out int,
poRetMsg  out varchar2
)
is
versionNo varchar(10);--参数版本号
paramTypeId varchar(4);--参数类型
recordFlagCur varchar(1);--参数标识
recordFlagHis varchar(1);--参数标识
beginTime   date;--参数生效的开始时间
endTime     date;--参数生效的结束时间
versionDate date;--版本生成时间
operatorId  varchar(8);--操作员
waterNo int;--参数通知流水号
distributeTime int;
handleFlag varchar2(1);
remark varchar2(100);
begin
-----------------------------------------初始化
poRetCode :=0;
poRetMsg  :=':参数成功生成及通知';
recordFlagCur :='0';
recordFlagHis :='2';
beginTime :=sysdate;
endTime := beginTime;
versionDate :=beginTime;
operatorId :='system';
distributeTime :=0;
handleFlag :='0';
remark :='清算程序生成';
--获取下发的流水号
update st_water_no set water_no=water_no+1 where water_no_key='param';
select water_no into waterNo from st_water_no where water_no_key='param';
------------------地铁黑名单参数数据处理--------------------------------------------------------
--下发总表
insert into op_prm_para_distribute_dtl(water_no,distribute_datetime,operator_id,distribute_result,DISTRIBUTE_MEMO) 
                           values(waterNo,sysdate,operatorId,handleFlag,remark);
for i in 1..4 loop
  paramTypeId :='060'||i;
  --生成最新的黑名单参数版本号
  up_st_dwn_blacklist_sub_vers(paramTypeId,versionNo,poRetCode,poRetMsg);
  dbms_output.put_line(paramTypeId||'版本号：'||versionNo);
  --登记下发参数及旧的当前版本变更为历史
  update OP_PRM_PARA_VER set RECORD_FLAG=recordFlagHis where PARM_TYPE_ID=paramTypeId and RECORD_FLAG=recordFlagCur;
  insert into OP_PRM_PARA_VER(PARM_TYPE_ID,distribute_times,VERSION_NO,RECORD_FLAG,VERSION_DATE,BEGIN_TIME,END_TIME,OPERATOR_ID)
                     values(paramTypeId,distributeTime,versionNo,recordFlagCur,versionDate,beginTime,endTime,operatorId);
					 
------------------当前版本导历史表--------------------------------------------
  if(paramTypeId='0601') then
     insert into OP_PRM_BLACK_LIST_MTR_HIS(CARD_LOGICAL_ID,BLACK_TYPE,ACTION_TYPE,
                                         OPERATOR_ID,IS_SET,GEN_DATETIME,CREATE_DATETIME,
									     VERSION_NO,RECORD_FLAG,BALANCE_WATER_NO,OP_TIME)
                            select       CARD_LOGICAL_ID,BLACK_TYPE,ACTION_TYPE,
                                         OPERATOR_ID,IS_SET,GEN_DATETIME,CREATE_DATETIME,
									     versionNo,recordFlagCur,piBalanceWaterNo,sysdate
		                                 from OP_PRM_BLACK_LIST_MTR;
  end if;
  if(paramTypeId='0602') then
     insert into OP_PRM_BLACK_LIST_OCT_HIS(CARD_LOGICAL_ID,BLACK_TYPE,ACTION_TYPE,
                                         OPERATOR_ID,IS_SET,GEN_DATETIME,CREATE_DATETIME,
									     VERSION_NO,RECORD_FLAG,BALANCE_WATER_NO,OP_TIME)
                            select       CARD_LOGICAL_ID,BLACK_TYPE,ACTION_TYPE,
                                         OPERATOR_ID,IS_SET,GEN_DATETIME,CREATE_DATETIME,
									     versionNo,recordFlagCur,piBalanceWaterNo,sysdate
		                                 from OP_PRM_BLACK_LIST_OCT;
  end if;
  if(paramTypeId='0603') then
     insert into OP_PRM_BLACK_LIST_OCT_HIS(CARD_LOGICAL_ID,BLACK_TYPE,ACTION_TYPE,
                                         OPERATOR_ID,IS_SET,GEN_DATETIME,CREATE_DATETIME,
									     VERSION_NO,RECORD_FLAG,BALANCE_WATER_NO,OP_TIME)
                            select       CARD_LOGICAL_ID,BLACK_TYPE,ACTION_TYPE,
                                         OPERATOR_ID,IS_SET,GEN_DATETIME,CREATE_DATETIME,
									     versionNo,recordFlagCur,piBalanceWaterNo,sysdate
		                                 from OP_PRM_BLACK_LIST_OCT;
  end if;
  if(paramTypeId='0604') then
     insert into OP_PRM_BLACK_LIST_OCT_SEC_HIS(BEGIN_LOGICAL_ID,END_LOGICAL_ID,BLACK_TYPE,ACTION_TYPE,CREATE_DATETIME,
                                      GEN_DATETIME,OPERATOR_ID,IS_SET,
                                      VERSION_NO,RECORD_FLAG,BALANCE_WATER_NO,OP_TIME)
                            select    BEGIN_LOGICAL_ID,END_LOGICAL_ID,BLACK_TYPE,ACTION_TYPE,CREATE_DATETIME,
                                      GEN_DATETIME,OPERATOR_ID,IS_SET,
									   versionNo,recordFlagCur,piBalanceWaterNo,sysdate
		                                 from OP_PRM_BLACK_LIST_OCT_SEC;
  end if;
  
  
--生成参数通知、参数下发类型
  
  up_st_dwn_blacklist_sub_info(paramTypeId,operatorId,versionNo,waterNo,poRetCode,poRetMsg);
  
end loop;
--记录参数生成日志
--异常处理
-------------------------------------------------------------------------------------------------
   commit;
   
   exception 
   when others then
   begin
      poRetCode :=-1;
	  poRetMsg :='错误代码：'||sqlcode||'：错误消息：'||sqlerrm;
	  dbms_output.put_line(poRetMsg);
      rollback;
   end;
end;
/
grant execute on ACC_TK.UP_ST_DWN_BLACKLIST to ACC_TK_APP;


prompt
prompt Creating procedure UP_ST_IST_OWNER_BALANCE
prompt ==========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_ST_IST_OWNER_BALANCE"
(in_center_balance_no char,
in_oper_no char,
in_squad_time char,
in_return_num  out int 
 )
aS
-----------------------------------------------------------------------------------过程名：UP_ST_IST_OWNER_BALANCE
--功能描述: 运营商交易数据汇总
--创建者：  李莉
--创建日期：20130731
--修改人  ：
--修改日期：
-------------------------------------------------------------------------------

    v_memo     varchar(255); --注释
    v_err      int;          --错误信息
    v_count    int;
    
    BEGIN

  /*  create table #tmp_squad_rpt(       -------交易汇总临时表2（运营日）
       contc_id  char(2) null,
       line_id char(2) null,
       squad_day char(8) null,
       balance_water_no  char(18) null,
       card_main_code char(2) null,
       card_sub_code char(2) null,
       tr_type_id char(2) null,
       paymode_id char(2) null,
       deal_num  decimal(12,2) null,
       deal_fee  decimal(15,2)  null,
       other_fee decimal(15,2)       null ,
       three_fee decimal(15,2)      null,
       fare     decimal(15,2)       null  --2010-7-8 添加优惠前金额字段
    )

    create table #tmp_end_rpt(       -------交易最终临时表（运营日）
       list_no numeric(20, 0)  identity,
       contc_store  char(4) null,
       line_id char(2) null,
       squad_day char(8) null,
       balance_water_no char(18) null,
       card_main_code char(2) null,
       card_sub_code char(2) null,
       tr_type_id char(2) null,
       paymode_id char(2) null,
       deal_num  decimal(12,2) null,
       deal_fee  decimal(15,2)  null,
       other_fee decimal(15,2)       null ,
       three_fee decimal(15,2)  null,
       balance_ser_fee  decimal(12,2)   null ,
       m_type        char(1) null,             --区分:"0-运营商","1-商户"
       fare     decimal(15,2)       null,      --2010-7-8 添加优惠前金额字段
       constraint working_de_13226409242 PRIMARY KEY  NONCLUSTERED ( list_no )
    )

     create table #tmp_dispart(      ---运营商分帐统计临时表
          contc_id  char(2) null,
          card_main_code char(2) null,
          card_sub_code char(2) null,
          balance_water_no char(18) null,
          other_merchant  char(2) null,
          deal_fee dec(15,2) null,
          other_fee  dec(15,2)   null,
          discount    decimal(8,2) default 1,        --2010-3-12 增加字段折扣
          other_num  dec(15,2)   null,  --2010-07-05 增加优惠人次字段
          fare     decimal(15,2)       null      --2010-7-8 添加优惠前金额字段
       )

    create table #tmp_contc_fee(         ---运营商分帐统计临时表
           contc_id  char(2) null,
           card_main_code char(2) null,
           card_sub_code char(2) null,
           balance_water_no char(18) null,
           fee decimal(15,2) null,
           fare     decimal(15,2)       null      --2010-7-8 添加优惠前金额字段
    )


    CREATE TABLE #tmp_station
    (
       line_id        char(2)   NOT NULL,
       station_id     char(2)   NOT NULL,
       belong_line_id char(2)   NOT NULL,
       contc_id       char(2)   NOT NULL
    )

    IF NOT EXISTS (SELECT * FROM sysindexes WHERE id=OBJECT_ID('dbo.balance_squad_contract') AND name='balance_end_idx')
       begin
           CREATE NONCLUSTERED INDEX balance_end_idx
           ON dbo.balance_squad_contract(end_line,end_station)
           ON index_segment
       end*/
-----------------------------------------------------检查是否已清算过

select count(*) into v_count from st_sts_owner_balance a,st_list_balance_waiting  b where a.balance_water_no=b.balance_water_no ;
if v_count>0 then
        v_return_num:=-100;
        v_memo :='st_sts_owner_balance已经进行过本次清算！ ';
        insert into balance_log  values(p_center_balance_no,          'UP_ST_IST_OWNER_BALANCE','1',v_memo,in_oper_no,sysdate());
        return;
 end if;
/*   
if  exists (select * from system_working_rpt a,waiting_balance b where a.balance_water_no=b.balance_water_no )
  begin
                        rollback tran
        select @return_num=-100
           select @memo ="system_working_rpt已经进行过本次清算！"
            insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
               return
   end
if  exists (select * from working_income_rpt a,waiting_balance b where a.balance_water_no=b.balance_water_no )
  begin
                        rollback tran
        select @return_num=-100
           select @memo ="working_income_rpt已经进行过本次清算！"
            insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
               return
   end
if  exists (select * from owner_balance_rpt a,waiting_balance b where a.balance_water_no=b.balance_water_no )
  begin
                        rollback tran
        select @return_num=-100
 select @memo ="owner_balance_rpt已经进行过本次清算！"
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
               return
   end
if  exists (select * from working_dispart_rpt a,waiting_balance b where a.balance_water_no=b.balance_water_no )
  begin
           rollback tran
        select @return_num=-100
           select @memo ="working_dispart_rpt已经进行过本次清算！"
            insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
               return
   end

-----------------------------------------------------取得车站信息
insert into #tmp_station(line_id,station_id,belong_line_id,contc_id)
select line_id,station_id,belong_line_id,contc_id
from station_code where record_flag = '0'



---------------  汇总
insert into #tmp_squad_rpt
    select  a.contc_id,
            --end_line,
            b.belong_line_id,
            a.squad_day,
            a.balance_water_no,
       a.card_main_code,
       a.card_sub_code,
       a.tr_type_id,
      a.paymode_id,
 sum(a.deal_num),
            sum(a.deal_fee) ,
 0    ,
      0,
      sum(a.fare)   --2010-7-8 添加优惠前金额字段
        from  balance_squad_contract a,#tmp_station b
        where a.end_line = b.line_id and a.end_station = b.station_id
        group by a.contc_id,
        --end_line,
        b.belong_line_id,
            a.squad_day,
          a.balance_water_no,
        a.card_main_code,
        a.card_sub_code,
        a.tr_type_id,
        a.paymode_id
    select @err=@@error
    if @err != 0
          begin
             rollback tran
             select @return_num=@err
             select @memo ="向#tmp_squad_rpt 表插入分帐交易数据出错,错误号: " +convert(char(6),@err)
             insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no,         getdate())
             return
          end
-------------------------------其他钱包交易汇总－－－－－－－－－－－
        insert into #tmp_squad_rpt
        select b.contc_id,
               --a.line_id,
               b.belong_line_id,
                    case  when left(convert(char(5),a.deal_time,108),2)+right(convert(char(5),a.deal_time,108),2)>=@squad_time
                           then            convert(char(8),a.deal_time,112)
                   else convert(char(8),dateadd(day,-1,a.deal_time),112)
                      end   ,
               a.balance_water_no,
               a.card_main_code,
               a.card_sub_code,
   '54',
              a.paymode_id,
               count(*),
               sum(isnull(a.tk_fee,0))     ,
               0 ,
              0,
              sum(isnull(a.fare,0))   --2010-7-8 添加优惠前金额字段
        from deal_queue a,#tmp_station b
        --paymode_id in ('12' ,'1C','10','90','92','9C','52','5C','72','31','32','33','13','17')
        --a.paymode_id not in ('17','12' ,'1C','10','92','9C','52','5C')
        --2011-8-31 Cpu卡升级新增支付类型：72,31,32,33,13,17
        --2012-06-25 支付类型过滤表 paymode_type_valid
           where a.paymode_id not in (SELECT  paymode_id FROM paymode_type_valid)
           and (b.station_id=a.station_id and b.line_id=a.line_id)
           group by b.contc_id,
                 --a.line_id,
                 b.belong_line_id,
                    case  when left(convert(char(5),a.deal_time,108),2)+right(convert(char(5),a.deal_time,108),2)>=@squad_time
                then            convert(char(8),a.deal_time,112)
                      else convert(char(8),dateadd(day,-1,a.deal_time),112)
                      end   ,
                 a.balance_water_no,
 a.card_main_code,
         a.card_sub_code,
                a.paymode_id
    select @err=@@error
    if @err != 0
          begin
              rollback tran
              select @return_num=@err
              select @memo ="向#tmp_rpt表插入其他钱包交易数据出错,错误号: " +convert(char(6),@err)
              insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no,             getdate())
              return
          end

-----------------------------统计单程票售票----------------------------------------------------
 insert into #tmp_squad_rpt
        select b.contc_id,
               --a.line_id,
               b.belong_line_id,
                   case  when left(convert(char(5),a.sale_time,108),2)+right(convert(char(5),a.sale_time,108),2)>=@squad_time
            then            convert(char(8),a.sale_time,112)
                      else convert(char(8),dateadd(day,-1,a.sale_time),112)
                      end,
               a.balance_water_no,
               a.card_main_code,
        a.card_sub_code,
               '50',
          null,
               count(*),
               sum(isnull(a.amount,0))   ,
               sum(isnull(a.value_amount,0))   ,
                   0,
                  sum(isnull(a.amount,0))  --2010-7-8 添加优惠前金额字段
        from singl_sale_queue a,#tmp_station b
           where (b.station_id=a.station_id and b.line_id=a.line_id)
              group by b.contc_id,
                 --a.line_id,
                 b.belong_line_id,
                   case  when left(convert(char(5),sale_time,108),2)+right(convert(char(5),sale_time,108),2)>=@squad_time
                           then            convert(char(8),sale_time,112)
                    else convert(char(8),dateadd(day,-1,sale_time),112)
                      end   ,
                 a.balance_water_no,
          a.card_main_code,
                 a.card_sub_code
    select @err=@@error
    if @err != 0
          begin
                            rollback tran
        select @return_num=@err
            select @memo ="向#tmp_rpt表插入单程票售票数据出错,错误号: " +convert(char(6),@err)
            insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no,             getdate())
               return
          end
-----------------------------统计非单程票售票----------------------------------------------------
          insert into #tmp_squad_rpt
       select b.contc_id,
               --a.line_id,
               b.belong_line_id,
                    case  when left(convert(char(5),a.sale_time,108),2)+right(convert(char(5),a.sale_time,108),2)>=@squad_time
                   then            convert(char(8),a.sale_time,112)
      else convert(char(8),dateadd(day,-1,a.sale_time),112)
                      end   ,
               a.balance_water_no,
               a.card_main_code,
               a.card_sub_code,
               '51',
  null,
               count(*),
  sum(isnull(a.amount,0)),
               0,
              0,
              sum(isnull(a.amount,0)) --2010-7-8 添加优惠前金额字段
        from sale_queue a,#tmp_station b
           where (b.station_id=a.station_id and b.line_id=a.line_id)
           group by b.contc_id,
                 --a.line_id,
                 b.belong_line_id,
                         case  when left(convert(char(5),a.sale_time,108),2)+right(convert(char(5),a.sale_time,108),2)>=@squad_time
                           then          convert(char(8),a.sale_time,112)
                  else convert(char(8),dateadd(day,-1,a.sale_time),112)
                      end   ,
                 a.balance_water_no,
                 a.card_main_code,
                 a.card_sub_code
    select @err=@@error
    if @err != 0
        begin
                            rollback tran
        select @return_num=@err
            select @memo ="向#tmp_rpt表插入非单程票售票数据出错,错误号: " +convert(char(6),@err)
            insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no,             getdate())
            return
          end
-----------------------------统计退卡交易
          insert into #tmp_squad_rpt
        select b.contc_id,
               --a.line_id,
               b.belong_line_id,
                    case  when left(convert(char(5),a.return_time,108),2)+right(convert(char(5),a.return_time,108),2)>=@squad_time
                           then            convert(char(8),a.return_time,112)
                   else convert(char(8),dateadd(day,-1,a.return_time),112)
                    end   ,
               a.balance_water_no,
           a.card_main_code,
               a.card_sub_code,
               '57',
   null,
             count(*),
               sum(isnull(a.return_depos,0))   ,
               sum(isnull(a.return_bala,0)) ,
               sum(isnull(a.penalty,0)),
               sum(isnull(a.return_depos,0))   --2010-7-8 添加优惠前金额字段
  from return_queue a,#tmp_station b
                     where (b.station_id=a.station_id and b.line_id=a.line_id)
        group by b.contc_id,
   --a.line_id,
   b.belong_line_id,
                         case  when left(convert(char(5),a.return_time,108),2)+right(convert(char(5),a.return_time,108),2)>=@squad_time
                           then            convert(char(8),a.return_time,112)
                      else convert(char(8),dateadd(day,-1,a.return_time),112)
                      end ,
                 a.balance_water_no,
                 a.card_main_code,
                 a.card_sub_code
    select @err=@@error
    if @err != 0
          begin
                 rollback tran
        select @return_num=@err
            select @memo ="向#tmp_rpt表插入退卡数据出错,错误号: " +convert(char(6),@err)
            insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no,            getdate())
               return
          end
-----------------------------统计行政处理交易
          insert into #tmp_squad_rpt
        select b.contc_id,
               --a.line_id,
               b.belong_line_id,
                    case  when left(convert(char(5),a.affair_time,108),2)+right(convert(char(5),a.affair_time,108),2)>=@squad_time
               then            convert(char(8),a.affair_time,112)
                      else convert(char(8),dateadd(day,-1,a.affair_time),112)
            end   ,
               a.balance_water_no,
               a.card_main_code,
   a.card_sub_code,
               '61',
             null,
               count(*),
               sum(isnull(a.penalty,0))           ,
               sum(isnull(a.return_cash,0))  ,
             0,
             sum(isnull(a.penalty,0))   --2010-7-8 添加优惠前金额字段
        from affair_queue a,#tmp_station b
            where (b.station_id=a.station_id and b.line_id=a.line_id)
           group by b.contc_id,
                 --a.line_id,
                 b.belong_line_id,
       case  when left(convert(char(5),a.affair_time,108),2)+right(convert(char(5),a.affair_time,108),2)>=@squad_time
                           then      convert(char(8),a.affair_time,112)
                      else convert(char(8),dateadd(day,-1,a.affair_time),112)
                      end   ,
          a.balance_water_no,
                 a.card_main_code,
                 a.card_sub_code
    select @err=@@error
    if @err != 0
          begin
                            rollback tran
        select @return_num=@err
            select @memo ="向#tmp_rpt表插入行政处理数据出错,错误号: " +convert(char(6),@err)
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no,             getdate())
               return
         end
----------------------------统计其他更新交易
--    insert into  #tmp_squad_rpt
--      select b.contc_id,
--               a.line_id,
--              case  when left(convert(char(5),update_time,108),2)+right(convert(char(5),update_time,108),2)>=@squad_time
--       then            convert(char(8),update_time,112)
--                      else convert(char(8),dateadd(day,-1,update_time),112)
--               end   ,
--               a.balance_water_no,
--               a.card_main_code,
--               a.card_sub_code,
--               '56',
--               a.card_update_id,
--               count(*),
--               sum(isnull(a.tk_fee,0))           ,
--               0  ,
--               0
--        from update_queue a,station_code b
--      where (b.station_id=a.station_id and b.line_id=a.line_id   and   b.record_flag='0')
--                  and   (a.en_line_id+a.en_station_id not in (select b_line+b_station from deal_assign_para))  --无进站码(即od不全或无od)的不参与分帐
--  group by b.contc_id,
--                 a.line_id,
--                case  when left(convert(char(5),update_time,108),2)+right(convert(char(5),update_time,108),2)>=@squad_time
--   then            convert(char(8),update_time,112)
--     else convert(char(8),dateadd(day,-1,update_time),112)
--               end   ,
--                 a.balance_water_no,
--    a.card_main_code,
--          a.card_sub_code ,
--                 a.card_update_id
--    select @err=@@error
--    if @err != 0
--          begin
--                            rollback tran
--        select @return_num=@err
--            select @memo ="向#t_contract表插入更新分帐数据出错,错误号: " +convert(char(6),@err)
--      insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no,getdate())
--               return
--          end
-----更改运营日
-- update #tmp_rpt set deal_day=convert(char(8),dateadd(day,-1,convert(datetime,deal_day)),112)
--   where deal_time<@squad_time
--  select @err=@@error
--  if @err != 0
--          begin
--                          rollback tran
--      select @return_num=@err
--          select @memo ="更改#tmp_rpt表运营日出错,错误号: " +convert(char(6),@err)
--          insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no,         getdate())
--             return
--          end
        insert into #tmp_end_rpt
        select contc_id,
               line_id,
   squad_day,
               balance_water_no,
               card_main_code,
                  card_sub_code,
               tr_type_id,
              paymode_id,
               sum(deal_num),
         sum(isnull(deal_fee,0)),
              sum(isnull(other_fee,0)),
               sum(isnull(three_fee,0)),
             null         ,
            '0',    --运营商
            sum(isnull(fare,0))   --2010-7-8 添加优惠前金额字段
        from #tmp_squad_rpt
         group by contc_id,
                      line_id,
   squad_day,
                        balance_water_no,
                       card_main_code,
                card_sub_code,
                      tr_type_id,
                        paymode_id
    select @err=@@error
   if @err != 0
      begin
                    rollback tran
        select @return_num=@err
           select @memo ="向#tmp_end_rpt表插入数据出错,错误号: " +convert(char(6),@err)
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
               return
        end
      insert into #tmp_end_rpt
        select b.store_id,
               --a.line_id,
               c.belong_line_id,
                    case  when left(convert(char(5),a.deal_time,108),2)+right(convert(char(5),a.deal_time,108),2)>=@squad_time
                       then            convert(char(8),a.deal_time,112)
                      else convert(char(8),dateadd(day,-1,a.deal_time),112)
                      end   ,
               a.balance_water_no,
               a.card_main_code,
  a.card_sub_code,
               '54',
              a.paymode_id,
               count(*),
               sum(isnull(a.tk_fee,0))     ,
               0        ,
              0       ,
              null,
              '1',   --商户
              sum(isnull(a.fare,0))
           from deal_queue a,dev_code b,#tmp_station c
           where (a.paymode_id='17' )
            and (b.device_id=a.device_id and b.line_id=a.line_id and b.station_id=a.station_id  and b.dev_type_id=a.dev_type_id and b.record_flag='0')
            and (a.line_id = c.line_id and a.station_id = c.station_id)
           group by b.store_id,
           --a.line_id,
           c.belong_line_id,
                 case  when left(convert(char(5),a.deal_time,108),2)+right(convert(char(5),a.deal_time,108),2)>=@squad_time
                           then            convert(char(8),a.deal_time,112)
           else convert(char(8),dateadd(day,-1,a.deal_time),112)
                      end   ,
            a.balance_water_no,
                   a.card_main_code,
                   a.card_sub_code,
                   a.paymode_id
    select @err=@@error
    if @err != 0
      begin
                      rollback tran
        select @return_num=@err
           select @memo ="向#tmp_end_rpt表插入小额消费数据出错,错误号: " +convert(char(6),@err)
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
               return
        end
    ---------------因为可能有的运营商(商户)可能无服务费率，所以先将别的字段出入表，再修改该字段
  --  update  #tmp_end_rpt    set  a.balance_ser_fee = convert(decimal(12,2),isnull((a.deal_fee+a.other_fee+a.three_fee)*b.service_rate,0))
  --      from #tmp_end_rpt   a, service_rate_para b
  --   where (a.contc_store=b.contc_id) and (b.record_flag='0')
  --  select @err=@@error
  --  if @err != 0
  --    begin
  --                     rollback tran
  -- select @return_num=@err
  --         select @memo ="修改#tmp_end_rpt表服务费出错,错误号: " +convert(char(6),@err)
  --      insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
  --             return
  --   end
 ----------------------产生交易数据结算日汇总表working_deal_rpt
             insert into working_deal_rpt
            select contc_store,
               line_id,
         squad_day,
   balance_water_no,
               card_main_code,
     card_sub_code,
               tr_type_id,
        paymode_id,
               deal_num,
               deal_fee,
               other_fee       ,
               three_fee,
         balance_ser_fee ,
                       m_type
        from #tmp_end_rpt
    select @err=@@error
    if @err != 0
      begin
                rollback tran
        select @return_num=@err
           select @memo ="向working_deal_rpt表插入数据出错,错误号: " +convert(char(6),@err)
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
               return
        end


 ---------------------- 产生地铁运营商收入日报表working_income_rpt
        insert into working_income_rpt
            select contc_store,
                squad_day,
               balance_water_no,
                  card_sub_code,
         card_main_code,
               sum(deal_fee),paymode_id
        from #tmp_end_rpt
        ----2011-8-31 Cpu卡升级新增支付类型：72,31,32,33,13,17
        --2012-06-25 支付类型过滤表 paymode_type_valid
       where    tr_type_id='54' and paymode_id in (SELECT  paymode_id FROM paymode_type_valid)
   group by   contc_store,
  squad_day,
       balance_water_no,
                  card_sub_code,
               card_main_code,paymode_id
    select @err=@@error
    if @err != 0
      begin
                            rollback tran
        select @return_num=@err
           select @memo ="向working_income_rpt表插入数据出错,错误号: " +convert(char(6),@err)
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
               return
        end

   ---------------------- 产生系统运营日报表system_working_rpt
  insert into system_working_rpt
           select line_id,
               squad_day,
               balance_water_no,
    tr_type_id,
              paymode_id,
              sum(deal_num),
    sum(deal_fee),
      sum(other_fee)
        from #tmp_end_rpt
    group by    line_id,
               squad_day,
               balance_water_no,
   tr_type_id,
              paymode_id
    select @err=@@error
    if @err != 0
      begin
   rollback tran
        select @return_num=@err
           select @memo ="向system_working_rpt表插入数据出错,错误号: " +convert(char(6),@err)
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no,
    getdate())
               return
      end
  ---------------------- 产生运营商结算报表owner_balance_rpt
   insert into owner_balance_rpt
   select   balance_water_no     ,
          contc_store             ,
            tr_type_id       ,
     paymode_id,
        sum(deal_num)          ,
          sum(deal_fee)     ,
           0   ,
           m_type
from #tmp_end_rpt
--2011-8-31 Cpu卡升级新增支付类型：72,31,32,33,13,17
--2012-06-25 支付类型过滤表 paymode_type_valid
where (tr_type_id  ='54' and paymode_id in (SELECT  paymode_id FROM paymode_type_valid))
        or  tr_type_id  ='61'
    group by    balance_water_no,
                contc_store             ,
                  tr_type_id,
              paymode_id    ,
                m_type
 select @err=@@error
    if @err != 0
  begin
                            rollback tran
        select @return_num=@err
          select @memo ="向owner_balance_rpt表插入数据出错,错误号: " +convert(char(6),@err)
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no,getdate())
 return
       end
   update    owner_balance_rpt set a.balance_ser_fee=round(a.deal_fee*b.service_rate,2 )
   from owner_balance_rpt  a,service_rate_para b ,waiting_balance c
     where  (a.contc_store=b.contc_id and b.record_flag='0') and a.balance_water_no=c.balance_water_no
       select @err=@@error
    if @err != 0
    begin
       rollback tran
        select @return_num=@err
          select @memo ="更改 #tmp_end_rpt表服务费出错,错误号: " +convert(char(6),@err)
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no,getdate())
    return
   end

 ---------------------- 产生运营商分帐结果日报表 working_dispart_rpt
  insert into #tmp_dispart
  select         --b.line_id  ,
                 b.belong_line_id,
            a.card_main_code,
            case when a.card_main_code = '09' and a.card_sub_code in ('72','73','56','41','42','71') and a.expired_tk = '1'
                 then '03'
                 else a.card_sub_code
                 end,
            balance_water_no ,
       a. contc_id ,
      0,
          isnull(a.deal_fee,0),a.discount,--2010-3-12 增加字段折扣
          isnull(a.deal_num,0),   --2010-07-05 增加字段优惠人次
          isnull(a.fare,0)     --2010-7-8 添加优惠前金额字段
   from balance_squad_contract a,#tmp_station b
  where (b.station_id=a.end_station and b.line_id=a.end_line and a.tr_type_id <> '56')
select @err=@@error
if @err != 0
   begin
     rollback tran
        select @return_num=@err
           select @memo ="向#tmp_dispart  表插入数据出错,错误号: " +convert(char(6),@err)
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
            return
   end

insert into #tmp_contc_fee
select b.belong_line_id ,a.card_main_code,a.card_sub_code,a.balance_water_no,sum(isnull(a.deal_fee,0)),sum(isnull(a.fare,0))
 from  balance_contract a,#tmp_station b
  where (b.station_id=a.end_station and b.line_id=a.end_line)
  group by b.belong_line_id  ,a.card_main_code,a.card_sub_code,  a.balance_water_no
select @err=@@error
if @err != 0
   begin
                            rollback tran
        select @return_num=@err
           select @memo ="向#tmp_contc_fee表插入数据出错,错误号: " +convert(char(6),@err)
   insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
               return
   end

update  #tmp_dispart  set deal_fee=(select sum(fee) from #tmp_contc_fee  where #tmp_contc_fee.contc_id= #tmp_dispart.contc_id
and #tmp_contc_fee.card_main_code= #tmp_dispart.card_main_code
and #tmp_contc_fee.card_sub_code= #tmp_dispart.card_sub_code
and #tmp_contc_fee.balance_water_no=#tmp_dispart.balance_water_no )

select @err=@@error
if @err != 0
  begin
                            rollback tran
        select @return_num=@err
           select @memo ="更改#tmp_dispart  表数据出错,错误号: " +convert(char(6),@err)
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
               return
   end


 insert into  working_dispart_rpt
   select     contc_id  ,
   card_main_code,
   card_sub_code,
            balance_water_no ,
    other_merchant  ,
          deal_fee ,
    sum(other_fee),discount,--2010-3-12 增加字段折扣
    sum(other_num), --2010-07-05 添加优惠人次
    sum(fare)  --2010-7-8 添加优惠前金额字段
from #tmp_dispart
group by   contc_id  ,
    card_main_code,
   card_sub_code,
  balance_water_no ,
    other_merchant  ,
          deal_fee,discount--2010-3-12 增加字段折扣
select @err=@@error
if @err != 0
 begin
                            rollback tran
     select @return_num=@err
   select @memo ="向working_dispart_rpt表插入数据出错,错误号: " +convert(char(6),@err)
    insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
               return
   end


    INSERT INTO balance_clear_rpt(balance_water_no, squad_date,line_id, station_id, card_main_code, card_sub_code, deal_num, deal_fee )
            SELECT @center_balance_no,
                case when left(convert(char(5),deal_time,108),2)+right(convert(char(5),deal_time,108),2)>=@squad_time
                then convert(char(8),deal_time,112)
                else convert(char(8),dateadd(day,-1,deal_time),112)
                end ,
                line_id, station_id, card_main_code, card_sub_code, count(*), sum(union_times_counter)
            FROM deal_queue
            --2011-8-31 Cpu卡升级新增支付类型：17
            WHERE paymode_id in ('5D','7D','1D','17' )
            GROUP BY case when left(convert(char(5),deal_time,108),2)+right(convert(char(5),deal_time,108),2)>=@squad_time
                then convert(char(8),deal_time,112)
                else convert(char(8),dateadd(day,-1,deal_time),112)
                end ,
                line_id, station_id, card_main_code, card_sub_code
    select @err=@@error
    if @err != 0
    begin
        rollback tran
        select @return_num=@err
        select @memo ="向working_dispart_rpt表插入数据出错,错误号: " +convert(char(6),@err)
        insert balance_log  values(@center_balance_no,'UP_balance_contract_rpt','1',@memo,@oper_no, getdate())
        return
    end;*/
  end;
/
grant execute on ACC_TK.UP_ST_IST_OWNER_BALANCE to ACC_TK_APP;


prompt
prompt Creating procedure UP_TEST
prompt ==========================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TEST" (
p_bill_no IN VARCHAR2,
p_type IN VARCHAR2,
p_form_maker IN VARCHAR2,
p_hand_man IN VARCHAR2,
p_administer IN VARCHAR2,
p_accounter IN VARCHAR2,
p_remark IN VARCHAR2,
bill_no out varchar2, 
p_errmsg out varchar2,
p_result out integer,
p_memo out varchar2)
AS
BEGIN
	-- routine body goes here, e.g.
	-- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
					insert into ic_in_store_bill(bill_no,bill_date,form_maker,hand_man,administer,accounter ,record_flag,remark,related_bill_no )
							values('XRT55555',sysdate,p_form_maker,p_hand_man,p_administer,p_accounter ,'3',p_remark,p_bill_no);
	

END;
/
grant execute on ACC_TK.UP_TEST to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_BILL_HIS_STORAGE
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_BILL_HIS_STORAGE" (
p_cur                    OUT sys_refcursor,--返回结果集
p_table_name             IN varchar2
)
  ---------------------------------------------------------------------------------
  --过程名:  UP_TK_BILL_HIS_STORAGE
  --功能:查询工作单仓库值（含分表）
  --创建者：  lindaquan
  --创建日期：20151201
  --输出: p_cur结果集
  -------------------------------------------------------------------------------
 AS
    v_sql varchar(2048);
    v_end varchar(256);

BEGIN

    v_sql := ' insert into acc_tk.T#IC_TMP_BILL_STORAGE(bill_no,storage_id) select bill_no,storage_id from '|| p_table_name;
    v_end := ' group by bill_no,storage_id ';
    v_sql := v_sql || v_end;

    DECLARE
    CURSOR c_cur IS
         select t.his_table from IC_IDX_HISTORY t where t.origin_table_name=p_table_name;

    r_cur c_cur%rowtype;

    begin
      open c_cur;
      loop
        fetch c_cur into r_cur;
        exit when c_cur%notfound;
        v_sql := v_sql || ' union all select bill_no,storage_id from '|| r_cur.his_table || v_end;
      end loop;
      close c_cur;
    end;
    DBMS_OUTPUT.PUT_LINE(v_sql);

    EXECUTE immediate v_sql;

    open p_cur for select bill_no,storage_id from acc_tk.T#IC_TMP_BILL_STORAGE;

end UP_TK_BILL_HIS_STORAGE;
/

prompt
prompt Creating procedure UP_TK_CHECK_AUDIT
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_CHECK_AUDIT" (p_billno in varchar2,p_time in varchar2,p_operator in varchar2,p_result out varchar)

--修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票,屏蔽原有'9'

AS


v_bill          varchar(12);
v_boxid         varchar(14);
v_main          varchar(2);
v_sub           varchar(2);
v_checknum      integer;
v_cardnum       integer;
v_err           integer;
v_temp_number   integer;
v_currentIntNo      integer;         --表记录的当前流水号
v_initValue         integer;         --流水号初时化值
v_billType          char(2);         --生产单类型
v_billYear          integer;         --单据年
v_curYear           integer;         --当前年
v_waterNo           integer;         --流水号
v_msg               varchar(100);
v_strWaterNo        varchar(6);      --流水号字符串值
v_len               integer;
v_max               integer;
v_billNoNormal      char(12);        --单号

BEGIN
  -- routine body goes here, e.g.
  --DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  delete from t#ic_checkdetail;
  delete from t#ic_cardinfo;

  if p_billno=null or p_billno=' ' then
    p_result := '1:'||'盘点单不存在' ;
    return ;
  end if;

  insert into t#ic_checkdetail select p_billno,box_id,ic_main_type,ic_sub_type,(real_amount-sys_amount) from ic_chk_storage_detail where check_bill_no=p_billno and sys_amount!=real_amount and box_id is not null and box_id !=' ';
  insert into t#ic_cardinfo select p_billno ,box_id,start_logical_id,end_logical_id from ic_chk_storage_detail_card where check_bill_no=p_billno;
  begin
    select count(*) into v_temp_number from  t#ic_checkdetail order by boxid;
  exception when no_data_found then
    return;
  end;

  declare cursor cur_check is  select bill,boxid,maintype,subtype,num from t#ic_checkdetail order by boxid;
  begin
    open cur_check ;
    fetch cur_check into  v_bill,v_boxid,v_main,v_sub,v_checknum;
    --begin
    while v_temp_number >0 loop
      --if (v_main='6' and v_sub='7') or (v_main='9' and v_sub='9') or (v_main='34' and v_sub='34') then
    if (v_main='6' and v_sub='7')  then
        begin
          select nvl(sum(to_number(endcard)+1-to_number(startcard)),0) into v_cardnum from t#ic_cardinfo where bill=v_bill and boxid=v_boxid;
          if abs(v_checknum)<>abs(v_cardnum) then
             select ('2:'||'盒号'||v_boxid||'盘点差异数'||abs(v_checknum)||'与输入的票卡逻辑号段对应数量'||abs(v_cardnum)||'不等,审核失败') into p_result from dual;
             return;
          end if;
        end;
      else
        begin
          select nvl(sum(to_number(endcard)+1-to_number(startcard)),0) into v_cardnum from t#ic_cardinfo where bill=v_bill and boxid=v_boxid;
          if abs(v_checknum)<>abs(v_cardnum) then
             select ('2:'||'盒号'||v_boxid||'盘点差异数'||abs(v_checknum)||'与输入的票卡逻辑号段对应数量'||abs(v_cardnum)||'不等,审核失败') into p_result from dual;
             return;
          end if;
        end;
      end if;
      fetch cur_check into  v_bill,v_boxid,v_main,v_sub,v_checknum;
      v_temp_number :=v_temp_number-1;
    end loop;
    close cur_check;
  end;

--------------------------------------------------------------------------------------------
-------------盘点单正式单号计算-----------------------------------------------------------
--取出当前流水号

  select to_char(sysdate,'yyyy') into v_curYear from dual;
  select 1 into v_initValue from dual;
  select 'PD' into v_billType from dual;



  select current_int_no into v_currentIntNo from ic_prm_bill_current_flow where bill_main_type_id=v_billType;



  if(v_currentIntNo is not null) then--存在当前流水号

      select v_currentIntNo into v_waterNo from dual;
      --取出当前年
      select bill_year into v_billYear from ic_prm_bill_current_date;
      if(v_billYear is null) then--当前年不存在
        insert into ic_prm_bill_current_date(bill_year) values(v_curYear);
      else
        if(v_billYear <>v_curYear) then --系统当前年与表当前年不一致 已过1年
          select v_initValue into v_waterNo from dual;
          update ic_prm_bill_current_date set bill_year=v_curYear;
          update ic_prm_bill_current_flow set current_int_no=v_waterNo+1 where bill_main_type_id=v_billType;
        end if;
      end if;
   else --当前流水号不存在
      select v_initValue into v_waterNo from dual;
      --流水号+1
      insert into ic_prm_bill_current_flow(bill_main_type_id,current_no,current_int_no) values(v_billType,' ',v_initValue+1);
  end if;

  --流水号+1
  update ic_prm_bill_current_flow set current_int_no=v_waterNo+1 where bill_main_type_id=v_billType;
  --格式化流水号
  select current_int_no into v_strWaterNo from ic_prm_bill_current_flow where bill_main_type_id=v_billType;

  select 0 into v_len from dual;
  select 6-length(v_strWaterNo) into v_max from dual;

  while(v_len <v_max) loop
      select '0'||v_strWaterNo into v_strWaterNo from dual;
      select  v_len+1 into v_len from dual;
  end loop;

  --单号=单类型+当前年+6位流水号s
  select v_billType||v_curYear||v_strWaterNo into v_billNoNormal from dual;

  -------------------------------------------------
  -------------盘点单正式单号计算结束-----------------------------------------------------------
  begin
    --临时单号转换成正式单号
    --更新盘点单
    update ic_chk_storage set check_bill_no=v_billNoNormal,verify_date=to_date(p_time,'yyyy-mm-dd hh24:mi:ss'),verify_person=p_operator,record_flag='0' where check_bill_no=p_billno;

    --更新盘点单明细
    update ic_chk_storage_detail set check_bill_no=v_billNoNormal where check_bill_no=p_billno;

    --更新盘点单明细票卡
    update ic_chk_storage_detail_card set check_bill_no=v_billNoNormal where check_bill_no=p_billno;
  exception when others then
    select '3:'||'更新审核人信息失败' into p_result from dual;
    return ;
  end;
  select '0:'||v_billNoNormal into p_result from dual;

  delete from t#ic_checkdetail;
  delete from t#ic_cardinfo;



END;
/
grant execute on ACC_TK.UP_TK_CHECK_AUDIT to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_CHESCK_AUDIT
prompt =====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_CHESCK_AUDIT" (p_billno in varchar2,p_time in varchar2,p_operator in varchar2,p_result out varchar)

--修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票,屏蔽原有'9'
AS
v_bill          varchar(12);
v_boxid         varchar(14);
v_main          varchar(2);
v_sub           varchar(2);
v_checknum      integer;
v_cardnum       integer;
v_err           integer;
v_temp_number   integer;
v_currentIntNo      integer;         --表记录的当前流水号
v_initValue         integer;         --流水号初时化值
v_billType          char(2);         --生产单类型
v_billYear          integer;         --单据年
v_curYear           integer;         --当前年
v_waterNo           integer;         --流水号
v_msg               varchar(100);
v_strWaterNo        varchar(6);      --流水号字符串值
v_len               integer;
v_max               integer;
v_billNoNormal      char(12);        --单号

BEGIN
  -- routine body goes here, e.g.
  DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  if p_billno=null or p_billno=' ' then
    p_result := '1:'||'盘点单不存在' ;
    return ;
  end if;

  insert into t#ic_checkdetail select p_billno,box_id,ic_main_type,ic_sub_type,(real_amount-sys_amount) from ic_chk_storage_detail where check_bill_no=p_billno and sys_amount!=real_amount and box_id is not null and box_id !=' ';
  insert into t#ic_cardinfo select p_billno ,box_id,start_logical_id,end_logical_id from ic_chk_storage_detail_card where check_bill_no=p_billno;
  begin
    select count(*) into v_temp_number from  t#ic_checkdetail order by boxid;
  exception when no_data_found then
    return;
  end;

  declare cursor cur_check is  select bill,boxid,maintype,subtype,num from t#ic_checkdetail order by boxid;
  begin
    open cur_check ;
    fetch cur_check into  v_bill,v_boxid,v_main,v_sub,v_checknum;
    --begin
    while v_temp_number >0 loop
      --if (v_main='6' and v_sub='7') or (v_main='9' and v_sub='9') or (v_main='34' and v_sub='34') then
    if (v_main='6' and v_sub='7') then
        begin
          select nvl(sum(to_number(endcard)+1-to_number(startcard)),0) into v_cardnum from t#ic_cardinfo where bill=v_bill and boxid=v_boxid;
          if abs(v_checknum)<>abs(v_cardnum) then
             select ('2:'||'盒号'||v_boxid||'盘点差异数'||abs(v_checknum)||'与输入的票卡逻辑号段对应数量'||abs(v_cardnum)||'不等,审核失败') into p_result from dual;
             return;
          end if;
        end;
      else
        begin
          select nvl(sum(to_number(substr(endcard,1,15))+1-to_number(substr(startcard,1,15))),0) into v_cardnum from t#ic_cardinfo where bill=v_bill and boxid=v_boxid;
          if abs(v_checknum)<>abs(v_cardnum) then
             select ('2:'||'盒号'||v_boxid||'盘点差异数'||abs(v_checknum)||'与输入的票卡逻辑号段对应数量'||abs(v_cardnum)||'不等,审核失败') into p_result from dual;
             return;
          end if;
        end;
      end if;
      fetch cur_check into  v_bill,v_boxid,v_main,v_sub,v_checknum;
      v_temp_number :=v_temp_number-1;
    end loop;
    close cur_check;
  end;

--------------------------------------------------------------------------------------------
-------------盘点单正式单号计算-----------------------------------------------------------
--取出当前流水号
  select to_char(sysdate,'yyyy') into v_curYear from dual;
  select 1 into v_initValue from dual;
  select 'PD' into v_billType from dual;

  select current_int_no into v_currentIntNo from ic_prm_bill_current_flow where bill_main_type_id=v_billType;

  if(v_currentIntNo is not null) then--存在当前流水号

      select v_currentIntNo into v_waterNo from dual;
      --取出当前年
      select bill_year into v_billYear from ic_prm_bill_current_date;
      if(v_billYear is null) then--当前年不存在
        insert into ic_prm_bill_current_date(bill_year) values(v_curYear);
      else
        if(v_billYear <>v_curYear) then --系统当前年与表当前年不一致 已过1年
          select v_initValue into v_waterNo from dual;
          update ic_prm_bill_current_date set bill_year=v_curYear;
          update ic_prm_bill_current_flow set current_int_no=v_waterNo+1 where bill_main_type_id=v_billType;
        end if;
      end if;
   else --当前流水号不存在
      select v_initValue into v_waterNo from dual;
      --流水号+1
      insert into ic_prm_bill_current_flow(bill_main_type_id,current_no,current_int_no) values(v_billType,' ',v_initValue+1);
  end if;

  select substr(v_waterNo,1,10) into v_msg from dual;

  --格式化流水号
  select substr(v_waterNo,1,6) into v_strWaterNo from dual;
  select 0 into v_len from dual;
  select 6-length(v_strWaterNo) into v_max from dual;
  while(v_len <v_max) loop
      select '0'||v_strWaterNo into v_strWaterNo from dual;
      select  v_len+1 into v_len from dual;
  end loop;

  --单号=单类型+当前年+6位流水号s
  select v_billType||v_curYear||v_strWaterNo into v_billNoNormal from dual;

  -------------------------------------------------
  -------------盘点单正式单号计算结束-----------------------------------------------------------
  begin
    --临时单号转换成正式单号
    --更新盘点单
    update ic_chk_storage set check_bill_no=v_billNoNormal,verify_date=p_time,verify_person=p_operator,record_flag='0' where check_bill_no=p_billno;

    --更新盘点单明细
    update ic_chk_storage_detail set check_bill_no=v_billNoNormal where check_bill_no=p_billno;

    --更新盘点单明细票卡
    update ic_chk_storage_detail_card set check_bill_no=v_billNoNormal where check_bill_no=p_billno;
  exception when others then
    select '3:'||'更新审核人信息失败' into p_result from dual;
    return ;
  end;
  select '0:'||v_billNoNormal into p_result from dual;





END;
/
grant execute on ACC_TK.UP_TK_CHESCK_AUDIT to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_CLR_TEST
prompt =================================
prompt
create or replace procedure acc_tk."UP_TK_CLR_TEST"
is
  ---------------------------------------------------------------------------------
  --过程名:    UP_Tk_clr_Test
  --功能:      清空票务系统所有数据（谨慎使用）
  --创建者：   fengzhiguang
  --创建日期： 20140308
  --输出:      无
  --测试版
  -------------------------------------------------------------------------------
begin
  --清除票库的数据
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE   acc_tk.ic_cod_area';
--EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_cod_area;
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_cod_chest';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_cod_storey';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_cod_base';
--ES生产库表：
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_es_initi_info';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_es_hunch_info';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_es_logout_info';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_es_again_info';

EXECUTE   IMMEDIATE   'TRUNCATE   TABLE ic_cod_card_main_type';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE ic_cod_card_sub_type';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_cod_card_type_contrast';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_cod_box_info';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_cod_box_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_sts_storage';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_sts_area_card';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_in_store_bill';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_in_store_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_in_access_place';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_in_add_new_card';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_in_return_bill';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_in_return_bill_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_bill';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_bill_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_bill_detail_box';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_date_plan';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_date_plan_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_cancel_plan';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_cancel_plan_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_adjust_bill';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_adjust_bill_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_lend_bill';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_lend_bill_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_distribute_bill';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_distribute_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_distribute_dtl_box';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_distribute_plan_bill';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_out_distribute_plan_dtl';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_pdu_useless_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_pdu_produce_bill';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_pdu_produce_bill_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_pdu_order_form';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_pdu_repeat_logic';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_pdu_plan_order_mapping';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_chk_storage';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_chk_storage_detail';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_chk_storage_detail_card';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_stat_out';
EXECUTE   IMMEDIATE   'TRUNCATE   TABLE acc_tk.ic_sts_in';

update ic_out_order_form_serial a set a.SERIAL_NO='00000000';
update ic_prm_bill_current_flow a set a.CURRENT_INT_NO='1';
update ic_prm_bill_current_flow a set a.CURRENT_NO='';
update ic_prm_bill_curr_flow_tmp a set a.CURRENT_NO='';
update ic_prm_bill_curr_flow_tmp a set a.CURRENT_INT_NO='1';


  --IC_COD_AREA(票区）
  insert into IC_COD_AREA (STORAGE_ID, AREA_ID, AREA_NAME, REAL_NUM, UPPER_NUM) values ('0001', '01', '新票区',   0, 99999999);
  insert into IC_COD_AREA (STORAGE_ID, AREA_ID, AREA_NAME, REAL_NUM, UPPER_NUM) values ('0001', '02', '编码区',   0, 99999999);
  insert into IC_COD_AREA (STORAGE_ID, AREA_ID, AREA_NAME, REAL_NUM, UPPER_NUM) values ('0001', '03', '赋值区',   0, 99999999);
  insert into IC_COD_AREA (STORAGE_ID, AREA_ID, AREA_NAME, REAL_NUM, UPPER_NUM) values ('0001', '04', '循环区',   0, 99999999);
  insert into IC_COD_AREA (STORAGE_ID, AREA_ID, AREA_NAME, REAL_NUM, UPPER_NUM) values ('0001', '05', '待注销区', 0, 99999999);
  insert into IC_COD_AREA (STORAGE_ID, AREA_ID, AREA_NAME, REAL_NUM, UPPER_NUM) values ('0001', '06', '待销毁区', 0, 99999999);
  insert into IC_COD_AREA (STORAGE_ID, AREA_ID, AREA_NAME, REAL_NUM, UPPER_NUM) values ('0001', '07', '回收区',   0, 99999999);
  --Ic_cod_card_main（票库主类型）
  insert into ic_cod_card_main_type (IC_MAIN_TYPE, IC_MAIN_DESC) values ('2', '员工票');
  insert into ic_cod_card_main_type (IC_MAIN_TYPE, IC_MAIN_DESC) values ('1', 'IC车票');
  insert into ic_cod_card_main_type (IC_MAIN_TYPE, IC_MAIN_DESC) values ('12', '单程票');
  insert into ic_cod_card_main_type (IC_MAIN_TYPE, IC_MAIN_DESC) values ('6', '一卡通');
  insert into ic_cod_card_main_type (IC_MAIN_TYPE, IC_MAIN_DESC) values ('40', '乘次票');
  --ic_cod_card_sub_type（票库子类型）
  insert into ic_cod_card_sub_type (IC_MAIN_TYPE, IC_SUB_TYPE, IC_SUB_DESC) values ('1', '13', '老人SVT');
  insert into ic_cod_card_sub_type (IC_MAIN_TYPE, IC_SUB_TYPE, IC_SUB_DESC) values ('1', '11', '成人储值票');
  insert into ic_cod_card_sub_type (IC_MAIN_TYPE, IC_SUB_TYPE, IC_SUB_DESC) values ('1', '12', '学生SVT');
  insert into ic_cod_card_sub_type (IC_MAIN_TYPE, IC_SUB_TYPE, IC_SUB_DESC) values ('12', '22', '普通单程票');
  insert into ic_cod_card_sub_type (IC_MAIN_TYPE, IC_SUB_TYPE, IC_SUB_DESC) values ('2', '20', '工作证');
  insert into ic_cod_card_sub_type (IC_MAIN_TYPE, IC_SUB_TYPE, IC_SUB_DESC) values ('40', '41', '多日票');
  insert into ic_cod_card_sub_type (IC_MAIN_TYPE, IC_SUB_TYPE, IC_SUB_DESC) values ('6', '63', '一卡通卡老人卡');
  insert into ic_cod_card_sub_type (IC_MAIN_TYPE, IC_SUB_TYPE, IC_SUB_DESC) values ('6', '61', '一卡通卡普通卡');
  insert into ic_cod_card_sub_type (IC_MAIN_TYPE, IC_SUB_TYPE, IC_SUB_DESC) values ('6', '62', '一卡通卡学生卡');
  --ic_cod_card_type_contrast（票卡对照表）
  insert into ic_cod_card_type_contrast (CARD_MAIN_TYPE, CARD_SUB_TYPE, IC_MAIN_TYPE, IC_SUB_TYPE, BOX_UNIT) values ('01', '00', '12', '22',500);
  insert into ic_cod_card_type_contrast (CARD_MAIN_TYPE, CARD_SUB_TYPE, IC_MAIN_TYPE, IC_SUB_TYPE, BOX_UNIT) values ('02', '00', '1', '11', 1000);
  insert into ic_cod_card_type_contrast (CARD_MAIN_TYPE, CARD_SUB_TYPE, IC_MAIN_TYPE, IC_SUB_TYPE, BOX_UNIT) values ('02', '01', '1', '12', 1000);
  insert into ic_cod_card_type_contrast (CARD_MAIN_TYPE, CARD_SUB_TYPE, IC_MAIN_TYPE, IC_SUB_TYPE, BOX_UNIT) values ('02', '03', '1', '13', 1000);
  insert into ic_cod_card_type_contrast (CARD_MAIN_TYPE, CARD_SUB_TYPE, IC_MAIN_TYPE, IC_SUB_TYPE, BOX_UNIT) values ('05', '00', '2', '20', 100);
  insert into ic_cod_card_type_contrast (CARD_MAIN_TYPE, CARD_SUB_TYPE, IC_MAIN_TYPE, IC_SUB_TYPE, BOX_UNIT) values ('06', '00', '6', '61', 200);
  insert into ic_cod_card_type_contrast (CARD_MAIN_TYPE, CARD_SUB_TYPE, IC_MAIN_TYPE, IC_SUB_TYPE, BOX_UNIT) values ('06', '01', '6', '62', 200);
  insert into ic_cod_card_type_contrast (CARD_MAIN_TYPE, CARD_SUB_TYPE, IC_MAIN_TYPE, IC_SUB_TYPE, BOX_UNIT) values ('06', '03', '6', '63', 200);
  -- ic_cod_chest（票柜）
  insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '02', '101', '编码区成人储值票101', 5, '1', '11', '0', 0);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '02', '102', '编码区学生SVT102', 5, '1', '12', '0', 0);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '02', '103', '编码区老人SVT103', 5, '1', '13', '0', 0);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '02', '104', '编码区工作证104', 5, '2', '20', '0', 0);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '03', '301', '赋值区成人储值票301', 3, '1', '11', '0', 5000);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '03', '302', '赋值区学生SVT302', 3, '1', '12', '0', 5000);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '03', '303', '赋值区老人SVT303', 3, '1', '13', '0', 5000);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '03', '320', '赋值区普通单程票320', 3, '12', '22', '0', 200);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '03', '321', '赋值区普通单程票321', 3, '12', '22', '0', 300);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '03', '322', '赋值区普通单程票322', 3, '12', '22', '0', 400);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '03', '323', '赋值区普通单程票323', 3, '12', '22', '0', 500);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '03', '360', '赋值区一卡通卡普通卡360', 3, '6', '61', '0', 5000);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '03', '361', '赋值区一卡通卡学生卡361', 3, '6', '62', '0', 5000);

insert into ic_cod_chest (STORAGE_ID, AREA_ID, CHEST_ID, CHEST_NAME, STOREY_NUM, IC_MAIN_TYPE, IC_SUB_TYPE, FULL_FLAG, CARD_MONEY)
values ('0001', '03', '362', '赋值区一卡通卡老人卡362', 3, '6', '63', '0', 5000);

--ic_cod_storey（层）
insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '101', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '101', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '101', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '101', '04', '04层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '101', '05', '05层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '102', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '102', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '102', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '102', '04', '04层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '102', '05', '05层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '103', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '103', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '103', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '103', '04', '04层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '103', '05', '05层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '104', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '104', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '104', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '104', '04', '04层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '02', '104', '05', '05层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '301', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '301', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '301', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '302', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '302', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '302', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '303', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '303', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '303', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '320', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '320', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '320', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '321', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '321', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '321', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '322', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '322', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '322', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '323', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '323', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '323', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '360', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '360', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '360', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '361', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '361', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '361', '03', '03层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '362', '01', '01层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '362', '02', '02层                ', 5, '0');

insert into ic_cod_storey (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, STOREY_NAME, BASE_NUM, FULL_FLAG)
values ('0001', '03', '362', '03', '03层                ', 5, '0');

--ic_cod_base（托）
insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '04', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '04', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '04', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '04', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '04', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '05', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '05', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '05', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '05', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '05', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '04', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '04', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '04', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '04', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '04', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '05', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '05', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '05', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '05', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '103', '05', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '04', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '04', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '04', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '04', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '04', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '05', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '05', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '05', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '05', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '104', '05', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '301', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '302', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '303', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '320', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '321', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '322', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '323', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '04', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '04', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '04', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '04', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '04', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '05', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '05', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '05', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '05', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '101', '05', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '02', '102', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '360', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '361', '03', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '01', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '01', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '01', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '01', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '01', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '02', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '02', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '02', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '02', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '02', '05', '05托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '03', '01', '01托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '03', '02', '02托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '03', '03', '03托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '03', '04', '04托', 5, 0);

insert into ic_cod_base (STORAGE_ID, AREA_ID, CHEST_ID, STOREY_ID, BASE_ID, BASE_NAME, MAX_BOX_NUM, REAL_NUM)
values ('0001', '03', '362', '03', '05', '05托', 5, 0);


  commit;
  dbms_output.PUT_LINE('Success Del The Ticket''''s Date');
end;
/
grant execute on ACC_TK.UP_TK_CLR_TEST to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_AUDIT_HR
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_AUDIT_HR" (
p_bill_no IN VARCHAR2,
p_operator_id IN VARCHAR2,
p_errmsg out varchar2,
p_result out integer,
p_memo out varchar2,
bill_no out varchar2)

---------------------------------------------------------------------------------
--过程名:  UP_TK_IN_AUDIT_HR
--功能:回收入库审核
--作者：liangminglong
--修改：
--20141225 ouyangwenling
--在审核回收入库单成功后，更新回收入库源数据表ic_inf_station_handin状态in_flag为2已审核
--修改日期：2015-12-23 oywl ic_sts_area_card校验库存更新时字段valid_date修改为trim(valid_date)
--修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票,屏蔽原有'9'
-------------------------------------------------------------------------------
AS
v_bill_no_audit           char(12);               --审核后的单号
v_type                     char(4);
v_num                     integer;
v_n                       integer;
v_put_place               varchar(20);           --当前存放位置
v_get_place               varchar(20);           --当前存放位置
v_chest_id                 char(3);
v_storage_id              char(4);
v_storey_id                char(2);
v_base_id                  char(2);
v_box_type                char(2);
v_base_water_no           integer ;            --托序号
v_bill_year               integer;
v_valid_date1              date;
v_reason_id               char(2);
v_start_logical_id         char(20);
v_end_logical_id           char(20);
v_water_no                numeric(18, 0);
v_area_id                  char(2);
v_ic_main_type            varchar(2);
v_ic_sub_type              varchar(2);
v_in_num                   integer;
v_detail_place            char(50);
v_box_id                  char(14);
v_flag                    varchar(4);
v_start_box                char(14);
v_end_box                 char(14);
v_pre_money                integer;
v_valid_date              varchar(10);
v_line_id                 varchar(2);
v_station_id               varchar(3);
v_exit_line_id             varchar(2);
v_exit_station_id          varchar(3);
v_model                    varchar(3);
v_box_card_num            integer;
v_begin_time               date;
v_memo                     varchar(100);
v_related_bill_no         char(16);     --生产工作单/借出单/盘点单
v_temp_number              integer;
v_temp_number2            integer;
v_temp_number3            integer;
v_temp_number5            integer;
v_bill_no_test             char(12);
BEGIN
  -- routine body goes here, e.g.
   --DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
   select '审核' INTO v_type from dual;
   select sysdate into v_begin_time from dual;
 -----------------------------------校验单据是否存在、状态是否未审核----------------------
  begin
    select count(*) into v_temp_number from ic_in_store_bill where bill_no=p_bill_no and record_flag='3';
  exception when no_data_found then
    p_errmsg:='无记录';
    p_result:=-30;
    return;
  end;
  if v_temp_number =0 then
    p_errmsg:='无记录';
    p_result:=-30;
    return;
  end if;

  begin
    select count(*) into v_temp_number from ic_in_store_detail where bill_no=p_bill_no;
  exception when no_data_found then
    p_errmsg:='无明细记录';
    p_result:=-2;
    bill_no:=p_bill_no;
    return;
  end;
  if v_temp_number =0 then
    p_errmsg:='无明细记录';
    p_result:=-2;
    bill_no:=p_bill_no;
    return;
  end if;
  select related_bill_no into v_related_bill_no from ic_in_store_bill  where bill_no=p_bill_no;
-----------------------------------------------------------------------------------------------


    --更改入库单
    begin
      update ic_in_store_bill set record_flag='0' where bill_no=p_bill_no;
      update ic_in_store_detail set card_money = 0
                                    --where bill_no = p_bill_no and area_id='05' and (ic_main_type<>'9' or  ic_sub_type<>'9' );
                  where bill_no = p_bill_no and area_id='05' ;
    ----------- 判断入库数量是否超过区剩余数量------------------------------------------------------------------------------------------------
      insert into t#ic_area_code select  storage_id,area_id,sum(in_num)  from ic_in_store_detail where bill_no=p_bill_no group by storage_id,area_id;
    exception when others then
       rollback;
       p_errmsg:='error....';
       p_result:=-1;
       bill_no:=p_bill_no;
       return;
    end;

    begin
      select count(*) into v_temp_number from t#ic_area_code a,ic_cod_area b where a.storage_id=b.storage_id and  a.area_id=b.area_id
                                        and b.real_num+a.card_num>b.upper_num;
    exception when no_data_found then
      p_errmsg:='入库数量超过区剩余数量';
      p_result:=-3;
      bill_no:=p_bill_no;
      return;
    end;
    begin
      delete t#ic_area_code;
--------------------缓存入库数据----------------
      insert into t#ic_store_detail
                    select water_no ,bill_no ,reason_id ,storage_id ,area_id,
                           ic_main_type ,ic_sub_type ,in_num ,detail_place  ,start_box_id ,end_box_id ,start_logical_id ,
                           end_logical_id ,
                           valid_date,card_money,line_id ,station_id,exit_line_id,exit_station_id,model,use_flag
                           from ic_in_store_detail
                           where bill_no=p_bill_no;
    exception when others then
       rollback;
       p_errmsg:='error....';
       p_result:=-1;
       bill_no:=p_bill_no;
       return;
    end;



   begin


    -------------------------除赋值区或编码区处理(调帐入库、新票入库)外其他更新总票区、卡票区开始------------------------
        --其他区增加数量
    insert into t#ic_tmp_card_code(storage_id ,area_id  ,ic_main_type ,ic_sub_type,card_money,card_num  ,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag)
            select b.storage_id ,b.area_id  ,ltrim(rtrim(b.ic_main_type)),ltrim(rtrim(b.ic_sub_type)),
                   b.card_money , sum(b.in_num),' ',' ',' ',' ',' ','000','0'
                   from   t#ic_store_detail b
                   where  substr(p_bill_no,1,2)||area_id||ltrim(rtrim(ic_main_type))!='TR021'
                   and substr(p_bill_no,1,2)||area_id!='TR03'
                   and substr(p_bill_no,1,2)||area_id!='XR03'
                   group by b.storage_id ,b.area_id  ,ltrim(rtrim(b.ic_main_type)),ltrim(rtrim(b.ic_sub_type)) , b.card_money;



    --update t#ic_tmp_card_code set card_money=0 where ltrim(rtrim(ic_main_type))!='9' and  ltrim(rtrim(ic_main_type))!='6';
  update t#ic_tmp_card_code set card_money=0 where ltrim(rtrim(ic_main_type))!='6';

    insert into t#ic_area_card_code(storage_id ,area_id  ,ic_main_type ,ic_sub_type,card_money,card_num  ,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag)
              select storage_id ,area_id  ,ic_main_type ,ic_sub_type,card_money,sum(card_num)  ,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag
                     from t#ic_tmp_card_code
                     group by storage_id ,area_id  ,ic_main_type ,ic_sub_type,card_money ,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag;
/*
    update ic_sts_area_card b set b.card_num=b.card_num+ (select a.card_num
                                            from  t#ic_area_card_code a
                                            where a.storage_id=b.storage_id and a.area_id=b.area_id and ltrim(rtrim(a.ic_main_type))=ltrim(rtrim(b.ic_main_type))
                                                  and ltrim(rtrim(a.ic_sub_type))=ltrim(rtrim(b.ic_sub_type))  and a.card_money=b.card_money
                                                  and NVL(a.valid_date,' ')=NVL(b.valid_date,' ') and NVL(a.line_id,' ')=NVL(b.line_id,' ')
                                                  and NVL(a.station_id,' ')=NVL(b.station_id,' ') and NVL(a.exit_line_id,' ')=NVL(b.exit_line_id,' ') and NVL(a.exit_station_id,' ')=NVL(b.exit_station_id,' ') and NVL(a.model,' ')=NVL(b.model,' '))
                                    where exists (select 1 from  t#ic_area_card_code a
                                                           where a.storage_id=b.storage_id and a.area_id=b.area_id and ltrim(rtrim(a.ic_main_type))=ltrim(rtrim(b.ic_main_type))
                                                                  and ltrim(rtrim(a.ic_sub_type))=ltrim(rtrim(b.ic_sub_type))  and a.card_money=b.card_money
                                                                  and NVL(a.valid_date,' ')=NVL(b.valid_date,' ') and NVL(a.line_id,' ')=NVL(b.line_id,' ')
                                                                  and NVL(a.station_id,' ')=NVL(b.station_id,' ') and NVL(a.exit_line_id,' ')=NVL(b.exit_line_id,' ') and NVL(a.exit_station_id,' ')=NVL(b.exit_station_id,' ') and NVL(a.model,' ')=NVL(b.model,' '));



     insert into ic_sts_area_card(WATER_NO,storage_id ,area_id  ,ic_main_type ,ic_sub_type,card_num  ,card_money,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag)
                                 select SEQ_IC_TK_IN_XR_CARD_AREA.nextval, storage_id ,area_id  ,ltrim(rtrim(ic_main_type)),ltrim(rtrim(ic_sub_type)),card_num,card_money,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag
                                        from   t#ic_area_card_code
                                        where storage_id||area_id||ltrim(rtrim(ic_main_type))||ltrim(rtrim(ic_sub_type))||to_char(card_money)
                                              ||NVL(valid_date,' ')  || line_id|| station_id || exit_line_id ||exit_station_id || model
                                              not in (select storage_id||area_id||ltrim(rtrim(ic_main_type))||ltrim(rtrim(ic_sub_type))||to_char(card_money)
                                              ||NVL(valid_date,' ')  || NVL(line_id,' ')|| NVL(station_id,' ')|| NVL(exit_line_id,' ')|| NVL(exit_station_id,' ')|| NVL(model,' ') from  ic_sts_area_card   );

*/

      BEGIN
             for i in (select rowid,storage_id,area_id,ic_main_type,ic_sub_type,card_money,valid_date,card_num,line_id,station_id
                ,exit_line_id,exit_station_id,model,flag from t#ic_area_card_code) loop

          select count(*) into v_temp_number5 from ic_sts_area_card b
                where i.storage_id=b.storage_id and i.area_id=b.area_id and i.ic_main_type=b.ic_main_type
                and i.ic_sub_type=b.ic_sub_type and i.card_money=b.card_money
                and nvl(trim(i.valid_date),' ')=nvl(trim(b.valid_date),' ') and nvl(i.line_id,' ')=nvl(b.line_id,' ')
                and nvl(i.station_id,' ')=nvl(b.station_id,' ') and nvl(i.exit_line_id,' ')=nvl(b.exit_line_id,' ')
                and nvl(i.exit_station_id,' ')=nvl(b.exit_station_id,' ') and nvl(i.model,'000')=nvl(b.model,'000') ;



            if v_temp_number5>0 then
              update ic_sts_area_card b set b.card_num=b.card_num+  i.card_num
                                            where i.storage_id=b.storage_id and i.area_id=b.area_id and ltrim(rtrim(i.ic_main_type))=ltrim(rtrim(b.ic_main_type))
                                                  and ltrim(rtrim(i.ic_sub_type))=ltrim(rtrim(b.ic_sub_type))  and i.card_money=b.card_money
                                                  and NVL(i.valid_date,' ')=NVL(b.valid_date,' ') and NVL(i.line_id,' ')=NVL(b.line_id,' ')
                                                  and NVL(i.station_id,' ')=NVL(b.station_id,' ') and NVL(i.exit_line_id,' ')=NVL(b.exit_line_id,' ')
                            and NVL(i.exit_station_id,' ')=NVL(b.exit_station_id,' ') and NVL(i.model,' ')=NVL(b.model,' ');

            else
                insert into ic_sts_area_card(WATER_NO,storage_id ,area_id  ,ic_main_type ,ic_sub_type,card_num  ,card_money,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag)
                                 values( SEQ_IC_TK_IN_XR_CARD_AREA.nextval,i.storage_id ,i.area_id  ,ltrim(rtrim(i.ic_main_type)),ltrim(rtrim(i.ic_sub_type)),i.card_num,i.card_money,i.valid_date,i.line_id,i.station_id,i.exit_line_id,i.exit_station_id,i.model,i.flag);

            end if;




             END LOOP;
        END;




      insert into t#ic_area_code(storage_id ,area_id  ,card_num )
                         select storage_id ,area_id, sum(card_num)
                                from   t#ic_area_card_code
                                group by  storage_id ,area_id;




     update  ic_cod_area a set a.real_num=(select a.real_num+ b.card_num
                          from  t#ic_area_code b
                          where a.area_id=b.area_id    and  a.storage_id=b.storage_id)
          where exists(select a.real_num+ b.card_num
                          from  t#ic_area_code b
                          where a.area_id=b.area_id    and  a.storage_id=b.storage_id);

  exception when others then
    p_errmsg:='error6...';
    p_result:=-1;
    bill_no:=p_bill_no;
    return;
  end;

    -------------------------------------------更新总票区、卡票区结束--------------------------------

    -------------------------------------------获取正式单号开始--------------------------------
    begin
        select bill_year into v_bill_year from ic_prm_bill_current_date;
    exception when no_data_found then
        return;
    end;

    begin
       if v_bill_year=to_char(sysdate,'yyyy') then
          select substr(p_bill_no,1,2)||v_bill_year||lpad(current_int_no+1,6,'0') into v_bill_no_audit
                 from ic_prm_bill_current_flow where bill_main_type_id='IL';
       else
          select substr(p_bill_no,1,2)||v_bill_year||'000001' into v_bill_no_audit from dual;
          update ic_prm_bill_current_date set bill_year=to_number(to_char(sysdate,'yyyy'));
       end if;

       update  ic_prm_bill_current_flow set current_no=v_bill_no_audit, current_int_no=to_number(substr(v_bill_no_audit,7,6)) where  bill_main_type_id='IL';

    exception when others then
        rollback;
        p_result := -1;
        p_errmsg :='error7 ...';
        bill_no:=p_bill_no;
        return;
    end;
    ---------------------------------------获取正式单号结束-------------------------------------

    ---------------------------------------------更新入库单及明细开始----------------------------
    begin
        --更新回收入库源数据表ic_inf_station_handin状态in_flag为2已审核 20141225 ouyangwenling
        update ic_inf_station_handin set in_flag='2' where in_store_detail_no in
        (select water_no from ic_in_store_detail where bill_no=p_bill_no) ;
        --更改入库单
        update ic_in_store_bill set bill_no=v_bill_no_audit, verify_date=sysdate,verify_person=p_operator_id where bill_no=p_bill_no;

         --更改入库明细
        update ic_in_store_detail a set bill_no=v_bill_no_audit  where a.bill_no=p_bill_no;

        update ic_in_store_detail a set a.detail_place=(select b.detail_place
                                  from t#ic_box b
                                  where a.bill_no=v_bill_no_audit  and a.start_box_id=b.box_id )
          where exists(select b.detail_place
                                  from t#ic_box b
                                  where a.bill_no=v_bill_no_audit  and a.start_box_id=b.box_id );
    exception when others then
        rollback;
        p_result := -1;
        p_errmsg :='error8 ...';
        bill_no:=p_bill_no;
        return;
    end;
    --------------------------------------更新入库单及明细结束--------------------------------

    -------------------------------------------------新票入库卡号段表有的，删除---------------
     begin
        select count(*) into v_temp_number3 from ic_in_add_new_card where in_bill_no=p_bill_no;
     exception when others then
        return;
     end;



    --删除临时表数据
    begin
       delete from t#ic_store_detail ;
       delete from t#ic_tmp_card_code ;
       delete from t#ic_area_code;
       delete from t#ic_box;
       delete From t#ic_area_card_code;
    exception when others then
        rollback;
        p_result := -1;
        p_errmsg :='error10 ...';
        bill_no:=p_bill_no;
        return;
    end;

      if v_related_bill_no is null then
             select ' ' into v_related_bill_no from dual;
     end if;


     if p_bill_no is not null and p_bill_no!=' ' then
           p_memo :='单据'||p_bill_no||'入库成功, 用时 '||ROUND(TO_NUMBER(sysdate- v_begin_time) * 24 * 60)||' 秒';
           bill_no:=v_bill_no_audit;
           p_result :=1;

      end if;








END;
/
grant execute on ACC_TK.UP_TK_IN_AUDIT_HR to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_AUDIT_JR
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_AUDIT_JR"(p_bill_no     IN VARCHAR2,
                                                p_operator_id IN VARCHAR2,
                                                p_errmsg      out varchar2,
                                                p_result      out integer,
                                                p_memo        out varchar2,
                                                bill_no       out varchar2
                                                --out_msg out VARCHAR2
                                                )
---------------------------------------------------------------------------------
  --过程名:  UP_TK_IN_AUDIT_JR
  --功能:借票归还明细审核
  --作者：liangminglong
  --版本：0.1
  --修改：20150518 ouyangwenling修改返回单号为审核后的单号v_bill_no_audit
  --修改日期：2015-12-23 oywl ic_sts_area_card校验库存更新时字段valid_date修改为trim(valid_date)
  --修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票,屏蔽原有'9'
  -------------------------------------------------------------------------------
 AS
  v_bill_no_audit    char(12); --审核后的单号
  v_type             char(4);
  v_num              integer;
  v_n                integer;
  v_put_place        varchar(20); --当前存放位置
  v_get_place        varchar(20); --当前存放位置
  v_chest_id         char(3);
  v_storage_id       char(4);
  v_storey_id        char(2);
  v_base_id          char(2);
  v_box_type         char(2);
  v_base_water_no    integer; --托序号
  v_bill_year        integer;
  v_valid_date1      date;
  v_reason_id        char(2);
  v_start_logical_id char(20);
  v_end_logical_id   char(20);
  v_water_no         numeric(18, 0);
  v_area_id          char(2);
  v_ic_main_type     varchar(2);
  v_ic_sub_type      varchar(2);
  v_in_num           integer;
  v_detail_place     char(50);
  v_box_id           char(14);
  v_flag             varchar(4);
  v_start_box        char(14);
  v_end_box          char(14);
  v_pre_money        integer;
  v_valid_date       varchar(10);
  v_line_id          varchar(2);
  v_station_id       varchar(3);
  v_exit_line_id     varchar(2);
  v_exit_station_id  varchar(3);
  v_model            varchar(3);
  v_box_card_num     integer;
  v_begin_time       date;
  v_memo             varchar(100);
  v_related_bill_no  char(16); --生产工作单/借出单/盘点单
  v_temp_number      integer;
  v_temp_number2     integer;
  v_temp_number3     integer;
  v_temp_number4     integer;
  v_bill_no_test     char(12);
BEGIN
  -- routine body goes here, e.g.
  --DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  select '审核' INTO v_type from dual;
  select sysdate into v_begin_time from dual;
  -----------------------------------校验单据是否存在、状态是否未审核----------------------
  begin
    select count(*)
      into v_temp_number
      from ic_in_store_bill
     where bill_no = p_bill_no
       and record_flag = '3';
  exception
    when no_data_found then
      p_errmsg := '无记录';
      p_result := -30;
      return;
  end;
  if v_temp_number = 0 then
    p_errmsg := '无记录';
    p_result := -30;
    return;
  end if;

  begin
    select count(*)
      into v_temp_number
      from ic_in_store_detail
     where bill_no = p_bill_no;
  exception
    when no_data_found then
      p_errmsg := '无明细记录';
      p_result := -2;
      bill_no  := p_bill_no;
      return;
  end;
  if v_temp_number = 0 then

    p_errmsg := '无明细记录';
    p_result := -2;
    bill_no  := p_bill_no;
    return;
  end if;
  select related_bill_no
    into v_related_bill_no
    from ic_in_store_bill
   where bill_no = p_bill_no;
  -----------------------------------------------------------------------------------------------

  --更改入库单
  begin
    update ic_in_store_bill
       set record_flag = '0'
     where bill_no = p_bill_no;
    update ic_in_store_detail
       set card_money = 0
     where bill_no = p_bill_no
       and area_id = '05';
       --and (ic_main_type <> '9' or ic_sub_type <> '9');
    ----------- 判断入库数量是否超过区剩余数量------------------------------------------------------------------------------------------------
    insert into t#ic_area_code
      select storage_id, area_id, sum(in_num)
        from ic_in_store_detail
       where bill_no = p_bill_no
       group by storage_id, area_id;
  exception
    when others then
      rollback;
      p_errmsg := 'error....';
      p_result := -1;
      bill_no  := p_bill_no;
      return;
  end;

  begin
    select count(*)
      into v_temp_number
      from t#ic_area_code a, ic_cod_area b
     where a.storage_id = b.storage_id
       and a.area_id = b.area_id
       and b.real_num + a.card_num > b.upper_num;
  exception
    when no_data_found then
      p_errmsg := '入库数量超过区剩余数量';
      p_result := -3;
      bill_no  := p_bill_no;
      return;
  end;
  begin
    delete t#ic_area_code;
    --------------------缓存入库数据----------------
    insert into t#ic_store_detail
      select water_no,
             bill_no,
             reason_id,
             storage_id,
             area_id,
             ic_main_type,
             ic_sub_type,
             in_num,
             detail_place,
             start_box_id,
             end_box_id,
             start_logical_id,
             end_logical_id,
             valid_date,
             card_money,
             line_id,
             station_id,
             exit_line_id,
             exit_station_id,
             model,
             use_flag
        from ic_in_store_detail
       where bill_no = p_bill_no;
  exception
    when others then
      rollback;
      p_errmsg := 'error....';
      p_result := -1;
      bill_no  := p_bill_no;
      return;
  end;

  begin

    -------------------------除赋值区或编码区处理(调帐入库、新票入库)外其他更新总票区、卡票区开始------------------------
    --其他区增加数量
    insert into t#ic_tmp_card_code
      (storage_id,
       area_id,
       ic_main_type,
       ic_sub_type,
       card_money,
       card_num,
       valid_date,
       line_id,
       station_id,
       exit_line_id,
       exit_station_id,
       model,
       flag)
      select b.storage_id,
             b.area_id,
             ltrim(rtrim(b.ic_main_type)),
             ltrim(rtrim(b.ic_sub_type)),
             b.card_money,
             sum(b.in_num),
             ' ',
             ' ',
             ' ',
             ' ',
             ' ',
             '000',
             '0'
        from t#ic_store_detail b
       where substr(p_bill_no, 1, 2) || area_id ||
             ltrim(rtrim(ic_main_type)) != 'TR021'
         and substr(p_bill_no, 1, 2) || area_id != 'TR03'
         and substr(p_bill_no, 1, 2) || area_id != 'XR03'
       group by b.storage_id,
                b.area_id,
                ltrim(rtrim(b.ic_main_type)),
                ltrim(rtrim(b.ic_sub_type)),
                b.card_money;

    update t#ic_tmp_card_code
       set card_money = 0
     where
   --ltrim(rtrim(ic_main_type)) != '9' and
        ltrim(rtrim(ic_main_type)) != '6';

    insert into t#ic_area_card_code
      (storage_id,
       area_id,
       ic_main_type,
       ic_sub_type,
       card_money,
       card_num,
       valid_date,
       line_id,
       station_id,
       exit_line_id,
       exit_station_id,
       model,
       flag)
      select storage_id,
             area_id,
             ic_main_type,
             ic_sub_type,
             card_money,
             sum(card_num),
             valid_date,
             line_id,
             station_id,
             exit_line_id,
             exit_station_id,
             model,
             flag
        from t#ic_tmp_card_code
       group by storage_id,
                area_id,
                ic_main_type,
                ic_sub_type,
                card_money,
                valid_date,
                line_id,
                station_id,
                exit_line_id,
                exit_station_id,
                model,
                flag;

    select count(*)
      into v_temp_number4
      from ic_sts_area_card b, t#ic_area_card_code a
     where a.storage_id = b.storage_id
       and a.area_id = b.area_id
       and a.ic_main_type = b.ic_main_type
       and a.ic_sub_type = b.ic_sub_type
       and a.card_money = b.card_money
       and nvl(trim(a.valid_date), ' ') = nvl(trim(b.valid_date), ' ')
       and nvl(a.line_id, ' ') = nvl(b.line_id, ' ')
       and nvl(a.station_id, ' ') = nvl(b.station_id, ' ')
       and nvl(a.exit_line_id, ' ') = nvl(b.exit_line_id, ' ')
       and nvl(a.exit_station_id, ' ') = nvl(b.exit_station_id, ' ')
       and nvl(a.model, '000') = nvl(b.model, '000');
    if v_temp_number4 > 0 then

      update ic_sts_area_card b
         set b.card_num = b.card_num +
                          (select a.card_num
                             from t#ic_area_card_code a
                            where a.storage_id = b.storage_id
                              and a.area_id = b.area_id
                              and ltrim(rtrim(a.ic_main_type)) =
                                  ltrim(rtrim(b.ic_main_type))
                              and ltrim(rtrim(a.ic_sub_type)) =
                                  ltrim(rtrim(b.ic_sub_type))
                              and a.card_money = b.card_money
                              and NVL(a.valid_date, ' ') =
                                  NVL(b.valid_date, ' ')
                              and NVL(a.line_id, ' ') = NVL(b.line_id, ' ')
                              and NVL(a.station_id, ' ') =
                                  NVL(b.station_id, ' ')
                              and NVL(a.exit_line_id, ' ') =
                                  NVL(b.exit_line_id, ' ')
                              and NVL(a.exit_station_id, ' ') =
                                  NVL(b.exit_station_id, ' ')
                              and NVL(a.model, ' ') = NVL(b.model, ' '))
       where exists
       (select 1
                from t#ic_area_card_code a
               where a.storage_id = b.storage_id
                 and a.area_id = b.area_id
                 and ltrim(rtrim(a.ic_main_type)) =
                     ltrim(rtrim(b.ic_main_type))
                 and ltrim(rtrim(a.ic_sub_type)) =
                     ltrim(rtrim(b.ic_sub_type))
                 and a.card_money = b.card_money
                 and NVL(a.valid_date, ' ') = NVL(b.valid_date, ' ')
                 and NVL(a.line_id, ' ') = NVL(b.line_id, ' ')
                 and NVL(a.station_id, ' ') = NVL(b.station_id, ' ')
                 and NVL(a.exit_line_id, ' ') = NVL(b.exit_line_id, ' ')
                 and NVL(a.exit_station_id, ' ') =
                     NVL(b.exit_station_id, ' ')
                 and NVL(a.model, ' ') = NVL(b.model, ' '));

    else
      insert into ic_sts_area_card
        (WATER_NO,
         storage_id,
         area_id,
         ic_main_type,
         ic_sub_type,
         card_num,
         card_money,
         valid_date,
         line_id,
         station_id,
         exit_line_id,
         exit_station_id,
         model,
         flag)
        select SEQ_IC_TK_IN_XR_CARD_AREA.nextval,
               storage_id,
               area_id,
               ltrim(rtrim(ic_main_type)),
               ltrim(rtrim(ic_sub_type)),
               card_num,
               card_money,
               valid_date,
               line_id,
               station_id,
               exit_line_id,
               exit_station_id,
               model,
               flag
          from t#ic_area_card_code
         where storage_id || area_id || ltrim(rtrim(ic_main_type)) ||
               ltrim(rtrim(ic_sub_type)) || to_char(card_money) ||
               NVL(trim(valid_date), ' ') || line_id || station_id ||
               exit_line_id || exit_station_id || model not in
               (select storage_id || area_id || ltrim(rtrim(ic_main_type)) ||
                       ltrim(rtrim(ic_sub_type)) || to_char(card_money) ||
                       NVL(trim(valid_date), ' ') || NVL(line_id, ' ') ||
                       NVL(station_id, ' ') || NVL(exit_line_id, ' ') ||
                       NVL(exit_station_id, ' ') || NVL(model, ' ')
                  from ic_sts_area_card);
    end if;

    insert into t#ic_area_code
      (storage_id, area_id, card_num)
      select storage_id, area_id, sum(card_num)
        from t#ic_area_card_code
       group by storage_id, area_id;

    update ic_cod_area a
       set a.real_num =
           (select a.real_num + b.card_num
              from t#ic_area_code b
             where a.area_id = b.area_id
               and a.storage_id = b.storage_id)
     where exists (select a.real_num + b.card_num
              from t#ic_area_code b
             where a.area_id = b.area_id
               and a.storage_id = b.storage_id);

  exception
    when others then
      p_errmsg := 'error6...';
      p_result := -1;
      bill_no  := p_bill_no;
      --out_msg       := '错误：' || sqlerrm || ',发生在第[' ||dbms_utility.format_error_backtrace() || ']行';
      rollback;
      return;
  end;

  -------------------------------------------更新总票区、卡票区结束--------------------------------

  -------------------------------------------获取正式单号开始--------------------------------
  begin
    select bill_year into v_bill_year from ic_prm_bill_current_date;
  exception
    when no_data_found then
      return;
  end;

  begin
    if v_bill_year = to_char(sysdate, 'yyyy') then
      select substr(p_bill_no, 1, 2) || v_bill_year ||
             lpad(current_int_no + 1, 6, '0')
        into v_bill_no_audit
        from ic_prm_bill_current_flow
       where bill_main_type_id = 'IL';
    else
      select substr(p_bill_no, 1, 2) || v_bill_year || '000001'
        into v_bill_no_audit
        from dual;
      update ic_prm_bill_current_date
         set bill_year = to_number(to_char(sysdate, 'yyyy'));
    end if;

    update ic_prm_bill_current_flow
       set current_no     = v_bill_no_audit,
           current_int_no = to_number(substr(v_bill_no_audit, 7, 6))
     where bill_main_type_id = 'IL';

  exception
    when others then
      rollback;
      p_result := -1;
      p_errmsg := 'error7 ...';
      bill_no  := p_bill_no;
      return;
  end;
  -----------
  ---------------------------------------获取正式单号结束-------------------------------------

  ---------------------------------------------更新入库单及明细开始----------------------------
  begin
    --更改入库单
    update ic_in_store_bill
       set bill_no       = v_bill_no_audit,
           verify_date   = sysdate,
           verify_person = p_operator_id
     where bill_no = p_bill_no;

    --更改入库明细
    update ic_in_store_detail a
       set bill_no = v_bill_no_audit
     where a.bill_no = p_bill_no;

    update ic_in_store_detail a
       set a.detail_place =
           (select b.detail_place
              from t#ic_box b
             where bill_no = v_bill_no_audit
               and a.start_box_id = b.box_id);
  exception
    when others then
      rollback;
      p_result := -1;
      p_errmsg := 'error8 ...';
      bill_no  := p_bill_no;
      return;
  end;
  --------------------------------------更新入库单及明细结束--------------------------------

  ----------------------------------------------------更改借票归还相关单据明细------------------------------------------------------------------------
  if substr(p_bill_no, 1, 2) = 'JR' then
    begin
      update ic_in_return_bill a
         set in_bill_no =
             (select b.bill_no
                from ic_in_store_bill b
               where b.bill_no = v_bill_no_audit)
       where a.bill_no = (select b.related_bill_no
                            from ic_in_store_bill b
                           where b.bill_no = v_bill_no_audit);
    exception
      when others then
        rollback;
        p_result := -1;
        p_errmsg := 'error8 ...';
        bill_no  := p_bill_no;
        return;
    end;
  end if;

  --删除临时表数据
  begin
    delete from t#ic_store_detail;
    delete from t#ic_tmp_card_code;
    delete from t#ic_area_code;
    delete from t#ic_box;
    delete From t#ic_area_card_code;
  exception
    when others then
      rollback;
      p_result := -1;
      p_errmsg := 'error10 ...';
      bill_no  := p_bill_no;
      return;
  end;

  if v_related_bill_no is null then
    select ' ' into v_related_bill_no from dual;
  end if;

  if p_bill_no is not null and p_bill_no != ' ' then
    p_memo   := '单据' || p_bill_no || '入库成功, 用时 ' ||
                ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60) || ' 秒';
    bill_no  := v_bill_no_audit;
    p_result := 1;

  end if;

END;
/
grant execute on ACC_TK.UP_TK_IN_AUDIT_JR to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_AUDIT_JR_TEST
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_AUDIT_JR_TEST" (
p_type            in       varchar2,       -- GH 借票归还 审核时 为JR
p_form_maker      in       varchar2,
p_hand_man        in       varchar2,
p_administer      in       varchar2,
p_accounter       in       varchar2,
p_related_bill_no in       varchar2,  --生产工作单/借出单/盘点单
p_remark          in      varchar2,
p_operator_id     in        varchar2,
p_module_id       in      varchar2,
p_return_man      in      varchar2,
p_receive_man     in      varchar2,
bill_no out varchar2,
p_errmsg out varchar2,
p_result out integer,
p_memo out varchar2)


---------------------------
--功能：借票归还审核(UP_TK_IN_AUDIT_JR)
--作者：liangminglong
--版本：0.1
---------------------------

AS

v_bill_no               char(12);
v_reason_id             char(2);
v_bill_year             integer;
v_card_type             varchar(4);
v_ic_main_type          varchar(2);
v_ic_sub_type           varchar(2);
v_out_bill_no           char(12);
v_es_useless_num        integer;
v_man_useless_num       integer;
v_lost_num              integer;
v_in_num                integer;   --已归还数量
v_lend_num              integer;   --借出数量
v_draw_quantity         integer;   --有效票数量
v_balance_num           integer;   --实际结余与系统结余差额
v_balance_box_num       integer;   --实际结余盒数
v_storage_id            char(4);
v_area_id               char(2);
v_start_box_id          char(14);
v_end_box_id            char(14);
v_start_box_id1         char(14);
v_end_box_id1           char(14);
v_start_logical_id      varchar(20);
v_end_logical_id        varchar(20);
v_start_logical_id1     varchar(20);
v_mid_logical_id        varchar(20);
v_tmp_logical_id        varchar(20);
v_card_money            integer;
v_bill_no_audit         char(12);
v_logi_num              integer;
v_tmp_id                varchar(15);
v_start_out_id          varchar(20);
v_end_out_id            varchar(20);
v_mid_out_id            varchar(20);
v_start_logi_id         varchar(20);
v_last_mid_out_id       varchar(20);
v_start                 varchar(20);
v_end                   varchar(20);
v_nn                    integer;
v_hz_out_num            integer;
v_hz_in_num             integer;
v_out_in_diff           integer;
v_valid_num             integer;
v_begin_time            date;
v_memo                  varchar(100);
v_outBill               varchar(12);
v_total_num             integer;
v_zone_audit            char(12);  --借票归还审核入库时归还数量为零时入库单号
v_temp_number           integer;
v_temp_number2          integer;
v_temp_number3          integer;
v_temp_number4          integer;
v_water_no              varchar(8);

v_form_maker            varchar2(10);
v_hand_man              varchar2(10);
v_administer            varchar2(10);
v_accounter             varchar2(10);
v_operator_id            varchar2(8);


BEGIN
  -- routine body goes here, e.g.
  DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');

--删除临时表数据
  begin
    delete from t#ic_in_detail;
    delete from t#ic_in_num;
    delete from t#ic_out_detail;
    delete from t#ic_es_info;
    delete from t#ic_logi_box;
    delete from t#ic_balance_start_end;
  exception when others THEN
    p_errmsg:='error..';
    bill_no:=p_related_bill_no;
    p_result:=-1;
    return;
  end;

  select sysdate into v_begin_time from dual;

  if p_related_bill_no='' or p_related_bill_no is null then
    p_errmsg:='单据号为空';
    bill_no:=p_related_bill_no;
    p_result:=-17;
    return;
  end if;

  begin
    select count(*) into v_temp_number from ic_in_store_bill where related_bill_no=p_related_bill_no and record_flag!='1';
    if v_temp_number>0 then
      p_errmsg:='单据已经存在';
      bill_no:=p_related_bill_no;
      p_result:=-15;
      return;
    end if;

  exception when others then
    p_errmsg:='单据已经存在';
    bill_no:=p_related_bill_no;
    p_result:=-15;
    return;
  end;

  begin
    begin
       select p_type||'T'||lpad(current_int_no+1,9,'0') into v_bill_no from ic_prm_bill_curr_flow_tmp where bill_main_type_id=p_type;
       update  ic_prm_bill_curr_flow_tmp set current_no=v_bill_no, current_int_no=substr(v_bill_no,4,9) where bill_main_type_id=p_type;

    exception when others then
      p_errmsg:='error11....';
      bill_no:=p_related_bill_no;
      p_result:=-1;
      return;
    end;
    select SEQ_IC_TK_IN_DETAIL.nextval into v_water_no from dual;
    --借票归还审核，并生成借票归还入库单
    begin
      select count(*) into v_temp_number from ic_in_return_bill  where record_flag='3' and bill_no=p_related_bill_no;
      select count(*) into v_temp_number2 from ic_in_return_bill_detail  where  bill_no=p_related_bill_no and delete_flag<>'1';
      if v_temp_number=0 or v_temp_number2=0 then
        p_errmsg:='单据不存在或没有明细';
        bill_no:=p_related_bill_no;
        p_result:=-18;
        return;
      end if;

    exception when no_data_found then
      p_errmsg:='单据不存在或没有明细';
      bill_no:=p_related_bill_no;
      p_result:=-18;
      return;
    end;

    select return_man,receive_man,p_operator_id,receive_man
    into v_hand_man,v_administer,v_form_maker,v_accounter from ic_in_return_bill where bill_no=p_related_bill_no;

    begin
      insert into t#ic_in_num select  storage_id,area_id,sum(in_num) from t#ic_in_detail group by storage_id,area_id;
    exception when no_data_found then
      p_errmsg:='error1..';
      bill_no:=p_related_bill_no;
      p_result:=-1;
      --return;
    end;

    begin
      select count(*) into v_temp_number from t#ic_in_num a,ic_cod_area b
                 where a.storage_id=b.storage_id and a.area_id=b.area_id and a.in_num>(b.upper_num-b.real_num);
    exception when no_data_found then
      p_errmsg:='入库数量超过区上限..';
      bill_no:=p_related_bill_no;
      p_result:=-27;
      return;
    end;



    begin
      --添加多日票模式三个字段
      --添加条件 delete_flag = '0'
      insert into ic_in_store_detail(water_no,bill_no ,reason_id,storage_id,area_id,ic_main_type,ic_sub_type,in_num,start_box_id,
                  end_box_id,start_logical_id,end_logical_id,valid_date ,card_money ,line_id ,station_id,use_flag,exit_line_id,exit_station_id,model)
      select v_water_no,v_bill_no,'15',storage_id,area_id,ic_main_type,ic_sub_type,return_quantity,start_box_id,
                  end_box_id,start_logical_id,end_logical_id,valid_date ,0 ,line_id ,station_id,'0',exit_line_id,exit_station_id,model
      from ic_in_return_bill_detail where bill_no=p_related_bill_no and delete_flag = '0';
    exception when others then
      p_errmsg:='error2..';
      bill_no:=p_related_bill_no;
      p_result:=-1;
      return;
    end;

    ---归还单处理
    select bill_year into v_bill_year from ic_prm_bill_current_date;
    if v_bill_year=to_char(sysdate,'yyyy') then
      select 'GH'||v_bill_year||lpad(current_int_no+1,6,'0') into v_bill_no_audit
         from ic_prm_bill_current_flow where bill_main_type_id='GH';
    else
      select 'GH'||to_char(sysdate,'yyyy')||'000001' into v_bill_no_audit from dual;
      update ic_prm_bill_current_date set bill_year=to_char(sysdate,'yyyy');
    end if;

    begin
      update ic_prm_bill_current_flow set current_no=v_bill_no_audit, current_int_no=to_number(substr(v_bill_no_audit,7,6)) where bill_main_type_id='GH';
      update ic_in_return_bill set bill_no=v_bill_no_audit,record_flag='0',in_bill_no=v_bill_no,verify_person=p_operator_id,verify_date=sysdate where bill_no=p_related_bill_no;
      update ic_in_return_bill_detail set bill_no=v_bill_no_audit where bill_no=p_related_bill_no;
    exception when others then
      p_errmsg:='error3..';
      bill_no:=p_related_bill_no;
      p_result:=-1;
      return;
    end;

    --入库单插入
    begin
      insert into ic_in_store_bill(bill_no,bill_date,form_maker,hand_man,administer,accounter ,record_flag,remark,related_bill_no )
        values(v_bill_no,sysdate,v_form_maker,v_hand_man,v_administer,v_accounter ,'3',p_remark,v_bill_no_audit);
    exception when others then
      p_errmsg:='error4..';
      bill_no:=p_related_bill_no;
      p_result:=-1;
      return;
    end;
    --对于归还数量 记录 总和为 0 的审核，作特殊处理：审核归还单时也做入库审核 开始
    select sum(return_quantity) into v_total_num from ic_in_return_bill_detail where bill_no=v_bill_no_audit and delete_flag = '0';
    if (v_total_num = 0) then
       --产生入库单号
      select bill_year into v_bill_year from ic_prm_bill_current_date;
      if v_bill_year=to_char(sysdate,'yyyy') then
         select 'ZO'||v_bill_year||lpad(current_int_no+1,6,'0') into v_zone_audit
       from ic_prm_bill_current_flow where bill_main_type_id='ZO';
      else
        begin
          select 'ZO'||to_char(sysdate,'yyyy')||'000001' into v_zone_audit from dual;
          update ic_prm_bill_current_date set bill_year=to_char(sysdate,'yyyy');
        exception when others then
          p_errmsg:='error5..';
          bill_no:=p_related_bill_no;
          p_result:=-1;
          --return;
        end;
      end if;
      begin
        update ic_prm_bill_current_flow set current_no=v_zone_audit, current_int_no=to_number(substr(v_zone_audit,7,6)) where bill_main_type_id='ZO';
        --更改入库单
        update ic_in_store_bill
          set bill_no=v_zone_audit,record_flag='0',verify_date=sysdate,verify_person=p_operator_id where bill_no=v_bill_no;
        --更改入库明细
        update ic_in_store_detail set bill_no=v_zone_audit where bill_no=v_bill_no;
        -------更改借票归还相关单据明细-----------
        update ic_in_return_bill set in_bill_no=(select b.bill_no from ic_in_return_bill a,ic_in_store_bill b
                         where a.bill_no=b.related_bill_no and b.bill_no=v_zone_audit) where bill_no=v_bill_no_audit;
      exception when others then
        p_errmsg:='error6..';
        bill_no:=p_related_bill_no;
        p_result:=-1;
        --return;
      end;
    end if;
    --对于归还数量 记录 总和为 0 的审核，作特殊处理 结束
  end;
--删除临时表数据
  begin
    delete from t#ic_in_detail;
    delete from t#ic_in_num;
    delete from t#ic_out_detail;
    delete from t#ic_es_info;
    delete from t#ic_logi_box;
    delete from t#ic_balance_start_end;
  exception when others THEN
    p_errmsg:='error..';
    bill_no:=p_related_bill_no;
    p_result:=-1;
    return;
  end;

     p_memo :='单据'||p_related_bill_no||'入库成功, 用时 '||ROUND(TO_NUMBER(sysdate- v_begin_time) * 24 * 60)||' 秒';
     bill_no:=v_bill_no_audit;
     p_result:=0;
END;
/
grant execute on ACC_TK.UP_TK_IN_AUDIT_JR_TEST to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_AUDIT_QR
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_AUDIT_QR"
 (
p_bill_no     IN VARCHAR2,
p_operator_id IN VARCHAR2,
p_module_id   IN VARCHAR2,
p_errmsg      OUT varchar2,
p_result      OUT integer,
p_memo        OUT varchar2,
bill_no       OUT varchar2
)
---------------------------------------------------------------------------------
--过程名:  UP_TK_IN_AUDIT_QR
--功能:票务管理：清洗入库单审核
--输出: 0-无修改 -1修改表出错 -5-单据状态非未审核 -2无明细记录  -3赋值区或编码区已无位置  -4找不到下一托 -6没有可放的柜  >0修改记录数
--创建者:--  mqf
--创建日期：2013-08-07
--修改日期：2015-12-23 oywl ic_sts_area_card校验库存更新时字段valid_date修改为trim(valid_date)
--------------------------------------------------------------------------                                                        -----
AS
v_bill_no_audit char(12);               --审核后的单号
v_type char(4);
v_bill_year int;
v_begin_time date;
v_related_bill_no char(16);     --生产工作单/借出单/盘点单
v_curr_year varchar(4);
v_temp_number int;
v_temp_number5 integer;


BEGIN

    --清理临时数据
    DELETE FROM T#IC_IN_AUDIT_QR_STORE_DETAIL;
    DELETE FROM T#IC_IN_AUDIT_QR_BOX;
    DELETE FROM T#IC_IN_AUDIT_QR_AREA_CARD;
    DELETE FROM T#IC_IN_AUDIT_QR_CARD_CODE;
    DELETE FROM T#IC_IN_AUDIT_QR_AREA_CODE;

    v_type := '审核';
    select sysdate into v_begin_time from dual;
 -----------------------------------校验单据是否存在、状态是否未审核----------------------------------------------------------------------------
    begin
      select count(*) into v_temp_number from ic_in_store_bill where bill_no=p_bill_no and record_flag='3';
    exception when no_data_found then
      p_errmsg:='无记录';
      p_result:=-30;
      bill_no:=p_bill_no;
      return;
    end;
    if v_temp_number =0 then
      p_errmsg:='无记录';
      p_result:=-30;
      bill_no:=p_bill_no;
      return;
    end if;

    begin
      select count(*) into v_temp_number  from ic_in_store_detail where bill_no=p_bill_no;
    exception when no_data_found then
      p_errmsg:='无明细记录';
      p_result:=-2;
      bill_no:=p_bill_no;
      return;
    end;
    if v_temp_number =0 then
      p_errmsg:='无明细记录';
      p_result:=-2;
      bill_no:=p_bill_no;
      return;
    end if;

    select related_bill_no into v_related_bill_no from ic_in_store_bill  where bill_no=p_bill_no;
---------------------------------------------     --------------------------------------------------------------------------------------------------------

    --begin tran


        --更改入库单
         begin
           update ic_in_store_bill set record_flag='0' where bill_no=p_bill_no;

           ---------------- 判断入库数量是否超过区剩余数量---------------------------------------------               ---------------------------------------------------
           insert into T#IC_IN_AUDIT_QR_AREA_CODE select  storage_id,area_id,sum(in_num)  from ic_in_store_detail where bill_no=p_bill_no group by storage_id,area_id;
         exception when others then
           rollback;
           p_errmsg:='error1....';
           p_result:=-1;
           bill_no:=p_bill_no;
           return;
        end;


        begin
            select count(*) into v_temp_number from T#IC_IN_AUDIT_QR_AREA_CODE a,ic_cod_area b  where a.storage_id=b.storage_id and  a.area_id=b.area_id
                            and b.real_num+a.card_num>b.upper_num;

        exception when no_data_found then
           rollback;
           p_errmsg:='入库数量超过区剩余数量';
           p_result:=-3;
           bill_no:=p_bill_no;
           return;
        end;

        begin
          delete T#IC_IN_AUDIT_QR_AREA_CODE;
          ---------------------缓存入库数据-------------------------------------------------------------------------------------------------------------------

          insert into T#IC_IN_AUDIT_QR_STORE_DETAIL
                      select water_no ,bill_no ,reason_id ,storage_id ,area_id,
                             ic_main_type ,ic_sub_type ,in_num ,detail_place  ,start_box_id ,end_box_id ,start_logical_id ,
                             end_logical_id ,
                             valid_date,card_money,line_id ,station_id,exit_line_id,exit_station_id,model,use_flag
                             from ic_in_store_detail
                             where bill_no=p_bill_no;

          --盒明细表
          insert into ic_cod_box_detail (box_id  ,start_logical_id ,end_logical_id)
                               select start_box_id,start_logical_id ,end_logical_id
                                      from T#IC_IN_AUDIT_QR_STORE_DETAIL
                                      where start_box_id is not null and start_logical_id is not null and end_logical_id  is not null
                                             and start_box_id!=' ' and start_logical_id!=' ' and end_logical_id!=' ';


          ----------------------------------------------------除赋值区或编码区处理(调帐入库、新票入库)外其他更新总票区、卡票区开始-----------------------------------------------------------------
             --其他区增加数量
             --20120702 luojun 添加多日票模式三个字段，写入 进出线路站点和模式 限制模式相关清                                                                      除
          insert into T#IC_IN_AUDIT_QR_CARD_CODE(storage_id ,area_id  ,ic_main_type ,ic_sub_type,card_money,card_num  ,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag)
                                    select b.storage_id ,b.area_id  ,ltrim(rtrim( b.ic_main_type)),ltrim(rtrim(b.ic_sub_type)),
                                           b.card_money , sum(b.in_num),' ',' ',' ',' ',' ','000','0'
                                           from   T#IC_IN_AUDIT_QR_STORE_DETAIL b
                                           where  substr(p_bill_no,0,2)||area_id||ltrim(rtrim(ic_main_type))!='TR021' and substr(p_bill_no,0,2)||area_id!='TR03' and substr(p_bill_no,0,2)||area_id!='XR03'
                                           group by b.storage_id ,b.area_id  ,ltrim(rtrim(b.ic_main_type)),ltrim(rtrim(b.ic_sub_type)) , b.card_money;

          --update T#IC_IN_AUDIT_QR_CARD_CODE set card_money=0 where ltrim(rtrim(ic_main_type))!='9' and  ltrim(rtrim(ic_main_type))!='6';
      update T#IC_IN_AUDIT_QR_CARD_CODE set card_money=0 where ltrim(rtrim(ic_main_type))!='6';

          insert into T#IC_IN_AUDIT_QR_AREA_CARD(storage_id ,area_id  ,ic_main_type ,ic_sub_type,card_money,card_num  ,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag)
                              select storage_id ,area_id  ,ic_main_type ,ic_sub_type,card_money,sum(card_num)  ,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag
                                     from T#IC_IN_AUDIT_QR_CARD_CODE
                                     group by storage_id ,area_id  ,ic_main_type ,ic_sub_type,card_money ,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag;


      BEGIN
             for i in (select rowid,storage_id,area_id,ic_main_type,ic_sub_type,card_money,valid_date,card_num,line_id,station_id
                ,exit_line_id,exit_station_id,model,flag from T#IC_IN_AUDIT_QR_AREA_CARD) loop

          select count(*) into v_temp_number5 from ic_sts_area_card b
                where i.storage_id=b.storage_id and i.area_id=b.area_id and i.ic_main_type=b.ic_main_type
                and i.ic_sub_type=b.ic_sub_type and i.card_money=b.card_money
                and nvl(trim(i.valid_date),' ')=nvl(trim(b.valid_date),' ') and nvl(i.line_id,' ')=nvl(b.line_id,' ')
                and nvl(i.station_id,' ')=nvl(b.station_id,' ') and nvl(i.exit_line_id,' ')=nvl(b.exit_line_id,' ')
                and nvl(i.exit_station_id,' ')=nvl(b.exit_station_id,' ') and nvl(i.model,'000')=nvl(b.model,'000') ;



            if v_temp_number5>0 then
              update ic_sts_area_card b set b.card_num=b.card_num+  i.card_num
                                            where i.storage_id=b.storage_id and i.area_id=b.area_id and ltrim(rtrim(i.ic_main_type))=ltrim(rtrim(b.ic_main_type))
                                                  and ltrim(rtrim(i.ic_sub_type))=ltrim(rtrim(b.ic_sub_type))  and i.card_money=b.card_money
                                                  and NVL(i.valid_date,' ')=NVL(b.valid_date,' ') and NVL(i.line_id,' ')=NVL(b.line_id,' ')
                                                  and NVL(i.station_id,' ')=NVL(b.station_id,' ') and NVL(i.exit_line_id,' ')=NVL(b.exit_line_id,' ')
                            and NVL(i.exit_station_id,' ')=NVL(b.exit_station_id,' ') and NVL(i.model,' ')=NVL(b.model,' ');

            else
                insert into ic_sts_area_card(WATER_NO,storage_id ,area_id  ,ic_main_type ,ic_sub_type,card_num  ,card_money,valid_date,line_id,station_id,exit_line_id,exit_station_id,model,flag)
                                 values( SEQ_IC_TK_IN_XR_CARD_AREA.nextval,i.storage_id ,i.area_id  ,ltrim(rtrim(i.ic_main_type)),ltrim(rtrim(i.ic_sub_type)),i.card_num,i.card_money,i.valid_date,i.line_id,i.station_id,i.exit_line_id,i.exit_station_id,i.model,i.flag);

            end if;




             END LOOP;
        END;



          insert into T#IC_IN_AUDIT_QR_AREA_CODE(storage_id ,area_id  ,card_num )
                         select storage_id ,area_id, sum(card_num)
                                from   T#IC_IN_AUDIT_QR_AREA_CARD
                                group by  storage_id ,area_id;

          update  ic_cod_area a
                  set a.real_num=a.real_num+ (select b.card_num
                                    from T#IC_IN_AUDIT_QR_AREA_CODE b
                                    where a.area_id=b.area_id and  a.storage_id=b.storage_id)
                  where exists (select 1 from T#IC_IN_AUDIT_QR_AREA_CODE b where a.area_id=b.area_id  and  a.storage_id=b.storage_id);
        exception when others then
           rollback;
           p_errmsg:='error2....';
           p_result:=-1;
           bill_no:=p_bill_no;
           return;
        end;


----------------------------------------------------更新总票区、卡票区结束-----------------------------------------------------------------

----------------------------------------------------获取正式单号开始---------------------------                   -------------------------------------------

     select bill_year into v_bill_year from ic_prm_bill_current_date;
     select to_char(sysdate, 'yyyy') into v_curr_year from dual;
     if v_bill_year = v_curr_year then
        select subStr(p_bill_no,0,2)||subStr(to_char(v_bill_year),0,4) || LPAD (current_int_no+1,6,'0') into v_bill_no_audit
               from ic_prm_bill_current_flow where bill_main_type_id='IL';
     else
        v_bill_no_audit := substr(p_bill_no,0,2) || to_char(sysdate, 'yyyy') || '000001';

        begin
          update ic_prm_bill_current_date set bill_year=to_char(sysdate, 'yyyy');
        exception when others then
           rollback;
           p_errmsg:='error3....';
           p_result:=-1;
           bill_no:=p_bill_no;
           return;
        end;
     end if;

     begin
       update  ic_prm_bill_current_flow set current_no=v_bill_no_audit, current_int_no=to_number(substr(v_bill_no_audit,7,6)) where  bill_main_type_id='IL';
       ----------------------------------------------------获取正式单号结束----------------------------------------------------------------------


       ----------------------------------------------------更新入库单及明细开始------------------------------------------------------------------
       --更改入库单
       update ic_in_store_bill set bill_no=v_bill_no_audit, verify_date=sysdate,verify_person=p_operator_id where bill_no=p_bill_no;

          --更改入库明细
       update ic_in_store_detail set bill_no=v_bill_no_audit  where bill_no=p_bill_no;

       update ic_in_store_detail a set a.detail_place=(select b.detail_place from T#IC_IN_AUDIT_QR_BOX b where a.start_box_id=b.box_id)
                                 where bill_no=v_bill_no_audit and exists (select 1 from T#IC_IN_AUDIT_QR_BOX b where a.start_box_id=b.box_id);
     exception when others then
           rollback;
           p_errmsg:='error4....';
           p_result:=-1;
           bill_no:=p_bill_no;
           return;
     end;




----------------------------------------------------更新入库单及明细结束-----------------------------          -------------------------------------




------------------------------------------------------清洗入库更改出入库差额表----------------------------------------------------------------------------
      begin
         update ic_in_out_diff  set in_bill_no=v_bill_no_audit where in_bill_no=p_bill_no;

           --清理临时数据
          DELETE FROM T#IC_IN_AUDIT_QR_STORE_DETAIL;
          DELETE FROM T#IC_IN_AUDIT_QR_BOX;
          DELETE FROM T#IC_IN_AUDIT_QR_AREA_CARD;
          DELETE FROM T#IC_IN_AUDIT_QR_CARD_CODE;
          DELETE FROM T#IC_IN_AUDIT_QR_AREA_CODE;

      exception when others then
           rollback;
           p_errmsg:='error5....';
           p_result:=-1;
           bill_no:=p_bill_no;
           return;
      end;

-------------------------------------------------------------------------------------------------------------------------------------------------------
     if v_related_bill_no is null then
             v_related_bill_no :=' ';
     end if;


     if p_bill_no is not null and p_bill_no!=' ' then
           p_memo :='单据'||p_bill_no||'入库审核成功, 用时 '||ROUND(TO_NUMBER(sysdate- v_begin_time) * 24 * 60 * 60)||' 秒';
           bill_no:=v_bill_no_audit;
           p_result :=1;

     end if;


-----------------------------------------------------------------------------------------------------------------------------



  commit;

END;
/
grant execute on ACC_TK.UP_TK_IN_AUDIT_QR to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_AUDIT_SR_N
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_AUDIT_SR_N"(p_bill_no         IN VARCHAR2,
                                                  p_operator_id     IN VARCHAR2,
                                                  p_module_id       IN VARCHAR2,
                                                  p_memo            out varchar2,
                                                  p_result          out integer,
                                                  p_related_bill_no out VARCHAR2
                                                  --out_msg out VARCHAR2
                                                  --p_error out VARCHAR2
                                                  )

  ---------------------------
  --功能：生产入库审核(UP_TK_IN_AUDIT_SR)
  --作者：liangminglong
  --版本：正式版
  --修改: 2015-01-30 oywl 增加异形票'7' 手机票'8'业务处理
  --修改日期：2015-12-23 oywl ic_sts_area_card校验库存更新时字段valid_date修改为trim(valid_date)
  --修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票
  --修改: 2017-10-27 mqf 除赋值区或编码区处理外其他更新总票区、卡票区，增加排除'7' 异型储值票,'8' 手机票，'9' 磁浮优惠储值票
  --修改: 2018-03-20 mqf 修正寻找存放位置机制：当前托满时，1当前托后面如果没有托可用，则查找最前面可用的托 2.当前托后面有托可用，则寻找后面的托
  ---------------------------
 AS
  v_type            char(4);
  v_begin_time      date;
  v_start_time      date;
  v_temp_number     integer;
  v_temp_number2    integer;
  v_temp_number3    integer;
  v_temp_number4    integer;
  v_temp_number5    integer;
  v_temp_number6    integer;
  v_temp_number7    integer;
  v_related_bill_no char(16);
  v_end_time        date;
  v_water_no        numeric(18, 0);
  v_area_id         char(2);
  v_ic_main_type    varchar(2);
  v_ic_sub_type     varchar(2);
  v_in_num          integer;
  v_detail_place    varchar(50);
  v_box_id          char(14);
  v_flag            varchar(4);
  v_start_box       char(14);
  v_end_box         char(14);
  v_pre_money       integer;
  v_valid_date      varchar(10);
  v_line_id         varchar(2);
  v_station_id      varchar(3);
  v_exit_line_id    varchar(2);
  v_exit_station_id varchar(3);
  v_mode            varchar(3);
  v_storage_id      char(4);
  v_box_card_num    integer;
  v_valid_date1     varchar(10);
  v_put_place       varchar(20);
  v_get_place       varchar(20);
  v_chest_id        char(3);
  v_storey_id       char(2);
  v_base_id         char(2);
  v_box_type        char(2);
  v_bill_year       integer;
  v_bill_no_audit   char(12);
  v_memo            varchar(100);

BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  --删除临时表数据

  delete from t#ic_store_detail;
  delete from t#ic_box;
  delete from t#ic_start_end_box;
  delete from t#ic_area_card_code;
  delete from t#ic_tmp_card_code;
  delete from t#ic_area_code;

  select '审核' into v_type from dual;
  select sysdate into v_begin_time from dual;

  --------------------------------------校验单据是否存在、状态是否未审核----------------------
  begin
    select count(*)
      into v_temp_number
      from ic_in_store_bill
     where bill_no = p_bill_no
       and record_flag = '3';
    if v_temp_number = 0 then
      p_result          := -30;
      p_related_bill_no := p_bill_no; --'无此未审核记录';
      return;
    end if;
  exception
    when no_data_found then
      p_result          := -30;
      p_related_bill_no := p_bill_no; --'无此未审核记录';
      return;
  end;

  begin
    select count(*)
      into v_temp_number
      from ic_in_store_detail
     where bill_no = p_bill_no;
    if v_temp_number = 0 then
      p_result          := -2;
      p_related_bill_no := p_bill_no; --'无明细记录';
      return;
    end if;
  exception
    when no_data_found then
      p_result          := -2;
      p_related_bill_no := p_bill_no; --'无明细记录';
      return;
  end;

  select related_bill_no
    into v_related_bill_no
    from ic_in_store_bill
   where bill_no = p_bill_no;
  --------------------------------------------------------------------------------------------------------

  begin
    --更改入库单
    update ic_in_store_bill
       set record_flag = '0'
     where bill_no = p_bill_no;
    --DBMS_OUTPUT.PUT_LINE('Navicat for Oracle3');

    ------------- 判断入库数量是否超过区剩余数量-------------------------
    insert into t#ic_area_code
      select storage_id, area_id, sum(in_num)
        from ic_in_store_detail
       where bill_no = p_bill_no
       group by storage_id, area_id;

    begin
      select count(*)
        into v_temp_number
        from t#ic_area_code a, ic_cod_area b
       where a.storage_id = b.storage_id
         and a.area_id = b.area_id
         and b.real_num + a.card_num > b.upper_num;
      if v_temp_number > 0 then
        p_result          := -3;
        p_related_bill_no := p_bill_no; --'入库数量超过区剩余数';
        return;
      end if;
    exception
      when others then
        p_result          := -3;
        p_related_bill_no := p_bill_no; --'入库数量超过区剩余数';
        return;
    end;
    delete t#ic_area_code;
    ----------------------------------------------------------------------
    ---------------------缓存入库数据-------------------------------------
    insert into t#ic_store_detail
      select water_no,
             bill_no,
             reason_id,
             storage_id,
             area_id,
             ltrim(rtrim(ic_main_type)),
             ltrim(rtrim(ic_sub_type)),
             in_num,
             detail_place,
             start_box_id,
             end_box_id,
             start_logical_id,
             end_logical_id,
             valid_date,
             card_money,
             line_id,
             station_id,
             exit_line_id,
             exit_station_id,
             model,
             use_flag
        from ic_in_store_detail
       where bill_no = p_bill_no;
    -----------------------------------------------------------------
  exception
    when others then
      p_result          := -1;
      p_related_bill_no := p_bill_no; --'error01...';
      --p_error:='error1111';
      rollback;
      return;
  end;

  --赋值区或编码区处理
  --单程票赋值区
  --储值票赋值区或编码区
  --入库原因：02：新票编码 07：车票重编码
  --增加乘次票40
  begin
    select count(*)
      into v_temp_number
      from t#ic_store_detail
     where ((ic_main_type = '1' or ic_main_type = '2' or
           ic_main_type = '40' or ic_main_type = '7' or
           ic_main_type = '8' or ic_main_type = '9') and
           (area_id = '03' or
           (area_id = '02' and (reason_id = '02' or reason_id = '07'))))
        or (ic_main_type = '12' and area_id = '03');
  exception
    when no_data_found THEN
      --rollback;
      --p_error :='error333... ';
      p_result          := -1;
      p_related_bill_no := p_bill_no;
      --return;
  end;

  begin
    select count(*)
      into v_temp_number2
      from t#ic_store_detail
     where (((ic_main_type = '1' or ic_main_type = '2' or
           ic_main_type = '40' or ic_main_type = '7' or
           ic_main_type = '8' or ic_main_type = '9') and
           (area_id = '03' or
           (area_id = '02' and (reason_id = '02' or reason_id = '07')))) or
           (ic_main_type = '12' and area_id = '03'))
       and start_box_id != end_box_id; --生产入库都是起止盒号相等
  exception
    when no_data_found THEN
      --rollback;
      --p_error :='error4444... ';
      p_result          := -1;
      p_related_bill_no := p_bill_no;
      --return;
  end;

  --DBMS_OUTPUT.PUT_LINE('v_temp_number='||v_temp_number);

  if v_temp_number > 0 then

    --增加乘次票40
    begin
      if v_temp_number2 = 0 then
        --增加乘次票40
        insert into t#ic_box
          select storage_id,
                 area_id,
                 ic_main_type,
                 ic_sub_type,
                 card_money,
                 start_box_id,
                 sum(in_num),
                 null
            from t#ic_store_detail
           where ((ic_main_type = '1' or ic_main_type = '2' or
                 ic_main_type = '40' or ic_main_type = '7' or
                 ic_main_type = '8' or ic_main_type = '9') and
                 (area_id = '03' or
                 (area_id = '02' and
                 (reason_id = '02' or reason_id = '07'))))
              or (ic_main_type = '12' and area_id = '03')
           group by storage_id,
                    area_id,
                    ic_main_type,
                    ic_sub_type,
                    card_money,
                    start_box_id;
      end if;
    exception
      when no_data_found then
        p_result          := -1;
        p_related_bill_no := p_bill_no; --='error03...';
        --p_error:='error33';
        return;
    end;

    select min(box_id), max(box_id)
      into v_start_box, v_end_box
      from t#ic_box;
    select v_start_box into v_box_id from dual;

    -----------------每盒处理开始------------------------------
    while v_flag is null and v_box_id <= v_end_box loop
      select storage_id,
             area_id,
             ic_main_type,
             ic_sub_type,
             card_money,
             in_num
        into v_storage_id,
             v_area_id,
             v_ic_main_type,
             v_ic_sub_type,
             v_pre_money,
             v_box_card_num
        from t#ic_box
       where box_id = v_box_id;

      begin
        select count(*)
          into v_temp_number2
          from ic_cod_chest
         where storage_id = v_storage_id
           and area_id = v_area_id
           and ic_main_type = v_ic_main_type
           and ic_sub_type = v_ic_sub_type
           and card_money = v_pre_money
           and full_flag != '1';
        if v_temp_number2 = 0 then
          p_result          := -6;
          p_related_bill_no := p_bill_no; --'没有可放的柜...';
          --return;
        end if;
      exception
        when no_data_found then
          p_result          := -6;
          p_related_bill_no := p_bill_no; --'没有可放的柜...';
        --return;
      end;

      -----车站线路有效期值处理-----------------------------------------

      select line_id,
             station_id,
             exit_line_id,
             exit_station_id,
             model,
             to_char(valid_date, 'yyyy-mm-dd')
        into v_line_id,
             v_station_id,
             v_exit_line_id,
             v_exit_station_id,
             v_mode,
             v_valid_date1
        from t#ic_store_detail
       where ROWNUM = 1;

      if v_line_id is null or v_line_id = '0' or v_line_id = '00' then
        select ' ' into v_line_id from dual;
      end if;
      if v_station_id is null or v_station_id = '0' or v_station_id = '00' then
        select ' ' into v_station_id from dual;
      end if;
      if v_exit_line_id is null or v_exit_line_id = '0' or
         v_exit_line_id = '00' then
        select ' ' into v_exit_line_id from dual;
      end if;
      if v_exit_station_id is null or v_exit_station_id = '0' or
         v_exit_station_id = '00' then
        select ' ' into v_exit_station_id from dual;
      end if;
      if v_mode is null or v_mode = '000' then
        select '000' into v_mode from dual;
      end if;

      DBMS_OUTPUT.PUT_LINE('v_line_id444=' || v_line_id);
      DBMS_OUTPUT.PUT_LINE('v_station_id444=' || v_station_id);
      DBMS_OUTPUT.PUT_LINE('v_exit_line_id444=' || v_exit_line_id);
      DBMS_OUTPUT.PUT_LINE('v_exit_station_id44=' || v_exit_station_id);
      DBMS_OUTPUT.PUT_LINE('v_valid_date444=' || v_valid_date1);
      DBMS_OUTPUT.PUT_LINE('v_area_id=' || v_area_id);

      ----应急票修改为以下一行
      --增加乘次票40赋值区需写入有效期

      if (v_ic_main_type = '12' and v_area_id = '03') or
         (v_ic_main_type = '40' and v_area_id = '03') then
        select v_valid_date1 into v_valid_date from dual;

      else
        select ' ' into v_valid_date from dual;
        select ' ' into v_line_id from dual;
        select ' ' into v_station_id from dual;
        select ' ' into v_exit_line_id from dual;
        select ' ' into v_exit_station_id from dual;
        select '000' into v_mode from dual;

      end if;

      ----------------------------------------------------------------------------

      begin

        DBMS_OUTPUT.PUT_LINE('v_line_id=' || v_line_id);
        DBMS_OUTPUT.PUT_LINE('v_station_id=' || v_station_id);
        DBMS_OUTPUT.PUT_LINE('v_exit_line_id=' || v_exit_line_id);
        DBMS_OUTPUT.PUT_LINE('v_exit_station_id=' || v_exit_station_id);
        DBMS_OUTPUT.PUT_LINE('v_valid_date=' || v_valid_date1);

        select count(*)
          into v_temp_number2
          from ic_cod_base a, ic_cod_storey b, ic_cod_chest c
         where a.storage_id = b.storage_id
           and a.area_id = b.area_id
           and a.chest_id = b.chest_id
           and a.storey_id = b.storey_id
           and b.storage_id = c.storage_id
           and b.area_id = c.area_id
           and b.chest_id = c.chest_id
           and c.ic_main_type = v_ic_main_type
           and c.ic_sub_type = v_ic_sub_type
           and card_money = v_pre_money
           and a.storage_id = v_storage_id
           and a.area_id = v_area_id
           and a.real_num < a.max_box_num;
        if v_temp_number2 = 0 then
          p_result          := -4;
          p_related_bill_no := p_bill_no; --'没有可放的托...';
          rollback;
          return;
        end if;
      exception
        when no_data_found then
          p_result          := -4;
          p_related_bill_no := p_bill_no; --'没有可放的托...';
          rollback;
          return;
      end;

      ----------------------------------- 查找托开始-----------------------------------------
      begin
        select count(*)
          into v_temp_number2
          from ic_in_access_place
         where storage_id = v_storage_id
           and area_id = v_area_id
           and ic_main_type = v_ic_main_type
           and ic_sub_type = v_ic_sub_type
           and card_money = v_pre_money;

        if v_temp_number2 = 0 then
          --没有当前托，增加
          select ltrim(rtrim(min(a.storage_id || a.area_id || a.chest_id ||
                                 a.storey_id || a.base_id)))
            into v_put_place
            from ic_cod_base a, ic_cod_storey b, ic_cod_chest c
           where a.storage_id = b.storage_id
             and a.area_id = b.area_id
             and a.chest_id = b.chest_id
             and a.storey_id = b.storey_id
             and b.storage_id = c.storage_id
             and b.area_id = c.area_id
             and b.chest_id = c.chest_id
             and c.ic_main_type = v_ic_main_type
             and c.ic_sub_type = v_ic_sub_type
             and card_money = v_pre_money
             and a.storage_id = v_storage_id
             and a.area_id = v_area_id
             and a.real_num < a.max_box_num;

          insert into ic_in_access_place
            (storage_id,
             area_id,
             ic_main_type,
             ic_sub_type,
             put_place,
             get_place,
             card_money)
          values
            (v_storage_id,
             v_area_id,
             v_ic_main_type,
             v_ic_sub_type,
             v_put_place,
             v_get_place,
             v_pre_money);
          -------------------------------------------增加当前托结束--------------------------------------------------
        else
          --有当前托，查询是否已满
          select count(*)
            into v_temp_number3
            from ic_in_access_place a, ic_cod_base b --当前托已满
           where a.storage_id = v_storage_id
             and a.area_id = v_area_id
             and a.ic_main_type = v_ic_main_type
             and a.ic_sub_type = v_ic_sub_type
             and a.card_money = v_pre_money
             and b.storage_id = v_storage_id
             and b.area_id = v_area_id
             and b.real_num < b.max_box_num
             and substr(a.put_place, 7, 3) = b.chest_id
             and substr(a.put_place, 10, 2) = b.storey_id
             and substr(a.put_place, 12, 2) = b.base_id;

          -----------------寻找下一托开始--------------------------------------------
          --当前托已满
          if v_temp_number3 = 0 then
            select count(*)
              into v_temp_number4
              from ic_cod_base        a,
                   ic_cod_storey      b,
                   ic_cod_chest       c,
                   ic_in_access_place d
             where a.storage_id = b.storage_id
               and a.area_id = b.area_id
               and a.chest_id = b.chest_id
               and a.storey_id = b.storey_id
               and b.storage_id = c.storage_id
               and b.area_id = c.area_id
               and b.chest_id = c.chest_id
               and c.ic_main_type = v_ic_main_type
               and c.ic_sub_type = v_ic_sub_type
               and c.card_money = v_pre_money
               and a.storage_id = v_storage_id
               and a.area_id = v_area_id
               and a.real_num < a.max_box_num
               and d.storage_id = v_storage_id
               and d.area_id = v_area_id
               and d.ic_main_type = v_ic_main_type
               and d.ic_sub_type = v_ic_sub_type
               and d.card_money = v_pre_money
               and to_number(a.chest_id || a.storey_id || a.base_id) >
                   to_number(substr(d.put_place, 7, 3) ||
                             substr(d.put_place, 10, 2) ||
                             substr(d.put_place, 12, 2));

            --当前托后面，没有托可用
            if v_temp_number4 = 0 then

              /*
              select v_storage_id || v_area_id ||
                     min(a.chest_id || a.storey_id || a.base_id)
                into v_put_place
                from ic_cod_base        a,
                     ic_cod_storey      b,
                     ic_cod_chest       c,
                     ic_in_access_place d
               where a.storage_id = b.storage_id
                 and a.area_id = b.area_id
                 and a.chest_id = b.chest_id
                 and a.storey_id = b.storey_id
                 and b.storage_id = c.storage_id
                 and b.area_id = c.area_id
                 and b.chest_id = c.chest_id
                 and c.ic_main_type = v_ic_main_type
                 and c.ic_sub_type = v_ic_sub_type
                 and c.card_money = v_pre_money
                 and a.storage_id = v_storage_id
                 and a.area_id = v_area_id
                 and a.real_num < a.max_box_num
                 and d.storage_id = v_storage_id
                 and d.area_id = v_area_id
                 and d.ic_main_type = v_ic_main_type
                 and d.ic_sub_type = v_ic_sub_type
                 and d.card_money = v_pre_money
                 and to_number(a.chest_id || a.storey_id || a.base_id) >
                     to_number(substr(d.put_place, 7, 3) ||
                               substr(d.put_place, 10, 2) ||
                               substr(d.put_place, 12, 2));
              */
              --20180320 mqf 调换代码位置，查找最前面可用的托
              select ltrim(rtrim(min(a.storage_id || a.area_id ||
                                     a.chest_id || a.storey_id || a.base_id)))
                into v_put_place
                from ic_cod_base a, ic_cod_storey b, ic_cod_chest c
               where a.storage_id = b.storage_id
                 and a.area_id = b.area_id
                 and a.chest_id = b.chest_id
                 and a.storey_id = b.storey_id
                 and b.storage_id = c.storage_id
                 and b.area_id = c.area_id
                 and b.chest_id = c.chest_id
                 and c.ic_main_type = v_ic_main_type
                 and c.ic_sub_type = v_ic_sub_type
                 and card_money = v_pre_money
                 and a.storage_id = v_storage_id
                 and a.area_id = v_area_id
                 and a.real_num < a.max_box_num;

            else
              /*
              select ltrim(rtrim(min(a.storage_id || a.area_id ||
                                     a.chest_id || a.storey_id || a.base_id)))
                into v_put_place
                from ic_cod_base a, ic_cod_storey b, ic_cod_chest c
               where a.storage_id = b.storage_id
                 and a.area_id = b.area_id
                 and a.chest_id = b.chest_id
                 and a.storey_id = b.storey_id
                 and b.storage_id = c.storage_id
                 and b.area_id = c.area_id
                 and b.chest_id = c.chest_id
                 and c.ic_main_type = v_ic_main_type
                 and c.ic_sub_type = v_ic_sub_type
                 and card_money = v_pre_money
                 and a.storage_id = v_storage_id
                 and a.area_id = v_area_id
                 and a.real_num < a.max_box_num;
                 */
              --20180320 mqf 当前托后面，有托可用
              select v_storage_id || v_area_id ||
                     min(a.chest_id || a.storey_id || a.base_id)
                into v_put_place
                from ic_cod_base        a,
                     ic_cod_storey      b,
                     ic_cod_chest       c,
                     ic_in_access_place d
               where a.storage_id = b.storage_id
                 and a.area_id = b.area_id
                 and a.chest_id = b.chest_id
                 and a.storey_id = b.storey_id
                 and b.storage_id = c.storage_id
                 and b.area_id = c.area_id
                 and b.chest_id = c.chest_id
                 and c.ic_main_type = v_ic_main_type
                 and c.ic_sub_type = v_ic_sub_type
                 and c.card_money = v_pre_money
                 and a.storage_id = v_storage_id
                 and a.area_id = v_area_id
                 and a.real_num < a.max_box_num
                 and d.storage_id = v_storage_id
                 and d.area_id = v_area_id
                 and d.ic_main_type = v_ic_main_type
                 and d.ic_sub_type = v_ic_sub_type
                 and d.card_money = v_pre_money
                 and to_number(a.chest_id || a.storey_id || a.base_id) >
                     to_number(substr(d.put_place, 7, 3) ||
                               substr(d.put_place, 10, 2) ||
                               substr(d.put_place, 12, 2));
            end if;

            update ic_in_access_place
               set put_place = v_put_place
             where storage_id = v_storage_id
               and area_id = v_area_id
               and ic_main_type = v_ic_main_type
               and ic_sub_type = v_ic_sub_type
               and card_money = v_pre_money;
          end if; -----------------寻找下一托结束--------------------------------------------

        end if;
      exception
        when no_data_found then
          p_result          := -1111;
          p_related_bill_no := p_bill_no;
          --rollback;
          --p_error:='error44';
          return;
      end;
      ----------------------------------------寻找下一托，结束------------------

      ----------------------------获取柜、层、托编号开始-------------------------
      select put_place, get_place
        into v_put_place, v_get_place
        from ic_in_access_place
       where storage_id = v_storage_id
         and area_id = v_area_id
         and ic_main_type = v_ic_main_type
         and ic_sub_type = v_ic_sub_type
         and card_money = v_pre_money;
      select substr(v_put_place, 7, 3) into v_chest_id from dual;
      select substr(v_put_place, 10, 2) into v_storey_id from dual;
      select substr(v_put_place, 12, 2) into v_base_id from dual;
      begin
        select count(*)
          into v_temp_number2
          from ic_cod_chest
         where storage_id = v_storage_id
           and area_id = v_area_id
           and chest_id = v_chest_id
           and ic_main_type = v_ic_main_type
           and ic_sub_type = v_ic_sub_type
           and card_money = v_pre_money
           and full_flag != '1';
        if v_temp_number2 = 0 then
          p_result          := -20;
          p_related_bill_no := p_bill_no; --'当前位置的柜与柜设置不符...';
          rollback;
          return;
        end if;
      exception
        when no_data_found then
          p_result          := -20;
          p_related_bill_no := p_bill_no;
          rollback;
          return;
      end;
      ---------------------获取柜、层、托编号结束-----------------------------------

      ----------------------更新盒信息、托、层、柜、总票区、卡票区开始--------------
      --增加盒资料表
      --增加乘次票40
      select case
               when v_ic_main_type = '6' then
                '04'
               when v_ic_main_type = '34' then
                '03'
               when v_ic_main_type = '12' then
                '01'
               when v_ic_main_type = '1' then
                '02'
               --when v_ic_main_type = '9' then 20170714 modify by mqf 屏蔽原有的'9'
                --  '03'
               when v_ic_main_type = '2' then
                '05'
               when v_ic_main_type = '40' then
                '06'
               when v_ic_main_type = '7' then
                '07'
               when v_ic_main_type = '8' then
                '08'
         when v_ic_main_type = '9' then
                '09'
             end
        into v_box_type
        from dual;

      begin

        DBMS_OUTPUT.PUT_LINE('v_line_id222=' || v_line_id);
        DBMS_OUTPUT.PUT_LINE('v_station_id222=' || v_station_id);
        DBMS_OUTPUT.PUT_LINE('v_exit_line_id222=' || v_exit_line_id);
        DBMS_OUTPUT.PUT_LINE('v_exit_station_id22=' || v_exit_station_id);
        DBMS_OUTPUT.PUT_LINE('v_valid_date2211=' || v_valid_date1);

        insert into ic_cod_box_info
          (box_id,
           box_type,
           ic_main_type,
           ic_sub_type,
           card_num,
           line_id,
           station_id,
           exit_line_id,
           exit_station_id,
           model,
           vaild_date,
           card_money,
           flag)
        values
          (v_box_id,
           v_box_type,
           v_ic_main_type,
           v_ic_sub_type,
           v_box_card_num,
           v_line_id,
           v_station_id,
           v_exit_line_id,
           v_exit_station_id,
           v_mode,
           v_valid_date1,
           v_pre_money,
           case when(v_ic_main_type = '12' and v_pre_money > 0 and
                v_station_id != ' ' and v_station_id != '00' and
                v_station_id != '0') then '1' else '0' end);

        --库存信息表
        insert into ic_sts_storage
          (storage_id,
           area_id,
           chest_id,
           storey_id,
           base_id,
           box_id,
           product_date,
           card_num)
        values
          (v_storage_id,
           v_area_id,
           v_chest_id,
           v_storey_id,
           v_base_id,
           v_box_id,
           sysdate,
           v_box_card_num);

        --修改托代码表
        update ic_cod_base
           set real_num = real_num + 1
         where storage_id = v_storage_id
           and area_id = v_area_id
           and chest_id = v_chest_id
           and storey_id = v_storey_id
           and base_id = v_base_id;

        --修改层代码表,是否已满
        select count(*)
          into v_temp_number2
          from ic_cod_base
         where storage_id = v_storage_id
           and area_id = v_area_id
           and chest_id = v_chest_id
           and storey_id = v_storey_id
           and max_box_num > real_num;
        if v_temp_number2 = 0 then
          update ic_cod_storey
             set full_flag = '1'
           where storage_id = v_storage_id
             and area_id = v_area_id
             and chest_id = v_chest_id
             and storey_id = v_storey_id;
        end if;

        --修改柜码表,是否已满
        select count(*)
          into v_temp_number2
          from ic_cod_storey
         where storage_id = v_storage_id
           and area_id = v_area_id
           and chest_id = v_chest_id
           and full_flag != '1';
        if v_temp_number2 = 0 then
          update ic_cod_chest
             set full_flag = '1'
           where storage_id = v_storage_id
             and area_id = v_area_id
             and chest_id = v_chest_id;
        end if;

        BEGIN
          for i in (select v_storage_id,
                           v_area_id,
                           v_ic_main_type,
                           v_ic_sub_type,
                           v_pre_money,
                           v_valid_date,
                           v_line_id,
                           v_station_id,
                           v_exit_line_id,
                           v_exit_station_id,
                           v_mode,
                           v_box_card_num
                      from dual) loop

            select count(*)
              into v_temp_number2
              from ic_sts_area_card
             where storage_id = i.v_storage_id
               and area_id = i.v_area_id
               and ic_main_type = i.v_ic_main_type
               and ic_sub_type = i.v_ic_sub_type
               and card_money = i.v_pre_money
               and nvl(trim(valid_date), ' ') = nvl(trim(i.v_valid_date), ' ')
               and nvl(line_id, ' ') = nvl(i.v_line_id, ' ')
               and nvl(station_id, ' ') = nvl(i.v_station_id, ' ')
               and nvl(exit_line_id, ' ') = nvl(i.v_exit_line_id, ' ')
               and nvl(exit_station_id, ' ') =
                   nvl(i.v_exit_station_id, ' ')
               and nvl(model, '000') = nvl(i.v_mode, '000');

            if v_temp_number2 > 0 then

              update ic_sts_area_card
                 set card_num = card_num + i.v_box_card_num
               where storage_id = i.v_storage_id
                 and area_id = i.v_area_id
                 and ic_main_type = i.v_ic_main_type
                 and ic_sub_type = i.v_ic_sub_type
                 and card_money = i.v_pre_money
                 and nvl(valid_date, ' ') = nvl(i.v_valid_date, ' ')
                 and nvl(line_id, ' ') = nvl(i.v_line_id, ' ')
                 and nvl(station_id, ' ') = nvl(i.v_station_id, ' ')
                 and nvl(exit_line_id, ' ') =
                     nvl(rtrim(i.v_exit_line_id), ' ')
                 and nvl(exit_station_id, ' ') =
                     nvl(i.v_exit_station_id, ' ')
                 and nvl(model, '000') = nvl(i.v_mode, '000');

            else
              insert into ic_sts_area_card
                (water_no,
                 storage_id,
                 area_id,
                 ic_main_type,
                 ic_sub_type,
                 card_num,
                 card_money,
                 valid_date,
                 line_id,
                 station_id,
                 exit_line_id,
                 exit_station_id,
                 model,
                 flag)
              values
                (SEQ_IC_TK_IN_XR_CARD_AREA.nextval,
                 i.v_storage_id,
                 i.v_area_id,
                 i.v_ic_main_type,
                 i.v_ic_sub_type,
                 i.v_box_card_num,
                 i.v_pre_money,
                 i.v_valid_date,
                 i.v_line_id,
                 i.v_station_id,
                 i.v_exit_line_id,
                 i.v_exit_station_id,
                 i.v_mode,
                 case when(i.v_ic_main_type = '12' and i.v_pre_money > 0 and
                      i.v_station_id != ' ' and i.v_station_id != '00' and
                      i.v_station_id != '0') then '1' else '0' end);

            end if;

          END LOOP;
        END;

        update ic_cod_area
           set real_num = real_num + v_box_card_num
         where storage_id = v_storage_id
           and area_id = v_area_id;
        ---------------------更新盒信息、托、层、柜、总票区、卡票区结束----------------------------------------
        DBMS_OUTPUT.PUT_LINE('v_box_id===' || v_box_id);
        DBMS_OUTPUT.PUT_LINE('v_end_box=' || v_end_box);
        --更改详细位置
        update t#ic_box
           set detail_place = substr(v_put_place, 7, 3) || '-' ||
                              substr(v_put_place, 10, 2) || '-' ||
                              substr(v_put_place, 12, 2)
         where box_id = v_box_id;
        if v_box_id != v_end_box then
          select min(box_id)
            into v_box_id
            from t#ic_box
           where box_id > v_box_id;
        else
          select '1' into v_flag from dual;
        end if;
      exception
        when others then
          p_result          := -1222;
          p_related_bill_no := p_bill_no;
          --out_msg       := '错误：' || sqlerrm || ',发生在第[' ||dbms_utility.format_error_backtrace() || ']行';

          rollback;
          --p_error:='error55';
          return;
      end;
    end loop;
    ------------------------------------------每盒处理，结束--------------------------------
    --清空缓存数据
    begin
      if substr(v_end_box, 1, 2) = '00' then
        delete ic_es_initi_info_buf
         where order_no in (select box_id from t#ic_box);
      end if;
      if substr(v_end_box, 1, 2) = '01' then
        delete ic_es_hunch_info_buf
         where order_no in (select box_id from t#ic_box);
      end if;
      if substr(v_end_box, 1, 2) = '02' then
        delete ic_es_again_info_buf
         where order_no in (select box_id from t#ic_box);
      end if;
      if substr(v_end_box, 1, 2) = '03' then
        delete ic_es_logout_info_buf
         where order_no in (select box_id from t#ic_box);
      end if;
    exception
      when others then
        p_result          := -1;
        p_related_bill_no := p_bill_no;
        rollback;
        --p_error:='error66';
        return;
    end;
    -------------赋值区或编码区处理结束-------------------
  else
    -------------非赋值区或编码区处理开始-----------------
    begin
      select count(*)
        into v_temp_number2
        from t#ic_store_detail
       where start_box_id is not null
         and start_box_id != ' ';
      if v_temp_number2 > 0 then
        insert into t#ic_start_end_box
          select distinct start_box_id, end_box_id
            from t#ic_store_detail
           where start_box_id is not null
             and start_box_id != ' ';

        select count(*)
          into v_temp_number3
          from t#ic_start_end_box
         where substr(start_box_id, 1, 2) = '00';
        select count(*)
          into v_temp_number4
          from t#ic_start_end_box a, ic_es_initi_info b
         where b.order_no <= a.end_box_id
           and b.order_no >= a.start_box_id;
        if v_temp_number3 > 0 and v_temp_number4 > 0 then
          delete from ic_es_initi_info_buf b
           where b.order_no =
                 (select distinct b.order_no
                    from ic_es_initi_info_buf b, t#ic_start_end_box a
                   where a.end_box_id >= b.order_no
                     and a.start_box_id <= b.order_no);
        end if;

        select count(*)
          into v_temp_number3
          from t#ic_start_end_box
         where substr(start_box_id, 1, 2) = '01';
        select count(*)
          into v_temp_number4
          from t#ic_start_end_box a, ic_es_initi_info b
         where b.order_no <= a.end_box_id
           and b.order_no >= a.start_box_id;
        if v_temp_number3 > 0 and v_temp_number4 > 0 then
          delete from ic_es_hunch_info_buf b
           where b.order_no =
                 (select distinct b.order_no
                    from ic_es_hunch_info_buf b, t#ic_start_end_box a
                   where a.end_box_id >= b.order_no
                     and a.start_box_id <= b.order_no);
        end if;

        select count(*)
          into v_temp_number3
          from t#ic_start_end_box
         where substr(start_box_id, 1, 2) = '02';
        select count(*)
          into v_temp_number4
          from t#ic_start_end_box a, ic_es_initi_info b
         where b.order_no <= a.end_box_id
           and b.order_no >= a.start_box_id;
        if v_temp_number3 > 0 and v_temp_number4 > 0 then
          delete from ic_es_again_info_buf b
           where b.order_no =
                 (select distinct b.order_no
                    from ic_es_again_info_buf b, t#ic_start_end_box a
                   where a.end_box_id >= b.order_no
                     and a.start_box_id <= b.order_no);
        end if;

        select count(*)
          into v_temp_number3
          from t#ic_start_end_box
         where substr(start_box_id, 1, 2) = '03';
        select count(*)
          into v_temp_number4
          from t#ic_start_end_box a, ic_es_initi_info b
         where b.order_no <= a.end_box_id
           and b.order_no >= a.start_box_id;
        if v_temp_number3 > 0 and v_temp_number4 > 0 then
          delete from ic_es_logout_info_buf b
           where b.order_no =
                 (select distinct b.order_no
                    from ic_es_logout_info_buf b, t#ic_start_end_box a
                   where a.end_box_id >= b.order_no
                     and a.start_box_id <= b.order_no);
        end if;
      end if;
    exception
      when no_data_found then
        p_result          := -1;
        p_related_bill_no := p_bill_no;
        rollback;
        --p_error:='error77';
        return;
    end;
    -------------非赋值区或编码区处理结束-------------------

  end if;
  -------------赋值区或编码区处理结束-------------------

  --盒明细表
  begin
    insert into ic_cod_box_detail
      (box_id, start_logical_id, end_logical_id)
      select start_box_id, start_logical_id, end_logical_id
        from t#ic_store_detail
       where start_box_id is not null
         and start_logical_id is not null
         and start_box_id != ' '
         and start_logical_id != ' ';
  exception
    when others then
      p_result          := -40;
      p_related_bill_no := p_bill_no;
      rollback;
      --p_error:='error88';
      return;
  end;

  ---------------------除赋值区或编码区处理外其他更新总票区、卡票区开始---------------------------
  --其他区增加数量
  --其他区增加数量
  --多日票模式入库默认为 000,进出站00默认为 ''

  update t#ic_store_detail
     set line_id = ' '
   where line_id is null
      or line_id = '0'
      or line_id = '00';
  update t#ic_store_detail
     set station_id = ' '
   where station_id is null
      or station_id = '0'
      or station_id = '00';
  update t#ic_store_detail
     set exit_line_id = ' '
   where exit_line_id is null
      or exit_line_id = '0'
      or exit_line_id = '00';
  update t#ic_store_detail
     set exit_station_id = ' '
   where exit_station_id is null
      or exit_station_id = '0'
      or exit_station_id = '00';
  update t#ic_store_detail
     set model = '000'
   where model is null
      or model = '0'
      or model = '00';

  begin
    --增加乘次票40
    --添加多日票模式三个字段
    select count(*)
      into v_temp_number3
      from t#ic_store_detail b
     where b.ic_main_type || b.area_id != '1203'
       and b.ic_main_type || b.area_id != '103'
       and b.ic_main_type || b.area_id || b.reason_id != '10202'
       and b.ic_main_type || b.area_id || b.reason_id != '10207'
       and b.ic_main_type || b.area_id != '203'
       and b.ic_main_type || b.area_id || b.reason_id != '20202'
       and b.ic_main_type || b.area_id || b.reason_id != '20207'
       and b.ic_main_type || b.area_id != '4003'
       and b.ic_main_type || b.area_id || b.reason_id != '400202'
       and b.ic_main_type || b.area_id || b.reason_id != '400207'
       --20171027 mqf 增加排除'7' 异型储值票,'8' 手机票，'9' 磁浮优惠储值票
       and b.ic_main_type || b.area_id != '703'
       and b.ic_main_type || b.area_id || b.reason_id != '70202'
       and b.ic_main_type || b.area_id || b.reason_id != '70207'
       and b.ic_main_type || b.area_id != '803'
       and b.ic_main_type || b.area_id || b.reason_id != '80202'
       and b.ic_main_type || b.area_id || b.reason_id != '80207'
       and b.ic_main_type || b.area_id != '903'
       and b.ic_main_type || b.area_id || b.reason_id != '90202'
       and b.ic_main_type || b.area_id || b.reason_id != '90207';
    if v_temp_number3 > 0 then

      insert into t#ic_tmp_card_code
        (storage_id,
         area_id,
         ic_main_type,
         ic_sub_type,
         card_money,
         card_num,
         valid_date,
         line_id,
         station_id,
         exit_line_id,
         exit_station_id,
         model,
         flag)
        select b.storage_id,
               b.area_id,
               b.ic_main_type,
               b.ic_sub_type,
               card_money,
               sum(b.in_num),
               ' ',
               b.line_id,
               b.station_id,
               b.exit_line_id,
               b.exit_station_id,
               b.model,
               '0'
          from t#ic_store_detail b
         where b.ic_main_type || b.area_id != '1203'
           and b.ic_main_type || b.area_id != '103'
           and b.ic_main_type || b.area_id || b.reason_id != '10202'
           and b.ic_main_type || b.area_id || b.reason_id != '10207'
           and b.ic_main_type || b.area_id != '203'
           and b.ic_main_type || b.area_id || b.reason_id != '20202'
           and b.ic_main_type || b.area_id || b.reason_id != '20207'
           and b.ic_main_type || b.area_id != '4003'
           and b.ic_main_type || b.area_id || b.reason_id != '400202'
           and b.ic_main_type || b.area_id || b.reason_id != '400207'

           --20171027 mqf 增加排除'7' 异型储值票,'8' 手机票，'9' 磁浮优惠储值票
           and b.ic_main_type || b.area_id != '703'
           and b.ic_main_type || b.area_id || b.reason_id != '70202'
           and b.ic_main_type || b.area_id || b.reason_id != '70207'
           and b.ic_main_type || b.area_id != '803'
           and b.ic_main_type || b.area_id || b.reason_id != '80202'
           and b.ic_main_type || b.area_id || b.reason_id != '80207'
           and b.ic_main_type || b.area_id != '903'
           and b.ic_main_type || b.area_id || b.reason_id != '90202'
           and b.ic_main_type || b.area_id || b.reason_id != '90207'

         group by b.storage_id,
                  b.area_id,
                  b.ic_main_type,
                  b.ic_sub_type,
                  card_money,
                  b.line_id,
                  b.station_id,
                  b.exit_line_id,
                  b.exit_station_id,
                  b.model;

      update t#ic_tmp_card_code
         set card_money = 0
       where ic_main_type != '9'
         and ic_main_type != '6';

      insert into t#ic_area_card_code
        (storage_id,
         area_id,
         ic_main_type,
         ic_sub_type,
         card_money,
         card_num,
         valid_date,
         line_id,
         station_id,
         exit_line_id,
         exit_station_id,
         model,
         flag)
        select storage_id,
               area_id,
               ic_main_type,
               ic_sub_type,
               card_money,
               sum(card_num),
               valid_date,
               line_id,
               station_id,
               exit_line_id,
               exit_station_id,
               model,
               flag
          from t#ic_tmp_card_code
         group by storage_id,
                  area_id,
                  ic_main_type,
                  ic_sub_type,
                  card_money,
                  valid_date,
                  line_id,
                  station_id,
                  exit_line_id,
                  exit_station_id,
                  model,
                  flag;

      DBMS_OUTPUT.PUT_LINE('v_exit_station_id22=' || v_exit_station_id);
      DBMS_OUTPUT.PUT_LINE('v_valid_date2211=' || v_valid_date1);

      BEGIN
        for i in (select rowid,
                         storage_id,
                         area_id,
                         ic_main_type,
                         ic_sub_type,
                         card_money,
                         valid_date,
                         card_num,
                         line_id,
                         station_id,
                         exit_line_id,
                         exit_station_id,
                         model,
                         flag
                    from t#ic_area_card_code) loop

          select count(*)
            into v_temp_number5
            from ic_sts_area_card b
           where i.storage_id = b.storage_id
             and i.area_id = b.area_id
             and i.ic_main_type = b.ic_main_type
             and i.ic_sub_type = b.ic_sub_type
             and i.card_money = b.card_money
             and nvl(trim(i.valid_date), ' ') = nvl(trim(b.valid_date), ' ')
             and nvl(i.line_id, ' ') = nvl(b.line_id, ' ')
             and nvl(i.station_id, ' ') = nvl(b.station_id, ' ')
             and nvl(i.exit_line_id, ' ') = nvl(b.exit_line_id, ' ')
             and nvl(i.exit_station_id, ' ') = nvl(b.exit_station_id, ' ')
             and nvl(i.model, '000') = nvl(b.model, '000');

          if v_temp_number5 > 0 then
            update ic_sts_area_card b
               set b.card_num = b.card_num + i.card_num
             where i.storage_id = b.storage_id
               and i.area_id = b.area_id
               and ltrim(rtrim(i.ic_main_type)) =
                   ltrim(rtrim(b.ic_main_type))
               and ltrim(rtrim(i.ic_sub_type)) =
                   ltrim(rtrim(b.ic_sub_type))
               and i.card_money = b.card_money
               and NVL(i.valid_date, ' ') = NVL(b.valid_date, ' ')
               and NVL(i.line_id, ' ') = NVL(b.line_id, ' ')
               and NVL(i.station_id, ' ') = NVL(b.station_id, ' ')
               and NVL(i.exit_line_id, ' ') = NVL(b.exit_line_id, ' ')
               and NVL(i.exit_station_id, ' ') =
                   NVL(b.exit_station_id, ' ')
               and NVL(i.model, ' ') = NVL(b.model, ' ');

          else
            insert into ic_sts_area_card
              (WATER_NO,
               storage_id,
               area_id,
               ic_main_type,
               ic_sub_type,
               card_num,
               card_money,
               valid_date,
               line_id,
               station_id,
               exit_line_id,
               exit_station_id,
               model,
               flag)
            values
              (SEQ_IC_TK_IN_XR_CARD_AREA.nextval,
               i.storage_id,
               i.area_id,
               ltrim(rtrim(i.ic_main_type)),
               ltrim(rtrim(i.ic_sub_type)),
               i.card_num,
               i.card_money,
               i.valid_date,
               i.line_id,
               i.station_id,
               i.exit_line_id,
               i.exit_station_id,
               i.model,
               i.flag);

          end if;

        END LOOP;
      END;

      insert into t#ic_area_code
        (storage_id, area_id, card_num)
        select storage_id, area_id, sum(card_num)
          from t#ic_area_card_code
         group by storage_id, area_id;

      update ic_cod_area a
         set a.real_num =
             (select a.real_num + b.card_num
                from t#ic_area_code b
               where a.area_id = b.area_id
                 and a.storage_id = b.storage_id)
       where exists (select a.real_num + b.card_num
                from t#ic_area_code b
               where a.area_id = b.area_id
                 and a.storage_id = b.storage_id);

    end if;
  exception
    when others then
      p_result          := -1;
      p_related_bill_no := p_bill_no;
      --rollback;
      --p_error:='error99444';

      --out_msg       := '错误：' || sqlerrm || ',发生在第[' ||dbms_utility.format_error_backtrace() || ']行';
      return;
  end;

  -------------------------------更新总票区、卡票区结束-----------------------------
  -------------------------------------------获取正式单号开始--------------------------------
  begin
    select bill_year into v_bill_year from ic_prm_bill_current_date;
  exception
    when no_data_found then
      return;
  end;

  begin
    if v_bill_year = to_char(sysdate, 'yyyy') then
      select substr(p_bill_no, 1, 2) || v_bill_year ||
             lpad(current_int_no + 1, 6, '0')
        into v_bill_no_audit
        from ic_prm_bill_current_flow
       where bill_main_type_id = 'IL';
    else
      select substr(p_bill_no, 1, 2) || v_bill_year || '000001'
        into v_bill_no_audit
        from dual;
      update ic_prm_bill_current_date
         set bill_year = to_number(to_char(sysdate, 'yyyy'));
    end if;

    update ic_prm_bill_current_flow
       set current_no     = v_bill_no_audit,
           current_int_no = to_number(substr(v_bill_no_audit, 7, 6))
     where bill_main_type_id = 'IL';

  exception
    when others then
      --rollback;
      p_result          := -1;
      p_related_bill_no := p_bill_no;
      --p_error:='error2222222222222222222222222';
      return;
  end;
  ---------------------------------------获取正式单号结束-------------------------------------

  -----------------------------------更新入库单及明细出入库差额表开始----------------------
  --改入库单
  begin
    update ic_in_store_bill
       set bill_no       = v_bill_no_audit,
           verify_date   = sysdate,
           verify_person = p_operator_id
     where bill_no = p_bill_no;

    --更改入库明细
    --更新入库明细临时单号为正式单号及详细位置时，由于左连接影响更新效率，改为不使用左连接，分为2步更新
    update ic_in_store_detail
       set bill_no = v_bill_no_audit
     where bill_no = p_bill_no;

    update ic_in_store_detail a
       set a.detail_place =
           (select b.detail_place
              from t#ic_box b
             where a.bill_no = v_bill_no_audit
               and a.start_box_id = b.box_id)
     where exists (select b.detail_place
              from t#ic_box b
             where a.bill_no = v_bill_no_audit
               and a.start_box_id = b.box_id);

  exception
    when others then
      p_result          := -1;
      p_related_bill_no := p_bill_no;
      --p_error:='error2222222222222222222222222';
      --rollback;
      return;
  end;
  --有差额的，更改生产出入库差额表
  begin
    select count(*)
      into v_temp_number4
      from ic_in_out_diff_produce
     where in_bill_no = p_bill_no;
    if v_temp_number4 > 0 then
      update ic_in_out_diff_produce
         set in_bill_no = v_bill_no_audit, record_flag = '1'
       where in_bill_no = p_bill_no;
    end if;
  exception
    when no_data_found then
      p_result          := -1;
      p_related_bill_no := p_bill_no;
      --rollback;
      --p_error:='error33';
      return;
  end;

  --删除临时表数据

  delete from t#ic_store_detail;
  delete from t#ic_box;
  delete from t#ic_start_end_box;
  delete from t#ic_area_card_code;
  delete from t#ic_tmp_card_code;
  delete from t#ic_area_code;

  -------------------------------更新入库单及明细出入库差额表结束-------------------------------------

  select '生产单' || v_related_bill_no || '入库审核成功, 用时 ' ||
         ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60) || ' 秒'
    into v_memo
    from dual;
  p_result          := 1;
  p_memo            := v_memo;
  p_related_bill_no := v_bill_no_audit;

END;
/
grant execute on ACC_TK.UP_TK_IN_AUDIT_SR_N to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_AUDIT_TR
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_AUDIT_TR"(p_bill_no     IN VARCHAR2,
                                                p_operator_id IN VARCHAR2,
                                                p_errmsg      out varchar2,
                                                p_result      out integer,
                                                p_memo        out varchar2,
                                                bill_no       out varchar2)

  ---------------------------------------------------------------------------------
  --过程名:  UP_TK_IN_AUDIT_TR
  --功能：调帐入库审核
  --作者：liangminglong
  --修改: 2015-01-30 oywl 增加异形票'7' 手机票'8'业务处理
  --修改日期：2015-12-23 oywl ic_sts_area_card校验库存更新时字段valid_date修改为trim(valid_date)
  --修改日期：2016-03-08 mqf
  --修改日期: 2017-07-14 mqf 增加 '9'磁浮优惠储值票
  -------------------------------------------------------------------------------
 AS
  v_bill_no_audit    varchar(12); --审核后的单号
  v_type             varchar(4);
  v_num              integer;
  v_n                integer;
  v_put_place        varchar(20); --当前存放位置
  v_get_place        varchar(20); --当前存放位置
  v_chest_id         varchar(3);
  v_storage_id       varchar(4);
  v_storey_id        varchar(2);
  v_base_id          varchar(2);
  v_box_type         varchar(2);
  v_base_water_no    integer; --托序号
  v_bill_year        integer;
  v_valid_date1      date;
  v_reason_id        varchar(2);
  v_start_logical_id varchar(20);
  v_end_logical_id   varchar(20);
  v_water_no         numeric(18, 0);
  v_area_id          varchar(2);
  v_ic_main_type     varchar2(2);
  v_ic_sub_type      varchar2(2);
  v_in_num           integer;
  v_detail_place     varchar(50);
  v_box_id           varchar(14);
  v_flag             varchar(4);
  v_start_box        char(14);
  v_end_box          char(14);
  v_pre_money        integer;
  v_valid_date       varchar(10);
  v_line_id          varchar(2);
  v_station_id       varchar(3);
  v_exit_line_id     varchar(2);
  v_exit_station_id  varchar(3);
  v_model            varchar(3);
  v_box_card_num     integer;
  v_begin_time       date;
  v_memo             varchar(100);
  v_related_bill_no  char(16); --生产工作单/借出单/盘点单
  v_temp_number      integer;
  v_temp_number2     integer;
  v_temp_number3     integer;
  v_temp_number4     integer;
  v_temp_number5     integer;
  v_temp_number6     integer;
  v_bill_no_test     varchar(12);
  v_loop_i           integer;
  v_loop_j           integer;

BEGIN
  -- routine body goes here, e.g.
  --DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  --删除临时表数据
  --删除临时表数据
  begin
    delete from t#ic_store_detail;
    delete from t#ic_tmp_card_code;
    delete from t#ic_area_code;
    delete from t#ic_box;
    delete From t#ic_area_card_code;
  exception
    when others then
      rollback;
      p_result := -1;
      p_errmsg := 'error19 ...';
      bill_no  := p_bill_no;
      return;
  end;
  select '审核' INTO v_type from dual;
  select sysdate into v_begin_time from dual;

  -----------------------------------校验单据是否存在、状态是否未审核----------------------
  begin
    select count(*)
      into v_temp_number
      from ic_in_store_bill
     where bill_no = p_bill_no
       and record_flag = '3';
  exception
    when no_data_found then
      p_errmsg := '无记录';
      p_result := -30;
      return;
  end;
  if v_temp_number = 0 then
    p_errmsg := '无记录';
    p_result := -30;
    return;
  end if;

  begin
    select count(*)
      into v_temp_number
      from ic_in_store_detail
     where bill_no = p_bill_no;
  exception
    when no_data_found then
      p_errmsg := '无明细记录';
      p_result := -2;
      bill_no  := p_bill_no;
      return;
  end;
  if v_temp_number = 0 then
    p_errmsg := '无明细记录';
    p_result := -2;
    bill_no  := p_bill_no;
    return;
  end if;
  select related_bill_no
    into v_related_bill_no
    from ic_in_store_bill
   where bill_no = p_bill_no;
  -----------------------------------------------------------------------------------------------
  begin

    --更改入库单
    begin
      update ic_in_store_bill
         set record_flag = '0'
       where bill_no = p_bill_no;
      ----------- 判断入库数量是否超过区剩余数量------------------------------------------------------------------------------------------------
      insert into t#ic_area_code
        select storage_id, area_id, sum(in_num)
          from ic_in_store_detail
         where bill_no = p_bill_no
         group by storage_id, area_id;
    exception
      when others then
        rollback;
        p_errmsg := 'error1....';
        p_result := -1;
        bill_no  := p_bill_no;
        return;
    end;

    begin
      select count(*)
        into v_temp_number
        from t#ic_area_code a, ic_cod_area b
       where a.storage_id = b.storage_id
         and a.area_id = b.area_id
         and b.real_num + a.card_num > b.upper_num;
    exception
      when no_data_found then
        p_errmsg := '入库数量超过区剩余数量';
        p_result := -3;
        bill_no  := p_bill_no;
        return;
    end;

    DBMS_OUTPUT.PUT_LINE('p_bill_no=' || p_bill_no);
    begin
      delete t#ic_area_code;
      --------------------缓存入库数据----------------
      insert into t#ic_store_detail
        select water_no,
               bill_no,
               reason_id,
               storage_id,
               area_id,
               ic_main_type,
               ic_sub_type,
               in_num,
               detail_place,
               start_box_id,
               end_box_id,
               start_logical_id,
               end_logical_id,
               valid_date,
               card_money,
               line_id,
               station_id,
               exit_line_id,
               exit_station_id,
               model,
               use_flag
          from ic_in_store_detail
         where bill_no = p_bill_no;
    exception
      when others then
        rollback;
        p_errmsg := 'error2....';
        p_result := -1;
        bill_no  := p_bill_no;
        return;
    end;
    ------------------------------------------------------------------------
    --------赋值区或编码区处理(调帐入库、新票入库)开始------------------
    begin
      select count(*)
        into v_temp_number
        from t#ic_store_detail
       where substr(p_bill_no, 1, 2) = 'TR'
         and start_box_id != ' '
         and start_box_id is not null;
      select count(*)
        into v_temp_number2
        from t#ic_store_detail
       where area_id = '03'
          or (area_id = '02' and
             (ltrim(rtrim(ic_main_type))) in ('1', '2', '40', '7', '8', '9'))
       order by start_box_id, end_box_id, start_logical_id, end_logical_id;
    exception
      when no_data_found then
        p_errmsg := 'error3..';
        p_result := -1;
        bill_no  := p_bill_no;
        return;
    end;
    if v_temp_number > 0 then
      ------------------调帐入库开始--------------------------
      begin
        --增加乘次票40/员工票判断
        declare
          cursor cur_detail is
            select water_no,
                   reason_id,
                   storage_id,
                   area_id,
                   ic_main_type,
                   ic_sub_type,
                   in_num,
                   detail_place,
                   start_box_id,
                   end_box_id,
                   line_id,
                   station_id,
                   exit_line_id,
                   exit_station_id,
                   model,
                   valid_date,
                   card_money,
                   start_logical_id,
                   end_logical_id
              from t#ic_store_detail
             where area_id = '03'
                or (area_id = '02' and (ltrim(rtrim(ic_main_type))) in
                   ('1', '2', '40', '7', '8', '9'))
             order by start_box_id,
                      end_box_id,
                      start_logical_id,
                      end_logical_id;
          c_row cur_detail%rowtype;
        begin
          open cur_detail;
          fetch cur_detail
            into c_row;
          ---取入库到赋值区记录
          while v_temp_number2 > 0 loop
            ---处理一条明细
            select substr(c_row.detail_place, 1, 3)
              into v_chest_id
              from dual;
            select substr(c_row.detail_place, 5, 2)
              into v_storey_id
              from dual;
            select substr(c_row.detail_place, 8, 2)
              into v_base_id
              from dual;
            -----车站线路值处理
            if c_row.line_id is null then
              select ' ' into c_row.line_id from dual;
            end if;
            if c_row.station_id is null then
              select ' ' into c_row.station_id from dual;
            end if;

            if c_row.exit_line_id is null then
              select ' ' into c_row.exit_line_id from dual;
            end if;
            if c_row.exit_station_id is null then
              select ' ' into c_row.exit_station_id from dual;
            end if;
            if c_row.model is null then
              select '000' into c_row.model from dual;
            end if;

            -----有效期值处理
            --为保持与生产入库一致，仅单程票赋值区写有效期，其余写空值

            if c_row.valid_date is null then
              select ' ' into v_valid_date from dual;
            else
              --增加乘次票40赋值区需写入有效期
              if (c_row.ic_main_type = '12' and c_row.area_id = '03') or
                 (c_row.ic_main_type = '40' and c_row.area_id = '03') then
                select to_char(c_row.valid_date, 'yyyy') || '-' ||
                       to_char(c_row.valid_date, 'mm') || '-' ||
                       to_char(c_row.valid_date, 'dd')
                  into v_valid_date
                  from dual;
              else
                select ' ' into v_valid_date from dual;
              end if;
            end if;

            begin
              select count(*)
                into v_temp_number
                from ic_sts_storage
               where storage_id = c_row.storage_id
                 and area_id = c_row.area_id
                 and chest_id = v_chest_id
                 and storey_id = v_storey_id
                 and base_id = v_base_id
                 and box_id = c_row.start_box_id;
            exception
              when no_data_found then
                p_errmsg := '库存中找不到指定的盒';
                p_result := -22;
                bill_no  := p_bill_no;
                return;
            end;

            begin
              --增加盒资料
              update ic_cod_box_info
                 set card_num = card_num + c_row.in_num
               where box_id = c_row.start_box_id;
              --修改库存信息表
              update ic_sts_storage
                 set card_num = card_num + c_row.in_num
               where storage_id = c_row.storage_id
                 and area_id = c_row.area_id
                 and chest_id = v_chest_id
                 and storey_id = v_storey_id
                 and base_id = v_base_id
                 and box_id = c_row.start_box_id;
              -------------------------------------  修改区代码表 卡区代码--------------------------------------------------------------
              --修改区代码表,增加赋值区实际数量
              update ic_cod_area
                 set real_num = real_num + c_row.in_num
               where storage_id = c_row.storage_id
                 and area_id = c_row.area_id;
            exception
              when no_data_found then
                p_errmsg := 'error6..';
                p_result := -1;
                bill_no  := p_bill_no;
                return;
            end;

            --修改卡区代码表,增加赋值区实际数量
            begin
              select count(*)
                into v_temp_number3
                from ic_sts_area_card
               where storage_id = c_row.storage_id
                 and area_id = c_row.area_id
                 and ltrim(rtrim(ic_main_type)) = c_row.ic_main_type
                 and ltrim(rtrim(ic_sub_type)) = c_row.ic_sub_type
                 and card_money = c_row.card_money
         --20160308 modify by mqf 增加nvl
                 and nvl(trim(valid_date),' ') = nvl(trim(v_valid_date),' ')
                 and line_id = c_row.line_id
                 and station_id = c_row.station_id
                 and exit_line_id = c_row.exit_line_id
                 and exit_station_id = c_row.exit_station_id
                 and model = c_row.model;
              if v_temp_number3 > 0 then
                update ic_sts_area_card
                   set card_num = card_num + c_row.in_num
                 where storage_id = c_row.storage_id
                   and area_id = c_row.area_id
                   and ltrim(rtrim(ic_main_type)) = c_row.ic_main_type
                   and ltrim(rtrim(ic_sub_type)) = c_row.ic_sub_type
                   and card_money = c_row.card_money
           --20160308 modify by mqf 增加nvl
                   --and valid_date = v_valid_date
           and nvl(trim(valid_date),' ') = nvl(trim(v_valid_date),' ')
                   and line_id = c_row.line_id
                   and station_id = c_row.station_id
                   and exit_line_id = c_row.exit_line_id
                   and exit_station_id = c_row.exit_station_id
                   and model = c_row.model;
              else
                insert into ic_sts_area_card
                  (water_no,
                   storage_id,
                   area_id,
                   ic_main_type,
                   ic_sub_type,
                   card_num,
                   card_money,
                   line_id,
                   station_id,
                   exit_line_id,
                   exit_station_id,
                   model,
                   valid_date,
                   flag)
                values
                  (SEQ_IC_TK_IN_XR_CARD_AREA.nextval,
                   c_row.storage_id,
                   c_row.area_id,
                   c_row.ic_main_type,
                   c_row.ic_sub_type,
                   c_row.in_num,
                   c_row.card_money,
                   c_row.line_id,
                   c_row.station_id,
                   c_row.exit_line_id,
                   c_row.exit_station_id,
                   c_row.model,
                   v_valid_date,
                   '0');

              end if;
            exception
              when others then
                p_errmsg := 'error6..';
                p_result := -1;
                bill_no  := p_bill_no;
                return;
            end;
            fetch cur_detail
              into c_row;
            v_temp_number2 := v_temp_number2 - 1;
          end loop;
          close cur_detail;
        end;
      end;
      --盒明细表
      insert into ic_cod_box_detail
        (box_id, start_logical_id, end_logical_id)
        select start_box_id, start_logical_id, end_logical_id
          from t#ic_store_detail
         where start_box_id is not null
           and start_logical_id is not null
           and end_logical_id is not null
           and start_box_id != ' '
           and start_logical_id != ' '
           and end_logical_id != ' ';
    else

      begin
        --盒明细表
        insert into ic_cod_box_detail
          (box_id, start_logical_id, end_logical_id)
          select start_box_id, start_logical_id, end_logical_id
            from t#ic_store_detail
           where start_box_id is not null
             and start_logical_id is not null
             and end_logical_id is not null
             and start_box_id != ' '
             and start_logical_id != ' '
             and end_logical_id != ' ';

        -------------------------除赋值区或编码区处理(调帐入库、新票入库)外其他更新总票区、卡票区开始------------------------
        --其他区增加数量
        insert into t#ic_tmp_card_code
          (storage_id,
           area_id,
           ic_main_type,
           ic_sub_type,
           card_money,
           card_num,
           valid_date,
           line_id,
           station_id,
           exit_line_id,
           exit_station_id,
           model,
           flag)
          select b.storage_id,
                 b.area_id,
                 ltrim(rtrim(b.ic_main_type)),
                 ltrim(rtrim(b.ic_sub_type)),
                 b.card_money,
                 sum(b.in_num),
                 ' ',
                 ' ',
                 ' ',
                 ' ',
                 ' ',
                 '000',
                 '0'
            from t#ic_store_detail b
           where substr(p_bill_no, 1, 2) || area_id ||
                 ltrim(rtrim(ic_main_type)) != 'TR021'
             and substr(p_bill_no, 1, 2) || area_id != 'TR03'
             and substr(p_bill_no, 1, 2) || area_id != 'XR03'
           group by b.storage_id,
                    b.area_id,
                    ltrim(rtrim(b.ic_main_type)),
                    ltrim(rtrim(b.ic_sub_type)),
                    b.card_money;

        update t#ic_tmp_card_code
           set card_money = 0
         where
     --ltrim(rtrim(ic_main_type)) != '9' and 20170714 modify by mqf 屏蔽原有的'9'
            ltrim(rtrim(ic_main_type)) != '6';

        insert into t#ic_area_card_code
          (storage_id,
           area_id,
           ic_main_type,
           ic_sub_type,
           card_money,
           card_num,
           valid_date,
           line_id,
           station_id,
           exit_line_id,
           exit_station_id,
           model,
           flag)
          select storage_id,
                 area_id,
                 ic_main_type,
                 ic_sub_type,
                 card_money,
                 sum(card_num),
                 valid_date,
                 line_id,
                 station_id,
                 exit_line_id,
                 exit_station_id,
                 model,
                 flag
            from t#ic_tmp_card_code
           group by storage_id,
                    area_id,
                    ic_main_type,
                    ic_sub_type,
                    card_money,
                    valid_date,
                    line_id,
                    station_id,
                    exit_line_id,
                    exit_station_id,
                    model,
                    flag;

        BEGIN
          for i in (select rowid,
                           storage_id,
                           area_id,
                           ic_main_type,
                           ic_sub_type,
                           card_money,
                           valid_date,
                           card_num,
                           line_id,
                           station_id,
                           exit_line_id,
                           exit_station_id,
                           model,
                           flag
                      from t#ic_area_card_code) loop

            select count(*)
              into v_temp_number6
              from ic_sts_area_card b
             where i.storage_id = b.storage_id
               and i.area_id = b.area_id
               and i.ic_main_type = b.ic_main_type
               and i.ic_sub_type = b.ic_sub_type
               and i.card_money = b.card_money
               and nvl(trim(i.valid_date), ' ') = nvl(trim(b.valid_date), ' ')
               and nvl(i.line_id, ' ') = nvl(b.line_id, ' ')
               and nvl(i.station_id, ' ') = nvl(b.station_id, ' ')
               and nvl(i.exit_line_id, ' ') = nvl(b.exit_line_id, ' ')
               and nvl(i.exit_station_id, ' ') =
                   nvl(b.exit_station_id, ' ')
               and nvl(i.model, '000') = nvl(b.model, '000');

            if v_temp_number6 > 0 then
              update ic_sts_area_card b
                 set b.card_num = b.card_num + i.card_num
               where i.storage_id = b.storage_id
                 and i.area_id = b.area_id
                 and ltrim(rtrim(i.ic_main_type)) =
                     ltrim(rtrim(b.ic_main_type))
                 and ltrim(rtrim(i.ic_sub_type)) =
                     ltrim(rtrim(b.ic_sub_type))
                 and i.card_money = b.card_money
                 and NVL(i.valid_date, ' ') = NVL(b.valid_date, ' ')
                 and NVL(i.line_id, ' ') = NVL(b.line_id, ' ')
                 and NVL(i.station_id, ' ') = NVL(b.station_id, ' ')
                 and NVL(i.exit_line_id, ' ') = NVL(b.exit_line_id, ' ')
                 and NVL(i.exit_station_id, ' ') =
                     NVL(b.exit_station_id, ' ')
                 and NVL(i.model, ' ') = NVL(b.model, ' ');

            else
              insert into ic_sts_area_card
                (WATER_NO,
                 storage_id,
                 area_id,
                 ic_main_type,
                 ic_sub_type,
                 card_num,
                 card_money,
                 valid_date,
                 line_id,
                 station_id,
                 exit_line_id,
                 exit_station_id,
                 model,
                 flag)
              values
                (SEQ_IC_TK_IN_XR_CARD_AREA.nextval,
                 i.storage_id,
                 i.area_id,
                 ltrim(rtrim(i.ic_main_type)),
                 ltrim(rtrim(i.ic_sub_type)),
                 i.card_num,
                 i.card_money,
                 i.valid_date,
                 i.line_id,
                 i.station_id,
                 i.exit_line_id,
                 i.exit_station_id,
                 i.model,
                 i.flag);

            end if;

          END LOOP;
        END;

        insert into t#ic_area_code
          (storage_id, area_id, card_num)
          select storage_id, area_id, sum(card_num)
            from t#ic_area_card_code
           group by storage_id, area_id;

        update ic_cod_area a
           set a.real_num =
               (select a.real_num + b.card_num
                  from ic_cod_area a, t#ic_area_code b
                 where a.area_id = b.area_id
                   and a.storage_id = b.storage_id)
         where a.AREA_ID = (select area_id from t#ic_area_code)
           and a.storage_id = (select storage_id from t#ic_area_code);

      exception
        when others then
          p_errmsg := 'error15...';
          p_result := -1;
          bill_no  := p_bill_no;
          return;
      end;

      -------------------------------------------更新总票区、卡票区结束--------------------------------
    end if;

    --------赋值区或编码区处理(调帐入库、新票入库)结束---------------------------------

    -------------------------------------------获取正式单号开始--------------------------------
    begin
      select bill_year into v_bill_year from ic_prm_bill_current_date;
    exception
      when no_data_found then
        return;
    end;

    begin
      if v_bill_year = to_char(sysdate, 'yyyy') then
        select substr(p_bill_no, 1, 2) || v_bill_year ||
               lpad(current_int_no + 1, 6, '0')
          into v_bill_no_audit
          from ic_prm_bill_current_flow
         where bill_main_type_id = 'IL';
      else
        select substr(p_bill_no, 1, 2) || v_bill_year || '000001'
          into v_bill_no_audit
          from dual;
        update ic_prm_bill_current_date
           set bill_year = to_number(to_char(sysdate, 'yyyy'));
      end if;

      update ic_prm_bill_current_flow
         set current_no     = v_bill_no_audit,
             current_int_no = to_number(substr(v_bill_no_audit, 7, 6))
       where bill_main_type_id = 'IL';
    exception
      when others then
        rollback;
        p_result := -1;
        p_errmsg := 'error16 ...';
        bill_no  := p_bill_no;
        return;
    end;
    ---------------------------------------获取正式单号结束-------------------------------------

    ---------------------------------------------更新入库单及明细开始----------------------------

    begin
      --更改入库单
      update ic_in_store_bill
         set bill_no       = v_bill_no_audit,
             verify_date   = sysdate,
             verify_person = p_operator_id
       where bill_no = p_bill_no;
    exception
      when others then
        rollback;
        p_result := -1;
        p_errmsg := 'error17 ...';
        bill_no  := p_bill_no;
        return;
    end;
    begin
      --更改入库明细
      update ic_in_store_detail a
         set bill_no = v_bill_no_audit
       where a.bill_no = p_bill_no;

      update ic_in_store_detail a
         set a.detail_place =
             (select b.detail_place
                from t#ic_box b
               where bill_no = v_bill_no_audit
                 and a.start_box_id = b.box_id)
       where exists (select 1
                from t#ic_box b
               where bill_no = v_bill_no_audit
                 and a.start_box_id = b.box_id);
    exception
      when others then
        rollback;
        p_result := -1;
        p_errmsg := 'error18 ...';
        bill_no  := p_bill_no;
        return;
    end;

    --------------------------------------更新入库单及明细结束--------------------------------

    -------------------------------------------------新票入库卡号段表有的，删除---------------
    begin
      select count(*)
        into v_temp_number3
        from ic_in_add_new_card
       where in_bill_no = p_bill_no;
    exception
      when others then
        return;
    end;

    if substr(p_bill_no, 1, 2) = 'XR' and v_temp_number3 > 0 then
      begin
        delete ic_in_add_new_card where in_bill_no = p_bill_no;
      exception
        when others then
          rollback;
          p_result := -1;
          p_errmsg := 'error18 ...';
          bill_no  := p_bill_no;
          return;
      end;
    end if;

    --删除临时表数据
    begin
      delete from t#ic_store_detail;
      delete from t#ic_tmp_card_code;
      delete from t#ic_area_code;
      delete from t#ic_box;
      delete From t#ic_area_card_code;
    exception
      when others then
        rollback;
        p_result := -1;
        p_errmsg := 'error19 ...';
        bill_no  := p_bill_no;
        return;
    end;

    if v_related_bill_no is null then
      select ' ' into v_related_bill_no from dual;
    end if;

    if p_bill_no is not null and p_bill_no != ' ' then
      p_memo   := '单据' || v_bill_no_audit || '入库成功, 用时 ' ||
                  ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60) || ' 秒';
      bill_no  := v_bill_no_audit;
      p_result := 1;

    end if;
  end;
END;
/
grant execute on ACC_TK.UP_TK_IN_AUDIT_TR to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_AUDIT_XR
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_AUDIT_XR"(p_bill_no     IN VARCHAR2,
                                                p_operator_id IN VARCHAR2,
                                                p_errmsg      out varchar2,
                                                p_result      out integer,
                                                p_memo        out varchar2,
                                                bill_no       out varchar2)

  ---------------------------------------------------------------------------------
  --过程名:  UP_TK_IN_AUDIT_XR
  --功能：新票入库审核
  --输出: 0-无修改 -1修改表出错 -5-单据状态非未审核 -2无明细记录  -3赋值区或编码区已无位置  -4找不到下一托 -6没有可放的柜  >0修改记录数
  --修改: 2015-01-30 oywl 增加异形票'7' 手机票'8'业务处理
  --修改日期：2015-12-23 oywl ic_sts_area_card校验库存更新时字段valid_date修改为trim(valid_date)
  --修改日期: 2017-07-14 mqf 增加 '9'磁浮优惠储值票
  -------------------------------------------------------------------------------
 AS
  v_bill_no_audit    varchar(12); --审核后的单号
  v_type             varchar(4);
  v_num              integer;
  v_n                integer;
  v_put_place        varchar(20); --当前存放位置
  v_get_place        varchar(20); --当前存放位置
  v_chest_id         varchar(3);
  v_storage_id       varchar(4);
  v_storey_id        varchar(2);
  v_base_id          varchar(2);
  v_box_type         varchar(2);
  v_base_water_no    integer; --托序号
  v_bill_year        integer;
  v_valid_date1      date;
  v_reason_id        varchar(2);
  v_start_logical_id varchar(20);
  v_end_logical_id   varchar(20);
  v_water_no         numeric(18, 0);
  v_area_id          varchar(2);
  v_ic_main_type     varchar2(2);
  v_ic_sub_type      varchar2(2);
  v_in_num           integer;
  v_detail_place     varchar(50);
  v_box_id           varchar(14);
  v_flag             varchar(4);
  v_start_box        char(14);
  v_end_box          char(14);
  v_pre_money        integer;
  v_valid_date       varchar(10);
  v_line_id          varchar(2);
  v_station_id       varchar(3);
  v_exit_line_id     varchar(2);
  v_exit_station_id  varchar(3);
  v_model            varchar(3);
  v_box_card_num     integer;
  v_begin_time       date;
  v_memo             varchar(100);
  v_related_bill_no  char(16); --生产工作单/借出单/盘点单
  v_temp_number      integer;
  v_temp_number2     integer;
  v_temp_number3     integer;
  v_temp_number4     integer;
  v_temp_number5     integer;
  v_bill_no_test     varchar(12);
  v_loop_i           integer;
  v_loop_j           integer;

BEGIN
  -- routine body goes here, e.g.
  --DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  --删除临时表数据
  begin
    delete from t#ic_store_detail;
    delete from t#ic_tmp_card_code;
    delete from t#ic_area_code;
    delete from t#ic_box;
    delete From t#ic_area_card_code;
  exception
    when others then
      rollback;
      p_result := -1;
      p_errmsg := 'error19 ...';
      bill_no  := p_bill_no;
      return;
  end;
  select '审核' INTO v_type from dual;
  select sysdate into v_begin_time from dual;
  -----------------------------------校验单据是否存在、状态是否未审核----------------------
  begin
    select count(*)
      into v_temp_number
      from ic_in_store_bill
     where bill_no = p_bill_no
       and record_flag = '3';
  exception
    when no_data_found then
      p_errmsg := '无记录';
      p_result := -30;
      return;
  end;
  if v_temp_number = 0 then
    p_errmsg := '无记录';
    p_result := -30;
    return;
  end if;

  begin
    select count(*)
      into v_temp_number
      from ic_in_store_detail
     where bill_no = p_bill_no;
  exception
    when no_data_found then
      p_errmsg := '无明细记录';
      p_result := -2;
      bill_no  := p_bill_no;
      return;
  end;
  if v_temp_number = 0 then
    p_errmsg := '无明细记录';
    p_result := -2;
    bill_no  := p_bill_no;
    return;
  end if;
  select related_bill_no
    into v_related_bill_no
    from ic_in_store_bill
   where bill_no = p_bill_no;
  -----------------------------------------------------------------------------------------------
  begin

    --更改入库单
    begin
      update ic_in_store_bill
         set record_flag = '0'
       where bill_no = p_bill_no;
      ----------- 判断入库数量是否超过区剩余数量------------------------------------------------------------------------------------------------
      insert into t#ic_area_code
        select storage_id, area_id, sum(in_num)
          from ic_in_store_detail
         where bill_no = p_bill_no
         group by storage_id, area_id;
    exception
      when others then
        rollback;
        p_errmsg := 'error1....';
        p_result := -1;
        bill_no  := p_bill_no;
        return;
    end;

    begin
      select count(*)
        into v_temp_number
        from t#ic_area_code a, ic_cod_area b
       where a.storage_id = b.storage_id
         and a.area_id = b.area_id
         and b.real_num + a.card_num > b.upper_num;
    exception
      when no_data_found then
        p_errmsg := '入库数量超过区剩余数量';
        p_result := -3;
        bill_no  := p_bill_no;
        return;
    end;

    DBMS_OUTPUT.PUT_LINE('p_bill_no=' || p_bill_no);
    begin
      delete t#ic_area_code;
      --------------------缓存入库数据----------------
      insert into t#ic_store_detail
        select water_no,
               bill_no,
               reason_id,
               storage_id,
               area_id,
               ic_main_type,
               ic_sub_type,
               in_num,
               detail_place,
               start_box_id,
               end_box_id,
               start_logical_id,
               end_logical_id,
               valid_date,
               card_money,
               line_id,
               station_id,
               exit_line_id,
               exit_station_id,
               model,
               use_flag
          from ic_in_store_detail
         where bill_no = p_bill_no;
    exception
      when others then
        rollback;
        p_errmsg := 'error2....';
        p_result := -1;
        bill_no  := p_bill_no;
        return;
    end;
    ------------------------------------------------------------------------
    -----------赋值区或编码区处理(新票入库)开始-----------------
    begin
      select count(*)
        into v_temp_number
        from t#ic_store_detail
       where substr(p_bill_no, 1, 2) = 'XR'
         and area_id = '03';
    exception
      when no_data_found then
        p_errmsg := 'error3..';
        p_result := -1;
        bill_no  := p_bill_no;
        return;
    end;

    DBMS_OUTPUT.PUT_LINE('v_temp_number=' || v_temp_number);

    if v_temp_number > 0 then
      -----------------------------------------------------------新票入库赋值区开始------------------------------------------------------------------------
      begin
        --新票入库赋值区
        insert into t#ic_box
          select storage_id,
                 area_id,
                 ic_main_type,
                 ic_sub_type,
                 card_money,
                 start_box_id,
                 sum(in_num),
                 null
            from t#ic_store_detail
           where area_id = '03' --起始盒号与结束盒号都相等
           group by storage_id,
                    area_id,
                    ic_main_type,
                    ic_sub_type,
                    card_money,
                    start_box_id;
      exception
        when others then
          rollback;
          p_errmsg := 'error4....';
          p_result := -1;
          bill_no  := p_bill_no;
          return;
      end;

      select min(box_id), max(box_id)
        into v_start_box, v_end_box
        from t#ic_box;
      select v_start_box into v_box_id from dual;

      begin
        while v_flag is null and v_box_id <= v_end_box loop
          --每盒处理开始
          select storage_id,
                 area_id,
                 ic_main_type,
                 ic_sub_type,
                 card_money,
                 in_num
            into v_storage_id,
                 v_area_id,
                 v_ic_main_type,
                 v_ic_sub_type,
                 v_pre_money,
                 v_box_card_num
            from t#ic_box
           where box_id = v_box_id;

          begin
            select count(*)
              into v_temp_number
              from ic_cod_chest
             where storage_id = v_storage_id
               and area_id = v_area_id
               and ic_main_type = v_ic_main_type
               and ic_sub_type = v_ic_sub_type
               and card_money = v_pre_money
               and full_flag != '1';
          exception
            when no_data_found then
              p_errmsg := '没有可放的柜';
              p_result := -6;
              bill_no  := p_bill_no;
              --rollback;
              return;
          end;

          select line_id,
                 station_id,
                 exit_line_id,
                 exit_station_id,
                 model,
                 valid_date
            into v_line_id,
                 v_station_id,
                 v_exit_line_id,
                 v_exit_station_id,
                 v_model,
                 v_valid_date1
            from t#ic_store_detail
           where v_box_id between start_box_id and end_box_id
             and rownum = '1';

          -----车站线路值处理
          if v_line_id is null then
            select ' ' into v_line_id from dual;
          end if;
          if v_station_id is null then
            select ' ' into v_station_id from dual;
          end if;
          if v_exit_line_id is null then
            select ' ' into v_exit_line_id from dual;
          end if;
          if v_exit_station_id is null then
            select ' ' into v_exit_station_id from dual;
          end if;
          if v_model is null then
            select ' ' into v_model from dual;
          end if;
          -----有效期值处理
          --为保持与生产入库一致，仅单程票赋值区写有效期，其余写空值

          if v_valid_date1 is null then
            select ' ' into v_valid_date from dual;
          else
            --增加乘次票40赋值区需写入有效期
            if (v_ic_main_type = '12' and v_area_id = '03') or
               (v_ic_main_type = '40' and v_area_id = '03') then
              select to_char(v_valid_date1, 'yyyy') || '-' ||
                     to_char(v_valid_date1, 'mm') || '-' ||
                     to_char(v_valid_date1, 'dd')
                into v_valid_date
                from dual;
            else
              select ' ' into v_valid_date from dual;
            end if;
          end if;

          --DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');

          begin
            select count(*)
              into v_temp_number4
              from ic_cod_base a, ic_cod_storey b, ic_cod_chest c
             where a.storage_id = b.storage_id
               and a.area_id = b.area_id
               and a.chest_id = b.chest_id
               and a.storey_id = b.storey_id
               and b.storage_id = c.storage_id
               and b.area_id = c.area_id
               and b.chest_id = c.chest_id
               and c.ic_main_type = v_ic_main_type
               and c.ic_sub_type = v_ic_sub_type
               and card_money = v_pre_money
               and a.storage_id = v_storage_id
               and a.area_id = v_area_id
               and a.real_num < a.max_box_num;
            if v_temp_number4 = 0 then
              p_errmsg := '没有可放的托';
              p_result := -4;
              bill_no  := p_bill_no;
              rollback;
              return;
            end if;
          exception
            when no_data_found then
              p_errmsg := '没有可放的托';
              p_result := -4;
              bill_no  := p_bill_no;
              rollback;
              return;
          end;

          ----------------------------------------------- 查找托开始------------------------------------------
          begin
            select count(*)
              into v_temp_number5
              from ic_in_access_place
             where storage_id = v_storage_id
               and area_id = v_area_id
               and ic_main_type = v_ic_main_type
               and ic_sub_type = v_ic_sub_type
               and card_money = v_pre_money;
          exception
            when others then
              rollback;
              p_errmsg := 'error5....';
              p_result := -1;
              bill_no  := p_bill_no;
              return;
          end;
          --DBMS_OUTPUT.PUT_LINE('v_temp_number5='||v_temp_number5);
          ----------------------------------------------------------------------------

          if v_temp_number5 = 0 then
            --没有当前托，增加

            ------------------------------------增加当前托开始-------------------------------------------------------------------------
            select ltrim(rtrim(min(a.storage_id || a.area_id || a.chest_id ||
                                   a.storey_id || a.base_id)))
              into v_put_place
              from ic_cod_base a, ic_cod_storey b, ic_cod_chest c
             where a.storage_id = b.storage_id
               and a.area_id = b.area_id
               and a.chest_id = b.chest_id
               and a.storey_id = b.storey_id
               and b.storage_id = c.storage_id
               and b.area_id = c.area_id
               and b.chest_id = c.chest_id
               and c.ic_main_type = v_ic_main_type
               and c.ic_sub_type = v_ic_sub_type
               and card_money = v_pre_money
               and a.storage_id = v_storage_id
               and a.area_id = v_area_id
               and a.real_num < a.max_box_num;

            begin
              insert into ic_in_access_place
                (storage_id,
                 area_id,
                 ic_main_type,
                 ic_sub_type,
                 put_place,
                 get_place,
                 card_money)
              values
                (v_storage_id,
                 v_area_id,
                 v_ic_main_type,
                 v_ic_sub_type,
                 v_put_place,
                 v_get_place,
                 v_pre_money);

            exception
              when others then
                rollback;
                p_errmsg := 'error6....';
                p_result := -1;
                bill_no  := p_bill_no;
                return;
            end;
            ------------------------------增加当前托结束-----------------
          else
            --有当前托，查询是否已满
            begin
              begin
                select count(*)
                  into v_temp_number2
                  from ic_in_access_place a, ic_cod_base b --当前托已满
                 where a.storage_id = v_storage_id
                   and a.area_id = v_area_id
                   and a.ic_main_type = v_ic_main_type
                   and a.ic_sub_type = v_ic_sub_type
                   and a.card_money = v_pre_money
                   and b.storage_id = v_storage_id
                   and b.area_id = v_area_id
                   and b.real_num < b.max_box_num
                   and substr(a.put_place, 7, 3) = b.chest_id
                   and substr(a.put_place, 10, 2) = b.storey_id
                   and substr(a.put_place, 12, 2) = b.base_id;
              exception
                when others then
                  rollback;
                  p_errmsg := 'error7....';
                  p_result := -1;
                  bill_no  := p_bill_no;
                  return;
              end;
              ------------------------------寻找下一托开始----------------------------------------
              --找当前托的下一托
              if v_temp_number2 = 0 then

                begin
                  select count(*)
                    into v_temp_number3
                    from ic_cod_base        a,
                         ic_cod_storey      b,
                         ic_cod_chest       c,
                         ic_in_access_place d
                   where a.storage_id = b.storage_id
                     and a.area_id = b.area_id
                     and a.chest_id = b.chest_id
                     and a.storey_id = b.storey_id
                     and b.storage_id = c.storage_id
                     and b.area_id = c.area_id
                     and b.chest_id = c.chest_id
                     and c.ic_main_type = v_ic_main_type
                     and c.ic_sub_type = v_ic_sub_type
                     and c.card_money = v_pre_money
                     and a.storage_id = v_storage_id
                     and a.area_id = v_area_id
                     and a.real_num < a.max_box_num
                     and d.storage_id = v_storage_id
                     and d.area_id = v_area_id
                     and d.ic_main_type = v_ic_main_type
                     and d.ic_sub_type = v_ic_sub_type
                     and d.card_money = v_pre_money
                     and to_number(a.chest_id || a.storey_id || a.base_id) >
                         to_number(substr(d.put_place, 7, 3) ||
                                   substr(d.put_place, 10, 2) ||
                                   substr(d.put_place, 12, 2));
                exception
                  when others then
                    rollback;
                    p_errmsg := 'error8....';
                    p_result := -1;
                    bill_no  := p_bill_no;
                    return;
                end;
                if v_temp_number3 > 0 then
                  select v_storage_id || v_area_id ||
                         min(a.chest_id || a.storey_id || a.base_id)
                    into v_put_place
                    from ic_cod_base        a,
                         ic_cod_storey      b,
                         ic_cod_chest       c,
                         ic_in_access_place d
                   where a.storage_id = b.storage_id
                     and a.area_id = b.area_id
                     and a.chest_id = b.chest_id
                     and a.storey_id = b.storey_id
                     and b.storage_id = c.storage_id
                     and b.area_id = c.area_id
                     and b.chest_id = c.chest_id
                     and c.ic_main_type = v_ic_main_type
                     and c.ic_sub_type = v_ic_sub_type
                     and c.card_money = v_pre_money
                     and a.storage_id = v_storage_id
                     and a.area_id = v_area_id
                     and a.real_num < a.max_box_num
                     and d.storage_id = v_storage_id
                     and d.area_id = v_area_id
                     and d.ic_main_type = v_ic_main_type
                     and d.ic_sub_type = v_ic_sub_type
                     and d.card_money = v_pre_money
                     and to_number(a.chest_id || a.storey_id || a.base_id) >
                         to_number(substr(d.put_place, 7, 3) ||
                                   substr(d.put_place, 10, 2) ||
                                   substr(d.put_place, 12, 2));
                else
                  --如找不到当前托的下一托，表示托已到最大，需从头开始
                  begin
                    select ltrim(rtrim(min(a.storage_id || a.area_id ||
                                           a.chest_id + a.storey_id ||
                                           a.base_id)))
                      into v_put_place
                      from ic_cod_base a, ic_cod_storey b, ic_cod_chest c
                     where a.storage_id = b.storage_id
                       and a.area_id = b.area_id
                       and a.chest_id = b.chest_id
                       and a.storey_id = b.storey_id
                       and b.storage_id = c.storage_id
                       and b.area_id = c.area_id
                       and b.chest_id = c.chest_id
                       and c.ic_main_type = v_ic_main_type
                       and c.ic_sub_type = v_ic_sub_type
                       and card_money = v_pre_money
                       and a.storage_id = v_storage_id
                       and a.area_id = v_area_id
                       and a.real_num < a.max_box_num;
                  end;

                end if; --寻找下一托，结束
                begin
                  update ic_in_access_place
                     set put_place = v_put_place
                   where storage_id = v_storage_id
                     and area_id = v_area_id
                     and ic_main_type = v_ic_main_type
                     and ic_sub_type = v_ic_sub_type
                     and card_money = v_pre_money;
                exception
                  when others then
                    rollback;
                    p_errmsg := 'error9....';
                    p_result := -1;
                    bill_no  := p_bill_no;
                    return;
                end;

              end if;
            end;
            -----------------------------------------------寻找下一托，结束----------------------

          end if;

          ----------------------------------------------- 查找托结束-------------------------------------------
          ----------------------------------获取柜、层、托编号开始------------------------------------------------

          begin
            select put_place, get_place
              into v_put_place, v_get_place
              from ic_in_access_place
             where storage_id = v_storage_id
               and area_id = v_area_id
               and ic_main_type = v_ic_main_type
               and ic_sub_type = v_ic_sub_type
               and card_money = v_pre_money;
          exception
            when no_data_found then
              p_errmsg := 'error90000000000000000000....';
              p_result := -1;
              bill_no  := p_bill_no;
              return;
          end;
          select substr(v_put_place, 7, 3) into v_chest_id from dual;
          select substr(v_put_place, 10, 2) into v_storey_id from dual;
          select substr(v_put_place, 12, 2) into v_base_id from dual;

          --DBMS_OUTPUT.PUT_LINE('v_end_box='||v_end_box);

          begin
            select count(*)
              into v_temp_number2
              from ic_cod_chest
             where storage_id = v_storage_id
               and area_id = v_area_id
               and chest_id = v_chest_id
               and ic_main_type = v_ic_main_type
               and ic_sub_type = v_ic_sub_type
               and card_money = v_pre_money
               and full_flag != '1';
          exception
            when no_data_found then
              p_errmsg := '当前位置的柜与柜设置不符';
              p_result := -20;
              bill_no  := p_bill_no;
              return;
          end;
          if v_temp_number2 = 0 then
            p_errmsg := '当前位置的柜与柜设置不符';
            p_result := -20;
            bill_no  := p_bill_no;
            return;
          end if;
          -----------------------------------获取柜、层、托编号结束-----------------------------------------------
          -----------------------------------更新盒信息、托、层、柜、总票区、卡票区开始---------------------------
          --增加盒资料表
          select case
                   when v_ic_main_type = '6' then
                    '04'
                   when v_ic_main_type = '34' then
                    '03'
                   when v_ic_main_type = '12' then
                    '01'
                   when v_ic_main_type = '1' then
                    '02'

                   --when v_ic_main_type = '9' then 20170714 modify by mqf 屏蔽原有的'9'
                   -- '03'
                   when v_ic_main_type = '2' then
                    '05'
                   when v_ic_main_type = '40' then
                    '06'
                   when v_ic_main_type = '7' then
                    '07'
                   when v_ic_main_type = '8' then
                    '08'
           when v_ic_main_type = '9' then
                    '09'
                 end
            into v_box_type
            from dual;

          begin
            insert into ic_cod_box_info
              (box_id,
               box_type,
               ic_main_type,
               ic_sub_type,
               card_num,
               line_id,
               station_id,
               exit_line_id,
               exit_station_id,
               model,
               vaild_date,
               card_money,
               flag)
            values
              (v_box_id,
               v_box_type,
               v_ic_main_type,
               v_ic_sub_type,
               v_box_card_num,
               v_line_id,
               v_station_id,
               v_exit_line_id,
               v_exit_station_id,
               v_model,
               v_valid_date1,
               v_pre_money,
               '0');

            --库存信息表
            insert into ic_sts_storage
              (storage_id,
               area_id,
               chest_id,
               storey_id,
               base_id,
               box_id,
               product_date,
               card_num)
            values
              (v_storage_id,
               v_area_id,
               v_chest_id,
               v_storey_id,
               v_base_id,
               v_box_id,
               sysdate,
               v_box_card_num);

            --修改托代码表
            update ic_cod_base
               set real_num = real_num + 1
             where storage_id = v_storage_id
               and area_id = v_area_id
               and chest_id = v_chest_id
               and storey_id = v_storey_id
               and base_id = v_base_id;

          exception
            when others then
              rollback;
              p_errmsg := 'error10....';
              p_result := -1;
              bill_no  := p_bill_no;
              return;
          end;

          --修改层代码表,是否已满
          begin
            select count(*)
              into v_temp_number2
              from ic_cod_base
             where storage_id = v_storage_id
               and area_id = v_area_id
               and chest_id = v_chest_id
               and storey_id = v_storey_id
               and max_box_num > real_num;
            if v_temp_number2 = 0 then
              begin
                update ic_cod_storey
                   set full_flag = '1'
                 where storage_id = v_storage_id
                   and area_id = v_area_id
                   and chest_id = v_chest_id
                   and storey_id = v_storey_id;
              exception
                when no_data_found then
                  p_errmsg := '层代码表,已满...';
                  p_result := -1;
                  bill_no  := p_bill_no;
                  return;
              end;
            end if;
          exception
            when no_data_found then
              p_errmsg := '柜代码表,已满....';
              p_result := -1;
              bill_no  := p_bill_no;
              return;
          end;

          --修改柜代码表,是否已满
          begin
            select count(*)
              into v_temp_number2
              from ic_cod_storey
             where storage_id = v_storage_id
               and area_id = v_area_id
               and chest_id = v_chest_id
               and full_flag != '1';
            if v_temp_number2 = 0 then
              begin
                update ic_cod_chest
                   set full_flag = '1'
                 where storage_id = v_storage_id
                   and area_id = v_area_id
                   and chest_id = v_chest_id;
              exception
                when no_data_found then
                  p_errmsg := '柜代码表,已满......';
                  p_result := -1;
                  bill_no  := p_bill_no;
                  return;
              end;
            end if;
          exception
            when no_data_found then
              p_errmsg := '柜代码表,已满....';
              p_result := -1;
              bill_no  := p_bill_no;
              return;
          end;

          --修改区代码表,增加赋值区实际数量
          begin
            select count(*)
              into v_temp_number2
              from ic_sts_area_card
             where storage_id = v_storage_id
               and area_id = v_area_id
               and ltrim(rtrim(ic_main_type)) = v_ic_main_type
               and ltrim(rtrim(ic_sub_type)) = v_ic_sub_type
               and card_money = v_pre_money
               and nvl(trim(valid_date), ' ') = nvl(trim(v_valid_date), ' ')
               and nvl(line_id, ' ') = nvl(v_line_id, ' ')
               and nvl(station_id, '') = nvl(v_station_id, ' ')
               and nvl(exit_line_id, ' ') = nvl(v_exit_line_id, ' ')
               and nvl(exit_station_id, ' ') = nvl(v_exit_station_id, ' ')
               and nvl(model, ' ') = nvl(v_model, ' ');
          exception
            when no_data_found then
              p_errmsg := 'error11...';
              p_result := -1;
              bill_no  := p_bill_no;
              return;
          end;

          if v_temp_number2 > 0 then
            begin
              update ic_sts_area_card
                 set card_num = card_num + v_box_card_num
               where storage_id = v_storage_id
                 and area_id = v_area_id
                 and ltrim(rtrim(ic_main_type)) = v_ic_main_type
                 and ltrim(rtrim(ic_sub_type)) = v_ic_sub_type
                 and card_money = v_pre_money
                 and nvl(valid_date, ' ') = nvl(v_valid_date, ' ')
                 and nvl(line_id, ' ') = nvl(v_line_id, ' ')
                 and nvl(station_id, '') = nvl(v_station_id, ' ')
                 and nvl(exit_line_id, ' ') = nvl(v_exit_line_id, ' ')
                 and nvl(exit_station_id, '') = nvl(v_exit_station_id, ' ')
                 and nvl(model, '') = nvl(v_model, ' ');
            exception
              when others then
                p_errmsg := 'error12...';
                p_result := -1;
                bill_no  := p_bill_no;
                return;
            end;
          else

            begin
              insert into ic_sts_area_card
                (water_no,
                 storage_id,
                 area_id,
                 ic_main_type,
                 ic_sub_type,
                 card_num,
                 card_money,
                 valid_date,
                 line_id,
                 station_id,
                 exit_line_id,
                 exit_station_id,
                 model,
                 flag)
              values
                (SEQ_IC_TK_IN_XR_CARD_AREA.nextval,
                 v_storage_id,
                 v_area_id,
                 v_ic_main_type,
                 v_ic_sub_type,
                 v_box_card_num,
                 v_pre_money,
                 v_valid_date,
                 v_line_id,
                 v_station_id,
                 v_exit_line_id,
                 v_exit_station_id,
                 v_model,
                 '0');
            exception
              when others then
                p_errmsg := 'error13...';
                p_result := -1;
                bill_no  := p_bill_no;
                return;
            end;
          end if;

          begin
            update ic_cod_area
               set real_num = nvl(real_num, 0) + v_box_card_num
             where storage_id = v_storage_id
               and area_id = v_area_id;
            -----------------------------更新盒信息、托、层、柜、总票区、卡票区结束---------------------
            --更改详细位置
            update t#ic_box
               set detail_place = substr(v_put_place, 7, 3) || '-' ||
                                  substr(v_put_place, 10, 2) || '-' ||
                                  substr(v_put_place, 12, 2)
             where box_id = v_box_id;
            DBMS_OUTPUT.PUT_LINE('v_box_id====' || v_box_id);
            DBMS_OUTPUT.PUT_LINE('v_end_box====' || v_end_box);
            DBMS_OUTPUT.PUT_LINE('v_put_place====' || v_put_place);

          exception
            when others then
              p_errmsg := 'error14...';
              p_result := -1;
              bill_no  := p_bill_no;
              return;
          end;
          if v_box_id != v_end_box then
            select min(box_id)
              into v_box_id
              from t#ic_box
             where box_id > v_box_id;
          else
            select 'null' into v_flag from dual;
          end if;
        end loop; --每盒处理，结束
      end;
      insert into ic_cod_box_detail
        (box_id, start_logical_id, end_logical_id)
        select start_box_id, start_logical_id, end_logical_id
          from t#ic_store_detail
         where start_box_id is not null
           and start_logical_id is not null
           and end_logical_id is not null
           and start_box_id != ' '
           and start_logical_id != ' '
           and end_logical_id != ' ';
    else
      --------赋值区或编码区处理(调帐入库、新票入库)结束---------------------------------

      --盒明细表
      begin

        -------------------------除赋值区或编码区处理(调帐入库、新票入库)外其他更新总票区、卡票区开始------------------------
        --其他区增加数量
        insert into t#ic_tmp_card_code
          (storage_id,
           area_id,
           ic_main_type,
           ic_sub_type,
           card_money,
           card_num,
           valid_date,
           line_id,
           station_id,
           exit_line_id,
           exit_station_id,
           model,
           flag)
          select b.storage_id,
                 b.area_id,
                 ltrim(rtrim(b.ic_main_type)),
                 ltrim(rtrim(b.ic_sub_type)),
                 b.card_money,
                 sum(b.in_num),
                 ' ',
                 ' ',
                 ' ',
                 ' ',
                 ' ',
                 '000',
                 '0'
            from t#ic_store_detail b
           where substr(p_bill_no, 1, 2) || area_id ||
                 ltrim(rtrim(ic_main_type)) != 'TR021'
             and substr(p_bill_no, 1, 2) || area_id != 'TR03'
             and substr(p_bill_no, 1, 2) || area_id != 'XR03'
           group by b.storage_id,
                    b.area_id,
                    ltrim(rtrim(b.ic_main_type)),
                    ltrim(rtrim(b.ic_sub_type)),
                    b.card_money;

        update t#ic_tmp_card_code
           set card_money = 0
         where
     --ltrim(rtrim(ic_main_type)) != '9' and 20170714 modify by mqf 屏蔽原有的'9'
            ltrim(rtrim(ic_main_type)) != '6';

        insert into t#ic_area_card_code
          (storage_id,
           area_id,
           ic_main_type,
           ic_sub_type,
           card_money,
           card_num,
           valid_date,
           line_id,
           station_id,
           exit_line_id,
           exit_station_id,
           model,
           flag)
          select storage_id,
                 area_id,
                 ic_main_type,
                 ic_sub_type,
                 card_money,
                 sum(card_num),
                 valid_date,
                 line_id,
                 station_id,
                 exit_line_id,
                 exit_station_id,
                 model,
                 flag
            from t#ic_tmp_card_code
           group by storage_id,
                    area_id,
                    ic_main_type,
                    ic_sub_type,
                    card_money,
                    valid_date,
                    line_id,
                    station_id,
                    exit_line_id,
                    exit_station_id,
                    model,
                    flag;

        update ic_sts_area_card b
           set b.card_num = b.card_num +
                            (select a.card_num
                               from t#ic_area_card_code a
                              where a.storage_id = b.storage_id
                                and a.area_id = b.area_id
                                and ltrim(rtrim(a.ic_main_type)) =
                                    ltrim(rtrim(b.ic_main_type))
                                and ltrim(rtrim(a.ic_sub_type)) =
                                    ltrim(rtrim(b.ic_sub_type))
                                and a.card_money = b.card_money
                                and NVL(a.valid_date, ' ') =
                                    NVL(b.valid_date, ' ')
                                and NVL(a.line_id, ' ') = NVL(b.line_id, ' ')
                                and NVL(a.station_id, ' ') =
                                    NVL(b.station_id, ' ')
                                and NVL(a.exit_line_id, ' ') =
                                    NVL(b.exit_line_id, ' ')
                                and NVL(a.exit_station_id, ' ') =
                                    NVL(b.exit_station_id, ' ')
                                and NVL(a.model, ' ') = NVL(b.model, ' '))
         where exists
         (select 1
                  from t#ic_area_card_code a
                 where a.storage_id = b.storage_id
                   and a.area_id = b.area_id
                   and ltrim(rtrim(a.ic_main_type)) =
                       ltrim(rtrim(b.ic_main_type))
                   and ltrim(rtrim(a.ic_sub_type)) =
                       ltrim(rtrim(b.ic_sub_type))
                   and a.card_money = b.card_money
                   and NVL(trim(a.valid_date), ' ') = NVL(trim(b.valid_date), ' ')
                   and NVL(a.line_id, ' ') = NVL(b.line_id, ' ')
                   and NVL(a.station_id, ' ') = NVL(b.station_id, ' ')
                   and NVL(a.exit_line_id, ' ') = NVL(b.exit_line_id, ' ')
                   and NVL(a.exit_station_id, ' ') =
                       NVL(b.exit_station_id, ' ')
                   and NVL(a.model, ' ') = NVL(b.model, ' '));

        insert into ic_sts_area_card
          (WATER_NO,
           storage_id,
           area_id,
           ic_main_type,
           ic_sub_type,
           card_num,
           card_money,
           valid_date,
           line_id,
           station_id,
           exit_line_id,
           exit_station_id,
           model,
           flag)
          select SEQ_IC_TK_IN_XR_CARD_AREA.nextval,
                 storage_id,
                 area_id,
                 ltrim(rtrim(ic_main_type)),
                 ltrim(rtrim(ic_sub_type)),
                 card_num,
                 card_money,
                 valid_date,
                 line_id,
                 station_id,
                 exit_line_id,
                 exit_station_id,
                 model,
                 flag
            from t#ic_area_card_code
           where storage_id || area_id || ltrim(rtrim(ic_main_type)) ||
                 ltrim(rtrim(ic_sub_type)) || to_char(card_money) ||
                 NVL(trim(valid_date), ' ') || line_id || station_id ||
                 exit_line_id || exit_station_id || model not in
                 (select storage_id || area_id || ltrim(rtrim(ic_main_type)) ||
                         ltrim(rtrim(ic_sub_type)) || to_char(card_money) ||
                         NVL(trim(valid_date), ' ') || NVL(line_id, ' ') ||
                         NVL(station_id, ' ') || NVL(exit_line_id, ' ') ||
                         NVL(exit_station_id, ' ') || NVL(model, ' ')
                    from ic_sts_area_card);

        insert into t#ic_area_code
          (storage_id, area_id, card_num)
          select storage_id, area_id, sum(card_num)
            from t#ic_area_card_code
           group by storage_id, area_id;

        update ic_cod_area a
           set a.real_num =
               (select a.real_num + b.card_num
                  from ic_cod_area a, t#ic_area_code b
                 where a.area_id = b.area_id
                   and a.storage_id = b.storage_id)
         where a.AREA_ID = (select area_id from t#ic_area_code)
           and a.storage_id = (select storage_id from t#ic_area_code);

      exception
        when others then
          p_errmsg := 'error15...';
          p_result := -1;
          bill_no  := p_bill_no;
          return;
      end;

      -------------------------------------------更新总票区、卡票区结束--------------------------------
    end if; --赋值区或编码区
  end;

  -------------------------------------------获取正式单号开始--------------------------------
  begin
    select bill_year into v_bill_year from ic_prm_bill_current_date;
  exception
    when no_data_found then
      return;
  end;

  begin
    if v_bill_year = to_char(sysdate, 'yyyy') then
      select substr(p_bill_no, 1, 2) || v_bill_year ||
             lpad(current_int_no + 1, 6, '0')
        into v_bill_no_audit
        from ic_prm_bill_current_flow
       where bill_main_type_id = 'IL';
    else
      select substr(p_bill_no, 1, 2) || v_bill_year || '000001'
        into v_bill_no_audit
        from dual;
      update ic_prm_bill_current_date
         set bill_year = to_number(to_char(sysdate, 'yyyy'));
    end if;

    update ic_prm_bill_current_flow
       set current_no     = v_bill_no_audit,
           current_int_no = to_number(substr(v_bill_no_audit, 7, 6))
     where bill_main_type_id = 'IL';
  exception
    when others then
      rollback;
      p_result := -1;
      p_errmsg := 'error16 ...';
      bill_no  := p_bill_no;
      return;
  end;
  ---------------------------------------获取正式单号结束-------------------------------------

  ---------------------------------------------更新入库单及明细开始----------------------------

  begin
    --更改入库单
    --DBMS_OUTPUT.PUT_LINE('v_bill_no_audit='||v_bill_no_audit);
    --DBMS_OUTPUT.PUT_LINE('sysdate='||sysdate);
    --DBMS_OUTPUT.PUT_LINE('p_operator_id='||p_operator_id);
    --DBMS_OUTPUT.PUT_LINE('p_bill_no='||p_bill_no);

    update ic_in_store_bill
       set bill_no       = v_bill_no_audit,
           verify_date   = sysdate,
           verify_person = p_operator_id
     where bill_no = p_bill_no;
  exception
    when others then
      rollback;
      p_result := -1;
      p_errmsg := 'error17 ...';
      bill_no  := p_bill_no;
      return;
  end;
  begin
    --更改入库明细
    update ic_in_store_detail a
       set bill_no = v_bill_no_audit
     where a.bill_no = p_bill_no;

    update ic_in_store_detail a
       set detail_place =
           (select b.detail_place
              from t#ic_box b
             where a.bill_no = v_bill_no_audit
               and a.start_box_id = b.box_id)
    --where start_box_id=(select box_id from t#ic_box b);
     where exists (select 1
              from t#ic_box b
             where a.bill_no = v_bill_no_audit
               and a.start_box_id = b.box_id);

  exception
    when others then
      rollback;
      p_result := -1;
      p_errmsg := 'error18 ...';
      bill_no  := p_bill_no;
      return;
  end;

  --------------------------------------更新入库单及明细结束--------------------------------

  -------------------------------------------------新票入库卡号段表有的，删除---------------
  begin
    select count(*)
      into v_temp_number3
      from ic_in_add_new_card
     where in_bill_no = p_bill_no;
  exception
    when others then
      return;
  end;

  if substr(p_bill_no, 1, 2) = 'XR' and v_temp_number3 > 0 then
    begin
      delete ic_in_add_new_card where in_bill_no = p_bill_no;
    exception
      when others then
        rollback;
        p_result := -1;
        p_errmsg := 'error18 ...';
        bill_no  := p_bill_no;
        return;
    end;
  end if;

  --删除临时表数据
  begin
    delete from t#ic_store_detail;
    delete from t#ic_tmp_card_code;
    delete from t#ic_area_code;
    delete from t#ic_box;
    delete From t#ic_area_card_code;
  exception
    when others then
      rollback;
      p_result := -1;
      p_errmsg := 'error19 ...';
      bill_no  := p_bill_no;
      return;
  end;

  if v_related_bill_no is null then
    select ' ' into v_related_bill_no from dual;
  end if;

  if p_bill_no is not null and p_bill_no != ' ' then
    p_memo   := '单据' || v_bill_no_audit || '入库成功, 用时 ' ||
                ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60) || ' 秒';
    bill_no  := v_bill_no_audit;
    p_result := 1;

  end if;

END;
/
grant execute on ACC_TK.UP_TK_IN_AUDIT_XR to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_CHECK
prompt =================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_CHECK" (p_bill_no IN VARCHAR2,p_type IN VARCHAR2, p_result OUT INTEGER)

AS
v_temp_bill_no VARCHAR2(12);
v_temp_result  INTEGER;
BEGIN

/*
公共判断单据号为空和存在的函数/设置流水号 ic_prm_bill_curr_flow_tmp
*/

  IF (p_type='SR' or p_type='TR' or p_type='GH' or p_type='JR' or p_type='CR' or p_type='QR') AND (p_bill_no='' or p_bill_no IS NULL)  THEN
    p_result :=  -17;    --单据号为空
  END IF;

begin
  select a.RELATED_BILL_NO into v_temp_bill_no from ACC_TK.ic_in_store_bill a where  a.RELATED_BILL_NO = p_bill_no and a.RECORD_FLAG != '1';


  EXCEPTION when NO_DATA_FOUND THEN
  begin
    p_result := 1;
  end;


end;
begin
  IF (v_temp_bill_no IS NOT NULL AND v_temp_bill_no !='') THEN
    p_result := -20;
  END if;
EXCEPTION when NO_DATA_FOUND THEN
  begin
    p_result := -20;
  end;
end;

  begin
    select p_type||'T'||LPAD (current_int_no+1,'9','0') into v_temp_bill_no from ic_prm_bill_curr_flow_tmp where bill_main_type_id=p_type;
    update  ic_prm_bill_curr_flow_tmp set current_no=v_temp_bill_no, current_int_no=substr(v_temp_bill_no,4,9) where  bill_main_type_id=p_type;

    EXCEPTION when OTHERS THEN
    begin
      p_result := -1;
    end;
  END;

END;
/
grant execute on ACC_TK.UP_TK_IN_CHECK to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_GH_TEST
prompt ===================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_GH_TEST" (
p_related_bill_no IN VARCHAR2,
p_type IN VARCHAR2,
p_form_maker IN VARCHAR2,
p_hand_man IN VARCHAR2,
p_receive_man IN VARCHAR2,
p_return_man IN VARCHAR2,
p_remark IN VARCHAR2,
bill_no out varchar2,
p_errmsg out varchar2,
p_result out integer,
--out_msg out varchar2,
p_memo out varchar2)

------------------------------------------------------
--功能：借票归还增加
--作者：liangminglong

------------------------------------------------------

AS
v_bill_no           char(12);
v_reason_id         char(2);
v_bill_year         integer;
v_card_type         varchar(4);
v_ic_main_type       varchar(2);
v_ic_sub_type       varchar(2);
v_out_bill_no       char(12);
v_es_useless_num     integer;
v_man_useless_num    integer;
v_lost_num           integer;
v_in_num             integer;    --已归还数量
v_lend_num           integer;    --借出数量
v_draw_quantity     integer;     --有效票数量
v_balance_num       integer;    --实际结余与系统结余差额
v_balance_box_num   integer;    --实际结余盒数
v_storage_id         char(4);
v_area_id           char(2);
v_start_box_id       char(14);
v_end_box_id         char(14);
v_start_box_id1     char(14);
v_end_box_id1       char(14);
v_start_logical_id   char(20);
v_end_logical_id     char(20);
v_start_logical_id1 char(20);
v_mid_logical_id     char(20);
v_tmp_logical_id     char(20);
v_card_money         integer;
v_bill_no_audit     char(12);
v_logi_num           integer;
v_tmp_id            varchar(20);
v_start_out_id       char(20);
v_end_out_id         char(20);
v_mid_out_id         char(20);
v_start_logi_id     varchar(20);
v_last_mid_out_id   varchar(20);
v_start             varchar(20);
v_end               varchar(20);
v_nn                 integer;
v_hz_out_num        integer;
v_hz_in_num          integer;
v_out_in_diff       integer;
v_valid_num         integer;
v_begin_time         date;
v_memo               varchar(100);

v_outBill           varchar(12);
v_water_no           varchar(8);

v_total_num         integer;
v_zone_audit         char(12);  --借票归还审核入库时归还数量为零时入库单号
v_temp_number       integer;
v_temp_number2      integer;
v_temp_number3      integer;
v_temp_number4      integer;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  select sysdate into v_begin_time from dual;



    begin
      select count(*) into v_temp_number from ic_in_store_bill where related_bill_no=p_related_bill_no and record_flag!='1';
      if v_temp_number>0 then
        p_errmsg:='单据已经存在';
        bill_no:=p_related_bill_no;
        p_result:=-15;
        return;
      end if;

    exception when others then
      p_errmsg:='单据已经存在';
      bill_no:=p_related_bill_no;
      p_result:=-15;
      return;
    end;


      begin
         select p_type||'T'||lpad(current_int_no+1,9,'0') into v_bill_no from ic_prm_bill_curr_flow_tmp where bill_main_type_id=p_type;
         update  ic_prm_bill_curr_flow_tmp set current_no=v_bill_no, current_int_no=substr(v_bill_no,4,9) where bill_main_type_id=p_type;
      exception when others then
        p_errmsg:='error1....';
        bill_no:=p_related_bill_no;
        p_result:=-1;
        return;
      end;

--借票归还，开始

      begin
         select count(*) into v_temp_number from ic_out_lend_bill  where record_flag='0' and bill_no=p_related_bill_no;
         select count(*) into v_temp_number2 from ic_out_lend_bill_detail  where  bill_no=p_related_bill_no;
         if v_temp_number=0 and v_temp_number2=0 then
           p_errmsg:='单据不存在或没有明细....';
           bill_no:=p_related_bill_no;
           p_result:=-18;
           return;
         end if;
      exception when no_data_found then
        p_errmsg:='单据不存在或没有明细....';
        bill_no:=p_related_bill_no;
        p_result:=-18;
        return;
      end;

       --添加归还单据时不更新归还标志
       --添加归还单据时更新归还标志
      begin
         update ic_out_lend_bill set return_flag='1' where bill_no=p_related_bill_no;
      exception when others then
        p_errmsg:='error2....';
        bill_no:=p_related_bill_no;
        p_result:=-1;
        return;
      end;

      select sum(lend_quantity) into v_lend_num from ic_out_lend_bill_detail where bill_no=p_related_bill_no;


      --没有还过的
      begin
         select count(*) into v_temp_number from  ic_in_return_bill where  lend_bill_no=p_related_bill_no and  record_flag!='1';
      exception when others then
        p_errmsg:='error3....';
        bill_no:=p_related_bill_no;
        p_result:=-1;
        return;
      end;

      if v_temp_number =0 then
         --归还单明细应从出库单出提取，而不应从借票单中提取
        select out_bill_no into v_outBill from ic_out_lend_bill where bill_no=p_related_bill_no;

        --20120426 luojun 添加多日票模式三个字段
        begin
          insert into  ic_in_return_bill_detail (water_no,bill_no,storage_id ,area_id ,ic_main_type ,ic_sub_type,return_quantity ,not_quantity,lost_quantity,sum_quantity,notback_quantity,card_money ,valid_date,line_id ,station_id  ,
           start_box_id  ,end_box_id,start_logical_id ,end_logical_id,lend_water_no ,box_flag,exit_line_id,exit_station_id,model,delete_flag )
           select seq_ic_in_return_bill_detail.nextval, v_bill_no ,A.storage_id ,'05' ,A.ic_main_type ,A.ic_sub_type,
                 case
                  when B.section_num is null then A.out_num
                  else
                    B.section_num
                 end
                ,
                0,0,
                case
                  when B.section_num is null then A.out_num
                  else
                    B.section_num
                 end
                ,
                0,
               nvl(A.card_money,0) ,A.vaild_date,A.line_id ,A.station_id  ,
               ''  ,'',B.start_logical_id ,B.end_logical_id ,
               case
                  when B.section_num is null then A.water_no
                  else
                    B.water_no_pk
                 end,

                 case
                  when B.section_num is null then '0'
                  else
                    '1'
                 end,
                 A.exit_line_id,A.exit_station_id,A.model,'0'
             from ic_out_bill_detail A,ic_out_bill_detail_box B
             where A.bill_no=v_outBill and
                   A.bill_no =B.bill_no(+) and
                   A.water_no=B.water_no(+);
          exception when others then
            p_errmsg:='error4....';
            bill_no:=p_related_bill_no;
            p_result:=-1;
            return;
          end;

      else  --还了一部分的
        select sum(b.return_quantity+b.not_quantity+b.lost_quantity) into v_in_num from ic_in_return_bill a ,ic_in_return_bill_detail b
          where a.lend_bill_no=p_related_bill_no and a.record_flag!='1' and a.bill_no=b.bill_no;
         if  v_lend_num<=v_in_num then
            p_errmsg:='单据已无剩余....';
            bill_no:=p_related_bill_no;
            p_result:=-16;
            return;
         end if;
         select out_bill_no into v_outBill from ic_out_lend_bill where bill_no=p_related_bill_no;

         --归还单明细应从出库单出提取，而不应从借票单中提取
         --更新 ic_return_bill_detail
        BEGIN
             for i in (select a.bill_no a_bill_no, b.return_quantity+b.not_quantity+b.lost_quantity sum_number
                         from ic_in_return_bill a,ic_in_return_bill_detail b where a.bill_no = b.bill_no and a.lend_bill_no =p_related_bill_no) loop
                 update ic_in_return_bill_detail b set b.sum_quantity = i.sum_number where b.bill_no = i.a_bill_no;
             END LOOP;

        END;

         --添加多日票模式三个字段
         begin

      --select seq_ic_in_return_bill_detail.nextval into v_water_no from dual;
         insert into  ic_in_return_bill_detail (water_no,bill_no,storage_id ,area_id ,ic_main_type ,ic_sub_type,return_quantity ,not_quantity,lost_quantity,sum_quantity,notback_quantity,card_money ,valid_date,line_id ,station_id  ,
                                              start_box_id  ,end_box_id,start_logical_id ,end_logical_id,lend_water_no ,box_flag,exit_line_id,exit_station_id,model,delete_flag )
            select seq_ic_in_return_bill_detail.nextval,                v_bill_no,storage_id ,area_id ,ic_main_type ,ic_sub_type,notback_quantity1 ,0,0,notback_quantity2,0,card_money ,valid_date,line_id ,station_id  ,
                    start_box_id  ,end_box_id,start_logical_id ,end_logical_id,lend_water_no ,box_flag,exit_line_id,exit_station_id,model,'0'

              from (select
                v_bill_no,storage_id ,area_id ,ic_main_type ,ic_sub_type,sum(notback_quantity) notback_quantity1,0,0,sum(notback_quantity) notback_quantity2,0,card_money ,valid_date,line_id ,station_id  ,
                    start_box_id  ,end_box_id,start_logical_id ,end_logical_id,lend_water_no ,box_flag,exit_line_id,exit_station_id,model,'0'
                    from ic_in_return_bill_detail b,ic_in_return_bill c
                    where b.bill_no=c.bill_no
                    and b.notback_quantity <> 0
                    and c.lend_bill_no = p_related_bill_no
                    group by storage_id ,area_id ,ic_main_type ,ic_sub_type,card_money ,valid_date,line_id ,station_id  ,
                    start_box_id  ,end_box_id,start_logical_id ,end_logical_id,lend_water_no ,box_flag,exit_line_id,exit_station_id,model);

           --更新 ic_return_bill_detail delete_flag = 1 的 notback_quantity 为 0


        BEGIN
             for i in (select a.bill_no a_bill_no, b.return_quantity+b.not_quantity+b.lost_quantity sum_number
                         from ic_in_return_bill a,ic_in_return_bill_detail b where a.bill_no = b.bill_no and a.lend_bill_no =p_related_bill_no) loop
                 update ic_in_return_bill_detail b set b.sum_quantity=i.sum_number where b.bill_no = i.a_bill_no;
             END LOOP;
        END;
        BEGIN
             for i in (select a.bill_no a_bill_no, b.return_quantity+b.not_quantity+b.lost_quantity sum_number
                         from ic_in_return_bill a,ic_in_return_bill_detail b where a.bill_no = b.bill_no and a.lend_bill_no =p_related_bill_no) loop
                 update ic_in_return_bill_detail b set b.notback_quantity=0 where b.bill_no = i.a_bill_no;
             END LOOP;
        END;

          exception when others then
            p_errmsg:='error5....';
            bill_no:=p_related_bill_no;
            p_result:=-1;
--out_msg       := '错误：' || sqlerrm || ',发生在第[' ||dbms_utility.format_error_backtrace() || ']行';
            return;
          end;
      end if;
      begin
        insert into ic_in_return_bill(bill_no,lend_bill_no ,return_man,receive_man ,bill_date  ,unit_id,record_flag ,remark,delete_flag)
            select v_bill_no,p_related_bill_no,p_return_man,p_receive_man ,sysdate,unit_id,'3',p_remark,'0'
                  from ic_out_lend_bill where bill_no=p_related_bill_no;
      exception when others then
        p_errmsg:='error6....';
        bill_no:=p_related_bill_no;
        p_result:=-1;
        return;
      end;




     p_memo :='单据'||p_related_bill_no||'入库成功, 用时 '||ROUND(TO_NUMBER(sysdate- v_begin_time) * 24 * 60)||' 秒';
     bill_no:=v_bill_no;
     p_result :=0;




END;
/
grant execute on ACC_TK.UP_TK_IN_GH_TEST to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_HR_TEST
prompt ===================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_HR_TEST" (p_related_bill_no IN VARCHAR2,p_type IN VARCHAR2,
p_form_maker IN VARCHAR2,p_hand_man IN VARCHAR2,p_administer IN VARCHAR2,p_accounter IN VARCHAR2,p_remark IN VARCHAR2,
bill_no out varchar2, p_errmsg out varchar2,p_result out integer,p_memo out varchar2)


AS
v_bill_no           char(12);
v_reason_id         char(2);
v_bill_year         integer;
v_card_type         varchar(4);
v_ic_main_type       varchar(2);
v_ic_sub_type       varchar(2);
v_out_bill_no       char(12);
v_es_useless_num     integer;
v_man_useless_num    integer;
v_lost_num           integer;
v_in_num             integer;    --已归还数量
v_lend_num           integer;    --借出数量
v_draw_quantity     integer;     --有效票数量
v_balance_num       integer;    --实际结余与系统结余差额
v_balance_box_num   integer;    --实际结余盒数
v_storage_id         char(4);
v_area_id           char(2);
v_start_box_id       char(14);
v_end_box_id         char(14);
v_start_box_id1     char(14);
v_end_box_id1       char(14);
v_start_logical_id   char(20);
v_end_logical_id     char(20);
v_start_logical_id1 char(20);
v_mid_logical_id     char(20);
v_tmp_logical_id     char(20);
v_card_money         integer;
v_bill_no_audit     char(12);
v_logi_num           integer;
v_tmp_id            varchar(20);
v_start_out_id       char(20);
v_end_out_id         char(20);
v_mid_out_id         char(20);
v_start_logi_id     varchar(20);
v_last_mid_out_id   varchar(20);
v_start             varchar(20);
v_end               varchar(20);
v_nn                 integer;
v_hz_out_num        integer;
v_hz_in_num          integer;
v_out_in_diff       integer;
v_valid_num         integer;
v_begin_time         date;
v_memo               varchar(100);

v_outBill           varchar(12);

v_total_num         integer;
v_zone_audit         char(12);  --借票归还审核入库时归还数量为零时入库单号
v_temp_number       integer;
v_temp_number2      integer;
v_temp_number3      integer;
v_temp_number4      integer;
BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  select sysdate into v_begin_time from dual;



    begin
      select count(*) into v_temp_number from ic_in_store_bill where related_bill_no=p_related_bill_no and record_flag!='1';
      if v_temp_number>0 then
        p_errmsg:='单据已经存在';
        bill_no:=p_related_bill_no;
        p_result:=-15;
        return;
      end if;

    exception when others then
      p_errmsg:='单据已经存在';
      bill_no:=p_related_bill_no;
      p_result:=-15;
      return;
    end;


      begin
         select p_type||'T'||lpad(current_int_no+1,9,'0') into v_bill_no from ic_prm_bill_curr_flow_tmp where bill_main_type_id=p_type;
         update  ic_prm_bill_curr_flow_tmp set current_no=v_bill_no, current_int_no=substr(v_bill_no,4,9) where bill_main_type_id=p_type;
      exception when others then
        p_errmsg:='error11....';
        bill_no:=p_related_bill_no;
        p_result:=-1;
        return;
      end;

      begin
        insert into ic_in_store_bill(bill_no,bill_date,form_maker,hand_man,administer,accounter ,record_flag,remark,related_bill_no )
        values(v_bill_no,sysdate,p_form_maker,p_hand_man,
                p_administer,p_accounter ,'3',p_remark,
                null);
     exception when others then
        p_errmsg:='error11....';
        bill_no:=p_related_bill_no;
        p_result:=-1;
        return;
      end;

         p_memo :='单据'||p_related_bill_no||'入库成功, 用时 '||ROUND(TO_NUMBER(sysdate- v_begin_time) * 24 * 60)||' 秒';
         bill_no:=v_bill_no;
         p_result :=0;




END;
/
grant execute on ACC_TK.UP_TK_IN_HR_TEST to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_QR
prompt ==============================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_QR"
(
  p_type            IN varchar2,       -- GH 借票归还 审核时 为JR
  p_form_maker      IN varchar2,
  p_hand_man        IN varchar2,
  p_administer      IN varchar2,
  p_accounter       IN varchar2,
  p_related_bill_no IN varchar2,  --生产工作单/借出单/盘点单
  p_remarks         IN varchar2,
  p_operator_id     IN varchar2,
  p_module_id       IN varchar2,
  bill_no           OUT varchar2,
  p_errmsg          OUT varchar2,
  p_result          OUT integer,
  p_memo            OUT varchar2
)

----------- ----------------------------------------------------------------------
--过程名：  UP_TK_IN_QR
--功能描述：票务管理：增加入库单
--创建者：  mqf
--创建日期：20130723

-------------------------------------------------------------------------------

AS
  v_bill_no char(12);
  v_begin_time   date;


BEGIN

   select sysdate into v_begin_time from dual;

   if  p_related_bill_no=' ' or p_related_bill_no is null then

          p_errmsg:='单据号为空';
          bill_no:=p_related_bill_no;
          p_result:=-17;
          return;
   end if;



   begin
     select p_type||'T'||LPAD (current_int_no+1,9,'0') into v_bill_no from ic_prm_bill_curr_flow_tmp where bill_main_type_id=p_type;

     update  ic_prm_bill_curr_flow_tmp set current_no=v_bill_no, current_int_no=substr(v_bill_no,4,9) where  bill_main_type_id=p_type;

      EXCEPTION when OTHERS THEN
        --rollback;
        p_result := -1;
        p_errmsg:='error';
        bill_no:=v_bill_no;
        return;

    end;


--入库单插入

  begin
    insert into ic_in_store_bill(bill_no,bill_date,form_maker,hand_man,administer,accounter ,record_flag,remark,related_bill_no)
        values(v_bill_no,sysdate,p_form_maker,p_hand_man,p_administer,p_accounter ,'3',p_remarks,p_related_bill_no);
          exception when others then
            --rollback;
            p_result := -1;
            p_errmsg:='error';
            bill_no:=v_bill_no;
            return;
  end;







     p_memo :='单据'||p_related_bill_no||'入库成功, 用时 '||ROUND(TO_NUMBER(sysdate- v_begin_time) * 24 * 60 * 60)||' 秒';
     bill_no:=v_bill_no;
     p_result :=0;
COMMIT;
     --insert into oper_logging  values(p_operator_id, sysdate,p_module_id,"增加",v_memo)

                -- select 0 as result,case when p_type='JR' then v_bill_no_audit  else v_bill_no end as bill_no,v_memo as memo
end;
/
grant execute on ACC_TK.UP_TK_IN_QR to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_SR_TEST
prompt ===================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_SR_TEST"(p_related_bill_no IN VARCHAR2,
                                               p_type            IN VARCHAR2,
                                               p_form_maker      IN VARCHAR2,
                                               p_hand_man        IN VARCHAR2,
                                               p_administer      IN VARCHAR2,
                                               p_accounter       IN VARCHAR2,
                                               p_remark          IN VARCHAR2,
                                               bill_no           out varchar2,
                                               p_errmsg          out varchar2,
                                               p_result          out integer,
                                               p_memo            out varchar2 --,
                                               --out_msg out VARCHAR2
                                               )

  ---------------------------------------
  --功能：生产入库增加(UP_TK_IN_SR_TEST)
  --作者：liangminglong
  --修改: 2015-01-30 oywl 增加异形票'7' 手机票'8'业务处理
  --     2015-04-01  oywl 生成生产明细的时候，如果是单独一张，使用特殊处理。超过一张，使用原流程处理。
  ------------ ---------------------------
  --修改者：mqf
  --修改内容：1、普通储值票重用,新增ES储值票重编码记录表acc_tk.IC_ES_AGAIN_INFO_SVT，原表IC_ES_AGAIN_INFO为ES单程票重编码记录表。
  --修改日期：2017-04-05
  --修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票
  ---------------------------------------------------
 AS

  v_bill_no           char(12);
  v_reason_id         char(2);
  v_bill_year         integer;
  v_card_type         varchar(4);
  v_ic_main_type      varchar(2);
  v_ic_sub_type       varchar(2);
  v_out_bill_no       char(12);
  v_es_useless_num    integer;
  v_man_useless_num   integer;
  v_lost_num          integer;
  v_in_num            integer; --已归还数量
  v_lend_num          integer; --借出数量
  v_draw_quantity     integer; --有效票数量
  v_balance_num       integer; --实际结余与系统结余差额
  v_balance_box_num   integer; --实际结余盒数
  v_storage_id        char(4);
  v_area_id           char(2);
  v_start_box_id      varchar(14);
  v_end_box_id        varchar(14);
  v_start_box_id1     varchar(14);
  v_end_box_id1       varchar(14);
  v_start_logical_id  varchar(20);
  v_end_logical_id    varchar(20);
  v_start_logical_id1 varchar(20);
  v_mid_logical_id    varchar(20);
  v_tmp_logical_id    varchar(20);
  v_card_money        integer;
  v_bill_no_audit     char(12);
  v_logi_num          integer;
  v_tmp_id            varchar(20);
  v_start_out_id      varchar(20);
  v_end_out_id        varchar(20);
  v_mid_out_id        varchar(20);
  v_start_logi_id     varchar(20);
  v_last_mid_out_id   varchar(20);
  v_start             varchar(20);
  v_end               varchar(20);
  v_nn                integer;
  v_hz_out_num        integer;
  v_hz_in_num         integer;
  v_out_in_diff       integer;
  v_valid_num         integer;
  v_begin_time        date;
  v_memo              varchar(100);

  v_outBill varchar(12);

  v_total_num    integer;
  v_zone_audit   char(12); --借票归还审核入库时归还数量为零时入库单号
  v_temp_number  integer;
  v_temp_number2 integer;
  v_temp_number3 integer;
  v_temp_number4 integer;

  v_card_sub_type varchar(1); --'1'：单程票，'2':非单程票

BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');

  --删除临时表数据

  begin
    delete from t#ic_in_detail;
    delete from t#ic_in_num;
    delete from t#ic_out_detail;
    delete from t#ic_es_info;
    delete from t#ic_logi_box;
    delete from t#ic_balance_start_end;
  exception
    when others THEN
      p_errmsg := 'error..';
      bill_no  := p_related_bill_no;
      p_result := -1;
      return;
  end;

  select sysdate into v_begin_time from dual;

  if p_related_bill_no = ' ' or p_related_bill_no is null then
    p_errmsg := '单据号为空';
    bill_no  := p_related_bill_no;
    p_result := -17;
    return;
  end if;

  begin
    select count(*)
      into v_temp_number
      from ic_in_store_bill
     where related_bill_no = p_related_bill_no
       and record_flag != '1';
    if v_temp_number > 0 then
      p_errmsg := '单据已经存在';
      bill_no  := p_related_bill_no;
      p_result := -15;
      return;
    end if;

  exception
    when others then
      p_errmsg := '单据已经存在';
      bill_no  := p_related_bill_no;
      p_result := -15;
      return;
  end;

  begin
    begin
      select p_type || 'T' || lpad(current_int_no + 1, 9, '0')
        into v_bill_no
        from ic_prm_bill_curr_flow_tmp
       where bill_main_type_id = p_type;
      update ic_prm_bill_curr_flow_tmp
         set current_no     = v_bill_no,
             current_int_no = substr(v_bill_no, 4, 9)
       where bill_main_type_id = p_type;
    exception
      when others then
        p_errmsg := 'error11....';
        bill_no  := p_related_bill_no;
        p_result := -1;
        return;
    end;
    ------------------------------------生产入库，开始------------------------------------
    begin
      select ' ', ' ', 'null' into v_start, v_end, v_card_type from dual;
      DBMS_OUTPUT.PUT_LINE('1111');
      begin
        select count(*)
          into v_temp_number
          from ic_pdu_produce_bill
         where record_flag = '0'
           and bill_no = p_related_bill_no;

        if v_temp_number = 0 then
          p_errmsg := '单据不存在或没有明细';
          bill_no  := p_related_bill_no;
          p_result := -18;
          return;
        end if;

        select count(*)
          into v_temp_number
          from ic_pdu_produce_bill_detail
         where bill_no = p_related_bill_no;

        if v_temp_number = 0 then
          p_errmsg := '单据不存在或没有明细';
          bill_no  := p_related_bill_no;
          p_result := -18;
          return;
        end if;
      exception
        when no_data_found then
          p_errmsg := '单据不存在或没有明细';
          bill_no  := p_related_bill_no;
          p_result := -18;
          return;
      end;

      begin
        select count(*)
          into v_temp_number
          from ic_pdu_produce_bill a, ic_out_bill_detail b
         where a.record_flag = '0'
           and a.bill_no = p_related_bill_no
           and a.out_bill_no = b.bill_no;

        if v_temp_number = 0 then
          p_errmsg := '没有对应出库单';
          bill_no  := p_related_bill_no;
          p_result := -21;
          return;
        end if;
      exception
        when no_data_found then
          p_errmsg := '没有对应出库单';
          bill_no  := p_related_bill_no;
          p_result := -21;
          return;
      end;

      -------------生产工作单取数开始---------------------------------------------------------
      -------------更新生产工作单入库标志为入库------------------------
      begin
        update ic_pdu_produce_bill
           set in_flag = '1'
         where bill_no = p_related_bill_no;
        --从生产单取系统废票数、人工废票数、遗失数、节余数
        select out_bill_no,
               nvl(es_useless_num, 0),
               nvl(man_useless_num, 0),
               nvl(lost_num, 0),
               real_balance
          into v_out_bill_no,
               v_es_useless_num,
               v_man_useless_num,
               v_lost_num,
               v_balance_num
          from ic_pdu_produce_bill
         where bill_no = p_related_bill_no;
        -------------生产工作单取数结束--------------------------------------------
      exception
        when others then
          rollback;
          p_errmsg := 'error22111....';
          bill_no  := p_related_bill_no;
          p_result := -1;
          return;
      end;

      begin
        -------------出库单取数开始------------------------------------------
        --从出库明细中取票卡类型、出入库原因
        select reason_id, ic_main_type, ic_sub_type
          into v_reason_id, v_ic_main_type, v_ic_sub_type
          from ic_out_bill_detail
         where bill_no = v_out_bill_no;

        --从出库盒明细中取逻辑卡号段
        select start_logical_id, end_logical_id
          into v_start, v_end
          from ic_out_bill_detail_box
         where bill_no = v_out_bill_no
           and rowid = (select max(rowid)
                          from ic_out_bill_detail_box
                         where bill_no = v_out_bill_no);
      exception
        when no_data_found then
          p_errmsg := 'error22122....';
          bill_no  := p_related_bill_no;
          p_result := -1;
          --return;
      end;

      begin

        --出库明细统计票卡出库数量
        insert into t#ic_out_detail
          select reason_id,
                 storage_id,
                 area_id,
                 ic_main_type,
                 ic_sub_type,
                 card_money,
                 sum(out_num)
            from ic_out_bill_detail
           where bill_no = v_out_bill_no
           group by reason_id,
                    storage_id,
                    area_id,
                    ic_main_type,
                    ic_sub_type,
                    card_money;
      exception
        when others then
          p_errmsg := 'error2233....';
          bill_no  := p_related_bill_no;
          p_result := -1;
          return;
      end;
      -------------------出库单取数结束-----------------------------------------

      -----------------------------------------有效票插入开始---------------------------------
      begin
        select count(*)
          into v_temp_number
          from ic_pdu_produce_bill_detail
         where bill_no = p_related_bill_no
           and draw_quantity > 0;
        if v_temp_number = 0 then
          p_errmsg := 'error33...';
          bill_no  := p_related_bill_no;
          p_result := -1;
          --return;
        end if;
      exception
        when no_data_found then
          p_errmsg := 'error33...';
          bill_no  := p_related_bill_no;
          p_result := -1;
          --return;
      end;
      --逐条处理生产单明细
      begin
        declare
          cursor cur_detail is
            select ic_main_type,
                   ic_sub_type,
                   card_money,
                   start_box_id,
                   end_box_id,
                   sum(draw_quantity) draw_quantity
              from ic_pdu_produce_bill_detail
             where bill_no = p_related_bill_no
               and draw_quantity > 0
             group by ic_main_type,
                      ic_sub_type,
                      card_money,
                      start_box_id,
                      end_box_id
             order by start_box_id, end_box_id;
          c_row cur_detail%rowtype;
        BEGIN
          open cur_detail;
          fetch cur_detail
            into c_row;
          --begin
          while v_temp_number > 0 loop
            DBMS_OUTPUT.PUT_LINE('333');
            -------------------------------校验生产单明细数据是否合法开始------------------------------------------
            if v_card_type != c_row.ic_main_type || c_row.ic_sub_type and
               v_card_type != 'null' then
              p_errmsg := '只能有一种票种';
              bill_no  := p_related_bill_no;
              p_result := -26;
              return;
            end if;
            select c_row.ic_main_type || c_row.ic_sub_type
              into v_card_type
              from dual;

            if ((c_row.start_box_id is not null and
               c_row.start_box_id != ' ') and
               (c_row.end_box_id is null or c_row.end_box_id = ' ')) or
               ((c_row.end_box_id is not null and c_row.end_box_id != ' ') and
               (c_row.start_box_id is null or c_row.start_box_id = ' ')) then
              p_errmsg := '起始盒号和结束盒号必须共存';
              bill_no  := p_related_bill_no;
              p_result := -19;
              return;
            end if;

            if c_row.start_box_id is not null and c_row.start_box_id != '' and
               c_row.start_box_id > v_end_box_id then
              p_errmsg := '起始盒号必须小于结束盒号';
              bill_no  := p_related_bill_no;
              p_result := -9;
              return;
            end if;

            begin
              select count(*)
                into v_temp_number2
                from ic_cod_box_info
               where box_id <= c_row.end_box_id
                 and box_id >= c_row.start_box_id;
              select count(*)
                into v_temp_number3
                from ic_sts_storage
               where box_id <= c_row.end_box_id
                 and box_id >= c_row.start_box_id;
            exception
              when others then
                p_errmsg := '盒号已经存在...';
                bill_no  := p_related_bill_no;
                p_result := -22;
                return;
            end;

            if c_row.start_box_id is not null and c_row.start_box_id != '' and
               v_temp_number2 > 0 and v_temp_number3 > 0 then
              p_errmsg := '盒号已经存在';
              bill_no  := p_related_bill_no;
              p_result := -22;
              return;
            end if;

            ----------------------------校验生产单明细数据是否合法结束-----------------------------------
            ---------------------------------------------------------------------------------------------
            --需要找卡号的，开始
            ---------------------------------------------------------------------------------------------
            /*
            判断是否从缓存表中取票卡明细:
            单程票：03  新票赋值、04  编码再赋值、05  循环票赋值
            储值票、员工票：
            */
            DBMS_OUTPUT.PUT_LINE('c_row.start_box_id111=' ||
                                 c_row.start_box_id);
            DBMS_OUTPUT.PUT_LINE('c_row.end_box_id2111=' ||
                                 c_row.end_box_id);

            DBMS_OUTPUT.PUT_LINE('c_row.ic_main_type=' ||
                                 c_row.ic_main_type);
            DBMS_OUTPUT.PUT_LINE('v_reason_id=' || v_reason_id);

            if ((rtrim(c_row.ic_main_type) = '1' or
               rtrim(c_row.ic_main_type) = '2' or
               rtrim(c_row.ic_main_type) = '40' or
               rtrim(c_row.ic_main_type) = '7' or
               rtrim(c_row.ic_main_type) = '8' or
         rtrim(c_row.ic_main_type) = '9') and v_reason_id != '09') or
               (rtrim(c_row.ic_main_type) = '12' and
               (v_reason_id = '03' or v_reason_id = '04' or
               v_reason_id = '05')) then
              -----------------------------从缓存表中取逻辑卡号开始-----------------------------------------------------------------------------------------
        --20170405 add by mqf
        if c_row.ic_main_type='12' and c_row.ic_sub_type='22' then
          v_card_sub_type := '1'; --单程票
        else
          v_card_sub_type := '2'; --非单程票
              end if;

              if substr(c_row.start_box_id, 1, 2) = '00' then
                insert into t#ic_es_info
                  select logical_id, order_no
                    from ic_es_initi_info
                   where order_no >= c_row.start_box_id
                     and order_no <= c_row.end_box_id;
              end if;
              if substr(c_row.start_box_id, 1, 2) = '01' then
                insert into t#ic_es_info
                  select logical_id, order_no
                    from ic_es_hunch_info
                   where order_no >= c_row.start_box_id
                     and order_no <= c_row.end_box_id;
              end if;
              if substr(c_row.start_box_id, 1, 2) = '02' then
        /*
                insert into t#ic_es_info
                  select logical_id, order_no
                    from ic_es_again_info
                   where order_no >= c_row.start_box_id
                     and order_no <= c_row.end_box_id;
           */

          --20170405 add by mqf  普通储值票重用,新增ES储值票重编码记录表acc_tk.IC_ES_AGAIN_INFO_SVT
          if v_card_sub_type = '1' then

          insert into t#ic_es_info
            select logical_id, order_no
            from acc_tk.ic_es_again_info
             where order_no >= c_row.start_box_id
             and order_no <= c_row.end_box_id;
          elsif v_card_sub_type = '2' then --非单程票

          insert into t#ic_es_info
            select logical_id, order_no
            from acc_tk.ic_es_again_info_svt
             where order_no >= c_row.start_box_id
             and order_no <= c_row.end_box_id;
          end if;
              end if;



              if substr(c_row.start_box_id, 1, 2) = '03' then
                insert into t#ic_es_info
                  select logical_id, order_no
                    from ic_es_logout_info
                   where order_no >= c_row.start_box_id
                     and order_no <= c_row.end_box_id;
              end if;
              select min(logi_id), max(logi_id)
                into v_start_logical_id, v_end_logical_id
                from t#ic_es_info;

              if v_start_logical_id = null or v_start_logical_id = ' ' or
                 v_end_logical_id = null or v_end_logical_id = ' ' then
                rollback;
                p_errmsg := '找不到车票ID';
                p_result := -29; --找不到车票ID
                return;
              end if;
              select count(*) into v_logi_num from t#ic_es_info;

              DBMS_OUTPUT.PUT_LINE('v_logi_num=' || v_logi_num);
              DBMS_OUTPUT.PUT_LINE('c_row.draw_quantity=' ||
                                   c_row.draw_quantity);

              if c_row.draw_quantity != v_logi_num then
                rollback;
                p_errmsg := '制票结果数量与生产单数量不等';
                p_result := -30;
                return;
              end if;

              -------------------------------从缓存表中取逻辑卡号结束----------------------------
              -------------------------合并盒号及逻辑卡号开始------------------------------------
              --储值卡新票编码虽然卡按顺序放，但不能保证卡号小的卡放盒号小的盒里，其他的入库更是无法保证卡按顺序放，
              --因此全部按乱放来给每一盒找卡号段

              DBMS_OUTPUT.PUT_LINE('c_row.start_box_id222 ' ||
                                   c_row.start_box_id);
              DBMS_OUTPUT.PUT_LINE('c_row.end_box_id222=' ||
                                   c_row.end_box_id);

              select c_row.start_box_id into v_start_box_id1 from dual;
              while v_start_box_id1 <= c_row.end_box_id loop
                begin
                  select count(*)
                    into v_temp_number2
                    from t#ic_es_info
                   where order_no = v_start_box_id1;
                exception
                  when others then
                    p_errmsg := 'error...';
                    bill_no  := p_related_bill_no;
                    p_result := -1;
                    return;
                end;

                if v_temp_number2 > 0 then
                  select min(logi_id), max(logi_id)
                    into v_start_logical_id, v_end_logical_id
                    from t#ic_es_info
                   where order_no = v_start_box_id1;
                  begin
                    declare
                      cursor cur_id is
                        select logi_id
                          from t#ic_es_info
                         where order_no = v_start_box_id1
                         order by logi_id;
                    begin
                      open cur_id;
                      fetch cur_id
                        into v_mid_logical_id;
                      select v_mid_logical_id
                        into v_start_logical_id1
                        from dual;

                      DBMS_OUTPUT.PUT_LINE('v_mid_logical_idd111111111====' ||
                                           v_mid_logical_id);

                      fetch cur_id
                        into v_tmp_logical_id;

                      ----------------------modify  2014-05-04  liangminglong 单独一张特殊处理--------------------------------

                      if v_temp_number2 = 1 then

                        begin
                          insert into t#ic_logi_box
                          values
                            (SEQ_IC_TK_IN_SR.nextval,
                             v_start_box_id1,
                             v_start_box_id1,
                             v_start_logical_id1,
                             v_mid_logical_id,
                             v_mid_logical_id - v_start_logical_id1 + 1);
                        exception
                          when others then
                            p_errmsg := 'others...';
                            p_result := -1;
                            bill_no  := p_related_bill_no;
                            return;
                        end;
                        ----------------------------------------------------------------------------------------------------

                        -----------modify  2015-04-01  ouyangwenling 如果不是一张的情况 使用循环处理---------------------------
                        else
                          begin

                      while v_temp_number2 >= 1 loop
                        if v_tmp_logical_id != v_mid_logical_id + 1 then
                          --本盒内的下一张和本张卡不连续

                          DBMS_OUTPUT.PUT_LINE('v_tmp_logical_id11====' ||
                                               v_tmp_logical_id);

                          begin
                            insert into t#ic_logi_box
                            values
                              (SEQ_IC_TK_IN_SR.nextval,
                               v_start_box_id1,
                               v_start_box_id1,
                               v_start_logical_id1,
                               v_mid_logical_id,
                               v_mid_logical_id - v_start_logical_id1 + 1);
                          exception
                            when others then
                              p_errmsg := 'others...';
                              p_result := -1;
                              bill_no  := p_related_bill_no;
                              return;
                          end;

                          select v_tmp_logical_id
                            into v_start_logical_id1
                            from dual;

                        end if;
                        select v_tmp_logical_id
                          into v_mid_logical_id
                          from dual;

                        fetch cur_id
                          into v_tmp_logical_id;
                        v_temp_number2 := v_temp_number2 - 1;

                      end loop;

                          end;

                      end if;
                    -----------------------------------------------------------
                    close cur_id;
                    end;
                  end;
                  -----------------------------------------------------------

                  /*
                  else
                      begin
                          insert into  t#ic_logi_box
                          values (SEQ_IC_TK_IN_SR.NEXTVAL ,c_row.start_box_id,c_row.start_box_id,v_start_logical_id1,v_end_logical_id,
                                  v_end_logical_id-v_start_logical_id1+1);
                      exception when others then
                          p_errmsg :='others...';
                          p_result := -1 ;
                          bill_no := p_related_bill_no;
                          return ;
                      end;
                    */
                  ---------------------------------------------------------
                end if;
                select lpad(v_start_box_id1 + 1, 14, '0')
                  into v_start_box_id1
                  from dual;
              end loop;
              -----------------------找卡号段结束--------------------------------------------
              -------------------------------合并盒号及逻辑卡号开结束-------------------------
              ------------------------------登记结余票----------------------------------------
              --结余票逻辑卡号：在出库明细，不在有效票逻辑卡号段、及废票卡号段中
              --登记结余票
              DBMS_OUTPUT.PUT_LINE('666');
              begin
                select count(*)
                  into v_temp_number2
                  from t#ic_balance_start_end;
                select count(*)
                  into v_temp_number3
                  from ic_out_bill_detail_box;
              exception
                when no_data_found then
                  p_errmsg := 'others...';
                  p_result := -1;
                  bill_no  := p_related_bill_no;
                  return;
              end;
              if v_balance_num > 0 and v_start != ' ' and v_end != ' ' and
                 v_start is not null and v_end is not null and
                 v_temp_number2 = 0 then

                declare
                  cursor cur_out is
                    select start_logical_id, end_logical_id
                      from ic_out_bill_detail_box
                     where bill_no = v_out_bill_no
                     order by start_logical_id, end_logical_id;
                  c_row_out cur_out%rowtype;
                begin
                  open cur_out;
                  fetch cur_out
                    into c_row_out;

                  while v_temp_number2 > 0 loop
                    DBMS_OUTPUT.PUT_LINE('7777');
                    --begin
                    select c_row_out.start_logical_id
                      into v_mid_out_id
                      from dual;
                    SELECT 0 into v_nn from dual;
                    while v_mid_out_id <= c_row_out.end_logical_id loop
                      begin
                        select count(*)
                          into v_temp_number3
                          from ic_pdu_useless_detail
                         where card_no = v_mid_out_id
                           and bill_no = p_related_bill_no;
                        select count(*)
                          into v_temp_number4
                          from t#ic_es_info
                         where logi_id = v_mid_out_id;
                      exception
                        when no_data_found then
                          p_errmsg := 'others...';
                          p_result := -1;
                          bill_no  := p_related_bill_no;
                          return;
                      end;

                      if v_temp_number3 = 0 and v_temp_number4 = 0 then
                        if v_nn = 0 then
                          select v_mid_out_id
                            into v_start_logi_id
                            from dual;
                        end if;
                        if v_nn != 0 and
                           v_mid_out_id != v_last_mid_out_id + 1 then
                          begin
                            insert into t#ic_balance_start_end
                            values
                              (v_start_logi_id,
                               v_last_mid_out_id,
                               v_last_mid_out_id - v_start_logi_id + 1);
                          exception
                            when others then
                              rollback;
                              return;
                          end;
                          select v_mid_out_id
                            into v_start_logi_id
                            from dual;
                        end if;
                        select v_mid_out_id
                          into v_last_mid_out_id
                          from dual;
                        select v_nn + 1 into v_nn from dual;

                      end if;

                      select lpad(v_mid_out_id + 1, 20, '0')
                        into v_tmp_id
                        from dual;

                      select v_tmp_id into v_mid_out_id from dual;
                    end loop;

                    if v_nn > 0 then
                      begin
                        insert into t#ic_balance_start_end
                        values
                          (v_start_logi_id,
                           v_last_mid_out_id,
                           v_last_mid_out_id - v_start_logi_id + 1);
                      exception
                        when others then
                          rollback;
                          return;
                      end;
                    end if;
                    fetch cur_out
                      into c_row_out;

                  end loop;
                  close cur_out;
                  --deallocate  cursor cur_out
                end;

              end if; --登记结余票结束
              ------------------------------登记结余票结束---------------------------------------------------
              --清除逻辑卡号临时表数据
              --清除逻辑卡号临时表数据
              delete from t#ic_es_info;
            end if; --需要找卡号的，结束
            ------------------------------有效票插入------------------------------------------------------

            begin
              select count(*) into v_temp_number3 from t#ic_logi_box;
            exception
              when no_data_found then
                p_errmsg := 'others...';
                p_result := -1;
                bill_no  := p_related_bill_no;
                return;
            end;
            begin
              if v_temp_number3 > 0 then
                DBMS_OUTPUT.PUT_LINE('888');
                insert into t#ic_in_detail
                  (bill_no,
                   reason_id,
                   storage_id,
                   area_id,
                   ic_main_type,
                   ic_sub_type,
                   in_num,
                   start_box_id,
                   end_box_id,
                   valid_date,
                   card_money,
                   line_id,
                   station_id,
                   use_flag,
                   start_logical_id,
                   end_logical_id,
                   card_ava_days,
                   exit_line_id,
                   exit_station_id,
                   model)
                  select v_bill_no,
                         null,
                         null,
                         null,
                         c_row.ic_main_type,
                         c_row.ic_sub_type,
                         b.in_num,
                         b.start_box_id,
                         b.end_box_id,
                         vaild_date,
                         nvl(card_money, 0),
                         line_id,
                         station_id,
                         '0',
                         b.start_logical_id,
                         b.end_logical_id,
                         card_ava_days,
                         exit_line_id,
                         exit_station_id,
                         model
                    from ic_pdu_produce_bill_detail a, t#ic_logi_box b
                   where bill_no = p_related_bill_no
                     and ic_main_type = c_row.ic_main_type
                     and ic_sub_type = c_row.ic_sub_type
                     and card_money = c_row.card_money
                     and a.start_box_id = c_row.start_box_id
                     and a.end_box_id = c_row.end_box_id;
              else

                insert into t#ic_in_detail
                  (bill_no,
                   reason_id,
                   storage_id,
                   area_id,
                   ic_main_type,
                   ic_sub_type,
                   in_num,
                   start_box_id,
                   end_box_id,
                   valid_date,
                   card_money,
                   line_id,
                   station_id,
                   use_flag,
                   start_logical_id,
                   end_logical_id,
                   card_ava_days,
                   exit_line_id,
                   exit_station_id,
                   model)
                  select v_bill_no,
                         null,
                         null,
                         null,
                         c_row.ic_main_type,
                         c_row.ic_sub_type,
                         draw_quantity,
                         start_box_id,
                         end_box_id,
                         vaild_date,
                         nvl(card_money, 0),
                         line_id,
                         station_id,
                         '0',
                         null,
                         null,
                         card_ava_days,
                         exit_line_id,
                         exit_station_id,
                         model
                    from ic_pdu_produce_bill_detail a
                   where bill_no = p_related_bill_no
                     and ic_main_type = c_row.ic_main_type
                     and ic_sub_type = c_row.ic_sub_type
                     and card_money = c_row.card_money
                     and a.start_box_id = c_row.start_box_id
                     and a.end_box_id = c_row.end_box_id;

                delete t#ic_logi_box;
              end if;
            exception
              when others then
                rollback;
                p_errmsg := 'others...';
                p_result := -1;
                bill_no  := p_related_bill_no;
                --out_msg       := '错误：' || sqlerrm || ',发生在第[' ||dbms_utility.format_error_backtrace() || ']行';
                return;
            end;
            fetch cur_detail
              into c_row;

            v_temp_number := v_temp_number - 1;
          end loop;
          --end;
          ------------------------------------------------------有效票插入结束----------------------------------------------------
          close cur_detail;
        end;
      end;
      DBMS_OUTPUT.PUT_LINE('999');
      --ES废票插入
      --ES废票,人工废票插入,实际结余票添加多日票模式五个字段默认值
      if v_es_useless_num != 0 then
        begin
          insert into t#ic_in_detail
            (bill_no,
             reason_id,
             storage_id,
             area_id,
             ic_main_type,
             ic_sub_type,
             in_num,
             card_money,
             use_flag,
             line_id,
             station_id,
             exit_line_id,
             exit_station_id,
             model)
          values
            (v_bill_no,
             null,
             null,
             null,
             v_ic_main_type,
             v_ic_sub_type,
             v_es_useless_num,
             0,
             '1',
             '',
             '',
             '',
             '',
             '000');
        exception
          when others then
            rollback;
            p_errmsg := 'others...';
            p_result := -1;
            bill_no  := p_related_bill_no;
            return;
        end;
      end if;

      --人工废票插入
      --luojun 20130110  ES废票 ,人工废票插入 ,实际结余票添加多日票模式五个字段默认值
      if v_man_useless_num != 0 then
        begin
          insert into t#ic_in_detail
            (bill_no,
             reason_id,
             storage_id,
             area_id,
             ic_main_type,
             ic_sub_type,
             in_num,
             card_money,
             use_flag,
             line_id,
             station_id,
             exit_line_id,
             exit_station_id,
             model)
          VALUES
            (v_bill_no,
             null,
             null,
             null,
             v_ic_main_type,
             v_ic_sub_type,
             v_man_useless_num,
             0,
             '2',
             '',
             '',
             '',
             '',
             '000');
        exception
          when others then
            rollback;
            p_errmsg := 'others...';
            p_result := -1;
            bill_no  := p_related_bill_no;
            return;
        end;
      end if;
      DBMS_OUTPUT.PUT_LINE('1010');
      begin

        --更新仓库、票区、出入库原因
        update t#ic_in_detail a
           set (a.storage_id, a.reason_id, a.area_id) =
               (select b.storage_id,
                       b.reason_id,
                       case
                       --------------------------------------------------------------确定票卡的入库区-----------------------------------------------------
                       --单程票
                         when b.ic_main_type = '12' and b.reason_id = '02' and
                              use_flag = '0' then
                          '02' -- 新票编码有效
                         when v_ic_main_type = '12' and b.reason_id = '02' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 新票编码废票

                         when b.ic_main_type = '12' and b.reason_id = '03' and
                              use_flag = '0' then
                          '03' -- 新票赋值
                         when v_ic_main_type = '12' and b.reason_id = '03' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 新票赋值

                         when b.ic_main_type = '12' and b.reason_id = '04' and
                              use_flag = '0' then
                          '03' -- 编码再赋值
                         when v_ic_main_type = '12' and b.reason_id = '04' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 编码再赋值

                         when b.ic_main_type = '12' and b.reason_id = '05' and
                              use_flag = '0' then
                          '03' -- 循环票赋值
                         when v_ic_main_type = '12' and b.reason_id = '05' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 循环票赋值

                         when b.ic_main_type = '12' and b.reason_id = '06' and
                              use_flag = '0' then
                          '04' -- 车票注销
                         when v_ic_main_type = '12' and b.reason_id = '06' and
                              (use_flag = '1' or use_flag = '2') then
                          '06' -- 车票注销

                         when b.ic_main_type = '12' and b.reason_id = '07' and
                              use_flag = '0' then
                          '02' -- 车票重编码
                         when v_ic_main_type = '12' and b.reason_id = '07' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 车票重编码

                         when b.ic_main_type = '12' and b.reason_id = '08' and
                              use_flag = '0' then
                          '02' -- 车票清洗
                         when v_ic_main_type = '12' and b.reason_id = '08' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 车票清洗
                       -- 储值票
                         when (b.ic_main_type = '1' or b.ic_main_type = '2' or
                              b.ic_main_type = '7' or b.ic_main_type = '8' or
                b.ic_main_type = '9') and
                              b.reason_id = '02' and use_flag = '0' then
                          '02' -- 新票编码有效
                         when (v_ic_main_type = '1' or v_ic_main_type = '2' or
                              v_ic_main_type = '7' or v_ic_main_type = '8' or
                v_ic_main_type = '9') and
                              b.reason_id = '02' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 新票编码废票

                         when (b.ic_main_type = '1' or b.ic_main_type = '2' or
                              b.ic_main_type = '7' or b.ic_main_type = '8' or
                b.ic_main_type = '9') and
                              b.reason_id = '03' and use_flag = '0' then
                          '03' -- 新票赋值
                         when (v_ic_main_type = '1' or v_ic_main_type = '2' or
                              v_ic_main_type = '7' or v_ic_main_type = '8' or
                v_ic_main_type = '9') and
                              b.reason_id = '03' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 新票赋值

                         when (b.ic_main_type = '1' or b.ic_main_type = '2' or
                              b.ic_main_type = '7' or b.ic_main_type = '8' or
                b.ic_main_type = '9') and
                              b.reason_id = '04' and use_flag = '0' then
                          '03' -- 编码再赋值
                         when (v_ic_main_type = '1' or v_ic_main_type = '2' or
                              v_ic_main_type = '7' or v_ic_main_type = '8'  or
                v_ic_main_type = '9') and
                              b.reason_id = '04' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 编码再赋值

                         when (b.ic_main_type = '1' or b.ic_main_type = '2' or
                              b.ic_main_type = '7' or b.ic_main_type = '8' or
                b.ic_main_type = '9') and
                              b.reason_id = '05' and use_flag = '0' then
                          '03' -- 循环票赋值
                         when (v_ic_main_type = '1' or v_ic_main_type = '2' or
                              v_ic_main_type = '7' or v_ic_main_type = '8' or
                v_ic_main_type = '9') and
                              b.reason_id = '05' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 循环票赋值

                         when (b.ic_main_type = '1' or b.ic_main_type = '2' or
                              b.ic_main_type = '7' or b.ic_main_type = '8' or
                b.ic_main_type = '9') and
                              b.reason_id = '06' and use_flag = '0' then
                          '04' -- 车票注销
                         when (v_ic_main_type = '1' or v_ic_main_type = '2' or
                              v_ic_main_type = '7' or v_ic_main_type = '8' or
                v_ic_main_type = '9') and
                              b.reason_id = '06' and
                              (use_flag = '1' or use_flag = '2') then
                          '06' -- 车票注销

                         when (b.ic_main_type = '1' or b.ic_main_type = '2' or
                              b.ic_main_type = '7' or b.ic_main_type = '8' or
                b.ic_main_type = '9') and
                              b.reason_id = '07' and use_flag = '0' then
                          '02' -- 车票重编码
                         when (v_ic_main_type = '1' or v_ic_main_type = '2' or
                              v_ic_main_type = '7' or v_ic_main_type = '8' or
                v_ic_main_type = '9') and
                              b.reason_id = '07' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 车票重编码
                       ------------------------------------------------------------------------------------------------------------------------------------------------------
                       --modify by hejj 2011-07-29 增加乘次票40
                       -- 乘次票
                         when (b.ic_main_type = '40' or b.ic_main_type = '41') and
                              b.reason_id = '02' and use_flag = '0' then
                          '02' -- 新票编码有效
                         when (v_ic_main_type = '40' or v_ic_main_type = '41') and
                              b.reason_id = '02' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 新票编码废票

                         when (b.ic_main_type = '40' or b.ic_main_type = '41') and
                              b.reason_id = '03' and use_flag = '0' then
                          '03' -- 新票赋值
                         when (v_ic_main_type = '40' or v_ic_main_type = '41') and
                              b.reason_id = '03' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 新票赋值

                         when (b.ic_main_type = '40' or b.ic_main_type = '41') and
                              b.reason_id = '04' and use_flag = '0' then
                          '03' -- 编码再赋值
                         when (v_ic_main_type = '40' or v_ic_main_type = '41') and
                              b.reason_id = '04' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 编码再赋值

                         when (b.ic_main_type = '40' or b.ic_main_type = '41') and
                              b.reason_id = '05' and use_flag = '0' then
                          '03' -- 循环票赋值
                         when (v_ic_main_type = '40' or v_ic_main_type = '41') and
                              b.reason_id = '05' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 循环票赋值

                         when (b.ic_main_type = '40' or b.ic_main_type = '41') and
                              b.reason_id = '06' and use_flag = '0' then
                          '04' -- 车票注销
                         when (v_ic_main_type = '40' or v_ic_main_type = '41') and
                              b.reason_id = '06' and
                              (use_flag = '1' or use_flag = '2') then
                          '06' -- 车票注销

                         when (b.ic_main_type = '40' or b.ic_main_type = '41') and
                              b.reason_id = '07' and use_flag = '0' then
                          '02' -- 车票重编码
                         when (v_ic_main_type = '40' or v_ic_main_type = '41') and
                              b.reason_id = '07' and
                              (use_flag = '1' or use_flag = '2') then
                          '05' -- 车票重编码
                       ----------------------------------------------------------------------------------------------------------------------------------------------------------
             --20170714 modify by mqf 屏蔽原有的'9'
                         --when b.ic_main_type = '9' and b.reason_id = '06' and
                         --     use_flag = '0' then
                         -- '06'
                       --纸票
                       end -- 车票注销有效
                  from t#ic_out_detail b);
      exception
        when others then
          rollback;
          p_errmsg := 'others...';
          p_result := -1;
          bill_no  := p_related_bill_no;
          return;
      end;
      --end;
      -----------------------------------------------实际结余票插入结束-------------------------------------------
      DBMS_OUTPUT.PUT_LINE('1212');
      ----------------------------------------------实际结余票插入开始--------------------------------------------
      --实际结余票插入

      if v_balance_num != 0 then

        select null, null, null, null
          into v_start_box_id,
               v_end_box_id,
               v_start_logical_id,
               v_end_logical_id
          from dual;
        --储值票、员工票编码再赋值，结余票入循环区
        --modfiy by hejj 2011-07-29 增加乘次票40
        --modfty by luojun 20120820 多日票模式默认为 000，进出站默认为 空
        begin
          select count(*) into v_temp_number3 from t#ic_balance_start_end;
        exception
          when no_data_found THEN
            rollback;
            p_errmsg := 'others...';
            p_result := -1;
            bill_no  := p_related_bill_no;
            return;
        end;
        begin
          if v_temp_number3 > 0 then
            insert into t#ic_in_detail
              (bill_no,
               reason_id,
               storage_id,
               area_id,
               ic_main_type,
               ic_sub_type,
               card_money,
               in_num,
               start_box_id,
               end_box_id,
               start_logical_id,
               end_logical_id,
               use_flag,
               line_id,
               station_id,
               exit_line_id,
               exit_station_id,
               model)
              select distinct v_bill_no,
                              reason_id,
                              storage_id,
                              case
                                when reason_id = '04' and
                                     (ic_main_type = '1' or ic_main_type = '2' or ic_main_type = '40' or
                                     ic_main_type = '7' or ic_main_type = '8' or ic_main_type = '9') then
                                 '04'
                                else
                                 area_id
                              end,
                              ic_main_type,
                              ic_sub_type,
                              nvl(card_money, 0),
                              b.num,
                              v_start_box_id,
                              v_end_box_id,
                              b.start_logi_id,
                              b.end_logi_id,
                              '4',
                              ' ',
                              ' ',
                              ' ',
                              ' ',
                              '000'
                from ic_out_bill_detail a, t#ic_balance_start_end b
               where bill_no = v_out_bill_no
               order by b.start_logi_id, b.end_logi_id;

          else
            insert into t#ic_in_detail
              (bill_no,
               reason_id,
               storage_id,
               area_id,
               ic_main_type,
               ic_sub_type,
               card_money,
               in_num,
               start_box_id,
               end_box_id,
               start_logical_id,
               end_logical_id,
               use_flag,
               line_id,
               station_id,
               exit_line_id,
               exit_station_id,
               model)
              select distinct v_bill_no,
                              reason_id,
                              storage_id,
                              case
                                when reason_id = '04' and
                                     (ic_main_type = '1' or
                                     ic_main_type = '2' or
                                     ic_main_type = '7' or
                                     ic_main_type = '8' or
                                     ic_main_type = '40' or
                   ic_main_type = '9') then
                                 '04'
                                else
                                 area_id
                              end,
                              ic_main_type,
                              ic_sub_type,
                              nvl(card_money, 0),
                              v_balance_num,
                              v_start_box_id,
                              v_end_box_id,
                              v_start_logical_id,
                              v_end_logical_id,
                              '4',
                              ' ',
                              ' ',
                              ' ',
                              ' ',
                              '000'
                from ic_out_bill_detail
               where bill_no = v_out_bill_no;

          end if;
        exception
          when others THEN
            rollback;
            p_errmsg := 'others...';
            p_result := -1;
            bill_no  := p_related_bill_no;
            return;
        end;
      end if;
      DBMS_OUTPUT.PUT_LINE('1313');
      ---------------------------------------插入明细前数据校验、删除入库数量为0的数据开始--------------------------
      --校验内容: 单程票入赋值区必须要有效期,必须有盒号,入库数量超过区上限

      begin
        select count(*)
          into v_temp_number3
          from t#ic_in_detail
         where ic_main_type = '12'
           and area_id = '03'
           and valid_date is null;
        if v_temp_number3 > 0 then
          p_errmsg := '单程票入赋值区必须要有效期';
          p_result := -33; --单程票入赋值区必须要有效期
          bill_no  := p_related_bill_no;
          return;
        end if;
      exception
        when no_data_found then
          p_errmsg := '单程票入赋值区必须要有效期';
          bill_no  := p_related_bill_no;
          p_result := -33;
          return;
      end;
      --增加乘次票40

      begin
        select count(*)
          into v_temp_number3
          from t#ic_in_detail
         where ((ic_main_type = '12' and area_id = '03') or
               ((rtrim(ic_main_type) = '1' or rtrim(ic_main_type) = '2' or
               rtrim(ic_main_type) = '7' or rtrim(ic_main_type) = '8' or
               ic_main_type = '40' or ic_main_type = '9') and (area_id = '03'))) --or area_id='02'
           and (start_box_id is null or start_box_id = ' ' or
               end_box_id is null or end_box_id = ' ');
        if v_temp_number3 > 0 then
          p_errmsg := '必须有盒号';
          p_result := -25; --必须有盒号
          bill_no  := p_related_bill_no;
          rollback;
          return;
        end if;
      exception
        when no_data_found then
          p_errmsg := '必须有盒号';
          bill_no  := p_related_bill_no;
          p_result := -25;
          rollback;
          return;
      end;

      begin
        insert into t#ic_in_num
          (select storage_id, area_id, sum(in_num)
             from t#ic_in_detail
            group by storage_id, area_id);
      exception
        when others then
          p_errmsg := 'error..';
          bill_no  := p_related_bill_no;
          p_result := -1;
          return;
      end;

      begin
        select count(*)
          into v_temp_number3
          from t#ic_in_num a, ic_cod_area b
         where a.storage_id = b.storage_id
           and a.area_id = b.area_id
           and a.in_num > (b.upper_num - b.real_num);
        if v_temp_number3 > 0 then
          p_errmsg := '入库数量超过区上限';
          p_result := -27; --入库数量超过区上限
          return;
        end if;
      exception
        when no_data_found then
          p_errmsg := '入库数量超过区上限';
          bill_no  := p_related_bill_no;
          p_result := -27;
          return;
      end;

      begin
        select count(*)
          into v_temp_number3
          from t#ic_in_detail
         where in_num = 0;
      exception
        when no_data_found THEN
          p_errmsg := 'error..';
          bill_no  := p_related_bill_no;
          p_result := -1;
          return;
      end;
      if v_temp_number3 > 0 then
        begin
          delete t#ic_in_detail where in_num = 0;
        exception
          when others THEN
            p_errmsg := 'error..';
            bill_no  := p_related_bill_no;
            p_result := -1;
            return;
        end;
      end if;
      ----------------------------------------------插入明细前数据校验、删除入库数量为0的数据结束------------
      --------------------------------------------插入明细开始--------------------------------------------------------------------------
      -- 增加多日票有效天数、多日票限制出站线路、多日票限制出站站点、多日票限制模式
      DBMS_OUTPUT.PUT_LINE('1414');
      begin
        insert into ic_in_store_detail
          (water_no,
           bill_no,
           reason_id,
           storage_id,
           area_id,
           ic_main_type,
           ic_sub_type,
           in_num,
           start_box_id,
           end_box_id,
           valid_date,
           card_money,
           line_id,
           station_id,
           use_flag,
           start_logical_id,
           end_logical_id,
           card_ava_days,
           exit_line_id,
           exit_station_id,
           model)
          select SEQ_IC_TK_IN_DETAIL.nextval,
                 v_bill_no,
                 reason_id,
                 storage_id,
                 area_id,
                 ic_main_type,
                 ic_sub_type,
                 in_num,
                 start_box_id,
                 end_box_id,
                 valid_date,
                 card_money,
                 line_id,
                 station_id,
                 use_flag,
                 start_logical_id,
                 end_logical_id,
                 card_ava_days,
                 exit_line_id,
                 exit_station_id,
                 model
            from t#ic_in_detail;
        DBMS_OUTPUT.PUT_LINE('1515');
      exception
        when others THEN
          p_errmsg := 'error..';
          bill_no  := p_related_bill_no;
          p_result := -1;
          return;
      end;
      ----------------------------------------------插入明细结束---------------------------------------------
      ---------------------------------------------记录出入库差额记录开始-------------------------------------------------------------------

      select nvl(sum(out_num), 0)
        into v_hz_out_num
        from ic_out_bill_detail
       where bill_no = v_out_bill_no;
      select nvl(sum(b.in_num), 0)
        into v_hz_in_num
        from ic_in_store_detail b
       where b.bill_no = v_bill_no;
      select nvl(sum(b.in_num), 0)
        into v_valid_num
        from ic_in_store_detail b
       where b.bill_no = v_bill_no
         and use_flag = '0';
      select v_hz_in_num - v_hz_out_num into v_out_in_diff from dual;

      if v_out_in_diff != 0 THEN
        begin
          insert into ic_in_out_diff_produce
            (in_bill_no,
             out_bill_no,
             out_num,
             valid_num,
             es_useless_num,
             man_useless_num,
             lost_num,
             system_balance,
             real_balance,
             out_in_diff,
             remark,
             record_flag,
             in_bill_date,
             diff_id)
            select v_bill_no,
                   v_out_bill_no,
                   v_hz_out_num,
                   v_valid_num,
                   d.es_useless_num,
                   d.man_useless_num,
                   d.lost_num,
                   d.system_balance,
                   d.real_balance,
                   v_out_in_diff,
                   ' ',
                   '0',
                   SYSDATE,
                   diff_id
              from ic_pdu_produce_bill d
             where d.bill_no = p_related_bill_no;
          DBMS_OUTPUT.PUT_LINE('1616');
        exception
          when others THEN
            p_errmsg := 'error..';
            bill_no  := p_related_bill_no;
            p_result := -1;
            return;
        end;
      end if;

      begin
        insert into ic_in_store_bill
          (bill_no,
           bill_date,
           form_maker,
           hand_man,
           administer,
           accounter,
           record_flag,
           remark,
           related_bill_no)
        values
          (v_bill_no,
           sysdate,
           p_form_maker,
           p_hand_man,
           p_administer,
           p_accounter,
           '3',
           p_remark,
           p_related_bill_no);
      exception
        when others THEN
          p_errmsg := 'error..';
          bill_no  := p_related_bill_no;
          p_result := -1;
          return;
      end;

      if p_related_bill_no is not null and p_related_bill_no != ' ' then
        p_memo   := '单据' || p_related_bill_no || '入库成功, 用时 ' ||
                    ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60) || ' 秒';
        bill_no  := v_bill_no;
        p_result := 0;
      end if;

    end;

    --删除临时表数据

    begin
      delete from t#ic_in_detail;
      delete from t#ic_in_num;
      delete from t#ic_out_detail;
      delete from t#ic_es_info;
      delete from t#ic_logi_box;
      delete from t#ic_balance_start_end;
    exception
      when others THEN
        p_errmsg := 'error..';
        bill_no  := p_related_bill_no;
        p_result := -1;
        return;
    end;

  end;

END;
/
grant execute on ACC_TK.UP_TK_IN_SR_TEST to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_TR_TEST
prompt ===================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_TR_TEST"(p_related_bill_no IN VARCHAR2,
                                               p_type            IN VARCHAR2,
                                               p_form_maker      IN VARCHAR2,
                                               p_hand_man        IN VARCHAR2,
                                               p_administer      IN VARCHAR2,
                                               p_accounter       IN VARCHAR2,
                                               p_remark          IN VARCHAR2,
                                               bill_no           out varchar2,
                                               p_errmsg          out varchar2,
                                               p_result          out integer,
                                               p_memo            out varchar2
                                               --out_msg out VARCHAR2
                                               )

  ------------------------------------------------------
  --功能：调帐入库增加
  --作者：liangminglong
  --修改: 2015-01-30 oywl 增加异形票'7' 手机票'8'业务处理
  --修改: 2017-07-14 mqf 增加 '9'磁浮优惠储值票
  ------------------------------------------------------

 AS
  v_bill_no           char(12);
  v_reason_id         char(2);
  v_bill_year         integer;
  v_card_type         varchar(4);
  v_ic_main_type      varchar(2);
  v_ic_sub_type       varchar(2);
  v_out_bill_no       char(12);
  v_es_useless_num    integer;
  v_man_useless_num   integer;
  v_lost_num          integer;
  v_in_num            integer; --已归还数量
  v_lend_num          integer; --借出数量
  v_draw_quantity     integer; --有效票数量
  v_balance_num       integer; --实际结余与系统结余差额
  v_balance_box_num   integer; --实际结余盒数
  v_storage_id        char(4);
  v_area_id           char(2);
  v_start_box_id      char(14);
  v_end_box_id        char(14);
  v_start_box_id1     char(14);
  v_end_box_id1       char(14);
  v_start_logical_id  char(20);
  v_end_logical_id    char(20);
  v_start_logical_id1 char(20);
  v_mid_logical_id    char(20);
  v_tmp_logical_id    char(20);
  v_card_money        integer;
  v_bill_no_audit     char(12);
  v_logi_num          integer;
  v_tmp_id            varchar(20);
  v_start_out_id      char(20);
  v_end_out_id        char(20);
  v_mid_out_id        char(20);
  v_start_logi_id     varchar(20);
  v_last_mid_out_id   varchar(20);
  v_start             varchar(20);
  v_end               varchar(20);
  v_nn                integer;
  v_hz_out_num        integer;
  v_hz_in_num         integer;
  v_out_in_diff       integer;
  v_valid_num         integer;
  v_begin_time        date;
  v_memo              varchar(100);

  v_outBill  varchar(12);
  v_water_no varchar(8);

  v_total_num    integer;
  v_zone_audit   char(12); --借票归还审核入库时归还数量为零时入库单号
  v_temp_number  integer;
  v_temp_number2 integer;
  v_temp_number3 integer;
  v_temp_number4 integer;
BEGIN
  -- routine body goes here, e.g.
  --DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  --删除临时表
  begin
    delete from t#ic_check_storage_detail;
    delete from t#ic_in_num;
  end;

  select sysdate into v_begin_time from dual;

  begin
    select count(*)
      into v_temp_number
      from ic_in_store_bill
     where related_bill_no = p_related_bill_no
       and record_flag != '1';
    if v_temp_number > 0 then
      p_errmsg := '单据已经存在';
      bill_no  := p_related_bill_no;
      p_result := -15;
      return;
    end if;

  exception
    when others then
      p_errmsg := '单据已经存在';
      bill_no  := p_related_bill_no;
      p_result := -15;
      return;
  end;

  begin
    select p_type || 'T' || lpad(current_int_no + 1, 9, '0')
      into v_bill_no
      from ic_prm_bill_curr_flow_tmp
     where bill_main_type_id = p_type;
    update ic_prm_bill_curr_flow_tmp
       set current_no = v_bill_no, current_int_no = substr(v_bill_no, 4, 9)
     where bill_main_type_id = p_type;
  exception
    when others then
      p_errmsg := 'error1....';
      bill_no  := p_related_bill_no;
      p_result := -1;
      return;
  end;
  --调账入库，开始
  begin
    select count(*)
      into v_temp_number
      from ic_chk_storage
     where record_flag = '0'
       and check_bill_no = p_related_bill_no;
    select count(*)
      into v_temp_number2
      from ic_chk_storage_detail
     where check_bill_no = p_related_bill_no;
    select SEQ_IC_TK_IN_DETAIL.nextval into v_water_no from dual;
    if v_temp_number = 0 and v_temp_number2 = 0 then
      p_errmsg := '单据不存在或没有明细....';
      bill_no  := v_bill_no;
      p_result := -18;
      return;
    end if;
  exception
    when no_data_found then
      p_errmsg := '单据不存在或没有明细....';
      bill_no  := v_bill_no;
      p_result := -18;
      return;
  end;

  --检查
  begin
    select count(*)
      into v_temp_number
      from ic_chk_storage_detail_card
     where check_bill_no = p_related_bill_no;
    if v_temp_number > 0 then
      select count(*)
        into v_temp_number2
        from ic_chk_storage_detail_card
       where check_bill_no = p_related_bill_no
         and ((start_logical_id is not null and start_logical_id != ' ' and
             (end_logical_id is null or end_logical_id = ' ')) or
             (end_logical_id is not null and end_logical_id != ' ' and
             (start_logical_id is null or start_logical_id = ' ')));
      select count(*)
        into v_temp_number3
        from ic_chk_storage_detail_card
       where check_bill_no = p_related_bill_no
         and to_number(start_logical_id) > to_number(end_logical_id);
      if v_temp_number2 > 0 then
        p_errmsg := '起始卡号和结束卡号必须共存....';
        bill_no  := v_bill_no;
        p_result := -8;
        return;
      end if;
      if v_temp_number3 > 0 then
        p_errmsg := '起始卡号必须小于结束卡号....';
        bill_no  := v_bill_no;
        p_result := -10;
        return;
      end if;
    end if;
  exception
    when others then
      p_errmsg := 'error2....';
      bill_no  := v_bill_no;
      p_result := -1;
      return;
  end;

  --增加乘次票40
  begin
    select count(*)
      into v_temp_number
      from ic_chk_storage_detail
     where check_bill_no = p_related_bill_no
       and (((ic_main_type = '1' or ic_main_type = '2' or
           ic_main_type = '40' or ic_main_type = '7' or
           ic_main_type = '8' or ic_main_type = '9') and (area_id = '02' or area_id = '03')) or
           (ic_main_type = '12' and area_id = '03'));
    if v_temp_number > 0 then
      select count(*)
        into v_temp_number2
        from ic_chk_storage_detail
       where check_bill_no = p_related_bill_no
         and (((ic_main_type = '1' or ic_main_type = '2' or
             ic_main_type = '7' or ic_main_type = '8' or ic_main_type = '9') and
             (area_id = '02' or area_id = '03')) or
             (ic_main_type = '12' and area_id = '03'))
         and real_amount > sys_amount
         and (box_id is null or box_id = ' ');
      if v_temp_number2 > 0 then
        p_errmsg := '必须有盒号....';
        bill_no  := v_bill_no;
        p_result := -7;
        return;
      end if;

      select count(*)
        into v_temp_number3
        from ic_chk_storage_detail
       where check_bill_no = p_related_bill_no
         and (((ic_main_type = '1' or ic_main_type = '2' or
             ic_main_type = '40' or ic_main_type = '7' or
             ic_main_type = '8' or ic_main_type = '9') and (area_id = '02' or area_id = '03')) or
             (ic_main_type = '12' and area_id = '03'))
         and real_amount > sys_amount
         and storage_id || area_id || chest_id || storey_id || base_id ||
             box_id not in (select storage_id || area_id || chest_id ||
                                   storey_id || base_id || box_id
                              from ic_sts_storage);
      if v_temp_number3 > 0 then
        p_errmsg := '位置不存在....';
        bill_no  := v_bill_no;
        p_result := -12;
        return;
      end if;

      select count(*)
        into v_temp_number4
        from ic_chk_storage_detail
       where check_bill_no = p_related_bill_no
         and (((ic_main_type = '1' or ic_main_type = '2' or
             ic_main_type = '40' or ic_main_type = '7' or
             ic_main_type = '8' or ic_main_type = '9') and (area_id = '02' or area_id = '03')) or
             (ic_main_type = '12' and area_id = '03'))
         and real_amount > sys_amount
         and box_id not in (select box_id from ic_cod_box_info);
      if v_temp_number4 > 0 then
        p_errmsg := '无此盒号....';
        bill_no  := v_bill_no;
        p_result := -13;
        return;
      end if;
    end if;
  end;

  begin
    update ic_chk_storage
       set in_locked = '1'
     where check_bill_no = p_related_bill_no;

    --添加多日票模式三个字段和进站线路站点
    insert into t#ic_check_storage_detail
      (storage_id,
       area_id,
       chest_id,
       storey_id,
       base_id,
       box_id,
       ic_main_type,
       ic_sub_type,
       in_num,
       start_logical_id,
       end_logical_id,
       card_money,
       line_id,
       station_id,
       exit_line_id,
       exit_station_id,
       model)
      select a.storage_id,
             a.area_id,
             a.chest_id,
             a.storey_id,
             a.base_id,
             a.box_id,
             a.ic_main_type,
             a.ic_sub_type,
             end_logical_id - start_logical_id + 1,
             start_logical_id,
             end_logical_id,
             nvl(card_money, 0),
             b.line_id,
             b.station_id,
             b.exit_line_id,
             b.exit_station_id,
             b.model
        from ic_chk_storage_detail_card a, ic_chk_storage_detail b
       where a.check_bill_no = p_related_bill_no
         and a.check_bill_no || a.box_id = b.check_bill_no || b.box_id
         and b.sys_amount < b.real_amount;

    --添加多日票模式三个字段
    insert into t#ic_check_storage_detail
      (storage_id,
       area_id,
       chest_id,
       storey_id,
       base_id,
       box_id,
       ic_main_type,
       ic_sub_type,
       in_num,
       card_money,
       line_id,
       station_id,
       valid_date,
       exit_line_id,
       exit_station_id,
       model)
      select storage_id,
             area_id,
             chest_id,
             storey_id,
             base_id,
             box_id,
             ic_main_type,
             ic_sub_type,
             real_amount - sys_amount,
             nvl(card_money, 0),
             line_id,
             station_id,
             null,
             exit_line_id,
             exit_station_id,
             model
        from ic_chk_storage_detail
       where check_bill_no = p_related_bill_no
         and (((area_id = '02' or area_id = '03') and
             check_bill_no || box_id not in
             (select check_bill_no || box_id
                  from ic_chk_storage_detail_card)) or
             (area_id != '02' and area_id != '03'))
         and sys_amount < real_amount;

    --添加多日票模式三个字段
    update t#ic_check_storage_detail a
       set a.line_id        =
           (select b.line_id
              from ic_cod_box_info b
             where a.box_id = b.box_id),
           a.station_id     =
           (select b.station_id
              from ic_cod_box_info b
             where a.box_id = b.box_id),
           a.valid_date     =
           (select to_date(b.vaild_date, 'yyyy-mm-dd')
              from ic_cod_box_info b
             where a.box_id = b.box_id),
           a.exit_line_id   =
           (select b.exit_line_id
              from ic_cod_box_info b
             where a.box_id = b.box_id),
           a.exit_station_id =
           (select b.exit_station_id
              from ic_cod_box_info b
             where a.box_id = b.box_id),
           a.model          =
           (select b.model from ic_cod_box_info b where a.box_id = b.box_id);

  exception
    when others then
      rollback;
      p_errmsg := 'error3....';
      bill_no  := v_bill_no;
      p_result := -1;
      --out_msg       := '错误：' || sqlerrm || ',发生在第[' ||dbms_utility.format_error_backtrace() || ']行';
      return;
  end;

  begin
    select count(*)
      into v_temp_number
      from t#ic_check_storage_detail a,
           ic_cod_card_type_contrast b,
           ic_cod_box_info           c
     where a.ic_main_type = b.ic_main_type
       and a.ic_sub_type = b.ic_sub_type
       and (a.area_id = '02' or a.area_id = '03')
       and a.box_id = c.box_id
       and b.box_unit - c.card_num < a.in_num;
    if v_temp_number > 0 then
      p_errmsg := '入库数量超过盒剩余容量....';
      bill_no  := v_bill_no;
      p_result := -31;
      return;
    end if;
  exception
    when others then
      p_errmsg := '入库数量超过盒剩余容量....';
      bill_no  := v_bill_no;
      p_result := -31;
      return;
  end;

  begin
    update t#ic_check_storage_detail
       set detail_place = rtrim(ltrim(chest_id || '-' || storey_id || '-' ||
                                      base_id))
     where area_id = '02'
        or area_id = '03';
    insert into t#ic_in_num
      select storage_id, area_id, sum(in_num)
        from t#ic_in_detail
       group by storage_id, area_id;
  exception
    when others then
      p_errmsg := 'error4....';
      bill_no  := v_bill_no;
      p_result := -1;
      return;
  end;

  begin
    select count(*)
      into v_temp_number
      from t#ic_in_num a, ic_cod_area b
     where a.storage_id = b.storage_id
       and a.area_id = b.area_id
       and a.in_num > (b.upper_num - b.real_num);
    if v_temp_number > 0 then
      p_errmsg := '入库数量超过区上限....';
      bill_no  := v_bill_no;
      p_result := -27;
      return;
    end if;
  exception
    when others then
      p_errmsg := '入库数量超过区上限....';
      bill_no  := v_bill_no;
      p_result := -27;
      return;
  end;
  --添加多日票模式三个字段
  begin
    insert into ic_in_store_detail
      (water_no,
       bill_no,
       reason_id,
       storage_id,
       area_id,
       ic_main_type,
       ic_sub_type,
       in_num,
       start_box_id,
       end_box_id,
       start_logical_id,
       end_logical_id,
       card_money,
       use_flag,
       detail_place,
       line_id,
       station_id,
       valid_date,
       exit_line_id,
       exit_station_id,
       model)
      select v_water_no,
             v_bill_no,
             '16',
             storage_id,
             area_id,
             trim(ic_main_type),
             trim(ic_sub_type),
             in_num,
             box_id,
             box_id,
             start_logical_id,
             end_logical_id,
             nvl(card_money, 0),
             '0',
             detail_place,
             line_id,
             station_id,
             valid_date,
             exit_line_id,
             exit_station_id,
             model
        from t#ic_check_storage_detail;

    insert into ic_in_store_bill
      (bill_no,
       bill_date,
       form_maker,
       hand_man,
       administer,
       accounter,
       record_flag,
       remark,
       related_bill_no)
    values
      (v_bill_no,
       sysdate,
       p_form_maker,
       p_hand_man,
       p_administer,
       p_accounter,
       '3',
       p_remark,
       p_related_bill_no);
  exception
    when others then
      p_errmsg := 'error5....';
      bill_no  := v_bill_no;
      p_result := -1;
      return;
  end;

  p_memo   := '单据' || p_related_bill_no || '入库成功, 用时 ' ||
              ROUND(TO_NUMBER(sysdate - v_begin_time) * 24 * 60) || ' 秒';
  bill_no  := v_bill_no;
  p_result := 0;

  --删除临时表
  begin
    delete from t#ic_check_storage_detail;
    delete from t#ic_in_num;
  end;

END;
/
grant execute on ACC_TK.UP_TK_IN_TR_TEST to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_XR
prompt ==============================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_XR" (
p_bill_no IN VARCHAR2,
p_type IN VARCHAR2,
p_form_maker IN VARCHAR2,
p_hand_man IN VARCHAR2,
p_administer IN VARCHAR2,
p_accounter IN VARCHAR2,
p_remark IN VARCHAR2,
bill_no out varchar2,
p_errmsg out varchar2,
p_result out integer,
p_memo out varchar2)

AS
v_temp_bill_no VARCHAR2(12);
v_temp_number  INTEGER;

v_begin_time         date;
v_memo               varchar(100);


BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  select sysdate into v_begin_time from dual;
  v_temp_number := 0;

/*
公共判断单据号为空和存在的函数/设置流水号 ic_prm_bill_curr_flow_tmp
*/

      begin
      select count(*) into v_temp_number from ic_in_store_bill where (p_type='SR' or p_type='TR'  or  p_type='JR')  and  related_bill_no=p_bill_no and record_flag!='1';
      exception when others then
        p_result :=-15;
        p_errmsg :='单据已经存在';
        return;
      end;
    begin
    select p_type||'T'||LPAD (current_int_no+1,'9','0') into v_temp_bill_no from ic_prm_bill_curr_flow_tmp where bill_main_type_id=p_type;
    update  ic_prm_bill_curr_flow_tmp set current_no=v_temp_bill_no, current_int_no=substr(v_temp_bill_no,4,9) where  bill_main_type_id=p_type;
          insert into ic_in_store_bill(bill_no,bill_date,form_maker,hand_man,administer,accounter ,record_flag,remark,related_bill_no )
              values(v_temp_bill_no,sysdate,p_form_maker,p_hand_man,p_administer,p_accounter ,'3',p_remark,p_bill_no);
      exception when others then
      rollback;
        return;
      end;

       p_memo :='单据'||p_bill_no||'入库成功, 用时 '||ROUND(TO_NUMBER(sysdate- v_begin_time) * 24 * 60)||' 秒';
       bill_no:=v_temp_bill_no;
       p_result :=0;





END;
/
grant execute on ACC_TK.UP_TK_IN_XR to ACC_TK_APP;


prompt
prompt Creating procedure UP_TK_IN_XR_TEST
prompt ===================================
prompt
CREATE OR REPLACE PROCEDURE ACC_TK."UP_TK_IN_XR_TEST" (
p_bill_no IN VARCHAR2,
p_type IN VARCHAR2,
p_form_maker IN VARCHAR2,
p_hand_man IN VARCHAR2,
p_administer IN VARCHAR2,
p_accounter IN VARCHAR2,
p_remark IN VARCHAR2,
bill_no out varchar2,
p_errmsg out varchar2,
p_result out integer,
p_memo out varchar2)

AS
v_temp_bill_no VARCHAR2(12);
v_temp_number  INTEGER;

v_begin_time         date;
v_memo               varchar(100);


BEGIN
  -- routine body goes here, e.g.
  -- DBMS_OUTPUT.PUT_LINE('Navicat for Oracle');
  select sysdate into v_begin_time from dual;
  v_temp_number := 0;

/*
公共判断单据号为空和存在的函数/设置流水号 ic_prm_bill_curr_flow_tmp
*/

      begin
      select count(*) into v_temp_number from ic_in_store_bill where (p_type='SR' or p_type='TR'  or  p_type='JR')  and  related_bill_no=p_bill_no and record_flag!='1';
      exception when others then
        p_result :=-15;
        p_errmsg :='单据已经存在';
        return;
      end;
    begin
    select p_type||'T'||LPAD (current_int_no+1,'9','0') into v_temp_bill_no from ic_prm_bill_curr_flow_tmp where bill_main_type_id=p_type;
    update  ic_prm_bill_curr_flow_tmp set current_no=v_temp_bill_no, current_int_no=substr(v_temp_bill_no,4,9) where  bill_main_type_id=p_type;
          insert into ic_in_store_bill(bill_no,bill_date,form_maker,hand_man,administer,accounter ,record_flag,remark,related_bill_no )
              values(v_temp_bill_no,sysdate,p_form_maker,p_hand_man,p_administer,p_accounter ,'3',p_remark,p_bill_no);
      exception when others then
      rollback;
        return;
      end;

       p_memo :='单据'||p_bill_no||'入库成功, 用时 '||ROUND(TO_NUMBER(sysdate- v_begin_time) * 24 * 60)||' 秒';
       bill_no:=v_temp_bill_no;
       p_result :=0;





END;
/
grant execute on ACC_TK.UP_TK_IN_XR_TEST to ACC_TK_APP;



spool off
