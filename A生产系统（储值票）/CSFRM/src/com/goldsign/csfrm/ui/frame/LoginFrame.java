package com.goldsign.csfrm.ui.frame;


import com.goldsign.csfrm.thread.SystemClock;
import java.awt.DisplayMode;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.util.logging.Logger;

/**
 *
 * @author  lenovo
 * 
 * 登录FRAME
 */
public class LoginFrame extends javax.swing.JFrame {
    
    private static Logger logger = Logger.getLogger(LoginFrame.class.getName());
    
    //系统时间
    private SystemClock clock;
    
    /** Creates new form LoginFrame */
    public LoginFrame() {
        
        initComponents();
        
        startLoginClock();      //启动登录界面时间线程
        
        maxWindow();            //最大化窗口
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpBackground = new javax.swing.JPanel();
        jlCurDateTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setEnabled(false);
        setForeground(new java.awt.Color(0, 0, 0));
        setUndecorated(true);

        jpBackground.setBackground(new java.awt.Color(0, 0, 0));

        jlCurDateTime.setFont(new java.awt.Font("宋体", 1, 36)); // NOI18N
        jlCurDateTime.setForeground(new java.awt.Color(255, 255, 255));

        org.jdesktop.layout.GroupLayout jpBackgroundLayout = new org.jdesktop.layout.GroupLayout(jpBackground);
        jpBackground.setLayout(jpBackgroundLayout);
        jpBackgroundLayout.setHorizontalGroup(
            jpBackgroundLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jpBackgroundLayout.createSequentialGroup()
                .addContainerGap(570, Short.MAX_VALUE)
                .add(jlCurDateTime, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(50, 50, 50))
        );
        jpBackgroundLayout.setVerticalGroup(
            jpBackgroundLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpBackgroundLayout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jlCurDateTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(340, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpBackground, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpBackground, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * 最大化窗口
     * 
     */
    private void maxWindow(){
        
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice  gd = ge.getDefaultScreenDevice(); 
        //这个代码有问题，在弹出对话框后，移动对话框，会出现对话框看不见的情况
        //gd.setFullScreenWindow(this);
        DisplayMode dm = gd.getDisplayMode();
        this.setBounds(0,0,dm.getWidth(),dm.getHeight());
        this.setVisible(true);
        this.toFront();        
        jpBackground.setBounds(0,0,dm.getWidth(),dm.getHeight());
  
    }
    
    /**
     * 销毁窗口
     * 
     */
    public void dispose(){
        
        super.dispose();
        stopLoginClock();   //停止登陆时钟线程
        
    }
    
    /**
     * 启动登录时钟线程
     * 
     */
    public void startLoginClock(){
        clock = new SystemClock(jlCurDateTime);
        clock.start();
    }
    
    /**
     * 停止登陆时钟线程
     * 
     */
    public void stopLoginClock(){
        
        try{
            clock.interrupt();
        }catch(Exception e){            
            //logger.log(Level.SEVERE, e.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginFrame().setVisible(true);
            }
        });
    }
    
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jlCurDateTime;
    private javax.swing.JPanel jpBackground;
    // End of variables declaration//GEN-END:variables
    
}
