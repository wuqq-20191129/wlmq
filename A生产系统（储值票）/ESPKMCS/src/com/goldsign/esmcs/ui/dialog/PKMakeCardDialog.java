package com.goldsign.esmcs.ui.dialog;

import com.goldsign.csfrm.ui.common.NumberDocument;
import com.goldsign.csfrm.util.MessageShowUtil;
import com.goldsign.csfrm.util.StringUtil;
import com.goldsign.csfrm.vo.CallParam;
import com.goldsign.csfrm.vo.CallResult;
import com.goldsign.esmcs.application.PKApplication;
import com.goldsign.esmcs.env.AppConstant;
import com.goldsign.esmcs.env.PKAppConstant;
import com.goldsign.esmcs.env.SynLockConstant;
import com.goldsign.esmcs.exception.PkEsJniException;
import com.goldsign.esmcs.service.IPkEsDeviceService;
import com.goldsign.esmcs.service.impl.PkEsDeviceService;
import com.goldsign.esmcs.thread.PKMakeCardThread;
import com.goldsign.esmcs.ui.panel.MadeCardPanel;
import com.goldsign.esmcs.util.Converter;
import com.goldsign.esmcs.vo.BoxInfoVo;
import com.goldsign.esmcs.vo.BoxStateVo;
import com.goldsign.esmcs.vo.EsBaseInfo;
import com.goldsign.esmcs.vo.SiteStatusVo;
import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import org.apache.log4j.Logger;

/**
 * 制卡对话框
 * 
 * @author lenvo
 */
public class PKMakeCardDialog extends MakeCardDialog {

    private static Logger logger = Logger.getLogger(PKMakeCardDialog.class.getName());
    
    protected PKMakeCardThread makeCardThread;//制卡线程
    
    private IPkEsDeviceService esDeviceService;//ES设备服务
    
    public BoxStateVo[] boxStateVos = new BoxStateVo[PKAppConstant.ES_BOX_NUM];//票箱状态
    
    public SiteStatusVo siteStatusVos;//卡位状态
    
    private EsBaseInfo esBaseInfo;//ES基本信息

    private boolean isPause = false;//暂停标识
    
    public PKMakeCardDialog(MadeCardPanel madeCardPanel) {
        super(madeCardPanel);
        this.esDeviceService = ((PKApplication) PKAppConstant.application).getPkEsDeviceService();
        super.setEsDeviceService(esDeviceService);
        this.esBaseInfo = ((PkEsDeviceService)esDeviceService).getEsBaseInfo();

        initUiParam();
    }
    
    /**
     * 初始化界面参数
     * 
     */
    protected void initUiParam() {
        initComponents();
        //初始化订单参数
        initOrderParam();
        //初始化票箱参数
        initBoxParam();
        //初始化卡位
        initSiteStatus();
        //初始化按钮
        initBtnEnable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        box1TypeBG = new javax.swing.ButtonGroup();
        box2TypeBG = new javax.swing.ButtonGroup();
        box3TypeBG = new javax.swing.ButtonGroup();
        box4TypeBG = new javax.swing.ButtonGroup();
        box5TypeBG = new javax.swing.ButtonGroup();
        box5StatusBG = new javax.swing.ButtonGroup();
        box4StatusBG = new javax.swing.ButtonGroup();
        box3StatusBG = new javax.swing.ButtonGroup();
        box2StatusBG = new javax.swing.ButtonGroup();
        box1StatusBG = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        goodCardNumTxt = new javax.swing.JTextField();
        badCardNumTxt = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        unFinishNumTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        workTypeTxt = new javax.swing.JTextField();
        orderNumTxt = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        orderNoTxt = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        cardTypeTxt = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        preMoneyTxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        employeeIdTxt = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        boxAllResetBtn = new javax.swing.JButton();
        boxAllUnloadBtn = new javax.swing.JButton();
        channelResetBtn = new javax.swing.JButton();
        jPanel38 = new javax.swing.JPanel();
        box5ResetBtn = new javax.swing.JButton();
        box5UnloadBtn = new javax.swing.JButton();
        box5TypeInvalRB = new javax.swing.JRadioButton();
        box5TypeNormalRB = new javax.swing.JRadioButton();
        box5TotalNumTxt = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        box5CurrentNumTxt = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        box5StatusPB = new javax.swing.JProgressBar();
        jPanel39 = new javax.swing.JPanel();
        box1ResetBtn = new javax.swing.JButton();
        box1UnloadBtn = new javax.swing.JButton();
        box1TypeInvalRB = new javax.swing.JRadioButton();
        box1TypeNormalRB = new javax.swing.JRadioButton();
        box1TotalNumTxt = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        box1CurrentNumTxt = new javax.swing.JTextField();
        box1StatusPB = new javax.swing.JProgressBar();
        jLabel54 = new javax.swing.JLabel();
        jPanel40 = new javax.swing.JPanel();
        box2ResetBtn = new javax.swing.JButton();
        box2UnloadBtn = new javax.swing.JButton();
        box2TypeInvalRB = new javax.swing.JRadioButton();
        box2TypeNormalRB = new javax.swing.JRadioButton();
        box2TotalNumTxt = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        box2CurrentNumTxt = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        box2StatusPB = new javax.swing.JProgressBar();
        jPanel41 = new javax.swing.JPanel();
        box3ResetBtn = new javax.swing.JButton();
        box3UnloadBtn = new javax.swing.JButton();
        box3TypeInvalRB = new javax.swing.JRadioButton();
        box3TypeNormalRB = new javax.swing.JRadioButton();
        box3TotalNumTxt = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        box3CurrentNumTxt = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        box3StatusPB = new javax.swing.JProgressBar();
        jPanel42 = new javax.swing.JPanel();
        box4ResetBtn = new javax.swing.JButton();
        box4UnloadBtn = new javax.swing.JButton();
        box4TypeInvalRB = new javax.swing.JRadioButton();
        box4TypeNormalRB = new javax.swing.JRadioButton();
        box4TotalNumTxt = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        box4CurrentNumTxt = new javax.swing.JTextField();
        jLabel62 = new javax.swing.JLabel();
        box4StatusPB = new javax.swing.JProgressBar();
        siteNo7Lbl = new javax.swing.JLabel();
        siteNo1Lbl = new javax.swing.JLabel();
        siteNo2Lbl = new javax.swing.JLabel();
        siteNo3Lbl = new javax.swing.JLabel();
        siteNo4Lbl = new javax.swing.JLabel();
        siteNo5Lbl = new javax.swing.JLabel();
        siteNo6Lbl = new javax.swing.JLabel();
        sendBoxCB1 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        pauseBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        resumeBtn = new javax.swing.JButton();
        runBtn = new javax.swing.JButton();
        infoMsgLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(91, 148, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel1.setPreferredSize(new java.awt.Dimension(1024, 768));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "运行信息", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 20), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel3.setForeground(new java.awt.Color(0, 39, 80));
        jPanel3.setOpaque(false);
        jPanel3.setPreferredSize(new java.awt.Dimension(978, 90));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel18.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("坏卡数量：");
        jPanel3.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(358, 38, -1, -1));

        jLabel19.setBackground(new java.awt.Color(255, 255, 255));
        jLabel19.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("好卡数量：");
        jPanel3.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 38, -1, -1));

        goodCardNumTxt.setEditable(false);
        goodCardNumTxt.setFont(new java.awt.Font("宋体", 1, 22)); // NOI18N
        goodCardNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        goodCardNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        goodCardNumTxt.setText("0");
        goodCardNumTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                goodCardNumTxtMouseClicked(evt);
            }
        });
        jPanel3.add(goodCardNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 37, 150, 30));

        badCardNumTxt.setEditable(false);
        badCardNumTxt.setFont(new java.awt.Font("宋体", 1, 22)); // NOI18N
        badCardNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        badCardNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        badCardNumTxt.setText("0");
        badCardNumTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                badCardNumTxtMouseClicked(evt);
            }
        });
        jPanel3.add(badCardNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 37, 150, 30));

        jLabel22.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("未做数量：");
        jPanel3.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(673, 38, -1, -1));

        unFinishNumTxt.setEditable(false);
        unFinishNumTxt.setFont(new java.awt.Font("宋体", 1, 22)); // NOI18N
        unFinishNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        unFinishNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        unFinishNumTxt.setText("0");
        jPanel3.add(unFinishNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(802, 37, 150, 30));

        jLabel1.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(94, 55, 16));
        jLabel1.setText("[双击可查询好卡明细]");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 140, -1));

        jLabel2.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(94, 55, 16));
        jLabel2.setText("[双击可查询坏卡明细]");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 20, -1, -1));

        jPanel4.setBackground(java.awt.Color.blue);
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "任务信息", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 20), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));
        jPanel4.setOpaque(false);
        jPanel4.setPreferredSize(new java.awt.Dimension(978, 90));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel20.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("工作类型：");
        jPanel4.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 38, -1, -1));

        jLabel21.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("任务数量：");
        jPanel4.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(674, 38, -1, -1));

        workTypeTxt.setEditable(false);
        workTypeTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        workTypeTxt.setForeground(new java.awt.Color(0, 39, 80));
        workTypeTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel4.add(workTypeTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(173, 37, 150, 30));

        orderNumTxt.setEditable(false);
        orderNumTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        orderNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        orderNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        orderNumTxt.setText("0");
        jPanel4.add(orderNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(803, 37, 150, 30));

        jLabel26.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("订单编号：");
        jPanel4.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 85, -1, -1));

        orderNoTxt.setEditable(false);
        orderNoTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        orderNoTxt.setForeground(new java.awt.Color(0, 39, 80));
        orderNoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        orderNoTxt.setText("00201209010001");
        jPanel4.add(orderNoTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(173, 85, 150, 30));

        jLabel27.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel27.setText("票卡类型：");
        jPanel4.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(359, 86, -1, -1));

        cardTypeTxt.setEditable(false);
        cardTypeTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        cardTypeTxt.setForeground(new java.awt.Color(0, 39, 80));
        cardTypeTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel4.add(cardTypeTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(488, 85, 150, 30));

        jLabel28.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("预赋金额：");
        jPanel4.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(674, 86, -1, -1));

        preMoneyTxt.setEditable(false);
        preMoneyTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        preMoneyTxt.setForeground(new java.awt.Color(0, 39, 80));
        preMoneyTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        preMoneyTxt.setText("0");
        jPanel4.add(preMoneyTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(803, 85, 150, 30));

        jLabel17.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("ES操作员：");
        jPanel4.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(358, 38, -1, -1));

        employeeIdTxt.setEditable(false);
        employeeIdTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        employeeIdTxt.setForeground(new java.awt.Color(0, 39, 80));
        employeeIdTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel4.add(employeeIdTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(488, 37, 150, 30));

        jPanel5.setBackground(java.awt.Color.blue);
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "设备操作", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 20), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));
        jPanel5.setOpaque(false);
        jPanel5.setPreferredSize(new java.awt.Dimension(978, 90));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        boxAllResetBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        boxAllResetBtn.setText("复位票箱");
        boxAllResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxAllResetBtnActionPerformed(evt);
            }
        });
        jPanel5.add(boxAllResetBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 380, -1, -1));

        boxAllUnloadBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        boxAllUnloadBtn.setText("拆卸票箱");
        boxAllUnloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxAllUnloadBtnActionPerformed(evt);
            }
        });
        jPanel5.add(boxAllUnloadBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 380, -1, -1));

        channelResetBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        channelResetBtn.setText("复位通道");
        channelResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelResetBtnActionPerformed(evt);
            }
        });
        jPanel5.add(channelResetBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 380, -1, -1));

        jPanel38.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(251, 216, 182), 1, true), "5号票箱", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14), new java.awt.Color(94, 55, 16))); // NOI18N
        jPanel38.setOpaque(false);
        jPanel38.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        box5ResetBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box5ResetBtn.setText("复位");
        box5ResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box5ResetBtnActionPerformed(evt);
            }
        });
        jPanel38.add(box5ResetBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 20, -1, -1));

        box5UnloadBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box5UnloadBtn.setText("拆卸");
        box5UnloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box5UnloadBtnActionPerformed(evt);
            }
        });
        jPanel38.add(box5UnloadBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 20, -1, -1));

        box5TypeInvalRB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box5TypeInvalRB.setForeground(new java.awt.Color(94, 55, 16));
        box5TypeInvalRB.setSelected(true);
        box5TypeInvalRB.setText("废票");
        box5TypeInvalRB.setOpaque(false);
        box5TypeInvalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box5TypeInvalRBActionPerformed(evt);
            }
        });
        jPanel38.add(box5TypeInvalRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        box5TypeNormalRB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box5TypeNormalRB.setForeground(new java.awt.Color(94, 55, 16));
        box5TypeNormalRB.setText("正常");
        box5TypeNormalRB.setOpaque(false);
        box5TypeNormalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box5TypeNormalRBActionPerformed(evt);
            }
        });
        jPanel38.add(box5TypeNormalRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        box5TotalNumTxt.setDocument(new NumberDocument(3,0));
        box5TotalNumTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box5TotalNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        box5TotalNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box5TotalNumTxt.setText("500");
        box5TotalNumTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                box5TotalNumTxtFocusLost(evt);
            }
        });
        jPanel38.add(box5TotalNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 120, 30));

        jLabel47.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel47.setText("容量：");
        jPanel38.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, -1, 30));

        jLabel49.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel49.setText("数量：");
        jPanel38.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, 30));

        box5CurrentNumTxt.setEditable(false);
        box5CurrentNumTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box5CurrentNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        box5CurrentNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box5CurrentNumTxt.setText("0");
        jPanel38.add(box5CurrentNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 120, 30));

        jLabel63.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel63.setText("状态：");
        jPanel38.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, -1, 30));

        box5StatusPB.setBackground(new java.awt.Color(255, 255, 255));
        box5StatusPB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box5StatusPB.setForeground(java.awt.Color.green);
        box5StatusPB.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        box5StatusPB.setStringPainted(true);
        jPanel38.add(box5StatusPB, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 120, 30));

        jPanel5.add(jPanel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 980, 60));

        jPanel39.setBackground(new java.awt.Color(255, 255, 255));
        jPanel39.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(251, 216, 182), 1, true), "1号票箱", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14), new java.awt.Color(94, 55, 16))); // NOI18N
        jPanel39.setOpaque(false);
        jPanel39.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        box1ResetBtn.setBackground(new java.awt.Color(255, 255, 255));
        box1ResetBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box1ResetBtn.setText("复位");
        box1ResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box1ResetBtnActionPerformed(evt);
            }
        });
        jPanel39.add(box1ResetBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 20, -1, -1));

        box1UnloadBtn.setBackground(new java.awt.Color(255, 255, 255));
        box1UnloadBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box1UnloadBtn.setText("拆卸");
        box1UnloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box1UnloadBtnActionPerformed(evt);
            }
        });
        jPanel39.add(box1UnloadBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 20, -1, -1));

        box1TypeInvalRB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box1TypeInvalRB.setForeground(new java.awt.Color(94, 55, 16));
        box1TypeInvalRB.setText("废票");
        box1TypeInvalRB.setOpaque(false);
        box1TypeInvalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box1TypeInvalRBActionPerformed(evt);
            }
        });
        jPanel39.add(box1TypeInvalRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        box1TypeNormalRB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box1TypeNormalRB.setForeground(new java.awt.Color(94, 55, 16));
        box1TypeNormalRB.setSelected(true);
        box1TypeNormalRB.setText("正常");
        box1TypeNormalRB.setOpaque(false);
        box1TypeNormalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box1TypeNormalRBActionPerformed(evt);
            }
        });
        jPanel39.add(box1TypeNormalRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        box1TotalNumTxt.setDocument(new NumberDocument(3,0));
        box1TotalNumTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box1TotalNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        box1TotalNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box1TotalNumTxt.setText("500");
        box1TotalNumTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                box1TotalNumTxtFocusLost(evt);
            }
        });
        jPanel39.add(box1TotalNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 120, 30));

        jLabel50.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel50.setText("容量：");
        jPanel39.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, -1, 30));

        jLabel52.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel52.setText("状态：");
        jPanel39.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, -1, 30));

        box1CurrentNumTxt.setEditable(false);
        box1CurrentNumTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box1CurrentNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        box1CurrentNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box1CurrentNumTxt.setText("0");
        jPanel39.add(box1CurrentNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 120, 30));

        box1StatusPB.setBackground(new java.awt.Color(255, 255, 255));
        box1StatusPB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box1StatusPB.setForeground(java.awt.Color.green);
        box1StatusPB.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        box1StatusPB.setStringPainted(true);
        jPanel39.add(box1StatusPB, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 120, 30));

        jLabel54.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel54.setText("数量：");
        jPanel39.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, 30));

        jPanel5.add(jPanel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 980, 60));

        jPanel40.setBackground(new java.awt.Color(255, 255, 255));
        jPanel40.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(251, 216, 182), 1, true), "2号票箱", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14), new java.awt.Color(94, 55, 16))); // NOI18N
        jPanel40.setOpaque(false);
        jPanel40.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        box2ResetBtn.setBackground(new java.awt.Color(255, 255, 255));
        box2ResetBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box2ResetBtn.setText("复位");
        box2ResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box2ResetBtnActionPerformed(evt);
            }
        });
        jPanel40.add(box2ResetBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 20, -1, -1));

        box2UnloadBtn.setBackground(new java.awt.Color(255, 255, 255));
        box2UnloadBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box2UnloadBtn.setText("拆卸");
        box2UnloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box2UnloadBtnActionPerformed(evt);
            }
        });
        jPanel40.add(box2UnloadBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 20, -1, -1));

        box2TypeInvalRB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box2TypeInvalRB.setForeground(new java.awt.Color(94, 55, 16));
        box2TypeInvalRB.setText("废票");
        box2TypeInvalRB.setOpaque(false);
        box2TypeInvalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box2TypeInvalRBActionPerformed(evt);
            }
        });
        jPanel40.add(box2TypeInvalRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        box2TypeNormalRB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box2TypeNormalRB.setForeground(new java.awt.Color(94, 55, 16));
        box2TypeNormalRB.setSelected(true);
        box2TypeNormalRB.setText("正常");
        box2TypeNormalRB.setOpaque(false);
        box2TypeNormalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box2TypeNormalRBActionPerformed(evt);
            }
        });
        jPanel40.add(box2TypeNormalRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        box2TotalNumTxt.setDocument(new NumberDocument(3,0));
        box2TotalNumTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box2TotalNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        box2TotalNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box2TotalNumTxt.setText("500");
        box2TotalNumTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                box2TotalNumTxtFocusLost(evt);
            }
        });
        jPanel40.add(box2TotalNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 120, 30));

        jLabel53.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel53.setText("容量：");
        jPanel40.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, -1, 30));

        jLabel55.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel55.setText("数量：");
        jPanel40.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, 30));

        box2CurrentNumTxt.setEditable(false);
        box2CurrentNumTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box2CurrentNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        box2CurrentNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box2CurrentNumTxt.setText("0");
        jPanel40.add(box2CurrentNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 120, 30));

        jLabel57.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel57.setText("状态：");
        jPanel40.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, -1, 30));

        box2StatusPB.setBackground(new java.awt.Color(255, 255, 255));
        box2StatusPB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box2StatusPB.setForeground(java.awt.Color.green);
        box2StatusPB.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        box2StatusPB.setStringPainted(true);
        jPanel40.add(box2StatusPB, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 120, 30));

        jPanel5.add(jPanel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 980, 60));

        jPanel41.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(251, 216, 182), 1, true), "3号票箱", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14), new java.awt.Color(94, 55, 16))); // NOI18N
        jPanel41.setOpaque(false);
        jPanel41.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        box3ResetBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box3ResetBtn.setText("复位");
        box3ResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box3ResetBtnActionPerformed(evt);
            }
        });
        jPanel41.add(box3ResetBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 20, -1, -1));

        box3UnloadBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box3UnloadBtn.setText("拆卸");
        box3UnloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box3UnloadBtnActionPerformed(evt);
            }
        });
        jPanel41.add(box3UnloadBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 20, -1, -1));

        box3TypeInvalRB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box3TypeInvalRB.setForeground(new java.awt.Color(94, 55, 16));
        box3TypeInvalRB.setText("废票");
        box3TypeInvalRB.setOpaque(false);
        box3TypeInvalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box3TypeInvalRBActionPerformed(evt);
            }
        });
        jPanel41.add(box3TypeInvalRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        box3TypeNormalRB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box3TypeNormalRB.setForeground(new java.awt.Color(94, 55, 16));
        box3TypeNormalRB.setSelected(true);
        box3TypeNormalRB.setText("正常");
        box3TypeNormalRB.setOpaque(false);
        box3TypeNormalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box3TypeNormalRBActionPerformed(evt);
            }
        });
        jPanel41.add(box3TypeNormalRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        box3TotalNumTxt.setDocument(new NumberDocument(3,0));
        box3TotalNumTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box3TotalNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        box3TotalNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box3TotalNumTxt.setText("500");
        box3TotalNumTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                box3TotalNumTxtFocusLost(evt);
            }
        });
        jPanel41.add(box3TotalNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 120, 30));

        jLabel56.setBackground(new java.awt.Color(255, 255, 255));
        jLabel56.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel56.setText("容量：");
        jPanel41.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, -1, 30));

        jLabel58.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel58.setText("数量：");
        jPanel41.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, 30));

        box3CurrentNumTxt.setEditable(false);
        box3CurrentNumTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box3CurrentNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box3CurrentNumTxt.setText("0");
        jPanel41.add(box3CurrentNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 120, 30));

        jLabel60.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel60.setText("状态：");
        jPanel41.add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, -1, 30));

        box3StatusPB.setBackground(new java.awt.Color(255, 255, 255));
        box3StatusPB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box3StatusPB.setForeground(java.awt.Color.green);
        box3StatusPB.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        box3StatusPB.setStringPainted(true);
        jPanel41.add(box3StatusPB, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 120, 30));

        jPanel5.add(jPanel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 980, 60));

        jPanel42.setBackground(new java.awt.Color(255, 255, 255));
        jPanel42.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(251, 216, 182), 1, true), "4号票箱", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14), new java.awt.Color(94, 55, 16))); // NOI18N
        jPanel42.setOpaque(false);
        jPanel42.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        box4ResetBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box4ResetBtn.setText("复位");
        box4ResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box4ResetBtnActionPerformed(evt);
            }
        });
        jPanel42.add(box4ResetBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 20, -1, -1));

        box4UnloadBtn.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box4UnloadBtn.setText("拆卸");
        box4UnloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box4UnloadBtnActionPerformed(evt);
            }
        });
        jPanel42.add(box4UnloadBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 20, -1, -1));

        box4TypeInvalRB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box4TypeInvalRB.setForeground(new java.awt.Color(94, 55, 16));
        box4TypeInvalRB.setText("废票");
        box4TypeInvalRB.setOpaque(false);
        box4TypeInvalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box4TypeInvalRBActionPerformed(evt);
            }
        });
        jPanel42.add(box4TypeInvalRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        box4TypeNormalRB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box4TypeNormalRB.setForeground(new java.awt.Color(94, 55, 16));
        box4TypeNormalRB.setSelected(true);
        box4TypeNormalRB.setText("正常");
        box4TypeNormalRB.setOpaque(false);
        box4TypeNormalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box4TypeNormalRBActionPerformed(evt);
            }
        });
        jPanel42.add(box4TypeNormalRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        box4TotalNumTxt.setDocument(new NumberDocument(3,0));
        box4TotalNumTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box4TotalNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        box4TotalNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box4TotalNumTxt.setText("500");
        box4TotalNumTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                box4TotalNumTxtFocusLost(evt);
            }
        });
        jPanel42.add(box4TotalNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 120, 30));

        jLabel59.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel59.setText("容量：");
        jPanel42.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, -1, 30));

        jLabel61.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel61.setText("数量：");
        jPanel42.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, 30));

        box4CurrentNumTxt.setEditable(false);
        box4CurrentNumTxt.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box4CurrentNumTxt.setForeground(new java.awt.Color(0, 39, 80));
        box4CurrentNumTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box4CurrentNumTxt.setText("0");
        jPanel42.add(box4CurrentNumTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 120, 30));

        jLabel62.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel62.setText("状态：");
        jPanel42.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, -1, 30));

        box4StatusPB.setBackground(new java.awt.Color(255, 255, 255));
        box4StatusPB.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        box4StatusPB.setForeground(java.awt.Color.green);
        box4StatusPB.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        box4StatusPB.setStringPainted(true);
        jPanel42.add(box4StatusPB, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 120, 30));

        jPanel5.add(jPanel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 980, 60));

        siteNo7Lbl.setBackground(new java.awt.Color(91, 148, 204));
        siteNo7Lbl.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        siteNo7Lbl.setText("5#回收卡位");
        siteNo7Lbl.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.yellow));
        siteNo7Lbl.setOpaque(true);
        jPanel5.add(siteNo7Lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 100, 30));

        siteNo1Lbl.setBackground(new java.awt.Color(91, 148, 204));
        siteNo1Lbl.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        siteNo1Lbl.setText("发卡器卡位");
        siteNo1Lbl.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.yellow));
        siteNo1Lbl.setOpaque(true);
        jPanel5.add(siteNo1Lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 340, 100, 30));

        siteNo2Lbl.setBackground(new java.awt.Color(91, 148, 204));
        siteNo2Lbl.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        siteNo2Lbl.setText("读写器卡位");
        siteNo2Lbl.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.yellow));
        siteNo2Lbl.setOpaque(true);
        jPanel5.add(siteNo2Lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 340, 100, 30));

        siteNo3Lbl.setBackground(new java.awt.Color(91, 148, 204));
        siteNo3Lbl.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        siteNo3Lbl.setText("1#回收卡位");
        siteNo3Lbl.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.yellow));
        siteNo3Lbl.setOpaque(true);
        jPanel5.add(siteNo3Lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 340, 100, 30));

        siteNo4Lbl.setBackground(new java.awt.Color(91, 148, 204));
        siteNo4Lbl.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        siteNo4Lbl.setText("2#回收卡位");
        siteNo4Lbl.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.yellow));
        siteNo4Lbl.setOpaque(true);
        jPanel5.add(siteNo4Lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 340, 100, 30));

        siteNo5Lbl.setBackground(new java.awt.Color(91, 148, 204));
        siteNo5Lbl.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        siteNo5Lbl.setText("3#回收卡位");
        siteNo5Lbl.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.yellow));
        siteNo5Lbl.setOpaque(true);
        jPanel5.add(siteNo5Lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 340, 100, 30));

        siteNo6Lbl.setBackground(new java.awt.Color(91, 148, 204));
        siteNo6Lbl.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        siteNo6Lbl.setText("4#回收卡位");
        siteNo6Lbl.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.yellow));
        siteNo6Lbl.setOpaque(true);
        jPanel5.add(siteNo6Lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 340, 100, 30));

        sendBoxCB1.setBackground(new java.awt.Color(91, 148, 204));
        sendBoxCB1.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        sendBoxCB1.setSelected(true);
        sendBoxCB1.setText("1#发卡箱");
        sendBoxCB1.setBorder(new javax.swing.border.LineBorder(java.awt.Color.yellow, 1, true));
        sendBoxCB1.setBorderPainted(true);
        sendBoxCB1.setBorderPaintedFlat(true);
        sendBoxCB1.setEnabled(false);
        jPanel5.add(sendBoxCB1, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 340, 120, 30));

        jPanel6.setBackground(java.awt.Color.blue);
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 20), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel6.setForeground(new java.awt.Color(255, 255, 255));
        jPanel6.setOpaque(false);
        jPanel6.setPreferredSize(new java.awt.Dimension(978, 90));

        pauseBtn.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        pauseBtn.setLabel("暂停");
        pauseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseBtnActionPerformed(evt);
            }
        });

        exitBtn.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        exitBtn.setLabel("退出");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        progressBar.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        progressBar.setForeground(java.awt.Color.green);
        progressBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        progressBar.setString("速度:0s,完成:0%");
        progressBar.setStringPainted(true);

        resumeBtn.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        resumeBtn.setText("继续");
        resumeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeBtnActionPerformed(evt);
            }
        });

        runBtn.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        runBtn.setText("运行");
        runBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBtnActionPerformed(evt);
            }
        });

        infoMsgLbl.setFont(new java.awt.Font("黑体", 0, 18)); // NOI18N
        infoMsgLbl.setForeground(java.awt.Color.red);
        infoMsgLbl.setText(" ");

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(runBtn)
                .add(37, 37, 37)
                .add(pauseBtn)
                .add(37, 37, 37)
                .add(resumeBtn)
                .add(54, 54, 54)
                .add(exitBtn)
                .add(266, 266, 266))
            .add(jPanel6Layout.createSequentialGroup()
                .add(44, 44, 44)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 904, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(infoMsgLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 904, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(4, 4, 4)
                .add(infoMsgLbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                .add(10, 10, 10)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(pauseBtn)
                    .add(resumeBtn)
                    .add(runBtn)
                    .add(exitBtn))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1002, Short.MAX_VALUE)
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1002, Short.MAX_VALUE)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 423, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1024, 768));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 是否已暂停
     * 
     * @return 
     */
    public boolean isPause(){
        synchronized(SynLockConstant.SYN_PAUSE_LOCK){
            return this.isPause;
        }
    }
    
    /**
     * 设置暂停
     * 
     * @param isPause 
     */
    public void setPause(boolean isPause){
        synchronized(SynLockConstant.SYN_PAUSE_LOCK){
            if(isPause){
                setBtnStatus(PKAppConstant.MAKE_CARD_STATUS_PAUSE);
            }else{
                setBtnStatus(PKAppConstant.MAKE_CARD_STATUS_RESUME);
            }
            this.isPause = isPause;
        }
    }
        
    /**
     * 退出
     * 
     * @param evt 
     */
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        
        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定退出制卡？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        } 
        if(null != makeCardThread && makeCardThread.isRunning()){
            yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("设备正运行中，是否继续退出？");
            if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
                return;
            } 
            //MessageShowUtil.alertWarnMsg("设备运行中，不能退出！");
            //return;
        }
        exit();
        //printOrder(curOrderVo);//打印小票
    }//GEN-LAST:event_exitBtnActionPerformed
    
    /**
     * 退出，等待制卡线程退出后，才退出
     * 
     * @throws InterruptedException 
     */
    public void exit() {
        setBtnStatus(PKAppConstant.MAKE_CARD_STATUS_STOP);
        if (null != makeCardThread) {
            pause();
            //makeCardThread.interrupt();
            makeCardThread.stop();
        }
        this.dispose();
        
    }
    
    /**
     * 暂停
     * 
     * @param evt 
     */
    private void pauseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseBtnActionPerformed
        
        pause();
    }//GEN-LAST:event_pauseBtnActionPerformed

    /**
     * 暂停，等待制卡线程暂停后，才暂停
     * 
     * @throws InterruptedException 
     */
    public void pause(){
      
        setPause(true);
        while (null != makeCardThread 
                && makeCardThread.isAlive() 
                && !makeCardThread.isPause()) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    /**
     * 继续
     * 
     * @param evt 
     */
    private void resumeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeBtnActionPerformed
        
        if (null != makeCardThread && makeCardThread.isRunning()) {
            MessageShowUtil.alertWarnMsg("设备运行中，不能继续！");
            return;
        }
        resume();
    }//GEN-LAST:event_resumeBtnActionPerformed
   
    /**
     * 继续
     * 
     */
    public void resume(){
        //检测票箱设置状态
        if(!checkBoxSetStatus()){
            return;
        }
        //if (!checkEsPhyStatus()) {
        if(!checkBoxPhyStatus()){
            return;
        }
        setPause(false);
    }
    
    /**
     * 检测ES物理状态
     *
     * @return
     */
    protected boolean checkESStatus() {
        
        StringBuffer msg = new StringBuffer("");
        boolean result = true;
        if(!PKAppConstant.CHANNEL_PORT){
            msg.append("ES通道接口,");
            result = false;
        }
        if(!PKAppConstant.BOX_PORT){
            msg.append("ES票箱接口,");
            result = false;
        }      
        if(!PKAppConstant.STATUS_BAR_RW_PORT_STATE.state){
            msg.append("读写器接口,");
            result = false;
        }
        String errMsg = "";
        if(!result){
            errMsg = msg.toString().substring(0, msg.length()-1)+"不正常";
            logger.error(errMsg);
            MessageShowUtil.errorOpMsg(errMsg);
        }
        return result;
    }
    
      /**
     * 检测ES物理状态
     *
     * @return
     */
    protected boolean checkCommuKmsStatus() {
        
        StringBuffer msg = new StringBuffer("");
        boolean result = true;
        if(!PKAppConstant.COMMU_STATUS){
            msg.append("ES通讯接口,");
            result = false;
        }
        if(!PKAppConstant.KMS_STATUS){
            msg.append("加密机接口,");
            result = false;
        }    
        String errMsg = "";
        if(!result){
            errMsg = msg.toString().substring(0, msg.length()-1)+"不正常";
            logger.error(errMsg);
            MessageShowUtil.errorOpMsg(errMsg);
        }
        return result;
    }
    
    /**
     * 检查票箱逻辑设置，必须设置有正常票箱和废票箱
     * 
     * @return 
     */
    protected boolean checkBoxSetStatus(){
    
        boolean isHaveNormalBox = false;
        boolean isHaveInvalBox = false;
        for(BoxStateVo boxStateVo: boxStateVos){
            if(boxStateVo.isNormal()){
                isHaveNormalBox = true;
            }
            if(boxStateVo.isInval()){
                isHaveInvalBox = true;
            }
            if(isHaveNormalBox&&isHaveInvalBox){
                break;
            }
        }
        if(!isHaveNormalBox){
            MessageShowUtil.alertErrorMsg("请设置正常票箱！");
        }
        if(!isHaveInvalBox){
            MessageShowUtil.alertErrorMsg("请设置废票箱！");
        }
        
        return isHaveNormalBox&&isHaveInvalBox;
    }
    
    /**
     * 开始
     * 
     * @param evt 
     */
    private void runBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBtnActionPerformed
        
        run();
    }//GEN-LAST:event_runBtnActionPerformed

    /**
     * 开始运行
     * 
     */
    public void run(){
        
        //检测ES物理状态
        if(!checkESStatus()){
            MessageShowUtil.alertErrorMsg("ES机不处于物理启动状态！");
            return;
        }
        
        //检测ES物理状态
     
        if(!checkCommuKmsStatus()){
            MessageShowUtil.alertErrorMsg("加密机或ES通讯异常！");
            return;
        }
        
        
          //检测ES物理状态
        if(!checkESStatus()){
            MessageShowUtil.alertErrorMsg("获取票箱物理状态失败！");
            return;
        }
        
        //检查订单是否已完
        if(curOrderVo.isStatusFinishOrEnd()){
            MessageShowUtil.alertErrorMsg("订单已结束或完成!");
            return;
        }
        
        //检查订单合法性
        CallResult callResult = checkOrderIlligal(curOrderVo);
        if(!callResult.isSuccess()){
            MessageShowUtil.alertErrorMsg(callResult.getMsg());
            return;
        }
        
        //检测票箱设置状态
        if(!checkBoxSetStatus()){
            return;
        }
        
        //检测票箱物理状态
        if(!checkEsPhyStatus()){
            return;
       }
        
        //更改订单状态
        if(AppConstant.ES_ORDER_STATUS_BEGIN_NO.equals(curOrderVo.getStatus())){
            if (!updateOrderStatus()) {
                MessageShowUtil.alertErrorMsg("更改订单状态失败!");
                return;
            }
            //创建制卡文件
            if(!createMakingOrder()){
                MessageShowUtil.alertErrorMsg("创建制卡文件失败!");
                return;
            }
        }
     
        //下载记名卡资料
        if(isNeedQuerySignCards()){
            if(!querySignCards()){
                MessageShowUtil.alertErrorMsg("下载记名卡资料失败!");
                return;
            }
        }

        //ES设备状态信息
       if(!updateDeviceStatus(AppConstant.ES_DEVICE_STATUS_BEGIN_MAKE)){
            MessageShowUtil.alertErrorMsg("更改设备状态(开始制票)失败!");
            return;
       }
       
       //加载已制的卡
       callResult = loadMakedCards(curOrderVo);
       if (!callResult.isSuccess()) {
            MessageShowUtil.alertErrorMsg(callResult.getMsg());
            return;
        }
        
        //启动制卡线程
        startMakeCardThread();

        //设置按钮开始状态
        setBtnStatus(PKAppConstant.MAKE_CARD_STATUS_RUN);
    }
    
    /**
     * 启动制卡线程
     * 
     */
    protected void startMakeCardThread(){
        makeCardThread = new PKMakeCardThread(this, boxStateVos, siteStatusVos);
        makeCardThread.start();
    }
    
    /**
     * 运行时锁票箱区
     * 
     */
    protected void runingLockBox(boolean lock){
        
        lock = !lock;
        for(BoxStateVo boxStateVo:boxStateVos){
            boxStateVo.boxTypeNormalRB.setEnabled(lock);
            boxStateVo.boxTypeInvalRB.setEnabled(lock);
            boxStateVo.boxTotalNumTxt.setEditable(lock);
            boxStateVo.boxResetBtn.setEnabled(lock);
            boxStateVo.boxUnloadBtn.setEnabled(lock);
        }
        boxAllResetBtn.setEnabled(lock);
        boxAllUnloadBtn.setEnabled(lock);
        channelResetBtn.setEnabled(lock);
    }
    
    /**
     * 设置按钮状态,包括初始化、运行、暂停、继续、退出
     * 
     * @param btn 
     */
    @Override
    public void setBtnStatus(int btn){
        switch(btn){
            case PKAppConstant.MAKE_CARD_STATUS_INIT:{
                runBtn.setEnabled(true);
                pauseBtn.setEnabled(false);
                resumeBtn.setEnabled(false);
                exitBtn.setEnabled(true);
                break;
            }
            case PKAppConstant.MAKE_CARD_STATUS_RUN:{
                runBtn.setEnabled(false);
                pauseBtn.setEnabled(true);
                exitBtn.setEnabled(false);
                runingLockBox(true);
                break;
            }
            case PKAppConstant.MAKE_CARD_STATUS_PAUSE:{
                pauseBtn.setEnabled(false);
                resumeBtn.setEnabled(true);
                exitBtn.setEnabled(true);
                runingLockBox(false);
                break;
            }
            case PKAppConstant.MAKE_CARD_STATUS_RESUME:{
                pauseBtn.setEnabled(true);
                resumeBtn.setEnabled(false);
                exitBtn.setEnabled(false);
                runingLockBox(true);
                break;
            }
            case PKAppConstant.MAKE_CARD_STATUS_STOP:{
                runBtn.setEnabled(true);
                pauseBtn.setEnabled(false);
                resumeBtn.setEnabled(false);
                exitBtn.setEnabled(true);
                runingLockBox(false);
                break;
            }case PKAppConstant.MAKE_CARD_STATUS_EXIT:{
                runBtn.setEnabled(false);
                pauseBtn.setEnabled(false);
                resumeBtn.setEnabled(false);
                exitBtn.setEnabled(true);
                runingLockBox(false);
                break;
            }
            default:{
                break;
            }
        }
    }
    
    /**
     * 正常票箱1点击事件
     * 
     * @param evt 
     */
    private void box1TypeNormalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box1TypeNormalRBActionPerformed
      
        JRadioButton rb = (JRadioButton) evt.getSource();
        setBoxTypeSelected(rb, box1TypeInvalRB);
    }//GEN-LAST:event_box1TypeNormalRBActionPerformed

    /**
     * 废票票箱1点击事件
     *
     * @param evt
     */
    private void box1TypeInvalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box1TypeInvalRBActionPerformed
        
        JRadioButton rb = (JRadioButton) evt.getSource();
        setBoxTypeSelected(rb, box1TypeNormalRB);
    }//GEN-LAST:event_box1TypeInvalRBActionPerformed

    /**
     * 正常票箱2点击事件
     *
     * @param evt
     */
    private void box2TypeNormalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box2TypeNormalRBActionPerformed
      
        JRadioButton rb = (JRadioButton) evt.getSource();
        setBoxTypeSelected(rb, box2TypeInvalRB);
    }//GEN-LAST:event_box2TypeNormalRBActionPerformed

    /**
     * 废票票箱2点击事件
     *
     * @param evt
     */
    private void box2TypeInvalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box2TypeInvalRBActionPerformed
       
        JRadioButton rb = (JRadioButton) evt.getSource();
        setBoxTypeSelected(rb, box2TypeNormalRB);
    }//GEN-LAST:event_box2TypeInvalRBActionPerformed

    /**
     * 正常票箱3点击事件
     *
     * @param evt
     */
    private void box3TypeNormalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box3TypeNormalRBActionPerformed
       
        JRadioButton rb = (JRadioButton) evt.getSource();
        setBoxTypeSelected(rb, box3TypeInvalRB);
    }//GEN-LAST:event_box3TypeNormalRBActionPerformed

    /**
     * 废票票箱3点击事件
     *
     * @param evt
     */
    private void box3TypeInvalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box3TypeInvalRBActionPerformed
       
        JRadioButton rb = (JRadioButton) evt.getSource();
        setBoxTypeSelected(rb, box3TypeNormalRB);
    }//GEN-LAST:event_box3TypeInvalRBActionPerformed

    /**
     * 正常票箱4点击事件
     * 
     * @param evt 
     */
    private void box4TypeNormalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box4TypeNormalRBActionPerformed
        
        JRadioButton rb = (JRadioButton) evt.getSource();
        setBoxTypeSelected(rb, box4TypeInvalRB);
    }//GEN-LAST:event_box4TypeNormalRBActionPerformed

    /**
     * 废票票箱4点击事件
     *
     * @param evt
     */
    private void box4TypeInvalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box4TypeInvalRBActionPerformed
        
        JRadioButton rb = (JRadioButton) evt.getSource();
        setBoxTypeSelected(rb, box4TypeNormalRB);
    }//GEN-LAST:event_box4TypeInvalRBActionPerformed

    /**
     * 正常票箱5点击事件
     * 
     * @param evt 
     */
    private void box5TypeNormalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box5TypeNormalRBActionPerformed
       
        JRadioButton rb = (JRadioButton) evt.getSource();
        setBoxTypeSelected(rb, box5TypeInvalRB);
    }//GEN-LAST:event_box5TypeNormalRBActionPerformed

    /**
     * 废票票箱5点击事件
     *
     * @param evt
     */
    private void box5TypeInvalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box5TypeInvalRBActionPerformed
       
        JRadioButton rb = (JRadioButton) evt.getSource();
        setBoxTypeSelected(rb, box5TypeNormalRB); 
    }//GEN-LAST:event_box5TypeInvalRBActionPerformed

    /**
     * 复位所有
     * 
     * @param evt 
     */
    private void boxAllResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxAllResetBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定复位所有票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能复位票箱！");
            return;
        }
        for(BoxStateVo boxStateVo: boxStateVos){
            resetOneBox(boxStateVo.boxNo);
        }
        //resetAllBox();
        clearAllBoxNum();
        MessageShowUtil.alertInfoMsg("复位所有票箱完成.");
        
    }//GEN-LAST:event_boxAllResetBtnActionPerformed
 
    /**
     * 复位单个
     * 
     * @param evt 
     */
    private void box1ResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box1ResetBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定复位1#票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能复位票箱！");
            return;
        }
        resetOneBox(1);
        clearOneBoxNum(1);
        MessageShowUtil.alertInfoMsg("复位1#票箱完成.");
        
        
    }//GEN-LAST:event_box1ResetBtnActionPerformed

    /**
     * 复位单个
     * 
     * @param evt 
     */
    private void box2ResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box2ResetBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定复位2#票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能复位票箱！");
            return;
        }
        resetOneBox(2);
        clearOneBoxNum(2);
        MessageShowUtil.alertInfoMsg("复位2#票箱完成.");
        
    }//GEN-LAST:event_box2ResetBtnActionPerformed

    /**
     * 复位单个
     * 
     * @param evt 
     */
    private void box3ResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box3ResetBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定复位3#票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能复位票箱！");
            return;
        }
        resetOneBox(3);
        clearOneBoxNum(3);
        MessageShowUtil.alertInfoMsg("复位3#票箱完成.");
        
    }//GEN-LAST:event_box3ResetBtnActionPerformed

    /**
     * 复位单个
     * 
     * @param evt 
     */
    private void box4ResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box4ResetBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定复位4#票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能复位票箱！");
            return;
        }
        resetOneBox(4);
        clearOneBoxNum(4);
        MessageShowUtil.alertInfoMsg("复位4#票箱完成.");
        
    }//GEN-LAST:event_box4ResetBtnActionPerformed

    /**
     * 复位单个
     * 
     * @param evt 
     */
    private void box5ResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box5ResetBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定复位5#票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能复位票箱！");
            return;
        }
        resetOneBox(5);
        clearOneBoxNum(5);
        MessageShowUtil.alertInfoMsg("复位5#票箱完成.");      

    }//GEN-LAST:event_box5ResetBtnActionPerformed

    /**
     * 卸载所有
     * 
     * @param evt 
     */
    private void boxAllUnloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxAllUnloadBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定拆卸所有票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能拆卸票箱！");
            return;
        }
        for(BoxStateVo boxStateVo: boxStateVos){
            uploadOneBox(boxStateVo.boxNo);
        }
        //uploadAllBox();
        MessageShowUtil.alertInfoMsg("拆卸所有票箱完成.");
        
    }//GEN-LAST:event_boxAllUnloadBtnActionPerformed

    /**
     * 卸载单个
     * 
     * @param evt 
     */
    private void box1UnloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box1UnloadBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定拆卸1#票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能拆卸票箱！");
            return;
        }
        uploadOneBox(1);
        MessageShowUtil.alertInfoMsg("拆卸1#票箱完成.");        
        
    }//GEN-LAST:event_box1UnloadBtnActionPerformed

    /**
     * 卸载单个
     * 
     * @param evt 
     */
    private void box2UnloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box2UnloadBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定拆卸2#票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
           return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能拆卸票箱！");
            return;
        }
        uploadOneBox(2);
        MessageShowUtil.alertInfoMsg("拆卸2#票箱完成.");     
        
    }//GEN-LAST:event_box2UnloadBtnActionPerformed

    /**
     * 卸载单个
     * 
     * @param evt 
     */
    private void box3UnloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box3UnloadBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定拆卸3#票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
           return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能拆卸票箱！");
            return;
        }
        uploadOneBox(3);
        MessageShowUtil.alertInfoMsg("拆卸3#票箱完成.");           
        
    }//GEN-LAST:event_box3UnloadBtnActionPerformed

    /**
     * 卸载单个
     * 
     * @param evt 
     */
    private void box4UnloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box4UnloadBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定拆卸4#票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能拆卸票箱！");
            return;
        }
        uploadOneBox(4);
        MessageShowUtil.alertInfoMsg("拆卸4#票箱完成.");
        
    }//GEN-LAST:event_box4UnloadBtnActionPerformed

    /**
     * 卸载单个
     * 
     * @param evt 
     */
    private void box5UnloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box5UnloadBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定拆卸5#票箱？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能拆卸票箱！");
            return;
        }
        uploadOneBox(5);
        MessageShowUtil.alertInfoMsg("拆卸5#票箱完成.");
        
    }//GEN-LAST:event_box5UnloadBtnActionPerformed

    /**
     * 复位通道
     * 
     * @param evt 
     */
    private void channelResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelResetBtnActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定复位通道？");
        if (!MessageShowUtil.isConfirmYes(yesOrNo)) {
            return;
        }
        if(null != makeCardThread && makeCardThread.isRunning()){
            MessageShowUtil.alertWarnMsg("设备运行中，不能复位通道！");
            return;
        }
        resetChannel();
        MessageShowUtil.alertInfoMsg("复位通道完成.");
         
    }//GEN-LAST:event_channelResetBtnActionPerformed

    /**
     * 好卡明细
     * 
     * @param evt 
     */
    private void goodCardNumTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goodCardNumTxtMouseClicked
        int clickCount = evt.getClickCount();
        if(clickCount == 2){
            showMakeCardDetail(true);
        }
    }//GEN-LAST:event_goodCardNumTxtMouseClicked

    /**
     * 坏卡明细
     * 
     * @param evt 
     */
    private void badCardNumTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_badCardNumTxtMouseClicked
        int clickCount = evt.getClickCount();
        if(clickCount == 2){
            showMakeCardDetail(false);
        }
    }//GEN-LAST:event_badCardNumTxtMouseClicked

    private void box1TotalNumTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_box1TotalNumTxtFocusLost
        // TODO add your handling code here:
        int boxCurrentNum = boxStateVos[0].getBoxCurrentNum();
        boxStateVos[0].setBoxCurrentNum(boxCurrentNum);
    }//GEN-LAST:event_box1TotalNumTxtFocusLost

    private void box2TotalNumTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_box2TotalNumTxtFocusLost
        // TODO add your handling code here:
        int boxCurrentNum = boxStateVos[1].getBoxCurrentNum();
        boxStateVos[1].setBoxCurrentNum(boxCurrentNum);
    }//GEN-LAST:event_box2TotalNumTxtFocusLost

    private void box3TotalNumTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_box3TotalNumTxtFocusLost
        // TODO add your handling code here:
        int boxCurrentNum = boxStateVos[2].getBoxCurrentNum();
        boxStateVos[2].setBoxCurrentNum(boxCurrentNum);
    }//GEN-LAST:event_box3TotalNumTxtFocusLost

    private void box4TotalNumTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_box4TotalNumTxtFocusLost
        // TODO add your handling code here:
        int boxCurrentNum = boxStateVos[3].getBoxCurrentNum();
        boxStateVos[3].setBoxCurrentNum(boxCurrentNum);
    }//GEN-LAST:event_box4TotalNumTxtFocusLost

    private void box5TotalNumTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_box5TotalNumTxtFocusLost
        // TODO add your handling code here:
        int boxCurrentNum = boxStateVos[4].getBoxCurrentNum();
        boxStateVos[4].setBoxCurrentNum(boxCurrentNum);
    }//GEN-LAST:event_box5TotalNumTxtFocusLost
    
    /**
     * 复位通道
     * 
     */
    protected void resetChannel(){
        
        CallParam callParam = new CallParam();
        CallResult callResult = null;
        try {
            esDeviceService.channelInit();//初始化
            callResult = esDeviceService.resetChannel(callParam);
            this.writeInfoMsg(callResult.getMsg());
        } catch (PkEsJniException ex) {
            MessageShowUtil.alertErrorMsg("复位通道异常!");
            logger.error(ex);
        }
    }
    
    /**
     * 检查ES物理状态
     *
     * @return
     */
    protected boolean checkEsPhyStatus(){
   
        if (!checkBoxPhyStatus()) {
            MessageShowUtil.alertErrorMsg("ES机接口不正常，请检查！");
            return false;
        }
        if(!checkChannelStatus()){
            return false;
        }
        
        return true;
    }
    
    /**
     * 判断通道是否有卡
     *
     * @param rwStatus
     * @return
     */
    protected boolean checkChannelStatus(){
    
        CallResult callResult = null;
        
        try {
            callResult = esDeviceService.channelGetACCStatus();
            if(!callResult.isSuccess()){
                MessageShowUtil.alertErrorMsg("检测通道状态失败！");
                return false;
            }
            byte[] statusVal = (byte[]) callResult.getObj();
            String oToe = StringUtil.reverse(StringUtil.getString(statusVal[3]));  //输入点状态。低位到高位表示第1到第8个传感器状态
            oToe = oToe.substring(5);
            String nTos = StringUtil.reverse(StringUtil.getString(statusVal[4])); //输入点状态。低位到高位表示第9到第16个传感器状态
            String sTof = StringUtil.reverse(StringUtil.getString(statusVal[5]));  //输入点状态。低位到高位表示第17到第24个传感器状态
            if(oToe.contains(AppConstant.YES_ONE_SET)
                    || nTos.contains(AppConstant.YES_ONE_SET)
                    || sTof.contains(AppConstant.YES_ONE_SET)){
                MessageShowUtil.alertErrorMsg("通道有卡！");
                return false;
            }
        } catch (PkEsJniException ex) {
            MessageShowUtil.alertErrorMsg(ex.getMessage());
            logger.error(ex);
            return false;
        }
        
        return true;
    }
    
    /**
     * 检测票箱(已选择)物理状态
     * 
     * @return 
     */
    public boolean checkBoxPhyStatus(){
        
        boolean result = true;
        
        CallParam callParam = new CallParam();
        CallResult callResult;

        try {
            callResult = esDeviceService.getAllBoxState(callParam);
            if(!callResult.isSuccess()){
                logger.error(callResult.getMsg());
                this.writeInfoMsg(callResult.getMsg());
                return false;
            }
            BoxInfoVo[] boxInfoVoArr = (BoxInfoVo[]) callResult.getObj(1);
            int i=0;
            StringBuilder msg = new StringBuilder();
            for(BoxInfoVo boxInfoVo: boxInfoVoArr){
                i++;
                if(!boxStateVos[i-1].isStart()){
                    continue;
                }
                if (!isRunStateOk(boxInfoVo.getBoxRunState())){
                    msg.append(".票箱 ").append(i).append(" 错误.");
                    result = false;
                    continue;
                }
                if (boxInfoVo.getBoxFullState() == PKAppConstant.BOX_FULL_STATE_FULLING){
                    msg.append(".票箱 ").append(i).append(" 将满.");
                    result = false;
                    continue;
                }else if(boxInfoVo.getBoxFullState() == PKAppConstant.BOX_FULL_STATE_FULLED){
                    msg.append(".票箱 ").append(i).append(" 已满.");
                    result = false;
                    continue;
                }
            }
            this.writeInfoMsg(msg.toString());
        } catch (PkEsJniException ex) {
            logger.error(ex);
            this.writeInfoMsg(ex.getMessage());
            return false;
        }
        
        return result;
    }
    
    /**
     * 是否好运行状态
     * 
     * @param state
     * @return 
     */
    private boolean isRunStateOk(byte state){
        for(byte ok: PKAppConstant.BOX_RUN_STATE_OKS){
            if(ok == state){
                return true;
            }
        }
        return false;
    }
    
    /**
     * 复位单个票箱
     * 
     * @param boxNo 
     */
    protected void resetOneBox(int boxNo){
        
        CallParam callParam = new CallParam();
        
        CallResult callResult;
        try {
            callParam.setParam(boxNo);
            callResult = esDeviceService.resetOneBox(callParam);
            this.writeInfoMsg(callResult.getMsg());
        } catch (PkEsJniException ex) {
            logger.error(ex);
            this.writeInfoMsg(ex.getMessage());
        }
    }
    
     /**
     * 复位所有票箱
     * 
     */
    protected void resetAllBox(){
        
        CallParam callParam = new CallParam();

        CallResult callResult;
        try {
            callResult = esDeviceService.resetAllBox(callParam);
            
            this.writeInfoMsg(callResult.getMsg());
        } catch (PkEsJniException ex) {
            logger.error(ex);
            this.writeInfoMsg(ex.getMessage());
        }
    }
    
    /**
     * 卸载单个票箱
     * 
     * @param boxNo 
     */
    protected void uploadOneBox(int boxNo){
        
        CallParam callParam = new CallParam();
        
        CallResult callResult;
        try {
            callParam.setParam(boxNo);
            callResult = esDeviceService.uploadOneBox(callParam);
            this.writeInfoMsg(callResult.getMsg());
        } catch (PkEsJniException ex) {
            logger.error(ex);
            this.writeInfoMsg(ex.getMessage());
        }
    }
    
    /**
     * 卸载所有票箱
     * 
     * @param boxNo 
     */
    protected void uploadAllBox(){
        
        CallParam callParam = new CallParam();
        
        CallResult callResult;
        try {
            callResult = esDeviceService.uploadAllBox(callParam);
            this.writeInfoMsg(callResult.getMsg());
        } catch (PkEsJniException ex) {
            logger.error(ex);
            this.writeInfoMsg(ex.getMessage());
        }
    }
    
    /**
     * 清零单个票箱
     * 
     * @param boxNo 
     */
    public void clearOneBoxNum(int boxNo){
        
        if(null != makeCardThread){
            makeCardThread.setSendNum(makeCardThread.getSendNum()-boxStateVos[boxNo-1].getBoxCurrentNum()); 
        }
        boxStateVos[boxNo-1].setBoxCurrentNum(0);
        
    }
    
    /**
     * 清零所有票箱
     * 
     */
    public void clearAllBoxNum(){
        for(int i=1; i<=PKAppConstant.ES_BOX_NUM; i++){
            clearOneBoxNum(i);
        }
    }
    
    /**
     * 写提示或出错信息
     * 
     * @param msg 
     */
    @Override
    public void writeInfoMsg(String msg){
        this.infoMsgLbl.setText(msg);
    }

    /**
     * 初始化订单参数
     * 
     */
    protected void initOrderParam(){
        
        //curOrderVo = madeCardPanel.getUICurProduceOrder();
        employeeIdTxt.setText(curOrderVo.getEmployeeId());
        workTypeTxt.setText(Converter.getEsWorkTypeDes(curOrderVo.getWorkType()));
        goodCardNumTxt.setText(String.valueOf(curOrderVo.getGoodCardNum()));
        badCardNumTxt.setText(String.valueOf(curOrderVo.getBadCardNum()));
        unFinishNumTxt.setText(String.valueOf(curOrderVo.getUnFinishNum()));
        orderNumTxt.setText(String.valueOf(curOrderVo.getOrderNum()));
        orderNoTxt.setText(curOrderVo.getOrderNo());
        cardTypeTxt.setText(curOrderVo.getCardTypeDesc());
        preMoneyTxt.setText(curOrderVo.getPrintMoney());
        
        //更新订单状态栏
        setUIWriteCardProgress(curOrderVo.getFinishPercent());
    }
    
    /**
     * 初始化票箱参数
     * 
     */
    private void initBoxParam(){
    
        boxStateVos[0] = new BoxStateVo(1,box1TypeNormalRB, box1TypeInvalRB, box1TotalNumTxt, 
                box1CurrentNumTxt, box1StatusPB, box1ResetBtn, box1UnloadBtn);
        box1TypeNormalRB.setSelected(true);
        box1TotalNumTxt.setText(String.valueOf(PKAppConstant.ES_CARD_BOX_TOTAL_NUM));
        box1CurrentNumTxt.setText("0");
        box1StatusPB.setValue(0);
        box1ResetBtn.setEnabled(true);
        box1UnloadBtn.setEnabled(true);
        boxStateVos[1] = new BoxStateVo(2,box2TypeNormalRB, box2TypeInvalRB, box2TotalNumTxt, 
                box2CurrentNumTxt, box2StatusPB, box2ResetBtn, box2UnloadBtn);
        box2TypeNormalRB.setSelected(true);
        box2TotalNumTxt.setText(String.valueOf(PKAppConstant.ES_CARD_BOX_TOTAL_NUM));
        box2CurrentNumTxt.setText("0");
        box2StatusPB.setValue(0);
        box2ResetBtn.setEnabled(true);
        box2UnloadBtn.setEnabled(true);
        boxStateVos[2] = new BoxStateVo(3,box3TypeNormalRB, box3TypeInvalRB, box3TotalNumTxt, 
                box3CurrentNumTxt, box3StatusPB, box3ResetBtn, box3UnloadBtn);
        box3TypeNormalRB.setSelected(true);
        box3TotalNumTxt.setText(String.valueOf(PKAppConstant.ES_CARD_BOX_TOTAL_NUM));
        box3CurrentNumTxt.setText("0");
        box3StatusPB.setValue(0);
        box3ResetBtn.setEnabled(true);
        box3UnloadBtn.setEnabled(true);
        boxStateVos[3] = new BoxStateVo(4,box4TypeNormalRB, box4TypeInvalRB, box4TotalNumTxt, 
                box4CurrentNumTxt, box4StatusPB, box4ResetBtn, box4UnloadBtn);
        box4TypeNormalRB.setSelected(true);
        box4TotalNumTxt.setText(String.valueOf(PKAppConstant.ES_CARD_BOX_TOTAL_NUM));
        box4CurrentNumTxt.setText("0");
        box4StatusPB.setValue(0);
        box4ResetBtn.setEnabled(true);
        box4UnloadBtn.setEnabled(true);
        boxStateVos[4] = new BoxStateVo(5,box5TypeNormalRB, box5TypeInvalRB, box5TotalNumTxt, 
                box5CurrentNumTxt, box5StatusPB, box5ResetBtn, box5UnloadBtn);
        box5TypeInvalRB.setSelected(true);
        box5TotalNumTxt.setText(String.valueOf(PKAppConstant.ES_CARD_BOX_TOTAL_NUM));
        box5CurrentNumTxt.setText("0");
        box5StatusPB.setValue(0);
        box5ResetBtn.setEnabled(true);
        box5UnloadBtn.setEnabled(true);
        
        boxAllResetBtn.setEnabled(true);
        boxAllUnloadBtn.setEnabled(true);
        channelResetBtn.setEnabled(true);
    }
    
    /**
     * 初始化卡位状态
     */
    private void initSiteStatus() {
        
        JLabel[] sites = new JLabel[PKAppConstant.ES_CARD_SITE_NUM];
        sites[0] = siteNo1Lbl;
        sites[1] = siteNo2Lbl;
        sites[2] = siteNo3Lbl;
        sites[3] = siteNo4Lbl;
        sites[4] = siteNo5Lbl;
        sites[5] = siteNo6Lbl;
        sites[6] = siteNo7Lbl;
        siteStatusVos = new SiteStatusVo(sendBoxCB1, sites);
        
    }
    
    /**
     * 初始化按钮
     * 
     */
    private void initBtnEnable(){
        setBtnStatus(PKAppConstant.MAKE_CARD_STATUS_INIT);
    }
    
    /**
     * 设备当前订单
     * 
     * @param curProduceOrderVo 
     */
    public void setUICurProduceOrder(byte boxNo, boolean isMakedCard) {

        synchronized(SynLockConstant.SYN_FULL_LOCK){
            if(!isMakedCard){
            int boxCurrentNum = boxStateVos[boxNo-1].getBoxCurrentNum();
            boxStateVos[boxNo-1].setBoxCurrentNum(boxCurrentNum+1);
            setUICurProduceOrder(); 
            setUIWriteCardProgress(curOrderVo.getFinishPercent());
            } 
         }
    }

    /**
     * 设置界面生产订单
     * 
     */
    protected void setUICurProduceOrder(){
        
        goodCardNumTxt.setText(String.valueOf(curOrderVo.getGoodCardNum()));
        badCardNumTxt.setText(String.valueOf(curOrderVo.getBadCardNum()));
        unFinishNumTxt.setText(String.valueOf(curOrderVo.getUnFinishNum()));
        
        //设置面板记录
        this.madeCardPanel.setUICurProduceOrder(curOrderVo);
    }
    
    /**
     * 设置读写进度条值
     * 
     * @param value 
     */
    public void setUIWriteCardProgress(int value){
        setUIWriteCardProgress(value, Color.green);
    }
    
    /**
     * 设置读写进度条值
     * 
     * @param value 
     */
    public void setUIWriteCardProgressErr(int value){
        setUIWriteCardProgress(value, Color.RED);
    }
    
    /**
     * 设置读写进度条值
     * 
     * @param value 
     */
    protected void setUIWriteCardProgress(int value, Color color){
        this.progressBar.setForeground(color);
        this.progressBar.setValue(value);
        this.progressBar.setString("速度："+curOrderVo.getRunSpeed()+"s，完成："
                +curOrderVo.getFinishPercent()+"%");
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField badCardNumTxt;
    private javax.swing.JTextField box1CurrentNumTxt;
    private javax.swing.JButton box1ResetBtn;
    private javax.swing.ButtonGroup box1StatusBG;
    private javax.swing.JProgressBar box1StatusPB;
    private javax.swing.JTextField box1TotalNumTxt;
    private javax.swing.ButtonGroup box1TypeBG;
    private javax.swing.JRadioButton box1TypeInvalRB;
    private javax.swing.JRadioButton box1TypeNormalRB;
    private javax.swing.JButton box1UnloadBtn;
    private javax.swing.JTextField box2CurrentNumTxt;
    private javax.swing.JButton box2ResetBtn;
    private javax.swing.ButtonGroup box2StatusBG;
    private javax.swing.JProgressBar box2StatusPB;
    private javax.swing.JTextField box2TotalNumTxt;
    private javax.swing.ButtonGroup box2TypeBG;
    private javax.swing.JRadioButton box2TypeInvalRB;
    private javax.swing.JRadioButton box2TypeNormalRB;
    private javax.swing.JButton box2UnloadBtn;
    private javax.swing.JTextField box3CurrentNumTxt;
    private javax.swing.JButton box3ResetBtn;
    private javax.swing.ButtonGroup box3StatusBG;
    private javax.swing.JProgressBar box3StatusPB;
    private javax.swing.JTextField box3TotalNumTxt;
    private javax.swing.ButtonGroup box3TypeBG;
    private javax.swing.JRadioButton box3TypeInvalRB;
    private javax.swing.JRadioButton box3TypeNormalRB;
    private javax.swing.JButton box3UnloadBtn;
    private javax.swing.JTextField box4CurrentNumTxt;
    private javax.swing.JButton box4ResetBtn;
    private javax.swing.ButtonGroup box4StatusBG;
    private javax.swing.JProgressBar box4StatusPB;
    private javax.swing.JTextField box4TotalNumTxt;
    private javax.swing.ButtonGroup box4TypeBG;
    private javax.swing.JRadioButton box4TypeInvalRB;
    private javax.swing.JRadioButton box4TypeNormalRB;
    private javax.swing.JButton box4UnloadBtn;
    private javax.swing.JTextField box5CurrentNumTxt;
    private javax.swing.JButton box5ResetBtn;
    private javax.swing.ButtonGroup box5StatusBG;
    private javax.swing.JProgressBar box5StatusPB;
    private javax.swing.JTextField box5TotalNumTxt;
    private javax.swing.ButtonGroup box5TypeBG;
    private javax.swing.JRadioButton box5TypeInvalRB;
    private javax.swing.JRadioButton box5TypeNormalRB;
    private javax.swing.JButton box5UnloadBtn;
    private javax.swing.JButton boxAllResetBtn;
    private javax.swing.JButton boxAllUnloadBtn;
    private javax.swing.JTextField cardTypeTxt;
    private javax.swing.JButton channelResetBtn;
    private javax.swing.JTextField employeeIdTxt;
    private javax.swing.JButton exitBtn;
    private javax.swing.JTextField goodCardNumTxt;
    private javax.swing.JLabel infoMsgLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTextField orderNoTxt;
    private javax.swing.JTextField orderNumTxt;
    private javax.swing.JButton pauseBtn;
    private javax.swing.JTextField preMoneyTxt;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton resumeBtn;
    private javax.swing.JButton runBtn;
    private javax.swing.JCheckBox sendBoxCB1;
    private javax.swing.JLabel siteNo1Lbl;
    private javax.swing.JLabel siteNo2Lbl;
    private javax.swing.JLabel siteNo3Lbl;
    private javax.swing.JLabel siteNo4Lbl;
    private javax.swing.JLabel siteNo5Lbl;
    private javax.swing.JLabel siteNo6Lbl;
    private javax.swing.JLabel siteNo7Lbl;
    private javax.swing.JTextField unFinishNumTxt;
    private javax.swing.JTextField workTypeTxt;
    // End of variables declaration//GEN-END:variables

 }

