
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GenIssueRequestPanel.java
 *
 * Created on 2011-8-3, 8:31:03
 */

package com.goldsign.esmcs.ui.panel;

import com.goldsign.csfrm.ui.common.JDatePicker;
import com.goldsign.csfrm.util.DateHelper;
import com.goldsign.csfrm.util.ExcelExport;
import com.goldsign.csfrm.util.MessageShowUtil;
import com.goldsign.csfrm.util.UIUtil;
import com.goldsign.csfrm.vo.CallResult;
import com.goldsign.csfrm.vo.SelectOptionVo;
import com.goldsign.esmcs.application.Application;
import com.goldsign.esmcs.env.AppConstant;
import com.goldsign.esmcs.exception.FileException;
import com.goldsign.esmcs.service.IEsDeviceService;
import com.goldsign.esmcs.service.IFileService;
import com.goldsign.esmcs.service.impl.FileService;
import com.goldsign.esmcs.util.Converter;
import com.goldsign.esmcs.vo.OrderParam;
import com.goldsign.esmcs.vo.OrderVo;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import org.apache.log4j.Logger;

/**
 * 制卡订单查询
 * 
 * @author Administrator
 */
public class MadeCardQueryPanel extends javax.swing.JPanel {

    private static Logger logger = Logger.getLogger(MadeCardQueryPanel.class.getName());
    
    private IFileService fileService;
    private IEsDeviceService esDeviceService;
    
    private JTable resultSetTableMain;
    
    private JTable resultSetTableGood;
    
    private JTable resultSetTableBad;
    

    /** Creates new form GenIssueRequestPanel */
    public MadeCardQueryPanel() {
        this.fileService = new FileService();
        this.esDeviceService = ((Application) AppConstant.application).getEsDeviceService();
        initComponents();
        initQueryCon();
        //doQuery();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        employeeIdTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        begDateCb = new javax.swing.JComboBox();
        btQuery = new javax.swing.JButton();
        endDateCb = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        workTypeCb = new javax.swing.JComboBox();
        btLeadOut = new javax.swing.JButton();
        btPrint = new javax.swing.JButton();
        rsTabPanel = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        mainSPn = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        mainSPIGood = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        mainSPIBad = new javax.swing.JScrollPane();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(845, 589));

        jPanel1.setBackground(new java.awt.Color(237, 247, 249));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(792, 105));

        jLabel1.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 39, 80));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ES操作员：");

        employeeIdTxt.setEditable(false);
        employeeIdTxt.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        employeeIdTxt.setForeground(new java.awt.Color(0, 39, 80));
        employeeIdTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeIdTxtActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 39, 80));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("订单日期：");

        begDateCb.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        begDateCb.setForeground(new java.awt.Color(0, 39, 80));
        begDateCb =new JDatePicker(JDatePicker.STYLE_CN_DATE1);

        btQuery.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btQuery.setForeground(new java.awt.Color(0, 39, 80));
        btQuery.setText("查询");
        btQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btQueryActionPerformed(evt);
            }
        });

        endDateCb.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        endDateCb.setForeground(new java.awt.Color(0, 39, 80));
        endDateCb =new JDatePicker(JDatePicker.STYLE_CN_DATE1);

        jLabel4.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 39, 80));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("至：");

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(185, 227, 241));
        jTextField3.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(94, 55, 16));
        jTextField3.setText("   查询条件");
        jTextField3.setAlignmentX(0.0F);
        jTextField3.setAlignmentY(0.0F);
        jTextField3.setBorder(null);

        jLabel8.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 39, 80));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("工作类型：");

        workTypeCb.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        workTypeCb.setForeground(new java.awt.Color(0, 39, 80));

        btLeadOut.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btLeadOut.setForeground(new java.awt.Color(0, 39, 80));
        btLeadOut.setText("导出");
        btLeadOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLeadOutActionPerformed(evt);
            }
        });

        btPrint.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btPrint.setForeground(new java.awt.Color(0, 39, 80));
        btPrint.setText("打印");
        btPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPrintActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 788, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jPanel1Layout.createSequentialGroup()
                .add(32, 32, 32)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(begDateCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(workTypeCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(50, 50, 50)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLabel1)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(endDateCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(employeeIdTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(45, 45, 45)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(btLeadOut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btPrint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(btQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(begDateCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(endDateCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btQuery))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(employeeIdTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(workTypeCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btLeadOut)
                            .add(btPrint))))
                .add(22, 22, 22))
        );

        rsTabPanel.setBackground(new java.awt.Color(255, 255, 255));
        rsTabPanel.setForeground(new java.awt.Color(94, 55, 16));
        rsTabPanel.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        rsTabPanel.setPreferredSize(new java.awt.Dimension(792, 461));

        jPanel6.setBackground(new java.awt.Color(254, 254, 254));

        mainSPn.setBackground(new java.awt.Color(255, 255, 255));
        mainSPn.setBorder(null);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSPn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSPn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
        );

        rsTabPanel.addTab("订单列表", jPanel6);

        jPanel2.setBackground(new java.awt.Color(254, 254, 254));

        mainSPIGood.setBackground(new java.awt.Color(255, 255, 255));
        mainSPIGood.setBorder(null);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSPIGood, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSPIGood, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
        );

        rsTabPanel.addTab("好卡明细", jPanel2);

        mainSPIBad.setBackground(new java.awt.Color(255, 255, 255));
        mainSPIBad.setBorder(null);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSPIBad, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSPIBad, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
        );

        rsTabPanel.addTab("坏卡明细", jPanel3);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rsTabPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(rsTabPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 查询
     * 
     * @param evt 
     */
    private void btQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btQueryActionPerformed
        // TODO add your handling code here:
        doQuery();
    }//GEN-LAST:event_btQueryActionPerformed

    /**
     * 导出
     * 
     * @param evt 
     */
    private void btLeadOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLeadOutActionPerformed
        leadOut();
    }//GEN-LAST:event_btLeadOutActionPerformed

    private void btPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPrintActionPerformed
        print();
    }//GEN-LAST:event_btPrintActionPerformed

    private void employeeIdTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeIdTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeIdTxtActionPerformed

    /**
     * 打印
     * 
     */
    private void print(){
    
        if(!doPrintCheck()){
            return;
        }
        OrderVo orderVo = getOrderVo();
        esDeviceService.printOrder(orderVo);
    }
    
    private OrderVo getOrderVo(){
    
        int row = resultSetTableMain.getSelectedRow();
        TableModel tableModel = resultSetTableMain.getModel();
        OrderVo orderVo = new OrderVo();
        String orderNo = String.valueOf(tableModel.getValueAt(row, 1));
        orderVo.setWorkType(orderNo.substring(0, 2));
        orderVo.setOrderNo(orderNo);
        orderVo.setPrintMoney(String.valueOf(tableModel.getValueAt(row, 5)));
        orderVo.setOrderNum(Converter.objstrToInt(tableModel.getValueAt(row, 12)));
        orderVo.setGoodCardNum(Converter.objstrToInt(tableModel.getValueAt(row, 13)));
        orderVo.setBadCardNum(Converter.objstrToInt(tableModel.getValueAt(row, 14)));
        orderVo.setEmployeeId(employeeIdTxt.getText());
        
        return orderVo;
    }
    
    private boolean doPrintCheck(){
        
        if(resultSetTableMain == null ||
                resultSetTableMain.getSelectedRowCount()==0){
            MessageShowUtil.alertInfoMsg("请选择记录操作！");
            return false;
        }
        if (resultSetTableMain.getSelectedRowCount() > 1) {
            MessageShowUtil.alertInfoMsg("请选择单条记录操作！");
            return false;
        }
        
        return true;
    }
    
    /**
     * 导出
     *
     */
    private void leadOut() {

        List<JTable> tables = new ArrayList<JTable>();
        if(null != resultSetTableMain){
            tables.add(resultSetTableMain);
        }
        if(null != resultSetTableGood){
            tables.add(resultSetTableGood);
        }
        if(null != resultSetTableBad){
            tables.add(resultSetTableBad);
        }
        if(tables.isEmpty()){
           return; 
        }
        JTable[] tableArr = new JTable[tables.size()];
        int i=0;
        for(JTable table :tables){
            tableArr[i++] = table;
        }
        ExcelExport.exportXLSJTable(tableArr, AppConstant.mainFrame);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox begDateCb;
    private javax.swing.JButton btLeadOut;
    private javax.swing.JButton btPrint;
    private javax.swing.JButton btQuery;
    private javax.swing.JTextField employeeIdTxt;
    private javax.swing.JComboBox endDateCb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JScrollPane mainSPIBad;
    private javax.swing.JScrollPane mainSPIGood;
    private javax.swing.JScrollPane mainSPn;
    private javax.swing.JTabbedPane rsTabPanel;
    private javax.swing.JComboBox workTypeCb;
    // End of variables declaration//GEN-END:variables

    /**
     * 取得查询条件
     * 
     * @return 
     */
    private OrderParam getCallOrderParam(){
        
        OrderParam orderParam =  new OrderParam();
        orderParam.setEmployeeId(employeeIdTxt.getText());
        SelectOptionVo selectOptionVo = (SelectOptionVo)workTypeCb.getSelectedItem();
        orderParam.setWorkType(selectOptionVo.getValue());
        orderParam.setBeginDate(DateHelper.str10yyyy_MM_ddToStr8yyyyMMdd(begDateCb.getSelectedItem().toString()));
        orderParam.setEndDate(DateHelper.str10yyyy_MM_ddToStr8yyyyMMdd(endDateCb.getSelectedItem().toString()));
        
        return orderParam;
    }
    
    /**
     * 取得完成订单
     * 
     * @param orderParam
     * @return 
     */
    private List<Object[]> getFinishOrders(OrderParam orderParam){
        
        List<Object[]> orders = new ArrayList<Object[]>();
        
        try{
            CallResult callResult = fileService.getFinishOrders(orderParam);
            if (!callResult.isSuccess()) {
                MessageShowUtil.alertInfoMsg("取已完成生产订单失败！");
            }else{
                MessageShowUtil.infoOpMsg("查询成功！");
                orders.addAll(callResult.getObjs());
            }
        } catch (FileException ex) {
            logger.error(ex);
            MessageShowUtil.errorOpMsg(ex.getMessage());
        }
        
        return orders;
    }
    
    /**
     * 查询
     * 
     */
    private void doQuery(){
    
        //查询参数
        OrderParam orderParam =  getCallOrderParam();
        
        //查询订单
        List<Object[]> produceOrders = getFinishOrders(orderParam);
        
        //生成列表
        genMainResultSetTable(produceOrders);
        
    }
    
    /**
     * 根据结果集，生成列表
     * 
     * @param result 
     */
    private void genMainResultSetTable(List<Object[]> result) {
        //列名称
        String[] columnNames = {"工作类型", "订单编号", "票卡类型", "票卡名称", "票卡有效期","面值", 
                                "押金", "开始申请编号", "结束申请编号", "开始序列号", "终止序列号", 
                                "日期", "任务数量", "好卡数量","坏卡数量","未做数量", "标识码", "线路代码", "站点代码",
                                "乘次票有效期开始时间", "乘次票使用有效期", "限制出站线路代码", "限制出站站点代码", "限制模式",
                                "发售激活标志", "测试标记", "可充值上限（分/次）"};
        //列宽度
        int[] columnSize = {100, 120, 90, 120, 100, 80, 
                            80, 100, 100, 100, 100,
                            100, 80, 80, 80, 80, 80, 80, 80,
                            100, 100, 80, 80, 80, 80, 80, 80};
        //生成列表
        resultSetTableMain = UIUtil.genResultSetTable(this.mainSPn, result, columnNames, columnSize);
        resultSetTableMain.setName(rsTabPanel.getTitleAt(0));
        resultSetTableMain.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    queryDetail();
                }
            }
        });
    }
    
    /**
     * 查询明细
     *
     */
    private void queryDetail() {

        int row = resultSetTableMain.getSelectedRow();
        if (row < 0) {
            return;
        }
        String orderNo = String.valueOf(resultSetTableMain.getModel().getValueAt(row, 1));

        OrderParam orderParam = new OrderParam();
        orderParam.setOrderNo(orderNo);
        
        CallResult callResult = null;
        try{
            callResult = fileService.getGoodOrder(orderParam);
            List<Object[]> goodOrder = new ArrayList<Object[]>();
            if(callResult.isSuccess()){
                goodOrder = callResult.getObjs();  
            }
            genGoodResultSetTable(goodOrder);
            callResult = fileService.getBadOrder(orderParam);
            List<Object[]> badOrder = new ArrayList<Object[]>();
            if(callResult.isSuccess()){
                badOrder = callResult.getObjs();
            } 
            genBadResultSetTable(badOrder);
            
            //生成列表
            rsTabPanel.setSelectedIndex(1);
        }catch(Exception e){
            logger.error(e);
            MessageShowUtil.alertErrorMsg(e.getMessage());
            return;
        }
    }
    
    /**
     * 根据结果集，生成列表
     *
     * @param result
     */
    private void genGoodResultSetTable(List<Object[]> result) {
        //列名称
        String[] columnNames = {"工作类型", "订单编号", "票卡类型", "申请编号", "逻辑卡号","印刻面号", 
                                "物理卡号", "制卡时间", "面值", "票卡有效期", "SAM卡号", "线路代码", "站点代码",
                                "乘次票有效期开始时间", "乘次票使用有效期", "限制出站线路代码", "限制出站站点代码", "限制模式",
                                "卡商代码","手机号码"};
        //列宽度
        int[] columnSize = {80, 120, 80, 120, 120, 120, 
                            120, 120, 80, 120, 120,
                            80, 80, 120, 80, 80, 80, 80,80,120};
        //生成列表
        resultSetTableGood = UIUtil.genResultSetTable(this.mainSPIGood, result, columnNames, columnSize);
        resultSetTableGood.setName(rsTabPanel.getTitleAt(1));

    }
    
    /**
     * 根据结果集，生成列表
     *
     * @param result
     */
    private void genBadResultSetTable(List<Object[]> result) {
        //列名称
        String[] columnNames = {"工作类型", "订单编号", "票卡类型", "申请编号", "逻辑卡号","印刻面号", 
                                "物理卡号", "制卡时间", "面值", "票卡有效期", "SAM卡号", "线路代码", "站点代码",
                                "乘次票有效期开始时间", "乘次票使用有效期", "限制出站线路代码", "限制出站站点代码", "限制模式",
                                "卡商代码","手机号码",
                                "错误代码", "错误描述"};
        //列宽度
        int[] columnSize = {80, 120, 80, 120, 120, 120, 
                            120, 120, 80, 120, 120,
                            80, 80, 120, 80, 80, 80, 80, 80,120,80, 200};
        //生成列表
        resultSetTableBad = UIUtil.genResultSetTable(this.mainSPIBad, result, columnNames, columnSize);
        resultSetTableBad.setName(rsTabPanel.getTitleAt(2));
    }

    /**
     * 初始化查询条件
     * 
     */
    private void initQueryCon() {
        try {
            this.workTypeCb.removeAllItems();
            this.workTypeCb.addItem(new SelectOptionVo(AppConstant.SELECT_OPTION_ALL, AppConstant.SELECT_OPTION_ALL_NAME));
            this.workTypeCb.addItem(new SelectOptionVo(AppConstant.WORK_TYPE_INITI, AppConstant.WORK_TYPE_INITI_NAME));
            this.workTypeCb.addItem(new SelectOptionVo(AppConstant.WORK_TYPE_HUNCH, AppConstant.WORK_TYPE_HUNCH_NAME));
            this.workTypeCb.addItem(new SelectOptionVo(AppConstant.WORK_TYPE_AGAIN, AppConstant.WORK_TYPE_AGAIN_NAME));
            this.workTypeCb.addItem(new SelectOptionVo(AppConstant.WORK_TYPE_LOGOUT, AppConstant.WORK_TYPE_LOGOUT_NAME));

            this.employeeIdTxt.setText(AppConstant.user.getAccount());
        } catch (Exception e) {
            logger.error(e);
            MessageShowUtil.errorOpMsg(e.getMessage());
        }
    }
 
}
