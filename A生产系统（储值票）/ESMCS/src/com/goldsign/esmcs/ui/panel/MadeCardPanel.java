package com.goldsign.esmcs.ui.panel;

import com.goldsign.csfrm.util.MessageShowUtil;
import com.goldsign.csfrm.util.UIUtil;
import com.goldsign.csfrm.vo.CallResult;
import com.goldsign.csfrm.vo.KeyValueVo;
import com.goldsign.csfrm.vo.SelectOptionVo;
import com.goldsign.esmcs.application.Application;
import com.goldsign.esmcs.env.AppConstant;
import com.goldsign.esmcs.exception.CommuException;
import com.goldsign.esmcs.exception.FileException;
import com.goldsign.esmcs.service.ICommuService;
import com.goldsign.esmcs.service.IFileService;
import com.goldsign.esmcs.ui.dialog.MakeCardDialog;
import com.goldsign.esmcs.util.Converter;
import com.goldsign.esmcs.vo.OrderParam;
import com.goldsign.esmcs.vo.OrderVo;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import org.apache.log4j.Logger;
/**
 * 制卡
 * 
 * @author Administrator
 */
public abstract class MadeCardPanel extends javax.swing.JPanel {

    private static Logger logger = Logger.getLogger(MadeCardPanel.class.getName());
    
    private ICommuService commuService;
    private IFileService fileService;
    
    private JTable resultSetTableMain;
  
    protected MakeCardDialog makeCardDialog;
    
    /** Creates new form GenIssueRequestPanel */
    public MadeCardPanel() {
        this.commuService = ((Application)AppConstant.application).getCommuService();
        this.fileService = ((Application)AppConstant.application).getFileService();
        initComponents();
        initQueryCon();
        //doQuery();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPnl = new javax.swing.JPanel();
        jTextField5 = new javax.swing.JTextField();
        mainSPn = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        queryBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        employeeIdTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        workTypeCb = new javax.swing.JComboBox();
        jTextField4 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        btEndCard = new javax.swing.JButton();
        printCb = new javax.swing.JCheckBox();
        btStartCard = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(845, 589));

        mainPnl.setBackground(new java.awt.Color(255, 255, 255));
        mainPnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainPnl.setPreferredSize(new java.awt.Dimension(807, 74));

        jTextField5.setBackground(new java.awt.Color(185, 227, 241));
        jTextField5.setEditable(false);
        jTextField5.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        jTextField5.setForeground(new java.awt.Color(94, 55, 16));
        jTextField5.setText("   生产单列表");
        jTextField5.setAlignmentX(0.0F);
        jTextField5.setAlignmentY(0.0F);
        jTextField5.setBorder(null);

        mainSPn.setBackground(new java.awt.Color(255, 255, 255));
        mainSPn.setBorder(null);

        org.jdesktop.layout.GroupLayout mainPnlLayout = new org.jdesktop.layout.GroupLayout(mainPnl);
        mainPnl.setLayout(mainPnlLayout);
        mainPnlLayout.setHorizontalGroup(
            mainPnlLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPnlLayout.createSequentialGroup()
                .add(mainPnlLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(mainSPn)
                    .add(jTextField5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPnlLayout.setVerticalGroup(
            mainPnlLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPnlLayout.createSequentialGroup()
                .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainSPn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(237, 247, 249));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(790, 108));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        queryBtn.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        queryBtn.setForeground(new java.awt.Color(0, 39, 80));
        queryBtn.setText("查询");
        queryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryBtnActionPerformed(evt);
            }
        });
        jPanel2.add(queryBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 40, 100, -1));

        jLabel1.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 39, 80));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ES操作员：");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 90, 25));

        employeeIdTxt.setEditable(false);
        employeeIdTxt.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        employeeIdTxt.setForeground(new java.awt.Color(0, 39, 80));
        jPanel2.add(employeeIdTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, 115, -1));

        jLabel8.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 39, 80));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("工作类型：");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 90, 25));

        workTypeCb.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        workTypeCb.setForeground(new java.awt.Color(0, 39, 80));
        jPanel2.add(workTypeCb, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, 115, 25));

        jTextField4.setBackground(new java.awt.Color(185, 227, 241));
        jTextField4.setEditable(false);
        jTextField4.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(94, 55, 16));
        jTextField4.setText("   查询条件");
        jTextField4.setAlignmentX(0.0F);
        jTextField4.setAlignmentY(0.0F);
        jTextField4.setBorder(null);
        jTextField4.setPreferredSize(new java.awt.Dimension(788, 19));
        jPanel2.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 2, -1, 25));

        jPanel3.setBackground(new java.awt.Color(237, 247, 249));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setPreferredSize(new java.awt.Dimension(790, 108));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btEndCard.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btEndCard.setText("结束");
        btEndCard.setName("btEndCard"); // NOI18N
        btEndCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEndCardActionPerformed(evt);
            }
        });
        jPanel3.add(btEndCard, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, 100, 49));

        printCb.setBackground(new java.awt.Color(255, 255, 255));
        printCb.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        printCb.setForeground(new java.awt.Color(70, 95, 125));
        printCb.setSelected(true);
        printCb.setText("是否打印");
        printCb.setOpaque(false);
        jPanel3.add(printCb, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 30, -1, -1));

        btStartCard.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btStartCard.setLabel("制卡");
        btStartCard.setName("btMadeCard"); // NOI18N
        btStartCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStartCardActionPerformed(evt);
            }
        });
        jPanel3.add(btStartCard, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 100, 49));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 792, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(mainPnl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 792, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPnl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 386, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void queryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryBtnActionPerformed
        // TODO add your handling code here:
        doQuery();
}//GEN-LAST:event_queryBtnActionPerformed

    /**
     * 结束
     * 
     * @param evt 
     */
    private void btEndCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEndCardActionPerformed

        int yesOrNo = MessageShowUtil.confirmInfoMsgYesOrNo("是否确定结束订单？");
        if (MessageShowUtil.isConfirmYes(yesOrNo)) {
            doEnd();
        }
        doQuery();
    }//GEN-LAST:event_btEndCardActionPerformed

    /**
     * 制卡
     * 
     * @param evt 
     */
    private void btStartCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStartCardActionPerformed
        
        doMade();
    }//GEN-LAST:event_btStartCardActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btEndCard;
    private javax.swing.JButton btStartCard;
    private javax.swing.JTextField employeeIdTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JPanel mainPnl;
    private javax.swing.JScrollPane mainSPn;
    private javax.swing.JCheckBox printCb;
    private javax.swing.JButton queryBtn;
    private javax.swing.JComboBox workTypeCb;
    // End of variables declaration//GEN-END:variables

    /**
     * 取正在未完成订单
     * 
     * @param orderParam
     * @return 
     */
    private List<Object[]> getMakingOrders(OrderParam orderParam){
        
        List<Object[]> orders = new ArrayList<Object[]>();
        
        try{
            CallResult callResult = fileService.getMakingOrders(orderParam);
            if (!callResult.isSuccess()) {
                MessageShowUtil.alertInfoMsg("取本地生产订单失败！");
            }else{
                MessageShowUtil.infoOpMsg("查询成功！");
                for(Object orderObj :callResult.getObjs()){
                    String order = AppConstant.ES_ORDER_STATUS_BEGIN_YES_DES
                            + AppConstant.VER_SIGN + orderObj 
                            + AppConstant.VER_SIGN + AppConstant.ES_ORDER_STATUS_BEGIN_YES
                            + AppConstant.VER_SIGN + orderParam.getWorkType()
                            + AppConstant.VER_SIGN + orderParam.getEmployeeId();
                    orders.add(order.split(AppConstant.SEP_VER_SIGN));
                }
            }
        } catch (FileException ex) {
            logger.error(ex);
            MessageShowUtil.errorOpMsg(ex.getMessage());
        }
        
        return orders;
    }
    
    /**
     * 取新生产订单
     * 
     * @param orderParam
     * @return 
     */
    protected List<Object[]> getServerOrders(OrderParam orderParam){
        
        List<Object[]> orders = new ArrayList<Object[]>();
        try {
            CallResult callResult = commuService.queryProduceOrders(orderParam);
            if (!callResult.isSuccess()) {
                MessageShowUtil.alertInfoMsg("取服务器生产订单失败！");
            }else{ 
                MessageShowUtil.infoOpMsg("查询成功！");
                orders.addAll(callResult.getObjs());
            }
        } catch (CommuException ex) {
            logger.error(ex);
            MessageShowUtil.errorOpMsg(ex.getMessage());
        }
        
        return orders;
    }
    
    /**
     * 查询订单，包括未结束或未开始的
     */
    private void doQuery(){
    
        //查询参数
        OrderParam orderParam =  getCallOrderParam();
        
        //查询订单
        List<Object[]> produceOrderVos = new ArrayList<Object[]>();
        List<Object[]> makingOrders = getMakingOrders(orderParam);          
        if(makingOrders.size()>0){
            produceOrderVos.addAll(makingOrders);
        }else{
            List<Object[]> serverOrderVos = getServerOrders(orderParam);
            produceOrderVos.addAll(serverOrderVos);
            logger.info("票种订单长度："+serverOrderVos.size());
        }
 
        //生成列表
        genMainResultSetTable(produceOrderVos);
        
    }
    
    /**
     * 取得查询条件
     * 
     * @return 
     */
    private OrderParam getCallOrderParam(){
        
        OrderParam orderParam =  new OrderParam();
        orderParam.setEmployeeId(employeeIdTxt.getText());
        SelectOptionVo selectOptionVo = (SelectOptionVo)workTypeCb.getSelectedItem();
        orderParam.setWorkType(selectOptionVo.getValue());
        
        return orderParam;
    }

    /**
     * 根据结果集，生成列表
     * 
     * @param result 
     */
    private void genMainResultSetTable(List<Object[]> result) {
        //列名称
        String[] columnNames = {"状态","订单编号", "票卡类型", "票卡名称", "票卡有效期","面值", 
                                "押金", "开始申请编号", "结束申请编号", "开始序列号", "终止序列号", 
                                "日期", "任务数量", "好卡数量","坏卡数量","未做数量", "标识码", "线路代码", "站点代码",
                                "乘次票有效期开始时间", "乘次票使用有效期", "限制出站线路代码", "限制出站站点代码", "限制模式",
                                 "发售激活标志", "测试标记", "可充值上限（分/次）", "状态代码", "工作类型", "员工号"};
        //列宽度
        int[] columnSize = {80,120, 90, 120, 100, 80, 
                            80, 100, 100, 100, 100,
                            100, 80, 80, 80, 80, 80, 80, 80,
                            100, 100, 80, 80, 80, 80, 80, 80, 0, 0, 0};
        //生成列表
        resultSetTableMain = UIUtil.genResultSetTable(this.mainSPn, result, columnNames, columnSize);
        UIUtil.hideTableColumns(resultSetTableMain, new int[]{27, 28, 29});//隐藏列
        resultSetTableMain.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    doMade();
                }
            }
        });
    }

    /**
     * 初始化查询条件
     * 
     */
    private void initQueryCon() {
     
        //UIUtil.initComBoxValue(this.workTypeCb, AppConstant.WORK_TYPE);
        UIUtil.initComBoxValue(this.workTypeCb, getWorkTypeVos());
        
        this.employeeIdTxt.setText(AppConstant.user.getAccount());

    }
    
    protected KeyValueVo[] getWorkTypeVos(){
    
        return AppConstant.WORK_TYPE;
    }
    
    /**
     * 弹出制卡窗口
     * 
     */
    private void doMade() {
        
        if(doMadeCheck()){
            showMakeCardDialog();
        }
        doQuery();
    }
    
    /**
     * 制卡，子类复盖
     * 
     */
    protected abstract void showMakeCardDialog();
    
    /**
     * 制卡条件判断
     * 
     * @return 
     */
    private boolean doMadeCheck(){
        
        if(resultSetTableMain == null ||
                resultSetTableMain.getSelectedRowCount()==0){
            MessageShowUtil.alertInfoMsg("请选择记录操作！");
            return false;
        }
        if (resultSetTableMain.getSelectedRowCount() > 1) {
            MessageShowUtil.alertInfoMsg("请选择单条记录操作！");
            return false;
        }
        
        return true;
    }

    /**
     * 取得列表选择订单
     * 
     * @return the curProduceOrder
     */
    public OrderVo getUICurProduceOrder() {
        
        int row = resultSetTableMain.getSelectedRow();
        if(row<0){
            return null;
        }
        TableModel tableModel = resultSetTableMain.getModel();
        
        OrderVo curProduceOrder = new OrderVo();
        curProduceOrder.setStatus(String.valueOf(tableModel.getValueAt(row, 27)));
        curProduceOrder.setWorkType(String.valueOf(tableModel.getValueAt(row, 28)));
        curProduceOrder.setEmployeeId(String.valueOf(tableModel.getValueAt(row, 29)));
        curProduceOrder.setOrderNo(String.valueOf(tableModel.getValueAt(row, 1)));
        curProduceOrder.setCardTypeCode(String.valueOf(tableModel.getValueAt(row, 2)));
        curProduceOrder.setCardTypeDesc(String.valueOf(tableModel.getValueAt(row, 3)));
        curProduceOrder.setCardEffTime(String.valueOf(tableModel.getValueAt(row, 4)));
        curProduceOrder.setPrintMoney(String.valueOf(tableModel.getValueAt(row, 5)));
        curProduceOrder.setDeposit(String.valueOf(tableModel.getValueAt(row, 6)));
        curProduceOrder.setBeginReqNo(String.valueOf(tableModel.getValueAt(row, 7)));
        curProduceOrder.setEndReqNo(String.valueOf(tableModel.getValueAt(row, 8)));
        curProduceOrder.setBeginSeqNo(String.valueOf(tableModel.getValueAt(row, 9)));
        curProduceOrder.setEndSeqNo(String.valueOf(tableModel.getValueAt(row, 10)));
        curProduceOrder.setDate(String.valueOf(tableModel.getValueAt(row, 11)));
        curProduceOrder.setOrderNum(Converter.objstrToInt(tableModel.getValueAt(row, 12)));
        curProduceOrder.setGoodCardNum(Converter.objstrToInt(tableModel.getValueAt(row, 13)));
        curProduceOrder.setBadCardNum(Converter.objstrToInt(tableModel.getValueAt(row, 14)));
        curProduceOrder.setIdCode(String.valueOf(tableModel.getValueAt(row, 16)));
        curProduceOrder.setLineCode(String.valueOf(tableModel.getValueAt(row, 17)));
        curProduceOrder.setStationCode(String.valueOf(tableModel.getValueAt(row, 18)));
        curProduceOrder.setTctEffBeginTime(String.valueOf(tableModel.getValueAt(row, 19)));
        curProduceOrder.setTctEffTime(String.valueOf(tableModel.getValueAt(row, 20)));
        curProduceOrder.setLimitExitLineCode(String.valueOf(tableModel.getValueAt(row, 21)));
        curProduceOrder.setLimitExitStationCode(String.valueOf(tableModel.getValueAt(row, 22)));
        curProduceOrder.setLimitMode(String.valueOf(tableModel.getValueAt(row, 23)));
        curProduceOrder.setSaleFlag(String.valueOf(tableModel.getValueAt(row, 24)));
        curProduceOrder.setTestFlag(String.valueOf(tableModel.getValueAt(row, 25)));
        curProduceOrder.setMaxRecharge(String.valueOf(tableModel.getValueAt(row, 26)));
        
        return curProduceOrder;
    }

    /**
     * 设置列表订单
     * 
     * @param curProduceOrder the curProduceOrder to set
     */
    public void setUICurProduceOrder(OrderVo curProduceOrder) {
        
        int row = resultSetTableMain.getSelectedRow();
        if (row < 0) {
            return;
        }
        TableModel tableModel = resultSetTableMain.getModel();
        tableModel.setValueAt(curProduceOrder.getStatusDesc(), row, 0);
        tableModel.setValueAt(curProduceOrder.getGoodCardNum(),row, 13);
        tableModel.setValueAt(curProduceOrder.getBadCardNum(),row, 14);
        tableModel.setValueAt(curProduceOrder.getUnFinishNum(),row, 15);
        tableModel.setValueAt(curProduceOrder.getStatus(), row, 27);
    }
    
    /**
     * 暂时制卡窗口
     * 
     * @return 
     */
    private MakeCardDialog getMakeCardDialog(){
        
        return new MakeCardDialog(this);
    }

    /**
     * 结束订单
     * 
     */
    private void doEnd(){
      
        OrderVo orderVo = getUICurProduceOrder();
        
        if(!doEndCheck(orderVo)){
            return;
        }
        //写文件
        boolean result = true;
        MakeCardDialog makeCardDialogTmp = getMakeCardDialog();
        
        logger.info("订单状态：" + orderVo.getStatus());
        if(AppConstant.ES_ORDER_STATUS_BEGIN_NO.equals(orderVo.getStatus())){
            result = makeCardDialogTmp.updateOrderStatus();
            logger.info("更新订单状态结果："+result);
        }
        if(result){
            result = makeCardDialogTmp.writeFinishOrder(AppConstant.ES_ORDER_STATUS_END);
            logger.info("写完成订单结果："+result);
        }
        if(result){
            result = makeCardDialogTmp.finishOrderMsg();
            logger.info("发送订单完成消息结果："+result);
        }
        
        if(result){
            MessageShowUtil.alertInfoMsg("结束订单成功!");
        }else{
            MessageShowUtil.alertErrorMsg("结束订单失败!");
        }

    }
    
    /**
     * 结束检查
     * 
     * @return 
     */
    private boolean doEndCheck(OrderVo orderVo){
        
        if(!doMadeCheck()){
            return false;
        }
        String status = orderVo.getStatus();
        /*if(AppConstant.ES_ORDER_STATUS_BEGIN_NO.equals(status)){
            MessageShowUtil.alertInfoMsg("订单未开始!");
            return false;
        }else */
        if(AppConstant.ES_ORDER_STATUS_END.equals(status)){
            MessageShowUtil.alertInfoMsg("订单已结束!");
            return false;
        }else if(AppConstant.ES_ORDER_STATUS_FINISH.equals(status)){
            MessageShowUtil.alertInfoMsg("订单已完成!");
            return false;
        }
        return true;
    }
    
    /**
     * 是否打印订单
     * 
     * @return 
     */
    public boolean isPrintOrder(){
        return printCb.isSelected();
    }
}
