/*
 * PrintPanel.java
 */

package com.goldsign.ecpmcs.ui.panel;

import com.goldsign.csfrm.env.BaseConstant;
import com.goldsign.csfrm.util.DateHelper;
import com.goldsign.csfrm.util.MessageShowUtil;
import com.goldsign.csfrm.util.UIUtil;
import com.goldsign.csfrm.vo.CallResult;
import com.goldsign.csfrm.vo.SelectOptionVo;
import com.goldsign.ecpmcs.application.Application;
import com.goldsign.ecpmcs.env.AppConstant;
import com.goldsign.ecpmcs.env.ConfigConstant;
import com.goldsign.ecpmcs.service.IEmployeeCardService;
import com.goldsign.ecpmcs.service.IEmployeePrintService;
import com.goldsign.ecpmcs.service.IOperateLogService;
import com.goldsign.ecpmcs.service.IRwDeviceService;
import com.goldsign.ecpmcs.service.ISignCardService;
import com.goldsign.ecpmcs.service.impl.EmployeeCardService;
import com.goldsign.ecpmcs.service.impl.EmployeePrintService;
import com.goldsign.ecpmcs.service.impl.OperateLogService;
import com.goldsign.ecpmcs.service.impl.SignCardService;
import com.goldsign.ecpmcs.service.impl.ZRPrinterService;
import com.goldsign.ecpmcs.util.ConfigUtil;
import com.goldsign.ecpmcs.util.CurrentConnectionStatusUtil;
import com.goldsign.ecpmcs.util.LocalFile;
import com.goldsign.ecpmcs.util.PreviewUtil;
import com.goldsign.ecpmcs.util.PubUtil;
import com.goldsign.ecpmcs.vo.AnalyzeVo;
import com.goldsign.ecpmcs.vo.OperateLogVo;
import com.goldsign.ecpmcs.vo.ResultVo;
import com.goldsign.ecpmcs.vo.SignCardPrintVo;
import com.goldsign.ecpmcs.vo.SignCardVo;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.JTable;
import org.apache.log4j.Logger;
/**
 * 员工卡打印
 * @author Administrator
 */
public class PrintPanel extends javax.swing.JPanel {
    
    private static Logger logger = Logger.getLogger(PrintPanel.class.getName());
    
    private IRwDeviceService rwDeviceService;
    private IOperateLogService operateLogService;
    private IEmployeePrintService printService;
    private IEmployeeCardService signCardService;//员工卡服务对象
    private ISignCardService signCardService2;//其它储值卡服务对象
    
    private ImagePanel tempPanel;
    private JTable resultSetTableMain;
    private OperateLogVo logVo;
    private SignCardPrintVo printVo;
    private String suffix = null;
    private String imgDir = null;
    private String rowNum = null;//显示行数
    private boolean isContinue = false;//连续打印
    private boolean isPreview = false;//预览
    private boolean isPrinting = false;//打印状态
    private int count = 0;//计数
    private String template = null;//打印卡类型
    private List config = new ArrayList();
    private boolean isPassCard = false;//实习员工出入证模板标志
    
    /** Creates new form GenIssueRequestPanel */
    public PrintPanel() {
        rwDeviceService = ((Application)AppConstant.application).getRwDeviceService();
        operateLogService = new OperateLogService();
        this.printService = new EmployeePrintService();
        this.signCardService = new EmployeeCardService();
        this.signCardService2 = new SignCardService();
        logVo = new OperateLogVo();
        logVo.setOperId(BaseConstant.user.getUsername());
        printVo = new SignCardPrintVo();
        printVo.setPrintOper(BaseConstant.user.getUsername());
        tempPanel = new ImagePanel();
        
        initComponents();
        initCon();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        mainSPn = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jTextField6 = new javax.swing.JTextField();
        printerVerTxt = new javax.swing.JLabel();
        graphicsVerjLabel = new javax.swing.JLabel();
        graphicsVerTxt = new javax.swing.JLabel();
        printerVerjLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ribbonjLabel = new javax.swing.JLabel();
        ribbonVerTxt = new javax.swing.JLabel();
        previewjPanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btPrint = new javax.swing.JButton();
        debugCb = new javax.swing.JCheckBox();
        previewCb = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        btMoveCard = new javax.swing.JButton();
        btWriteCard = new javax.swing.JButton();
        btEjectCard = new javax.swing.JButton();
        btMoveBack = new javax.swing.JButton();
        btReset = new javax.swing.JButton();
        btCheck = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        identityName = new javax.swing.JTextField();
        identityGender = new javax.swing.JTextField();
        identityID = new javax.swing.JTextField();
        identityType = new javax.swing.JTextField();
        cardType = new javax.swing.JTextField();
        issueDate = new javax.swing.JTextField();
        expiredDate = new javax.swing.JTextField();
        departmentTxt = new javax.swing.JTextField();
        positionTxt = new javax.swing.JTextField();
        employeeClassTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        PrintTemplateCb = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(254, 254, 254));
        setPreferredSize(new java.awt.Dimension(845, 589));

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(807, 74));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSPn)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainSPn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(237, 247, 249));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setForeground(new java.awt.Color(70, 95, 125));
        jPanel3.setPreferredSize(new java.awt.Dimension(744, 230));

        jTextField6.setEditable(false);
        jTextField6.setBackground(new java.awt.Color(185, 227, 241));
        jTextField6.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jTextField6.setForeground(new java.awt.Color(94, 55, 16));
        jTextField6.setText("   打印信息");
        jTextField6.setAlignmentX(0.0F);
        jTextField6.setAlignmentY(0.0F);
        jTextField6.setBorder(null);

        graphicsVerjLabel.setText("Graphics Version:");

        printerVerjLabel.setText("Printer Version:");

        ribbonjLabel.setText("Ribbon remaining:");

        previewjPanel.setBackground(new java.awt.Color(0, 0, 0));

        org.jdesktop.layout.GroupLayout previewjPanelLayout = new org.jdesktop.layout.GroupLayout(previewjPanel);
        previewjPanel.setLayout(previewjPanelLayout);
        previewjPanelLayout.setHorizontalGroup(
            previewjPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 455, Short.MAX_VALUE)
        );
        previewjPanelLayout.setVerticalGroup(
            previewjPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );

        jPanel7.setBackground(new java.awt.Color(237, 247, 249));

        btPrint.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        btPrint.setForeground(new java.awt.Color(0, 39, 80));
        btPrint.setText("打 印");
        btPrint.setName("btWriteCard"); // NOI18N
        btPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPrintActionPerformed(evt);
            }
        });

        debugCb.setBackground(new java.awt.Color(237, 247, 249));
        debugCb.setText("调试");
        debugCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDebug(evt);
            }
        });

        previewCb.setBackground(new java.awt.Color(237, 247, 249));
        previewCb.setText("打印提示");

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel7Layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(previewCb)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, debugCb))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 35, Short.MAX_VALUE)
                .add(btPrint)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(5, 5, 5)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(previewCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(debugCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 10, Short.MAX_VALUE))
                    .add(btPrint, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(5, 5, 5))
        );

        jPanel8.setBackground(new java.awt.Color(237, 247, 249));

        btMoveCard.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        btMoveCard.setForeground(new java.awt.Color(0, 39, 80));
        btMoveCard.setText("走卡");
        btMoveCard.setName("btWriteCard"); // NOI18N
        btMoveCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMoveCardActionPerformed(evt);
            }
        });

        btWriteCard.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        btWriteCard.setForeground(new java.awt.Color(0, 39, 80));
        btWriteCard.setText("读卡");
        btWriteCard.setName("btWriteCard"); // NOI18N
        btWriteCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btReadCardActionPerformed(evt);
            }
        });

        btEjectCard.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        btEjectCard.setForeground(new java.awt.Color(0, 39, 80));
        btEjectCard.setText("出卡");
        btEjectCard.setName("btEjectCard"); // NOI18N
        btEjectCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEjectCardActionPerformed(evt);
            }
        });

        btMoveBack.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        btMoveBack.setForeground(new java.awt.Color(0, 39, 80));
        btMoveBack.setText("后退");
        btMoveBack.setName("btWriteCard"); // NOI18N
        btMoveBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMoveBackActionPerformed(evt);
            }
        });

        btReset.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        btReset.setForeground(new java.awt.Color(0, 39, 80));
        btReset.setText("重置");
        btReset.setName("btWriteCard"); // NOI18N
        btReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btResetActionPerformed(evt);
            }
        });

        btCheck.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        btCheck.setForeground(new java.awt.Color(0, 39, 80));
        btCheck.setText("自校");
        btCheck.setName("btWriteCard"); // NOI18N
        btCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCheckActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(0, 26, Short.MAX_VALUE)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btMoveCard)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btWriteCard)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btEjectCard)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btMoveBack)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btReset)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btCheck)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(122, Short.MAX_VALUE)
                .add(btMoveCard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btWriteCard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btEjectCard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btMoveBack, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btReset, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(237, 247, 249));

        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("姓名：");

        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("证件号：");

        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("票卡类型：");

        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("证件类型：");

        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("发证日期：");

        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("有效日期：");

        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("性别：");

        jPanel4.setBackground(new java.awt.Color(237, 247, 249));

        identityName.setBackground(new java.awt.Color(237, 247, 249));
        identityName.setForeground(new java.awt.Color(51, 51, 51));
        identityName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        identityName.setBorder(null);

        identityGender.setBackground(new java.awt.Color(237, 247, 249));
        identityGender.setForeground(new java.awt.Color(51, 51, 51));
        identityGender.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        identityGender.setBorder(null);

        identityID.setBackground(new java.awt.Color(237, 247, 249));
        identityID.setForeground(new java.awt.Color(51, 51, 51));
        identityID.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        identityID.setBorder(null);

        identityType.setBackground(new java.awt.Color(237, 247, 249));
        identityType.setForeground(new java.awt.Color(51, 51, 51));
        identityType.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        identityType.setBorder(null);

        cardType.setBackground(new java.awt.Color(237, 247, 249));
        cardType.setForeground(new java.awt.Color(51, 51, 51));
        cardType.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        cardType.setBorder(null);

        issueDate.setBackground(new java.awt.Color(237, 247, 249));
        issueDate.setForeground(new java.awt.Color(51, 51, 51));
        issueDate.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        issueDate.setBorder(null);

        expiredDate.setBackground(new java.awt.Color(237, 247, 249));
        expiredDate.setForeground(new java.awt.Color(51, 51, 51));
        expiredDate.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        expiredDate.setBorder(null);

        departmentTxt.setBackground(new java.awt.Color(237, 247, 249));
        departmentTxt.setForeground(new java.awt.Color(51, 51, 51));
        departmentTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        departmentTxt.setBorder(null);

        positionTxt.setBackground(new java.awt.Color(237, 247, 249));
        positionTxt.setForeground(new java.awt.Color(51, 51, 51));
        positionTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        positionTxt.setBorder(null);

        employeeClassTxt.setBackground(new java.awt.Color(237, 247, 249));
        employeeClassTxt.setForeground(new java.awt.Color(51, 51, 51));
        employeeClassTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        employeeClassTxt.setBorder(null);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(identityName)
            .add(identityGender)
            .add(identityID)
            .add(identityType)
            .add(issueDate)
            .add(expiredDate)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, departmentTxt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, cardType)
                    .add(employeeClassTxt)
                    .add(positionTxt))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(identityName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(identityGender, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(7, 7, 7)
                .add(identityID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(identityType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cardType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(employeeClassTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(departmentTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(positionTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(issueDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(expiredDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(22, 22, 22))
        );

        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("部门：");

        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setText("职务：");

        jLabel12.setForeground(new java.awt.Color(51, 51, 51));
        jLabel12.setText("员工级别：");

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jLabel4)
                                .add(jLabel3)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel2)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel7)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel1))
                            .add(jLabel12))
                        .add(jLabel10)
                        .add(jLabel11)
                        .add(jLabel5))
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel12)
                .add(10, 10, 10)
                .add(jLabel10)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel11)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel6)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel9.setText("打印模板：");

        PrintTemplateCb.setForeground(new java.awt.Color(0, 39, 80));
        PrintTemplateCb.setToolTipText("请选择");
        PrintTemplateCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTemplatePerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTextField6)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(previewjPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(printerVerjLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(printerVerTxt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(ribbonjLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(ribbonVerTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(graphicsVerjLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(graphicsVerTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jPanel3Layout.createSequentialGroup()
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(jLabel9)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(PrintTemplateCb, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                                .add(jPanel3Layout.createSequentialGroup()
                                    .add(120, 120, 120)
                                    .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(30, 30, 30)))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)))
                        .add(jPanel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(214, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jTextField6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .add(jLabel8)
                                        .add(28, 28, 28))
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(jLabel9)
                                        .add(PrintTemplateCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                            .add(jPanel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, ribbonjLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, ribbonVerTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(2, 2, 2)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(printerVerjLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(printerVerTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(2, 2, 2)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(graphicsVerjLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, graphicsVerTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(9, 9, 9))))
                    .add(previewjPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1142, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1142, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 507, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 走卡
     */
    private void btMoveCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMoveCardActionPerformed
        moveCard();
    }//GEN-LAST:event_btMoveCardActionPerformed

    /**
     * 读卡
     */
    private void btReadCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReadCardActionPerformed
        
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        if(!checkBeforeRead()){//读卡前先检查
            return;
        }
        AnalyzeVo analyzeVo = doRead();
        if(analyzeVo != null){
            setAnalyzeValuesOnclick(analyzeVo);
        }else{
            MessageShowUtil.alertErrorMsg("读卡失败！");
        }
    }//GEN-LAST:event_btReadCardActionPerformed
    
    public boolean checkBeforeRead(){
        boolean connectFlag = false;
        connectFlag = CurrentConnectionStatusUtil.isDatabaseConnected();
        if(!connectFlag){//检测数据库连接
            MessageShowUtil.errorOpMsg( "数据库连接连接异常，请联系管理员！");
            MessageShowUtil.alertErrorMsg( "数据库连接连接异常，请联系管理员！");
            return false;
        }
        
        //检测读写器状态
        connectFlag = CurrentConnectionStatusUtil.isRwConnected(rwDeviceService);
        if(!connectFlag){
            MessageShowUtil.errorOpMsg( "读写器连接异常，请联系管理员！");
            MessageShowUtil.alertErrorMsg( "读写器连接异常，请联系管理员！");
            return false;
        }
    
        //检测读写器是否放卡
        connectFlag = CurrentConnectionStatusUtil.isCardOnRW(rwDeviceService);
        if(!connectFlag){
            MessageShowUtil.errorOpMsg( "没有检测到任何票卡，请正确放置卡片！");
            MessageShowUtil.alertErrorMsg( "没有检测到任何票卡，请正确放置卡片！");
            return false;
        }
        
        return connectFlag;
    } 
    /**
     * 打印
     */
    private void btPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPrintActionPerformed
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        //选择打印模板
        if(template == null || template.isEmpty()){
            MessageShowUtil.alertErrorMsg("请选择打印模板！");
            return;
        }
        //提示设置打印机纵向或横向打印
        int derector = MessageShowUtil.confirmInfoMsgYesOrNo("请确认按模板设置打印机纵向或横向打印，否为取消打印！");
        if(derector==MessageShowUtil.NO_OPTION || derector==MessageShowUtil.CLOSED_OPTION){
            return;
        }
        
        isContinue = false;//continuCb.isSelected();
        isPreview = previewCb.isSelected();
        setFlag(false);
        
        if(!isPrinting){
            new Thread() {
                @Override
                public void run() {
                    isPrinting = true;
                    btPrint.setText("停 止");
                    PubUtil.setButton(btPrint, true);
                    //判断是否是员工卡打印
                    String cardTypeLine = (String) config.get(0);
                    String[] lineData = cardTypeLine.split(AppConstant.WELL_SIGN, -1);
                    String card_type = lineData[1].toString();
                    if("0501".equals(card_type)||"0502".equals(card_type)||"0503".equals(card_type)||"0504".equals(card_type)){
                        if("0504".equals(card_type)){
                            isPassCard = true;
                        }
                        doPrint();
                    }else if("0201".endsWith(card_type)||"0202".endsWith(card_type)){
                        doSignCardPrint();
                    }else if("back".equals(card_type)){
                        doBackgroundPrint();
                    }
                    
                    setFlag(true);
                }
            }.start();
        }else{
            isPrinting = false;
            btPrint.setText("打 印");
        }
        
    }//GEN-LAST:event_btPrintActionPerformed

    /**
     * 出卡
     */ 
    private void btEjectCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEjectCardActionPerformed
        ejectCard();
    }//GEN-LAST:event_btEjectCardActionPerformed

    /**
     * 后退
     */
    private void btMoveBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMoveBackActionPerformed
        moveBack();
    }//GEN-LAST:event_btMoveBackActionPerformed

    /**
     * 调试模式
     */
    private void setDebug(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDebug
        setDebug();
    }//GEN-LAST:event_setDebug

    /**
     * 重置
     */
    private void btResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btResetActionPerformed
        reset();
    }//GEN-LAST:event_btResetActionPerformed

    /**
     * 自校
     */
    private void btCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCheckActionPerformed
        selAdjust();
    }//GEN-LAST:event_btCheckActionPerformed

    /**
     * 选择模板 
     */
    private void setTemplatePerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTemplatePerformed
        setTemplate();
    }//GEN-LAST:event_setTemplatePerformed
    
    /**
     * 记名卡打印
     */
    private void doSignCardPrint() {
        //打印前清空提示信息
        MessageShowUtil.infoOpMsg("");
        do{
            Long startTime = System.currentTimeMillis();
            
            if(!ZRPrinterService.isReady()){
                MessageShowUtil.alertErrorMsg("不能打印，打印机未准备好。请确认！");
                return;
            }
            
            //检测打印机色带情况
            if(!checkRibbon()){
                return;
            }
            
            //进卡到读卡器位置
            if(!moveCard()){
//                MessageShowUtil.alertErrorMsg("走卡失败,请检查打印机！");
                isPrinting = false;
                btPrint.setText("打 印");
                //无卡时结束
                return;
            }
            
            //读卡
            AnalyzeVo analyzeVo = doRead();
            if(analyzeVo != null){
                if(!setAnalyzeValuesOnclick(analyzeVo)){
                    ejectCard();
                    isPrinting = false;
                    btPrint.setText("打 印");
                    return;
                }
            }else{
                MessageShowUtil.errorOpMsg("读卡失败，退出打印！");
                MessageShowUtil.alertErrorMsg("读卡失败，退出打印！");
                ejectCard();
                isPrinting = false;
                btPrint.setText("打 印");
                return;
            }
            
            //检验是否存在记名卡信息
            if(getSignCards2(analyzeVo).size()<1){
                MessageShowUtil.alertErrorMsg("不存在该记名卡信息,不能打印！");
                logVo.setOprtContent("不存在该记名卡信息,不能打印！证件号：" + analyzeVo.getCertificateCode().trim());
                logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                operateLogService.insertOperaterLogs(logVo);
                ejectCard();
                continue;
            }
            
            //检验是否发行状态
            if(!analyzeVo.getbIssueStatus().trim().equals(AppConstant.ISSUE_STATUS_ISSUED)){
                MessageShowUtil.alertErrorMsg("该卡未发行,不能打印！");
                logVo.setOprtContent("该卡未发行,不能打印！证件号：" + analyzeVo.getCertificateCode().trim());
                logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                operateLogService.insertOperaterLogs(logVo);
                ejectCard();
                continue;
            }
            
            //检验是否已经打印
            SignCardPrintVo printParam = getCallParam();
            printParam.setIdentityId(analyzeVo.getCertificateCode().trim());
            printParam.setIdentityType(analyzeVo.getCertificateType());
            List<Object[]> printList = printService.getPrintList(printParam);
            if(printList.size()>0){
                int confirm = MessageShowUtil.confirmInfoMsgYesOrNo("记名卡已经打印，是否继续打印该记名卡？");
                if(confirm == MessageShowUtil.NO_OPTION){
                    logVo.setOprtContent("记名信息已经打印！取消打印！证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    ejectCard();
                    continue;
                }
            }
            
            //搜索图片
            printVo.setPhotoName(getImgDir(analyzeVo.getCertificateType().trim(), analyzeVo.getCertificateCode().trim()));
            File file = new File(printVo.getPhotoName());
            if(!file.exists() || file.isDirectory()){
                if(MessageShowUtil.confirmInfoMsgYesOrNo("找不到相片，是否继续打印该记名卡？")==MessageShowUtil.NO_OPTION){
                    logVo.setOprtContent("找不到相片！取消打印！证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    ejectCard();
                    continue;
                }
            }
            
            //打印提示
            if(isPreview){
                if(MessageShowUtil.confirmInfoMsgYesOrNo("确认是否打印该记名卡？")==MessageShowUtil.NO_OPTION){
                    logVo.setOprtContent("取消打印！未打印证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    ejectCard();
                    continue;
                }
            }
            
            //后退
            if(!moveBack()){
                MessageShowUtil.alertErrorMsg("走卡失败,请检查打印机！");
                btPrint.setText("打 印");
                isPrinting = false;
                return;
            }
            
            //组合打印信息
            setPrintVo(analyzeVo);
            
            //打印
            if(!ZRPrinterService.printForTemplate(printVo, config)){
                ejectCard();
                if(MessageShowUtil.confirmInfoMsgYesOrNo("记名卡打印错误，是否继续？")==MessageShowUtil.NO_OPTION){
                    logVo.setOprtContent("记名卡打印错误！证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    isPrinting = false;
                    btPrint.setText("打 印");
                    return;
                }
            }else{
                int times = 0;
                boolean isReady = true;
                if(!ZRPrinterService.isReady()){
                    try {
                        Thread.sleep(20000);
                        while(isReady && !ZRPrinterService.isReady()){
                            if(times > 120){
                                 MessageShowUtil.alertErrorMsg("记名卡打印超时，请检查打印机！");
                                 isReady = false;
                            }
                            Thread.sleep(500);
                            times ++ ;
                        }
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
                if(!isReady){
                    printVo.setRemark("记名卡打印超时");
                }
                //保存打印记录
                if(!savePoint()){
                    //写入本地文件
                    LocalFile.writeLocalFile(printVo);
                    logVo.setOprtContent("插入数据库失败，写入本地文件！证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    
                    MessageShowUtil.alertErrorMsg("数据库异常，请检查网络！");
                    isPrinting = false;
                    btPrint.setText("打 印");
                    return;
                }
            }
            
            Long endTime = System.currentTimeMillis();
            Long conutTime = (endTime - startTime)/1000;
            count++;
            //查询
            doQuery();
            MessageShowUtil.infoOpMsg("记名卡打印成功，已经打印" + count + "张卡！上一张用时" + conutTime + "秒。");
            logVo.setOprtContent("记名卡打印成功！证件号：" + analyzeVo.getCertificateCode().trim());
            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
            operateLogService.insertOperaterLogs(logVo);
            
        }while(isContinue);
        isPrinting = false;
        btPrint.setText("打 印");
    }
    /**
     * 员工卡打印
     */
    private void doPrint() {
        
        do{
            Long startTime = System.currentTimeMillis();
            
            //检测打印机色带情况
            checkRibbon();
            
            //进卡到读卡器位置
            if(!moveCard()){
//                MessageShowUtil.alertErrorMsg("走卡失败,请检查打印机！");
                isPrinting = false;
                btPrint.setText("打 印");
                //无卡时结束
                return;
            }
            
            //读卡
            AnalyzeVo analyzeVo = doRead();
            
//            AnalyzeVo analyzeVo = new AnalyzeVo();
//            testAnalyxeVo(analyzeVo);
            
            if(analyzeVo != null){
                //检验是否是员工卡
                if(!analyzeVo.getcTicketType().trim().equals(AppConstant.TICKET_TYPE_EMPLOYEE)){
                    MessageShowUtil.alertErrorMsg("该卡不是员工票,不能打印！");
                    logVo.setOprtContent("该卡不是员工票,不能打印！票卡类型：" + analyzeVo.getcTicketType().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    logger.info("该卡不是员工票,不能打印！票卡类型：" + analyzeVo.getcTicketType().trim());
                    operateLogService.insertOperaterLogs(logVo);
                    ejectCard();
                    continue;
                }
                //检验是否存在员工卡信息
                if(!getSignCards(analyzeVo)){
                    MessageShowUtil.alertErrorMsg("不存在该已发行员工信息,不能打印！");
                    logVo.setOprtContent("不存在该已发行员工信息,不能打印！逻辑卡号：" + analyzeVo.getcLogicalID().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    logger.info("不存在该已发行员工信息,不能打印！逻辑卡号：" + analyzeVo.getcLogicalID().trim());
                    operateLogService.insertOperaterLogs(logVo);
                    ejectCard();
                    continue;
                }
                //显示卡信息
                if(!setAnalyzeValuesOnclick(analyzeVo)){
                    isPrinting = false;
                    btPrint.setText("打 印");
                    return ;
                }
                
            }else{
                MessageShowUtil.infoOpMsg("读卡失败，退出打印！");
                ejectCard();
                isPrinting = false;
                btPrint.setText("打 印");
                return;
                
            }
            
            //检验是否已经打印
            SignCardPrintVo printParam = getCallParam();
            printParam.setIdentityId(analyzeVo.getCertificateCode().trim());
            printParam.setIdentityType(analyzeVo.getCertificateType());
            List<Object[]> printList = printService.getPrintList(printParam);
            if(printList.size()>0){
                // 关闭 -1；
                int confirm = MessageShowUtil.confirmInfoMsgYesOrNo("员工信息已经打印，是否继续打印该员工卡？");
                if(confirm == MessageShowUtil.NO_OPTION){
                    logVo.setOprtContent("员工信息已经打印！取消打印！证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    ejectCard();
                    continue;
                }
            }
            
            //搜索图片
            printVo.setPhotoName(getImgDir(analyzeVo.getCertificateType().trim(), analyzeVo.getCertificateCode().trim()));
            File file = new File(printVo.getPhotoName());
            if(!isPassCard){//如果非“实习员工出入证正面模板“，不检查照片；否则，检查是否存在
                if(!file.exists() || file.isDirectory()){
                    if(MessageShowUtil.confirmInfoMsgYesOrNo("找不到相片，是否继续打印该员工卡？")==MessageShowUtil.NO_OPTION){
                        logVo.setOprtContent("找不到相片！取消打印！证件号：" + analyzeVo.getCertificateCode().trim());
                        logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                        operateLogService.insertOperaterLogs(logVo);
                        ejectCard();
                        continue;
                    }
                }
            }
            
            
            //打印提示
            if(isPreview){
                if(MessageShowUtil.confirmInfoMsgYesOrNo("确认是否打印该员工卡？")==MessageShowUtil.NO_OPTION){
                    logVo.setOprtContent("取消打印！未打印证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    ejectCard();
                    continue;
                }
            }
            
            //后退
            if(!moveBack()){
                MessageShowUtil.alertErrorMsg("走卡失败,请检查打印机！");
                btPrint.setText("打 印");
                isPrinting = false;
                return;
            }
            
            //组合打印信息
            setPrintVo(analyzeVo);
            
            //打印
            if(!ZRPrinterService.printForTemplate(printVo, config)){
                ejectCard();
                if(MessageShowUtil.confirmInfoMsgYesOrNo("打印错误，是否继续？")==MessageShowUtil.NO_OPTION){
                    logVo.setOprtContent("打印错误！证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    isPrinting = false;
                    btPrint.setText("打 印");
                    return;
                }
            }else{
                int times = 0;
                boolean isReady = true;
                
                try {
                    Thread.sleep(20000);
                    while(isReady && !ZRPrinterService.isReady()){
                        if(times > 120){
                             MessageShowUtil.alertErrorMsg("打印超时，请检查打印机！");
                             isReady = false;
                        }
                        Thread.sleep(500);
                        times ++ ;
                    }
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                
                //保存打印记录
                if(!savePoint()){
                    //写入本地文件
                    LocalFile.writeLocalFile(printVo);
                    logVo.setOprtContent("插入数据库失败，写入本地文件！证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    
                    MessageShowUtil.alertErrorMsg("数据库异常，请检查网络！");
                    isPrinting = false;
                    btPrint.setText("打 印");
                    return;
                }
            }
            
            Long endTime = System.currentTimeMillis();
            Long conutTime = (endTime - startTime)/1000;
            count++;
            //查询
            doQuery();
            MessageShowUtil.infoOpMsg("打印成功，已经打印" + count + "张卡！上一张用时" + conutTime + "秒。");
            logVo.setOprtContent("打印成功！证件号：" + analyzeVo.getCertificateCode().trim());
            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
            operateLogService.insertOperaterLogs(logVo);
            
        }while(isContinue);
        isPrinting = false;
        btPrint.setText("打 印");
    }
    /**
     * 背景图片打印
     */
    private void doBackgroundPrint() {
        
        do{
            Long startTime = System.currentTimeMillis();
            
            //检测打印机色带情况
            checkRibbon();
            
            //进卡到读卡器位置
            if(!moveCard()){
//                MessageShowUtil.alertErrorMsg("走卡失败,请检查打印机！");
                isPrinting = false;
                btPrint.setText("打 印");
                //无卡时结束
                return;
            }
            
            //读卡
            AnalyzeVo analyzeVo = doRead();
            
//            AnalyzeVo analyzeVo = new AnalyzeVo();
//            testAnalyxeVo(analyzeVo);
            
            if(analyzeVo != null){
                String IDTypeCode = analyzeVo.getCertificateType().trim();
                String ID = analyzeVo.getCertificateCode().trim();
                if( IDTypeCode==null || ID==null ){
                    MessageShowUtil.errorOpMsg( "该记名卡未发行，不能打印！");
                    MessageShowUtil.alertErrorMsg( "该记名卡未发行，不能打印");
                    return ;
                }
                //显示卡信息
                setAnalyzeBackgroundOnclick(analyzeVo);
            }else{
                
                    MessageShowUtil.infoOpMsg("读记名卡失败，退出打印！");
                    ejectCard();
                    isPrinting = false;
                    btPrint.setText("打 印");
                    return;
                
            }
            
            //检验是否已经打印
            SignCardPrintVo printParam = getCallParam();
            printParam.setIdentityId(analyzeVo.getCertificateCode().trim());
            printParam.setIdentityType(analyzeVo.getCertificateType());
            List<Object[]> printList = printService.getPrintList(printParam);
            if(printList.size()>0){
                int confirm = MessageShowUtil.confirmInfoMsgYesOrNo("该记名卡已经至少打印过一面，是否继续打印？");
                if(confirm == MessageShowUtil.NO_OPTION){
                    logVo.setOprtContent("该记名卡已经打印！取消打印！证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    ejectCard();
                    continue;
                }
            }
            
            //搜索图片
            printVo.setPhotoName(getImgDir(analyzeVo.getCertificateType().trim(), analyzeVo.getCertificateCode().trim()));
            File file = new File(printVo.getPhotoName());
            if(!isPassCard){//如果非“实习员工出入证正面模板“，不检查照片；否则，检查是否存在
                if(!file.exists() || file.isDirectory()){
                    if(MessageShowUtil.confirmInfoMsgYesOrNo("找不到相片，是否继续打印该记名卡？")==MessageShowUtil.NO_OPTION){
                        logVo.setOprtContent("找不到相片！取消打印！证件号：" + analyzeVo.getCertificateCode().trim());
                        logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                        operateLogService.insertOperaterLogs(logVo);
                        ejectCard();
                        continue;
                    }
                }
            }
            
            //打印提示
            if(isPreview){
                if(MessageShowUtil.confirmInfoMsgYesOrNo("确认是否打印该记名卡？")==MessageShowUtil.NO_OPTION){
                    logVo.setOprtContent("取消打印！未打印证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    ejectCard();
                    continue;
                }
            }
            
            //后退
            if(!moveBack()){
                MessageShowUtil.alertErrorMsg("走卡失败,请检查打印机！");
                btPrint.setText("打 印");
                isPrinting = false;
                return;
            }
            
            //组合打印信息
            setPrintVo(analyzeVo);
            
            //打印
            if(!ZRPrinterService.printForTemplate(printVo, config)){
                ejectCard();
                if(MessageShowUtil.confirmInfoMsgYesOrNo("打印错误，是否继续？")==MessageShowUtil.NO_OPTION){
                    logVo.setOprtContent("打印错误！证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    isPrinting = false;
                    btPrint.setText("打 印");
                    return;
                }
            }else{
                int times = 0;
                boolean isReady = true;
                
                try {
                    Thread.sleep(20000);
                    while(isReady && !ZRPrinterService.isReady()){
                        if(times > 120){
                             MessageShowUtil.alertErrorMsg("打印超时，请检查打印机！");
                             isReady = false;
                        }
                        Thread.sleep(500);
                        times ++ ;
                    }
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                
                //保存打印记录
//                if(!savePoint()){
//                    //写入本地文件
//                    LocalFile.writeLocalFile(printVo);
//                    logVo.setOprtContent("插入数据库失败，写入本地文件！证件号：" + analyzeVo.getCertificateCode().trim());
//                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
//                    operateLogService.insertOperaterLogs(logVo);
//                    
//                    MessageShowUtil.alertErrorMsg("数据库异常，请检查网络！");
//                    isPrinting = false;
//                    btPrint.setText("打 印");
//                    return;
//                }
            }
            
            Long endTime = System.currentTimeMillis();
            Long conutTime = (endTime - startTime)/1000;
            count++;
            //查询
            doQuery();
            MessageShowUtil.infoOpMsg("打印成功，已经打印" + count + "张卡！上一张用时" + conutTime + "秒。");
            logVo.setOprtContent("打印成功！证件号：" + analyzeVo.getCertificateCode().trim());
            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
            //operateLogService.insertOperaterLogs(logVo);
            
        }while(isContinue);
        isPrinting = false;
        btPrint.setText("打 印");
    }
    /**
     * 查询
     */
    private void doQuery(){
        SignCardPrintVo printParam = getCallParam();
        //查询
        List<Object[]> printList = printService.getPrintListAll(printParam);
        MessageShowUtil.infoOpMsg("成功查询" + printList.size() + "条记录");
        //生成列表
        genMainResultSetTable(printList);
    }
    
    /**
     * 根据结果集，生成列表
     * @param result
     */
    private void genMainResultSetTable(List<Object[]> result) {
        //列名称
        String[] columnNames = {"姓名", "证件类型", "证件号", "票卡类型", "职务", 
            "部门", "性别","级别","逻辑卡号", "操作员", 
            "打印时间", "相片名称", "票卡类型代码" ,"证件类型代码", "部门代码" , 
            "职务代码","级别代码"};
        //列宽度
        int[] columnSize = {200, 100, 200, 150, 120, 
            120, 40, 40, 120, 100, 
            200, 260, 0, 0, 0, 0, 0};
        
        //生成列表
        resultSetTableMain = UIUtil.genResultSetTable(this.mainSPn, result, columnNames, columnSize);
        UIUtil.hideTableColumns(resultSetTableMain, new int[]{12, 13, 14, 15, 16});//隐藏列
        //添加单击事件
        resultSetTableMain.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e) {
                if(e.getClickCount()==1){//点击几次，这里是单击事件
                    setFormValuesOnclick();        
                }
            }
        });
    }
    
    /*
     * 点击列表记录后回填表单
     */
    private void setFormValuesOnclick(){
//        {"姓名", "证件类型", "证件号", "票卡类型", "职务", 
//            "部门", "性别","级别","逻辑卡号", "操作员", 
//            "打印时间", "相片名称", "票卡类型代码" ,"证件类型代码", "部门代码" , 
//            "职务代码","级别代码"};
        setFormValuesClear();
        int row=resultSetTableMain.getSelectedRow(); 
        
        String IDTypeCode = resultSetTableMain.getValueAt(row,12).toString();
        String ID = resultSetTableMain.getValueAt(row,2).toString();
        
        String emClassTxt = "";
        if(!(resultSetTableMain.getValueAt(row, 7)==null)){
            emClassTxt = resultSetTableMain.getValueAt(row, 7).toString();
        }
        String DepartTxt = "";
        if(!(resultSetTableMain.getValueAt(row, 5)==null)){
            emClassTxt = resultSetTableMain.getValueAt(row, 5).toString();
        }
        
        String idName = resultSetTableMain.getValueAt(row,0).toString();
        
        identityName.setText(idName);
        identityType.setText(resultSetTableMain.getValueAt(row,1).toString());
        identityID.setText(ID);
        cardType.setText(resultSetTableMain.getValueAt(row,3).toString());
        positionTxt.setText(resultSetTableMain.getValueAt(row, 4).toString());
        departmentTxt.setText(DepartTxt);
        identityGender.setText(resultSetTableMain.getValueAt(row,6).toString());
        employeeClassTxt.setText(emClassTxt);
        
        
        
        issueDate.setText("");
        expiredDate.setText("");
        
        AnalyzeVo anVo = new AnalyzeVo();
        //显示相片
        String imgDir = getImgDir(IDTypeCode, ID);
        anVo.setImgDir(imgDir);
        anVo.setCertificateName(idName);
        anVo.setCertificateCode(ID);
        anVo.setEmployeeDepartment(DepartTxt);
        anVo.setEmployeeClass(emClassTxt);
        //显示预览图
        PreviewUtil.setPreviewPrint(config, previewjPanel, tempPanel, anVo);
    }
    private void setFormValuesClear(){
        identityName.setText("");
        identityGender.setText("");
        identityID.setText("");
        identityType.setText("");
        cardType.setText("");
        departmentTxt.setText("");
        employeeClassTxt.setText("");
        positionTxt.setText("");
        issueDate.setText("");
        expiredDate.setText("");
    }
    
    /*
     * 显示读卡内容
     */
    private void setAnalyzeBackgroundOnclick(AnalyzeVo analyzeVo){
        setFormValuesClear();
        String IDTypeCode = analyzeVo.getCertificateType().trim();
        String ID = analyzeVo.getCertificateCode().trim();
        
        identityName.setText(analyzeVo.getCertificateName().trim());
        identityGender.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_SEX, analyzeVo.getCertificateSex()));
        identityID.setText(ID);
        identityType.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_TYPE, analyzeVo.getCertificateType()));
        cardType.setText(PubUtil.getMapString(AppConstant.TICKET_TYPE, analyzeVo.getcTicketType()));
        issueDate.setText(analyzeVo.getcIssueDate());
        expiredDate.setText(analyzeVo.getcExpire());
        departmentTxt.setText(PubUtil.getMapString(AppConstant.EMPLOYEE_DEPARTMENT, analyzeVo.getEmployeeDepartment()));
        positionTxt.setText(PubUtil.getMapString(AppConstant.EMPLOYEE_POSITION, analyzeVo.getEmployeePositions()));
        employeeClassTxt.setText(PubUtil.getMapString(AppConstant.EMPLOYEE_CLASS, analyzeVo.getEmployeeClass()));
        
        //显示相片
        String imgDir = getImgDir(IDTypeCode, ID);
        analyzeVo.setImgDir(imgDir);
        analyzeVo.setEmployeeClassTxt(employeeClassTxt.getText());
        
        //显示预览图
        PreviewUtil.setPreviewPrint(config, previewjPanel, tempPanel, analyzeVo);
    }
    
    /*
     * 显示读卡内容
     */
    private boolean setAnalyzeValuesOnclick(AnalyzeVo analyzeVo){
        setFormValuesClear();
        String IDTypeCode = analyzeVo.getCertificateType().trim();
        String ID = analyzeVo.getCertificateCode().trim();
        String cTicketType = analyzeVo.getcTicketType().substring(0,2);
        if("05".equals(cTicketType)){
            signCardService.getEmployeeCardVo(analyzeVo);
        }
        identityName.setText(analyzeVo.getCertificateName().trim());
        identityGender.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_SEX, analyzeVo.getCertificateSex()));
        identityID.setText(ID);
        identityType.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_TYPE, analyzeVo.getCertificateType()));
        cardType.setText(PubUtil.getMapString(AppConstant.TICKET_TYPE, analyzeVo.getcTicketType()));
        issueDate.setText(analyzeVo.getcIssueDate());
        expiredDate.setText(analyzeVo.getcExpire());
        departmentTxt.setText(PubUtil.getMapString(AppConstant.EMPLOYEE_DEPARTMENT, analyzeVo.getEmployeeDepartment()));
        positionTxt.setText(PubUtil.getMapString(AppConstant.EMPLOYEE_POSITION, analyzeVo.getEmployeePositions()));
        employeeClassTxt.setText(PubUtil.getMapString(AppConstant.EMPLOYEE_CLASS, analyzeVo.getEmployeeClass()));
        //判断是否是员工卡打印
        if(config!=null && !config.isEmpty()){
            String cardTypeLine = (String) config.get(0);
            String[] lineData = cardTypeLine.split(AppConstant.WELL_SIGN, -1);
            String card_type = lineData[1].toString();
            if("0501".equals(card_type)||"0502".equals(card_type)||"0503".equals(card_type)||"0504".equals(card_type)){
                if(!signCardService.getEmployeeCardVo(analyzeVo)){
                    MessageShowUtil.alertErrorMsg("未查询到该员工卡信息或所选模板不匹配！");
                    logVo.setOprtContent("未查询到该员工卡信息,不能打印！证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    //ejectCard();
                    return false;
                }
                String emClassValue = analyzeVo.getEmployeeClass();
                if(("0".equals(emClassValue)&&(!"0501".equals(card_type)))){
                    MessageShowUtil.alertErrorMsg("所选员工卡模板不匹配，请选择 员工卡A级正面模板！");
                    return false;
                }
                if(("1".equals(emClassValue)&&(!"0502".equals(card_type)))){
                    MessageShowUtil.alertErrorMsg("所选员工卡模板不匹配，请选择 员工卡B级正面模板！");
                    return false;
                }
                if(("2".equals(emClassValue)&&((!"0503".equals(card_type)))&&(!"0504".equals(card_type)))){
                    MessageShowUtil.alertErrorMsg("所选员工卡模板不匹配，请选择 员工卡C级正面模板 或者 实习员工出入证正面模板！");
                    return false;
                }
            }
            //检验是否存在记名卡信息
            if("0201".equals(card_type)||"0202".equals(card_type)){
                if(getSignCards2(analyzeVo).size()<1){
                    MessageShowUtil.alertErrorMsg("不存在该记名卡信息或所选模板不匹配！");
                    logVo.setOprtContent("不存在该记名卡信息,不能打印！证件号：" + analyzeVo.getCertificateCode().trim());
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);
                    //ejectCard();
                    return false;
                }
            }
        }
        
        //显示相片
        String imgDir = getImgDir(IDTypeCode, ID);
        analyzeVo.setImgDir(imgDir);
        analyzeVo.setEmployeeClassTxt(employeeClassTxt.getText());
        
        //显示预览图
        PreviewUtil.setPreviewPrint(config, previewjPanel, tempPanel, analyzeVo);
        return true;
    }
    
    /**
     * 取得查询条件
     * @return 
     */
    private SignCardPrintVo getCallParam(){
        SignCardPrintVo param =  new SignCardPrintVo();
        param.setPrintOper(BaseConstant.user.getUsername());
        param.setRownum(rowNum);
        Date date = new Date();
        SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd");
        param.setBeginTime(DateHelper.str10yyyy_MM_ddToStr8yyyyMMdd(df.format(date)));
        param.setEndTime(DateHelper.str10yyyy_MM_ddToStr8yyyyMMdd(df.format(date)));
        return param;
    }
    
    /**
     * 初始化
     */
    private void initCon() {
        //设置10个字段不可编辑
        identityName.setEditable(false);
        identityGender.setEditable(false);
        identityID.setEditable(false);
        identityType.setEditable(false);
        cardType.setEditable(false);
        issueDate.setEditable(false);
        expiredDate.setEditable(false);
        departmentTxt.setEditable(false);
        positionTxt.setEditable(false);
        employeeClassTxt.setEditable(false);
        
        //查询文件后缀
        suffix = ConfigUtil.getConfigValue(ConfigConstant.PhotoTag, 
                ConfigConstant.PhotoSuffixTag);
        //在此目录中找文件
        imgDir = ConfigUtil.getConfigValue(ConfigConstant.PhotoTag, 
                ConfigConstant.PhotoImgDirTag);
        
        //添加打印模板下拉内容
        addItemCardTemplate();
        //调试模式
        setDebug();
        
        //sdk版本号
        printerVerTxt.setText(ZRPrinterService.getPrinterVer());
        graphicsVerTxt.setText(ZRPrinterService.getGraphicsVer());
        
        doQuery();
    }
    
    /**
     * 添加票卡类型下拉内容
     */
    private void addItemCardTemplate() {
        this.PrintTemplateCb.removeAllItems();
        this.PrintTemplateCb.addItem(new SelectOptionVo("", "请选择模板"));
        Set<String> dkey = AppConstant.PRINT_TEMPLATE.keySet();
        for (Iterator it = dkey.iterator(); it.hasNext();) {
            String s = (String) it.next();
            this.PrintTemplateCb.addItem(new SelectOptionVo(s, String.valueOf(AppConstant.PRINT_TEMPLATE.get(s))));
        }
    }
    
    /**
     * 取相片路径
     * @param identityType
     * @param identityId
     * @return 
     */
    private String getImgDir(String identityType, String identityId) {
        String returnDir = null;

        String fileName = identityId + "." + suffix; 
        returnDir = imgDir + "/" + identityType + "/" + fileName;
        
        return returnDir;
    }
    
    /*
     * 分析票卡
     */
    private AnalyzeVo doRead(){
        AnalyzeVo analyzeVo =  null;
        CallResult callResult = rwDeviceService.analyze();
        if(!callResult.isSuccess()){
            //日志
            logVo.setOprtContent("读卡失败，返回信息：" + callResult.getMsg());
            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
            logger.error("读卡失败，返回信息：" + callResult.getMsg());
            operateLogService.insertOperaterLogs(logVo);
            MessageShowUtil.infoOpMsg("读卡失败，返回信息：" + callResult.getMsg());
            
            return analyzeVo;
        }
        analyzeVo = (AnalyzeVo) callResult.getObj();
        
        return analyzeVo;
    }
    
    /**
     * 查询员工卡信息 
     */
    private boolean getSignCards(AnalyzeVo analyzeVo){
        return signCardService.getEmployeeCardVo(analyzeVo);
    }
    
    /**
     * 保存打印记录
     */
    private boolean savePoint() {
        
        if(!AppConstant.DATABASE_STATUS){
            return false;
        }
        return printService.insertPrint(printVo);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox PrintTemplateCb;
    private javax.swing.JButton btCheck;
    private javax.swing.JButton btEjectCard;
    private javax.swing.JButton btMoveBack;
    private javax.swing.JButton btMoveCard;
    private javax.swing.JButton btPrint;
    private javax.swing.JButton btReset;
    private javax.swing.JButton btWriteCard;
    private javax.swing.JTextField cardType;
    private javax.swing.JCheckBox debugCb;
    private javax.swing.JTextField departmentTxt;
    private javax.swing.JTextField employeeClassTxt;
    private javax.swing.JTextField expiredDate;
    private javax.swing.JLabel graphicsVerTxt;
    private javax.swing.JLabel graphicsVerjLabel;
    private javax.swing.JTextField identityGender;
    private javax.swing.JTextField identityID;
    private javax.swing.JTextField identityName;
    private javax.swing.JTextField identityType;
    private javax.swing.JTextField issueDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JScrollPane mainSPn;
    private javax.swing.JTextField positionTxt;
    private javax.swing.JCheckBox previewCb;
    private javax.swing.JPanel previewjPanel;
    private javax.swing.JLabel printerVerTxt;
    private javax.swing.JLabel printerVerjLabel;
    private javax.swing.JLabel ribbonVerTxt;
    private javax.swing.JLabel ribbonjLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * 调试模式
     */
    private void setDebug() {
        boolean x = debugCb.isSelected();
        btEjectCard.setVisible(x);
        btMoveCard.setVisible(x);
        btMoveBack.setVisible(x);
        btWriteCard.setVisible(x);
        btReset.setVisible(x);
        btCheck.setVisible(x);
        if(x){
            btPrint.setEnabled(false);//若为调试模式，"打印按钮"不可选择
        }else{
            btPrint.setEnabled(true);//若为调试模式，"打印按钮"可选择
        }
        
    }

    /**
     * 走卡
     */
    private boolean moveCard() {
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        boolean res = false;
        res = ZRPrinterService.move();
        if(!res){
            MessageShowUtil.alertErrorMsg("走卡失败,请检查打印机！");
            //日志
            logVo.setOprtContent("走卡失败！");
            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
            operateLogService.insertOperaterLogs(logVo);
        }
        return res;
    }

    /**
     * 出卡
     */
    private boolean ejectCard() {
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        boolean res = false;
        res = ZRPrinterService.out();
        if(!res){
            MessageShowUtil.alertErrorMsg("出卡失败,请检查打印机！");
        }
        return res;
    }

    /**
     * 后退
     */
    private boolean moveBack() {
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        boolean res = false;
        res = ZRPrinterService.back();
        if(!res){
            MessageShowUtil.alertErrorMsg("走卡失败,请检查打印机！");
            //日志
            logVo.setOprtContent("走卡失败！");
            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
            operateLogService.insertOperaterLogs(logVo);
        }
        return res;
    }

    /**
     * 组合打印信息
     * @param analyzeVo 
     */
    private void setPrintVo(AnalyzeVo analyzeVo) {
        printVo.setCardType(PubUtil.trim(analyzeVo.getcTicketType()));
        printVo.setName(PubUtil.trim(analyzeVo.getCertificateName()));
        printVo.setGender(PubUtil.trim(analyzeVo.getCertificateSex()));
        printVo.setIdentityId(PubUtil.trim(analyzeVo.getCertificateCode()));
        printVo.setIssueTime(PubUtil.trim(analyzeVo.getcIssueDate()));
        printVo.setIdentityType(PubUtil.trim(analyzeVo.getCertificateType()));
        printVo.setDepartment(PubUtil.trim(analyzeVo.getEmployeeDepartment()));
        printVo.setPosition(PubUtil.trim(analyzeVo.getEmployeePositions()));
        printVo.setLogicalId(PubUtil.trim(analyzeVo.getcLogicalID()));
        printVo.setEmployeeClass(PubUtil.trim(analyzeVo.getEmployeeClass()));
        printVo.setRemark("正常打印");
    }

    /**
     * 重置
     */
    private boolean reset() {
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        boolean res = false;
        res = ZRPrinterService.reset();
        if(!res){
            MessageShowUtil.alertErrorMsg("重置失败,请检查打印机！");
            //日志
            logVo.setOprtContent("重置失败！");
            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
            operateLogService.insertOperaterLogs(logVo);
        }
        return res;
    }

    /**
     * 自校
     */
    private void selAdjust() {
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        String res = "";
        res = ZRPrinterService.selAdjustPrinter();
        MessageShowUtil.infoOpMsg("打印机返回错误代码:" + res);
    }

    /**
     * 检测色带剩余量
     */
    private boolean checkRibbon() {
        boolean result = true;
        ResultVo vo = ZRPrinterService.getPanelsRemaining();
        if(vo.getResultCode() == 1){
            ribbonVerTxt.setText(String.valueOf(vo.getCount()));
            if(vo.getCount()<2){
                MessageShowUtil.alertWarnMsg("色带用完，请更换！");
                result = false; 
            }
        }else{
            MessageShowUtil.infoOpMsg("查询色带剩余量错误，错误代码：" + vo.getErrCode() + "！");
            result = false;
        }
        
        return result;
    }
    
    /**
     * 设置控件状态
     * @param flag 
     */
    private void setFlag(boolean flag){
        PubUtil.setButton(btCheck,flag);
        PubUtil.setButton(btEjectCard,flag);
        PubUtil.setButton(btMoveBack,flag);
        PubUtil.setButton(btMoveCard,flag);
        PubUtil.setButton(btPrint,flag);
        PubUtil.setButton(btReset,flag);
        PubUtil.setButton(btWriteCard,flag);
        PubUtil.setJCheckBox(previewCb,flag);
        PubUtil.setJCheckBox(debugCb,flag);
    }

    /**
     * 选择打印模板
     */
    private void setTemplate() {
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        SelectOptionVo templateOption = (SelectOptionVo)PrintTemplateCb.getSelectedItem();
        template = templateOption.getValue();
        //读模板文件
        config = PubUtil.readLine(ConfigConstant.PRINT_TEMPLATE_PATH + templateOption.getText().trim());
        if(config!=null && !config.isEmpty()){
            PreviewUtil.setPreviewTemptale(config, previewjPanel,tempPanel);
        }
    }
    /**
     * 查询记名卡信息 
     */
    private List<Object[]> getSignCards2(AnalyzeVo analyzeVo){
        SignCardVo vo = new SignCardVo();
        vo.setIdentityId(analyzeVo.getCertificateCode());
        vo.setIdentityType(analyzeVo.getCertificateType());
        vo.setCardMainId(analyzeVo.getcTicketType().substring(0, 2));
        vo.setCardSubId(analyzeVo.getcTicketType().substring(2, 4));
        return signCardService2.getSignCardVos(vo);
    }
    
    private void testAnalyxeVo(AnalyzeVo analyzeVo) {
        analyzeVo.setCertificateCode("T00003");
        analyzeVo.setCertificateName("张三");
        analyzeVo.setCertificateSex("1");
        analyzeVo.setCertificateType("5");
        analyzeVo.setEmployeeDepartment("7");
        analyzeVo.setEmployeePositions("8");
        analyzeVo.setcLogicalID("4100002800000008");
        analyzeVo.setcTicketType("0500");
        analyzeVo.setbStatus("1");
    }
    
}
