
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GenIssueRequestPanel.java
 *
 * Created on 2011-8-3, 8:31:03
 */

package com.goldsign.esmcs.ui.panel;

import com.goldsign.csfrm.util.MessageShowUtil;
import com.goldsign.csfrm.util.StringUtil;
import com.goldsign.csfrm.vo.CallParam;
import com.goldsign.csfrm.vo.CallResult;
import com.goldsign.esmcs.application.PKApplication;
import com.goldsign.esmcs.dll.structure.CardInf;
import com.goldsign.esmcs.env.PKAppConstant;
import com.goldsign.esmcs.exception.PkEsJniException;
import com.goldsign.esmcs.service.IPkEsDeviceService;
import com.goldsign.esmcs.service.impl.PkEsDeviceService;
import com.goldsign.esmcs.util.PKConverter;
import com.goldsign.esmcs.vo.BoxInfoVo;
import com.goldsign.esmcs.vo.BoxSensorVo;
import com.goldsign.esmcs.vo.EsBaseInfo;
import com.goldsign.esmcs.vo.LineStateVo;
import java.util.HashMap;
import java.util.Map;
import org.apache.log4j.Logger;

/**
 * 设备诊断
 * 
 * @author Administrator
 */
public class PKDeviceCheckPanel extends DeviceCheckPanel {

    private static Logger logger = Logger.getLogger(PKDeviceCheckPanel.class.getName());
    
    private IPkEsDeviceService esDeviceService;//ES设备服务
    
    private EsBaseInfo esBaseInfo;//ES基本信息
    
    private final static int SLEEP_TIME = 200;//缓冲休眠时间
    
    private boolean pauseV = false;//暂停标识
    
    private boolean stopV = false;//停止标识
    
    /** Creates new form GenIssueRequestPanel */
    public PKDeviceCheckPanel() {
        
        this.esDeviceService = ((PKApplication) PKAppConstant.application).getPkEsDeviceService();
        this.esBaseInfo = ((PkEsDeviceService)esDeviceService).getEsBaseInfo();
        
        initComponents();
        addCommonPanel(tabbedPane);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        chanelDllVersionText = new javax.swing.JTextField();
        boxDllVersionText = new javax.swing.JTextField();
        devVersionText = new javax.swing.JTextField();
        versionQueryButton = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        box1 = new javax.swing.JCheckBox();
        box2 = new javax.swing.JCheckBox();
        box3 = new javax.swing.JCheckBox();
        box4 = new javax.swing.JCheckBox();
        box5 = new javax.swing.JCheckBox();
        moveCardButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        continueButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        sendCardButton = new javax.swing.JButton();
        isSendMoreCB = new javax.swing.JCheckBox();
        jPanel15 = new javax.swing.JPanel();
        resetBoxButton = new javax.swing.JButton();
        boxesCB = new javax.swing.JComboBox();
        updateBoxButton = new javax.swing.JButton();
        checkBoxButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        boxesStatusArea = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        resetZeroButton = new javax.swing.JButton();
        checkChanelButton = new javax.swing.JButton();
        resetChanelButton = new javax.swing.JButton();
        initChanelButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        chanelStatusArea = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(845, 589));

        tabbedPane.setBackground(new java.awt.Color(255, 255, 255));
        tabbedPane.setForeground(new java.awt.Color(94, 55, 16));
        tabbedPane.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        tabbedPane.setOpaque(true);
        tabbedPane.setPreferredSize(new java.awt.Dimension(790, 570));

        jPanel4.setBackground(new java.awt.Color(237, 247, 249));
        jPanel4.setMinimumSize(new java.awt.Dimension(770, 530));
        jPanel4.setPreferredSize(new java.awt.Dimension(788, 538));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "版本信息", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14), new java.awt.Color(94, 55, 16))); // NOI18N
        jPanel11.setOpaque(false);

        jLabel5.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 39, 80));
        jLabel5.setText("通道DLL版本：");

        jLabel6.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 39, 80));
        jLabel6.setText("票箱DLL版本：");

        jLabel7.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 39, 80));
        jLabel7.setText("设备版本：");

        chanelDllVersionText.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        chanelDllVersionText.setForeground(new java.awt.Color(0, 39, 80));

        boxDllVersionText.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        boxDllVersionText.setForeground(new java.awt.Color(0, 39, 80));

        devVersionText.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        devVersionText.setForeground(new java.awt.Color(0, 39, 80));

        versionQueryButton.setBackground(new java.awt.Color(255, 255, 255));
        versionQueryButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        versionQueryButton.setText("查询");
        versionQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryVersionAction(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel11Layout = new org.jdesktop.layout.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .add(4, 4, 4)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(chanelDllVersionText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(boxDllVersionText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel7)
                .add(6, 6, 6)
                .add(devVersionText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(versionQueryButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(chanelDllVersionText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(boxDllVersionText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7)
                    .add(devVersionText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(versionQueryButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 760, 67));

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "流程检测", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14), new java.awt.Color(94, 55, 16))); // NOI18N
        jPanel12.setOpaque(false);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "走卡", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14), new java.awt.Color(94, 55, 16))); // NOI18N
        jPanel13.setOpaque(false);

        box1.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        box1.setForeground(new java.awt.Color(0, 39, 80));
        box1.setText("1号票箱");
        box1.setOpaque(false);

        box2.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        box2.setForeground(new java.awt.Color(0, 39, 80));
        box2.setText("2号票箱");
        box2.setOpaque(false);

        box3.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        box3.setForeground(new java.awt.Color(0, 39, 80));
        box3.setText("3号票箱");
        box3.setOpaque(false);

        box4.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        box4.setForeground(new java.awt.Color(0, 39, 80));
        box4.setText("4号票箱");
        box4.setOpaque(false);

        box5.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        box5.setForeground(new java.awt.Color(0, 39, 80));
        box5.setText("5号票箱");
        box5.setOpaque(false);

        moveCardButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        moveCardButton.setText("走卡");
        moveCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCardAction(evt);
            }
        });

        pauseButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        pauseButton.setText("暂停");
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseAction(evt);
            }
        });

        continueButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        continueButton.setText("继续");
        continueButton.setEnabled(false);
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueAction(evt);
            }
        });

        stopButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        stopButton.setText("停止");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopAction(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel13Layout = new org.jdesktop.layout.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(moveCardButton)
                    .add(box1))
                .add(12, 12, 12)
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel13Layout.createSequentialGroup()
                        .add(box2)
                        .add(8, 8, 8)
                        .add(box3))
                    .add(jPanel13Layout.createSequentialGroup()
                        .add(pauseButton)
                        .add(18, 18, 18)
                        .add(continueButton)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 6, Short.MAX_VALUE)
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel13Layout.createSequentialGroup()
                        .add(box4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 6, Short.MAX_VALUE)
                        .add(box5))
                    .add(jPanel13Layout.createSequentialGroup()
                        .add(stopButton)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel13Layout.createSequentialGroup()
                .add(15, 15, 15)
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(box1)
                    .add(box2)
                    .add(box3)
                    .add(box4)
                    .add(box5))
                .add(18, 18, 18)
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(moveCardButton)
                    .add(pauseButton)
                    .add(continueButton)
                    .add(stopButton))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "发卡", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14), new java.awt.Color(94, 55, 16))); // NOI18N
        jPanel14.setOpaque(false);

        sendCardButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        sendCardButton.setText("发卡");
        sendCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendCardAction(evt);
            }
        });

        isSendMoreCB.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        isSendMoreCB.setForeground(new java.awt.Color(0, 39, 80));
        isSendMoreCB.setText("是否连续发卡");
        isSendMoreCB.setOpaque(false);
        isSendMoreCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isSendMoreCBActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel14Layout = new org.jdesktop.layout.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel14Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .add(isSendMoreCB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(sendCardButton)
                .add(40, 40, 40))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(sendCardButton)
                    .add(isSendMoreCB))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel12Layout = new org.jdesktop.layout.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel12Layout.createSequentialGroup()
                .add(jPanel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(51, 51, 51))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
            .add(jPanel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jPanel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jPanel4.add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 73, 760, -1));

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "票箱功能", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14), new java.awt.Color(94, 55, 16))); // NOI18N
        jPanel15.setOpaque(false);

        resetBoxButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        resetBoxButton.setText("复位");
        resetBoxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rsetBoxAction(evt);
            }
        });

        boxesCB.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        boxesCB.setForeground(new java.awt.Color(0, 39, 80));
        boxesCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "全部", "1号票箱", "2号票箱", "3号票箱", "4号票箱", "5号票箱" }));

        updateBoxButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        updateBoxButton.setText("拆卸");
        updateBoxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadBoxAction(evt);
            }
        });

        checkBoxButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        checkBoxButton.setText("检测状态");
        checkBoxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxStateAction(evt);
            }
        });

        boxesStatusArea.setColumns(20);
        boxesStatusArea.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        boxesStatusArea.setForeground(new java.awt.Color(0, 39, 80));
        boxesStatusArea.setRows(5);
        jScrollPane3.setViewportView(boxesStatusArea);

        jLabel9.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 39, 80));
        jLabel9.setText("票箱：");

        org.jdesktop.layout.GroupLayout jPanel15Layout = new org.jdesktop.layout.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel15Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, checkBoxButton)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel15Layout.createSequentialGroup()
                                .add(jLabel9)
                                .add(2, 2, 2)
                                .add(boxesCB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(resetBoxButton)
                                .add(18, 18, 18)
                                .add(updateBoxButton)))))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(resetBoxButton)
                    .add(boxesCB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(updateBoxButton)
                    .add(jLabel9))
                .add(18, 18, 18)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 180, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                .add(checkBoxButton)
                .addContainerGap())
        );

        jPanel4.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 231, -1, -1));

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "通道功能", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14), new java.awt.Color(94, 55, 16))); // NOI18N
        jPanel16.setOpaque(false);

        resetZeroButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        resetZeroButton.setText("对零位");
        resetZeroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelModaToZeroAction(evt);
            }
        });

        checkChanelButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        checkChanelButton.setText("检测状态");
        checkChanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkChanelstateAction(evt);
            }
        });

        resetChanelButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        resetChanelButton.setText("复位");
        resetChanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetChannelAction(evt);
            }
        });

        initChanelButton.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        initChanelButton.setText("初始化");
        initChanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chanelInitAction(evt);
            }
        });

        chanelStatusArea.setColumns(20);
        chanelStatusArea.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        chanelStatusArea.setForeground(new java.awt.Color(0, 39, 80));
        chanelStatusArea.setRows(5);
        jScrollPane4.setViewportView(chanelStatusArea);

        org.jdesktop.layout.GroupLayout jPanel16Layout = new org.jdesktop.layout.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel16Layout.createSequentialGroup()
                        .add(initChanelButton)
                        .add(18, 18, 18)
                        .add(resetZeroButton)
                        .add(18, 18, 18)
                        .add(resetChanelButton)
                        .add(0, 105, Short.MAX_VALUE))
                    .add(jScrollPane4)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel16Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(checkChanelButton)))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(resetChanelButton)
                    .add(initChanelButton)
                    .add(resetZeroButton))
                .add(18, 18, 18)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 179, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                .add(checkChanelButton)
                .addContainerGap())
        );

        jPanel4.add(jPanel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 231, 390, 302));

        tabbedPane.addTab("票卡", jPanel4);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 575, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * 获取版本信息
     * 
     * @param evt 
     */
    private void queryVersionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryVersionAction
        
        queryVersion();
    }//GEN-LAST:event_queryVersionAction

    /**
     * 发卡
     * 
     * @param evt 
     */
    private void sendCardAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendCardAction
        
        beginSendCard();
    }//GEN-LAST:event_sendCardAction

    /**
     * 走卡
     * 
     * @param evt 
     */
    private void moveCardAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCardAction
        
        try {
            if(moveCard()){
                //sendCardButton.setEnabled(true);
                //moveCardButton.setEnabled(false);
            }
            esDeviceService.channelPause();//结束发卡
        } catch (Exception ex) {
            MessageShowUtil.alertErrorMsg(ex.getMessage());
            logger.error(ex);
        }
    }//GEN-LAST:event_moveCardAction

    /**
     * 复位票箱
     * 
     * @param evt 
     */
    private void rsetBoxAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rsetBoxAction
        
        resetBox();
    }//GEN-LAST:event_rsetBoxAction

    /**
     * 拆卸票箱
     * 
     * @param evt 
     */
    private void uploadBoxAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadBoxAction
        
        uploadBox();
    }//GEN-LAST:event_uploadBoxAction

    /**
     * 检测票箱状态 
     * 
     * @param evt 
     */
    private void checkBoxStateAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxStateAction
        
        checkBoxState();
    }//GEN-LAST:event_checkBoxStateAction

    /**
     * 通道初始化
     * 
     * @param evt 
     */
    private void chanelInitAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chanelInitAction
        
        chanelInit();
    }//GEN-LAST:event_chanelInitAction

    /**
     * 对零位
     * 
     * @param evt 
     */
    private void channelModaToZeroAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelModaToZeroAction
        
        channelModaToZero();
    }//GEN-LAST:event_channelModaToZeroAction

    /**
     * 通道复位
     * 
     * @param evt 
     */
    private void resetChannelAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetChannelAction
        
        resetChannel();
    }//GEN-LAST:event_resetChannelAction

    /**
     * 检测通道状态
     * 
     * @param evt 
     */
    private void checkChanelstateAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkChanelstateAction
         
        checkChanelstate();
    }//GEN-LAST:event_checkChanelstateAction

    /**
     * 暂停
     * 
     * @param evt 
     */
    private void pauseAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseAction
        
        setPause();
    }//GEN-LAST:event_pauseAction

    /**
     * 停止
     * 
     * @param evt 
     */
    private void stopAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopAction
        
        setStop();
    }//GEN-LAST:event_stopAction

    /**
     * 继续
     * 
     * @param evt 
     */
    private void continueAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueAction
        
        setContinue();
    }//GEN-LAST:event_continueAction

    /**
     * 单击是否连续发卡
     * 
     * @param evt 
     */
    private void isSendMoreCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isSendMoreCBActionPerformed
        
        if(isSendMoreCB.isSelected()){
            //moveCardButton.setEnabled(false);
        }else{
            //moveCardButton.setEnabled(true);
        }
    }//GEN-LAST:event_isSendMoreCBActionPerformed

    /**
     * 检测卡位状态
     * 
     */
    private void checkSiteState(){
        
        CallResult callResult = null;
        try {
            callResult = esDeviceService.channelGetSiteInf(null);
            
            if(!callResult.isSuccess()){
                chanelStatusArea.setText("执行失败：" + callResult.getMsg());
            }
            StringBuilder sb = new StringBuilder("");
            int i = 1;
            for (CardInf cardInf : esBaseInfo.cardInfs) {
                sb.append("i=" + i + ",当前工位：" + cardInf.CurrSite + ",目标工位" + cardInf.TagSite);
            }
            chanelStatusArea.setText(sb.toString());
        } catch (PkEsJniException ex) {
            logger.error(ex);
            MessageShowUtil.alertErrorMsg(ex.getMessage());
        }
    }
    
    /**
     * 初始化标志
     * 
     */
    private void initFlag(){
        pauseV = false;
        stopV = false;
    }
    
    /**
     * 发卡
     * 
     */
    private void beginSendCard(){

        initFlag();//初始化状态
        if(isSendMoreCB.isSelected()){
            sendCardMore();
        }else{
            sendCardOne();//单步
        }
    }
            
    /**
     * 发卡线程
     * 
     */
    private void sendCardMore() {

        sendCardButton.setEnabled(false);
        moveCardButton.setEnabled(false);
        pauseButton.setEnabled(true);
            
        new Thread(){
            @Override
            public void run(){
                sendCardThread();
            }  
        }.start();
    }
    
    /**
     * 单步发卡
     * 
     */
    private void sendCardOne(){
        
        try {
            esDeviceService.channelContinue();//开始制卡
            if(sendCard()){
                //sendCardButton.setEnabled(false);
                //moveCardButton.setEnabled(true);
            }
        } catch (PkEsJniException ex) {
            MessageShowUtil.alertErrorMsg(ex.getMessage());
        }
    }
    
    /**
     * 发卡工位是否有卡
     * 
     * @return 
     */
    public boolean isSendSiteHaveCard() {

        boolean result = false;
        for (int i = 0; i < PKAppConstant.ES_CARD_SITE_NUM; i++) {
            if (esBaseInfo.cardInfs[i].CurrSite == 1) {
                result = true;
                break;
            }
        }
        return result;
    }
        
    /**
     * 发卡
     * 
     */
    private boolean sendCard(){
        
        CallResult callResult = null;
        CallParam callParam = new CallParam();
        try {
            MessageShowUtil.infoOpMsg("发卡第" + cardNo + "张");
            callParam.resetParam(cardNo);
            callResult = esDeviceService.sendCard(callParam);   //发卡
            if (!callResult.isSuccess()) {
                runError(callResult);
                return false;
            }else{
                ++cardNo;
            }
        } catch (PkEsJniException ex) {
            logger.error(ex);
            MessageShowUtil.alertErrorMsg(ex.getMessage());
            return false;
        }
        
        return true;
    }
    
    /**
     * 发卡方法
     * 
     */
    private void sendCardThread(){

        try {
            
            esDeviceService.channelContinue();//开始制卡
            IS_RUNNING = true;
            while(true){
                //不选择了
                if(!isSendMoreCB.isSelected()){
                    break;
                }
                
                //停止
                if(stopV){
                    break;
                }
                
                //暂停
                if(pauseV){
                    Thread.sleep(100);
                    continue;
                }
                
                //发卡
                if(!isSendSiteHaveCard()){
                    if (!sendCard()) {
                        setPause();//失败后暂停
                        continue;
                    }
                }
                
                //设置票箱并走卡
                if(!moveCard()){
                    setPause();//失败后暂停
                    continue;
                }
            }
        } catch (Exception ex) {
            logger.error(ex);
            MessageShowUtil.alertErrorMsg(ex.getMessage());
        }finally{
            try {
                esDeviceService.channelPause();//结束发卡
            } catch (PkEsJniException ex) {
                 MessageShowUtil.alertErrorMsg(ex.getMessage());
            }
            setStop();//停止
            IS_RUNNING = false;
        } 
    }
    
    /**
     * 跑卡错误
     *
     * @param callResult
     * @throws PkEsJniException
     */
    private void runError(CallResult callResult) throws PkEsJniException{

        short errCode = (Short) callResult.getObj();

        String errCodeDes = "";
        if (errCode ==  -22) {
            CallResult cardRunErrorResut = esDeviceService.getCardRunError(null);
            LineStateVo lineStateVo = (LineStateVo) cardRunErrorResut.getObj();
            errCodeDes = PKConverter.getLineStateError(lineStateVo);
        } else {
            errCodeDes = PKConverter.getChannelErrorCodeDes(errCode);
        }

        MessageShowUtil.errorOpMsg(errCodeDes);
    }
  
    /**
     * 设置目标票箱
     * 
     * @param k
     * @return 
     */
    private void setRecvBox(){
        
        Map<Integer, Integer> map = getTicketBox();
        //设卡箱
        for(int j=0; j<PKAppConstant.ES_CARD_SITE_NUM; j++){
            if(esBaseInfo.cardInfs[j].CurrSite == 2 && esBaseInfo.cardInfs[j].TagSite == 2){
                //目标工位
                int tagSite = map.get(((esBaseInfo.cardInfs[j].CardNo-1) % map.size()));
                //设置目标收工位 
                esBaseInfo.cardInfs[j].TagSite = (byte)tagSite;
            }
        }
    }

    /**
     * 走卡单步
     * 
     * @return
     * @throws PkEsJniException 
     */
    private boolean moveCard() throws PkEsJniException, InterruptedException {
 
        CallResult callResult = null;

        setRecvBox();//设置目标票箱
        callResult = esDeviceService.moveCard(null);
        if (!callResult.isSuccess()) {
            runError(callResult);
            return false;
        }
        sleepTime(SLEEP_TIME);
        
        return true;
    }
    
    /**
     * 暂停
     * 
     */
    private void setPause() {
        
        pauseButton.setEnabled(false);
        continueButton.setEnabled(true);
        stopButton.setEnabled(true);
        
        pauseV = true;
    }

    /**
     * 停止
     * 
     */
    private void setStop() {
        
        setPause();
        
        sendCardButton.setEnabled(true);
        moveCardButton.setEnabled(true);
        continueButton.setEnabled(false);
        stopButton.setEnabled(false);
        
        stopV = true;
    }

    /**
     * 继续
     * 
     */
    private void setContinue() {
        
        continueButton.setEnabled(false);
        pauseButton.setEnabled(true);

        pauseV = false;
    }
    
    /**
     * 取选择的票箱
     * 
     */
    private Map<Integer, Integer> getTicketBox(){
        
        Map<Integer, Integer> box = new HashMap<Integer, Integer>();
        int j = 0;
        int siteIvl = 2;
        if(box1.isSelected()){
            box.put(j, 1+siteIvl);
            j++;
        }
        if(box2.isSelected()){
            box.put(j, 2+siteIvl);
            j++;
        }
        if(box3.isSelected()){
            box.put(j, 3+siteIvl);
            j++;
        }
        if(box4.isSelected()){
            box.put(j, 4+siteIvl);
            j++;
        }
        if(box5.isSelected()){
            box.put(j, 5+siteIvl);
            j++;
        }
        //没设置就放5号箱
        if(box.isEmpty()){
            box.put(0, 5+siteIvl);
        }
        return box;
    }
    
    /**
     * 复位票箱
     * 
     */
    private void resetBox(){
        
        CallParam callParam = new CallParam();
        CallResult callResult = null;
        int index = boxesCB.getSelectedIndex();
        try {
            if(index == 0){
                callResult = esDeviceService.resetAllBox(callParam);
            }else{
                callParam.setParam(index);
                callResult = esDeviceService.resetOneBox(callParam);
            }
            if (!callResult.isSuccess()) {
                MessageShowUtil.alertWarnMsg("复位票箱失败");
            }else{
                MessageShowUtil.alertInfoMsg("复位票箱成功");
            }
        } catch (PkEsJniException ex) {
            logger.error(ex);
            MessageShowUtil.alertErrorMsg(ex.getMessage());
        }
    
    }
    
    /**
     * 拆卸票箱
     * 
     */
    private void uploadBox() {
        
        CallParam callParam = new CallParam();
        CallResult callResult = null;
        int index = boxesCB.getSelectedIndex();
        try {
            if(index == 0){
                callResult = esDeviceService.uploadAllBox(callParam);
            }else{
                callParam.setParam(index);
                callResult = esDeviceService.uploadOneBox(callParam);
            }
            if (!callResult.isSuccess()) {
                MessageShowUtil.alertWarnMsg("拆卸票箱失败");
            }else{
                MessageShowUtil.alertInfoMsg("拆卸票箱成功");
            }
        } catch (PkEsJniException ex) {
            logger.error(ex);
            MessageShowUtil.alertErrorMsg(ex.getMessage());
        }
    }
    
    /**
     * 设置票箱状态信息
     * 
     * @param boxInfoVoArr
     * @param msg 
     */
    private void setBoxStateMsg(BoxInfoVo[] boxInfoVoArr, StringBuilder msg){
        
        int index = boxesCB.getSelectedIndex();//选择票箱
        int i = 0;
        for (BoxInfoVo boxInfoVo : boxInfoVoArr) {
            i++;
            if (index != 0 && index != i) {
                continue;
            }
            if (!isRunStateOk(boxInfoVo.getBoxRunState())) {
                msg.append(".票箱 ").append(i).append(" 错误.\n");
                continue;
            } else if (boxInfoVo.getBoxFullState() == PKAppConstant.BOX_FULL_STATE_FULLING) {
                msg.append(".票箱 ").append(i).append(" 将满.\n");
                continue;
            } else if (boxInfoVo.getBoxFullState() == PKAppConstant.BOX_FULL_STATE_FULLED) {
                msg.append(".票箱 ").append(i).append(" 已满.\n");
                continue;
            } else {
                msg.append(".票箱 ").append(i).append(" 正常.\n");
            }
        }
    }
    
    /**
     * 设置票箱传感器状态信息
     * 
     * @param boxSensorVoArr
     * @param msg 
     */
    private void setBoxSensorMsg(BoxSensorVo[] boxSensorVoArr, StringBuilder msg){
        
        int index = boxesCB.getSelectedIndex();//选择票箱
        int j = 0;
        for (BoxSensorVo boxSensorVo : boxSensorVoArr) {
            j++;
            if (index != 0 && index != j) {
                continue;
            }
            msg.append(".票箱 ").append(j).append(" ")
                    .append(" 已满S1:").append(boxSensorVo.getS1())
                    .append(" ,将满S2:").append(boxSensorVo.getS2())
                    .append(" ,上限位S3:").append(boxSensorVo.getS3())
                    .append(" ,进票空间S4:").append(boxSensorVo.getS4())
                    .append(" ,箱锁S5:").append(boxSensorVo.getS5())
                    .append(" ,箱盖S6:").append(boxSensorVo.getS6())
                    .append(" .\n");
        }
    }

    /**
     * 检测票箱
     * 
     */
    private void checkBoxState() {
        
        CallParam callParam = new CallParam();
        CallResult callResult = null;
         
        try {
            StringBuilder msg = new StringBuilder();
            
            callResult = esDeviceService.getAllBoxState(callParam);
            msg.append("\n票箱状态:\n");
            if(callResult.isSuccess()){
                BoxInfoVo[] boxInfoVoArr = (BoxInfoVo[]) callResult.getObj(1);
                setBoxStateMsg(boxInfoVoArr, msg);
            }else{
                msg.append("...执行失败:"+callResult.getObj()+"\n");
            }
            
            callResult = esDeviceService.getBoxSensorState(callParam);
            msg.append("\n传感器状态:\n");
            if (callResult.isSuccess()) {
                BoxSensorVo[] boxSensorVoArr = (BoxSensorVo[]) callResult.getObj(1);
                setBoxSensorMsg(boxSensorVoArr, msg);
            }else{
                msg.append("...执行失败:"+callResult.getObj()+"\n");
            }
            
            boxesStatusArea.setText(msg.toString());
        } catch (PkEsJniException ex) {
            logger.error(ex);
            MessageShowUtil.alertErrorMsg(ex.getMessage());
        }
    }
    
    /**
    * 是否好运行状态
    */
    private boolean isRunStateOk(byte state){
        for(byte ok: PKAppConstant.BOX_RUN_STATE_OKS){
            if(ok == state){
                return true;
            }
        }
        return false;
    }

    /**
     * 初始化通道
     * 
     */
    private void chanelInit() {
        
        CallResult callResult = null;
        try {
            callResult = esDeviceService.channelInit();
            if (!callResult.isSuccess()) {
                MessageShowUtil.alertWarnMsg("通道初始化失败");
            }else{
                MessageShowUtil.alertInfoMsg("通道初始化成功");
            }
        } catch (PkEsJniException ex) {
            logger.error(ex);
            MessageShowUtil.alertErrorMsg(ex.getMessage());
        }
    }

    /**
     * 对零位
     * 
     */
    private void channelModaToZero() {
        
         CallResult callResult = null;
         
        try {
            callResult = esDeviceService.channelModaToZero();
            if (!callResult.isSuccess()) {
                MessageShowUtil.alertWarnMsg("通道对零位失败");
            }else{
                MessageShowUtil.alertInfoMsg("通道对零位成功");
            }
        } catch (PkEsJniException ex) {
            logger.error(ex);
            MessageShowUtil.alertErrorMsg(ex.getMessage());
        }
    }

    /**
     * 复位通道
     * 
     */
    private void resetChannel() {
        
        CallParam callParam = new CallParam();
        CallResult callResult = null;
        try {

            callResult = esDeviceService.resetChannel(callParam);
            if (!callResult.isSuccess()) {
                MessageShowUtil.alertWarnMsg("通道复位失败");
            }else{
                MessageShowUtil.alertInfoMsg("通道复位成功");
            }
        } catch (PkEsJniException ex) {
            logger.error(ex);
            MessageShowUtil.alertErrorMsg(ex.getMessage());
        }
    }

    /**
     * 检测通道状态
     * 
     */
    private void checkChanelstate() {
        
        CallResult callResult = null;
        
        try {
            callResult = esDeviceService.channelGetACCStatus();
            if(!callResult.isSuccess()){
                chanelStatusArea.setText("执行失败：" + callResult.getMsg());
                return;
            }   
            byte[] statusVal = (byte[]) callResult.getObj();
            byte startPause = statusVal[0];
            String oToe = StringUtil.reverse(StringUtil.getString(statusVal[3]));  //输入点状态。低位到高位表示第1到第8个传感器状态
            String nTos = StringUtil.reverse(StringUtil.getString(statusVal[4])); //输入点状态。低位到高位表示第9到第16个传感器状态
            String sTof = StringUtil.reverse(StringUtil.getString(statusVal[5]));  //输入点状态。低位到高位表示第17到第24个传感器状态

            chanelStatusArea.setText(
                            "启动0或暂停1按钮状态:\n" + startPause + "\n" +
                            "低位到高位表示第1到第8个传感器状态:\n" + oToe + "\n" +
                            "低位到高位表示第9到第16个传感器状态:\n" + nTos + "\n" +
                            "低位到高位表示第17到第24个传感器状态:\n" + sTof + "\n");
        } catch (PkEsJniException ex) {
            MessageShowUtil.alertErrorMsg(ex.getMessage());
            logger.error(ex);
        }
    }

    /**
     * 获取版本
     * 
     */
    private void queryVersion() {
        
        setChanelDllVersion();//获取通道DLL版本
        setBoxDllVersion();//获取票箱DLL版本
        setDevVersion();//获取设备版本
    }
    
    /**
     * 获取通道DLL版本
     * 
     */
    private void setChanelDllVersion(){
        
        CallResult callResult = null;
        try {
            callResult = esDeviceService.getChanelDllVersion();
            if(!callResult.isSuccess()){
                MessageShowUtil.alertWarnMsg("获取通道DLL版本失败");
                return;
            }
            chanelDllVersionText.setText(callResult.getObj().toString());
        } catch (PkEsJniException ex) {
            MessageShowUtil.alertErrorMsg(ex.getMessage());
            logger.error(ex);
        }
    }
    
    /**
     * 获取票箱DLL版本
     * 
     */
    private void setBoxDllVersion() {
        
        CallResult callResult = null;
        try {
            callResult = esDeviceService.getBoxDllVersion();
            if(!callResult.isSuccess()){
                MessageShowUtil.alertWarnMsg("获取票箱DLL版本失败");
                return;
            }
            boxDllVersionText.setText(callResult.getObj().toString());
        } catch (PkEsJniException ex) {
            MessageShowUtil.alertErrorMsg(ex.getMessage());
            logger.error(ex);
        }
    }

    /**
     * 获取设备版本
     * 
     */
    private void setDevVersion() {
        
        CallResult callResult = null;
        try {
            callResult = esDeviceService.getDevVersion();
            if(!callResult.isSuccess()){
                MessageShowUtil.alertWarnMsg("获取设备版本失败");
                return;
            }
            devVersionText.setText(callResult.getObj().toString());
        } catch (PkEsJniException ex) {
            MessageShowUtil.alertErrorMsg(ex.getMessage());
            logger.error(ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox box1;
    private javax.swing.JCheckBox box2;
    private javax.swing.JCheckBox box3;
    private javax.swing.JCheckBox box4;
    private javax.swing.JCheckBox box5;
    private javax.swing.JTextField boxDllVersionText;
    private javax.swing.JComboBox boxesCB;
    private javax.swing.JTextArea boxesStatusArea;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField chanelDllVersionText;
    private javax.swing.JTextArea chanelStatusArea;
    private javax.swing.JButton checkBoxButton;
    private javax.swing.JButton checkChanelButton;
    private javax.swing.JButton continueButton;
    private javax.swing.JTextField devVersionText;
    private javax.swing.JButton initChanelButton;
    private javax.swing.JCheckBox isSendMoreCB;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton moveCardButton;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton resetBoxButton;
    private javax.swing.JButton resetChanelButton;
    private javax.swing.JButton resetZeroButton;
    private javax.swing.JButton sendCardButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton updateBoxButton;
    private javax.swing.JButton versionQueryButton;
    // End of variables declaration//GEN-END:variables
}
