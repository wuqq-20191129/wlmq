/*
 * ReturnCardPanel.java
 * Created on 2015-2-27
 * @author lindaquan
 */

package com.goldsign.etmcs.ui.panel;

import com.goldsign.csfrm.env.BaseConstant;
import com.goldsign.csfrm.ui.panel.BasePanel;
import com.goldsign.csfrm.util.DateHelper;
import com.goldsign.csfrm.util.MessageShowUtil;
import com.goldsign.csfrm.util.StringUtil;
import com.goldsign.csfrm.vo.CallParam;
import com.goldsign.csfrm.vo.CallResult;
import com.goldsign.etmcs.application.Application;
import com.goldsign.etmcs.env.AppConstant;
import com.goldsign.etmcs.service.IMakeCardService;
import com.goldsign.etmcs.service.IOperateLogService;
import com.goldsign.etmcs.service.IRwDeviceService;
import com.goldsign.etmcs.service.impl.MakeCardService;
import com.goldsign.etmcs.service.impl.OperateLogService;
import com.goldsign.etmcs.util.CurrentConnectionStatusUtil;
import com.goldsign.etmcs.util.PubUtil;
import com.goldsign.etmcs.vo.AnalyzeVo;
import com.goldsign.etmcs.vo.MakeCardVo;
import com.goldsign.etmcs.vo.OperateLogVo;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;

/**
 * 异常退卡处理
 */
public class ReturnCardPanel extends BasePanel {

    private IRwDeviceService rwDeviceService;
    private IMakeCardService makeCardService;
    private MakeCardVo mvo;
    private IOperateLogService operateLogService;
    private OperateLogVo logVo;
    private static Logger logger = Logger.getLogger(ReturnCardPanel.class.getName());

    @Override
    public CallResult closingEventCallBack(CallParam callParam) {
        return super.closingEventCallBack(callParam);
    }
    
    
    /** Creates new form ReadCardJPanel */
    public ReturnCardPanel() {
        initComponents();
        rwDeviceService = ((Application)AppConstant.application).getRwDeviceService();
        makeCardService = new MakeCardService();
        mvo = new MakeCardVo();
        operateLogService = new OperateLogService();
        logVo = new OperateLogVo();
        logVo.setOperId(BaseConstant.user.getUsername());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jlUsedNum = new javax.swing.JLabel();
        certificateIscompany = new javax.swing.JTextField();
        certificateCode = new javax.swing.JTextField();
        certificateIsmetro = new javax.swing.JTextField();
        certificateName = new javax.swing.JTextField();
        certificateType = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        certificateSex = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        certificateDepartment = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        certificatePositions = new javax.swing.JTextField();
        jLabelClass = new javax.swing.JLabel();
        employeeClass = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        bIssueStatus = new javax.swing.JTextField();
        cTicketType = new javax.swing.JTextField();
        cPhysicalID = new javax.swing.JTextField();
        bStatus = new javax.swing.JTextField();
        cLogicalID = new javax.swing.JTextField();
        bCharacter = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        cIssueDate = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        cExpire = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        rfu = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        cDateStart = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        cDateEnd = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        dtDaliyActive = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        btCmtReadCard = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        btCmtReturn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        certificateCodeQ = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        cLogicalIDQ = new javax.swing.JTextField();
        jBQuery = new javax.swing.JButton();
        jBForceReturn = new javax.swing.JButton();

        setBackground(new java.awt.Color(254, 254, 254));
        setPreferredSize(new java.awt.Dimension(845, 589));

        jPanel1.setBackground(new java.awt.Color(237, 247, 249));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(807, 280));

        jLabel1.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 39, 80));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("持卡类型：");

        jLabel2.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 39, 80));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("单位职工：");

        jLabel3.setBackground(new java.awt.Color(237, 247, 249));
        jLabel3.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 39, 80));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("员工工号：");

        jLabel4.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 39, 80));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("员工姓名：");

        jLabel5.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 39, 80));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("性别：");

        jlUsedNum.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jlUsedNum.setForeground(new java.awt.Color(0, 39, 80));
        jlUsedNum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlUsedNum.setText("证件类型：");

        certificateIscompany.setEditable(false);
        certificateIscompany.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        certificateIscompany.setForeground(new java.awt.Color(70, 95, 125));

        certificateCode.setEditable(false);
        certificateCode.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        certificateCode.setForeground(new java.awt.Color(70, 95, 125));

        certificateIsmetro.setEditable(false);
        certificateIsmetro.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        certificateIsmetro.setForeground(new java.awt.Color(70, 95, 125));

        certificateName.setEditable(false);
        certificateName.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        certificateName.setForeground(new java.awt.Color(70, 95, 125));

        certificateType.setEditable(false);
        certificateType.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        certificateType.setForeground(new java.awt.Color(70, 95, 125));

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(185, 227, 241));
        jTextField3.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(94, 55, 16));
        jTextField3.setText("   员工信息");
        jTextField3.setAlignmentX(0.0F);
        jTextField3.setAlignmentY(0.0F);
        jTextField3.setBorder(null);

        certificateSex.setEditable(false);
        certificateSex.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        certificateSex.setForeground(new java.awt.Color(70, 95, 125));

        jLabel6.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 39, 80));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("单位：");

        certificateDepartment.setEditable(false);
        certificateDepartment.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        certificateDepartment.setForeground(new java.awt.Color(70, 95, 125));

        jLabel7.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 39, 80));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("职务：");

        certificatePositions.setEditable(false);
        certificatePositions.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        certificatePositions.setForeground(new java.awt.Color(70, 95, 125));
        certificatePositions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                certificatePositionsActionPerformed(evt);
            }
        });

        jLabelClass.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabelClass.setForeground(new java.awt.Color(0, 39, 80));
        jLabelClass.setText("员工级别：");

        employeeClass.setBackground(new java.awt.Color(240, 240, 240));
        employeeClass.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        employeeClass.setForeground(new java.awt.Color(70, 95, 125));
        employeeClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeClassActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 802, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(26, 26, 26)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(certificateCode, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .add(certificateIscompany)
                            .add(certificateDepartment))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, certificateIsmetro)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, certificateName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, certificatePositions))
                        .add(20, 20, 20)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabelClass)
                            .add(jlUsedNum)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(certificateType, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .add(certificateSex, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .add(employeeClass))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(certificateCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(certificateName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(certificateSex, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(2, 2, 2)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(certificateIscompany, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(certificateIsmetro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlUsedNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(certificateType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(2, 2, 2)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabelClass, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(certificateDepartment, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(certificatePositions, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(employeeClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(237, 247, 249));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(807, 219));

        jLabel10.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 39, 80));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("发行状态：");

        jLabel11.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 39, 80));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("票卡类型：");

        jLabel12.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 39, 80));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("票卡物理卡号：");

        jLabel14.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 39, 80));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("票卡状态：");

        jLabel15.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 39, 80));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("票卡逻辑卡号：");

        jLabel16.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 39, 80));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("票卡物理类型：");

        bIssueStatus.setEditable(false);
        bIssueStatus.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        bIssueStatus.setForeground(new java.awt.Color(70, 95, 125));

        cTicketType.setEditable(false);
        cTicketType.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        cTicketType.setForeground(new java.awt.Color(70, 95, 125));

        cPhysicalID.setEditable(false);
        cPhysicalID.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        cPhysicalID.setForeground(new java.awt.Color(70, 95, 125));

        bStatus.setEditable(false);
        bStatus.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        bStatus.setForeground(new java.awt.Color(70, 95, 125));

        cLogicalID.setEditable(false);
        cLogicalID.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        cLogicalID.setForeground(new java.awt.Color(70, 95, 125));

        bCharacter.setEditable(false);
        bCharacter.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        bCharacter.setForeground(new java.awt.Color(70, 95, 125));

        jLabel18.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 39, 80));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("制票日期：");

        cIssueDate.setEditable(false);
        cIssueDate.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        cIssueDate.setForeground(new java.awt.Color(70, 95, 125));

        jLabel19.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 39, 80));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("物理有效期：");

        cExpire.setEditable(false);
        cExpire.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        cExpire.setForeground(new java.awt.Color(70, 95, 125));

        jLabel20.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 39, 80));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("SAM逻辑卡号：");

        rfu.setEditable(false);
        rfu.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        rfu.setForeground(new java.awt.Color(70, 95, 125));

        jLabel25.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(0, 39, 80));
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("有效期开始时间：");

        cDateStart.setEditable(false);
        cDateStart.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        cDateStart.setForeground(new java.awt.Color(70, 95, 125));

        jLabel26.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(0, 39, 80));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("有效期结束时间：");

        cDateEnd.setEditable(false);
        cDateEnd.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        cDateEnd.setForeground(new java.awt.Color(70, 95, 125));

        jLabel27.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(0, 39, 80));
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel27.setText("逻辑有效期：");

        dtDaliyActive.setEditable(false);
        dtDaliyActive.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        dtDaliyActive.setForeground(new java.awt.Color(70, 95, 125));

        jTextField4.setEditable(false);
        jTextField4.setBackground(new java.awt.Color(185, 227, 241));
        jTextField4.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(94, 55, 16));
        jTextField4.setText("   票卡信息");
        jTextField4.setAlignmentX(0.0F);
        jTextField4.setAlignmentY(0.0F);
        jTextField4.setBorder(null);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(cPhysicalID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(20, 20, 20)
                                .add(jLabel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(bCharacter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(bIssueStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(bStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(cTicketType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(20, 20, 20)
                                .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(cLogicalID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(cIssueDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(20, 20, 20)
                                .add(jLabel19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(cExpire, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(rfu, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 146, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(cDateStart, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(cDateEnd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(20, 20, 20)
                                .add(jLabel27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(dtDaliyActive, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 802, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(bIssueStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(bStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cTicketType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cLogicalID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cPhysicalID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(bCharacter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jLabel18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cIssueDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cExpire, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(rfu, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cDateStart, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jLabel26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cDateEnd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(dtDaliyActive, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(28, 28, 28))
        );

        btCmtReadCard.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btCmtReadCard.setForeground(new java.awt.Color(0, 39, 80));
        btCmtReadCard.setText("读卡");
        btCmtReadCard.setName("btCmtReadCard"); // NOI18N
        btCmtReadCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCmtReadCardActionPerformed(evt);
            }
        });

        jCheckBox1.setBackground(new java.awt.Color(254, 254, 254));
        jCheckBox1.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jCheckBox1.setForeground(new java.awt.Color(0, 39, 80));
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("是否蜂鸣");

        btCmtReturn.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btCmtReturn.setForeground(new java.awt.Color(0, 39, 80));
        btCmtReturn.setText("退卡");
        btCmtReturn.setName("btCmtReadCard"); // NOI18N
        btCmtReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCmReturnActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(237, 247, 249));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setPreferredSize(new java.awt.Dimension(807, 280));

        jLabel13.setBackground(new java.awt.Color(237, 247, 249));
        jLabel13.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 39, 80));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("员工工号：");

        certificateCodeQ.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        certificateCodeQ.setForeground(new java.awt.Color(70, 95, 125));

        jTextField5.setEditable(false);
        jTextField5.setBackground(new java.awt.Color(185, 227, 241));
        jTextField5.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jTextField5.setForeground(new java.awt.Color(94, 55, 16));
        jTextField5.setText("   ");
        jTextField5.setAlignmentX(0.0F);
        jTextField5.setAlignmentY(0.0F);
        jTextField5.setBorder(null);

        jLabel17.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 39, 80));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("票卡逻辑卡号：");

        cLogicalIDQ.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        cLogicalIDQ.setForeground(new java.awt.Color(70, 95, 125));

        jBQuery.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jBQuery.setForeground(new java.awt.Color(0, 39, 80));
        jBQuery.setText("查询");
        jBQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btQueryAction(evt);
            }
        });

        jBForceReturn.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jBForceReturn.setForeground(new java.awt.Color(0, 39, 80));
        jBForceReturn.setText("强制退卡");
        jBForceReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btForceReturnAction(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 802, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(26, 26, 26)
                        .add(jLabel13)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(certificateCodeQ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, 0)
                        .add(cLogicalIDQ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jBQuery)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jBForceReturn)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(certificateCodeQ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cLogicalIDQ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jBForceReturn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jBQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(270, 270, 270)
                        .add(btCmtReadCard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btCmtReturn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(12, 12, 12)
                        .add(jCheckBox1)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 243, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btCmtReadCard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCheckBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btCmtReturn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    /*
     * 读卡
     */
    private void btCmtReadCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCmtReadCardActionPerformed
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        if(!doRead()){
            MessageShowUtil.errorOpMsg( "没有检测到任何票卡，请正确放置卡片！");
            MessageShowUtil.alertErrorMsg( "没有检测到任何票卡，请正确放置卡片！");
        }
    }//GEN-LAST:event_btCmtReadCardActionPerformed

    /*
     * 退卡
     */
    private void btCmReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCmReturnActionPerformed
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        logger.info("进行退卡前准备工作......");
        returnCard();
    }//GEN-LAST:event_btCmReturnActionPerformed

    /*
     * 查询
     */
    private void btQueryAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btQueryAction
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        initRead();
        query();
    }//GEN-LAST:event_btQueryAction

    /*
     * 强制退卡
     */
    private void btForceReturnAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btForceReturnAction
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        initRead();
        if(queryBeforeComfirm()){
            forceReturn();
        }
        
    }//GEN-LAST:event_btForceReturnAction

    private void employeeClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeClassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeClassActionPerformed

    private void certificatePositionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_certificatePositionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_certificatePositionsActionPerformed

    private boolean doRead(){
        if(!CurrentConnectionStatusUtil.isRwConnected(rwDeviceService)){
            MessageShowUtil.errorOpMsg( "读写器连接异常，请联系管理员！");
            MessageShowUtil.alertErrorMsg( "读写器连接异常，请联系管理员！");
            return false;
        }
        if(!CurrentConnectionStatusUtil.isCardOnRW(rwDeviceService)){
            MessageShowUtil.errorOpMsg( "没有检测到任何票卡，请正确放置卡片！");
            MessageShowUtil.alertErrorMsg( "没有检测到任何票卡，请正确放置卡片！");
            return false;
        }
        //判断是否需要蜂鸣
        if(jCheckBox1.isSelected()){
            com.goldsign.rwcommu.connection.RWSerialConnection.MES_PARAM_BEE = AppConstant.RW_BUZZING_TIME_1;
        }
        CallResult callResult = rwDeviceService.analyze();
        AnalyzeVo analyzeVo = (AnalyzeVo) callResult.getObj();
        bIssueStatus.setText(PubUtil.getMapString(AppConstant.ISSUE_STATUS, analyzeVo.getbIssueStatus()));
        bStatus.setText(PubUtil.getMapString(AppConstant.TICKET_STATUS, analyzeVo.getbStatus()));
        cTicketType.setText(PubUtil.getMapString(AppConstant.TICKET_TYPE, analyzeVo.getcTicketType().substring(0,2)));
        cLogicalID.setText(analyzeVo.getcLogicalID());
        cPhysicalID.setText(analyzeVo.getcPhysicalID());
        bCharacter.setText(PubUtil.getMapString(AppConstant.PHY_CHARACTER, analyzeVo.getbCharacter()));
        cIssueDate.setText(analyzeVo.getcIssueDate());
        cExpire.setText(analyzeVo.getcExpire());
        rfu.setText(analyzeVo.getRfu());
        cDateStart.setText(analyzeVo.getcDateStart());
        cDateEnd.setText(analyzeVo.getcDateEnd());
        dtDaliyActive.setText(analyzeVo.getDtDaliyActive());
        certificateIscompany.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_ISCOMPANY, analyzeVo.getCertificateIscompany()));
        certificateIsmetro.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_ISMETRO, analyzeVo.getCertificateIsmetro()));
        certificateName.setText(analyzeVo.getCertificateName().trim());
        certificateCode.setText(analyzeVo.getCertificateCode().trim());
        certificateType.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_TYPE, analyzeVo.getCertificateType()));
        certificateSex.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_SEX,analyzeVo.getCertificateSex()));
        
        mvo.setEmployeeId(analyzeVo.getCertificateCode().trim());
        mvo.setLogicId(analyzeVo.getcLogicalID().trim());
        mvo = makeCardService.getMakeCardsByEmployeeId(mvo);
        
        certificateDepartment.setText(mvo.getEmployeeDepartmentTxt());
        certificatePositions.setText(mvo.getEmployeePositionsTxt());
        employeeClass.setText(mvo.getEmployeeClassTxt());
                
        return true;
    }
    private boolean doReadQuiet(){
        if(!CurrentConnectionStatusUtil.isRwConnected(rwDeviceService)){
            MessageShowUtil.errorOpMsg( "读写器连接异常，请联系管理员！");
            MessageShowUtil.alertErrorMsg( "读写器连接异常，请联系管理员！");
            return false;
        }
        if(!CurrentConnectionStatusUtil.isCardOnRW(rwDeviceService)){
            MessageShowUtil.errorOpMsg( "没有检测到任何票卡，请正确放置卡片！");
            MessageShowUtil.alertErrorMsg( "没有检测到任何票卡，请正确放置卡片！");
            return false;
        }
        CallResult callResult = rwDeviceService.analyze();
        AnalyzeVo analyzeVo = (AnalyzeVo) callResult.getObj();
        bIssueStatus.setText(PubUtil.getMapString(AppConstant.ISSUE_STATUS, analyzeVo.getbIssueStatus()));
        bStatus.setText(PubUtil.getMapString(AppConstant.TICKET_STATUS, analyzeVo.getbStatus()));
        cTicketType.setText(PubUtil.getMapString(AppConstant.TICKET_TYPE, analyzeVo.getcTicketType().substring(0,2)));
        cLogicalID.setText(analyzeVo.getcLogicalID());
        cPhysicalID.setText(analyzeVo.getcPhysicalID());
        bCharacter.setText(PubUtil.getMapString(AppConstant.PHY_CHARACTER, analyzeVo.getbCharacter()));
        cIssueDate.setText(analyzeVo.getcIssueDate());
        cExpire.setText(analyzeVo.getcExpire());
        rfu.setText(analyzeVo.getRfu());
        cDateStart.setText(analyzeVo.getcDateStart());
        cDateEnd.setText(analyzeVo.getcDateEnd());
        dtDaliyActive.setText(analyzeVo.getDtDaliyActive());
        certificateIscompany.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_ISCOMPANY, analyzeVo.getCertificateIscompany()));
        certificateIsmetro.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_ISMETRO, analyzeVo.getCertificateIsmetro()));
        certificateName.setText(analyzeVo.getCertificateName().trim());
        certificateCode.setText(analyzeVo.getCertificateCode().trim());
        certificateType.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_TYPE, analyzeVo.getCertificateType()));
        certificateSex.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_SEX,analyzeVo.getCertificateSex()));
        
        mvo.setEmployeeId(analyzeVo.getCertificateCode().trim());
        mvo.setLogicId(analyzeVo.getcLogicalID().trim());
        mvo = makeCardService.getMakeCardsByEmployeeId(mvo);
        
        certificateDepartment.setText(mvo.getEmployeeDepartmentTxt());
        certificatePositions.setText(mvo.getEmployeePositionsTxt());
        employeeClass.setText(mvo.getEmployeeClassTxt());
                
        return true;
    }
    private void initRead(){
        bIssueStatus.setText(null);
        bStatus.setText(null);
        cTicketType.setText(null);
        cLogicalID.setText(null);
        cPhysicalID.setText(null);
        bCharacter.setText(null);
        cIssueDate.setText(null);
        cExpire.setText(null);
        rfu.setText(null);
        cDateStart.setText(null);
        cDateEnd.setText(null);
        dtDaliyActive.setText(null);
        certificateIscompany.setText(null);
        certificateIsmetro.setText(null);
        certificateName.setText(null);
        certificateCode.setText(null);
        certificateType.setText(null);
        certificateSex.setText(null);
        
        certificateDepartment.setText(null);
        certificatePositions.setText(null);
        employeeClass.setText(null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bCharacter;
    private javax.swing.JTextField bIssueStatus;
    private javax.swing.JTextField bStatus;
    private javax.swing.JButton btCmtReadCard;
    private javax.swing.JButton btCmtReturn;
    private javax.swing.JTextField cDateEnd;
    private javax.swing.JTextField cDateStart;
    private javax.swing.JTextField cExpire;
    private javax.swing.JTextField cIssueDate;
    private javax.swing.JTextField cLogicalID;
    private javax.swing.JTextField cLogicalIDQ;
    private javax.swing.JTextField cPhysicalID;
    private javax.swing.JTextField cTicketType;
    private javax.swing.JTextField certificateCode;
    private javax.swing.JTextField certificateCodeQ;
    private javax.swing.JTextField certificateDepartment;
    private javax.swing.JTextField certificateIscompany;
    private javax.swing.JTextField certificateIsmetro;
    private javax.swing.JTextField certificateName;
    private javax.swing.JTextField certificatePositions;
    private javax.swing.JTextField certificateSex;
    private javax.swing.JTextField certificateType;
    private javax.swing.JTextField dtDaliyActive;
    private javax.swing.JTextField employeeClass;
    private javax.swing.JButton jBForceReturn;
    private javax.swing.JButton jBQuery;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelClass;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JLabel jlUsedNum;
    private javax.swing.JTextField rfu;
    // End of variables declaration//GEN-END:variables

    
    /**
     * 取得查询条件
     *
     * @return
     */
    private AnalyzeVo getCallParam(){
        
        AnalyzeVo param =  new AnalyzeVo();
        param.setCertificateCode(certificateCodeQ.getText().trim());
        param.setcLogicalID(cLogicalIDQ.getText().trim());
        
        return param;
    }
    /*
     * 强制退卡表单检验提示
     */
    public boolean checkParamForce(AnalyzeVo analyzeVo) {
        boolean result = true;
        String message = "";
        try {
            
            if(StringUtil.isEmpty(analyzeVo.getCertificateCode())){
                message += "员工号不能为空！\n";
                result = false;
            }
            if(analyzeVo.getCertificateCode().getBytes("GBK").length>8){
                message += "员工号长度必须小于等于8位！\n";
                result = false;
            }else{
                Pattern pattern = Pattern.compile("^[A-Za-z0-9]+$"); //输入格式限制
                Matcher matcher = pattern.matcher(analyzeVo.getCertificateCode()); 
                if(!matcher.matches()){
                    message += "请输入员工号为数字与字母组成！\n";
                    result = false;
                }
            }
            if(StringUtil.isEmpty(analyzeVo.getcLogicalID())){
                message += "逻辑卡号不能为空！\n";
                result = false;
            }
            if(analyzeVo.getcLogicalID().getBytes("GBK").length!=16){
                message += "逻辑卡号必须等于16位！\n";
                result = false;
            }else{
                Pattern pattern = Pattern.compile("^[A-Za-z0-9]+$"); //输入格式限制
                Matcher matcher = pattern.matcher(analyzeVo.getcLogicalID()); 
                if(!matcher.matches()){
                    message += "请输入逻辑卡号为数字与字母组成！\n";
                    result = false;
                }
            }
        } catch (UnsupportedEncodingException ex) {
            logger.error(ex);
        }
        if(!result){
            MessageShowUtil.alertErrorMsg(message);
        }
        
        return result;
    }

    /*
     * 表单检验提示
     */
    public boolean checkParam(AnalyzeVo analyzeVo) {
        boolean result = true;
        String message = "";
        try {
            if(StringUtil.isEmpty(analyzeVo.getCertificateCode())){
                message += "工号不能为空！\n";
                result = false;
            }
            if(analyzeVo.getCertificateCode().getBytes("GBK").length>8){
                message += "工号长度必须小于等于8位！\n";
                result = false;
            }else{
                Pattern pattern = Pattern.compile("^[A-Za-z0-9]+$"); //输入格式限制
                Matcher matcher = pattern.matcher(analyzeVo.getCertificateCode()); 
                if(!matcher.matches()){
                    message += "请输入工号为数字与字母组成！\n";
                    result = false;
                }
            }
            if(StringUtil.isEmpty(analyzeVo.getcLogicalID())){
                message += "逻辑卡号不能为空！\n";
                result = false;
            }
            if(analyzeVo.getcLogicalID().getBytes("GBK").length!=16){
                message += "逻辑卡号必须等于16位！\n";
                result = false;
            }else{
                Pattern pattern = Pattern.compile("^[A-Za-z0-9]+$"); //输入格式限制
                Matcher matcher = pattern.matcher(analyzeVo.getcLogicalID()); 
                if(!matcher.matches()){
                    message += "请输入逻辑卡号为数字与字母组成！\n";
                    result = false;
                }
            }
        } catch (UnsupportedEncodingException ex) {
            logger.error(ex);
        }
        if(!result){
            MessageShowUtil.alertErrorMsg(message);
        }
        
        return result;
    }

    /*
     * 查询
     */
    private void query() {
        AnalyzeVo analyzeVo = getCallParam();
        if(checkParam(analyzeVo)){
            mvo.setEmployeeId(analyzeVo.getCertificateCode().trim());
            mvo.setLogicId(analyzeVo.getcLogicalID().trim());
            mvo.setUseState(null);
            mvo = makeCardService.getMakeCardsByEmployeeId(mvo);
            if(mvo.getLogicId()!=null){
                showInfo(mvo);
            }else{
                MessageShowUtil.alertInfoMsg( "没有查询到相关信息！");
            }
        }
    }
    
    /*
     * 强制退卡前确认
     */
    public boolean queryBeforeComfirm() {
        boolean flag = true;
        AnalyzeVo analyzeVo = getCallParam();
        if(checkParamForce(analyzeVo)){
            mvo.setEmployeeId(analyzeVo.getCertificateCode().trim());
            mvo.setLogicId(analyzeVo.getcLogicalID().trim());
            mvo.setUseState(null);
            mvo = makeCardService.getMakeCardsByEmployeeId(mvo);
            if(mvo.getLogicId()!=null){
                showInfo(mvo);
            }else{
                MessageShowUtil.alertInfoMsg( "没有查询到相关信息！");
                flag = false;
            }
        }else{
            flag = false;
        }
        
        return flag;
    }
    

    /*
     * 查询回填
     */
    private void showInfo(MakeCardVo mvo) {
        cLogicalID.setText(mvo.getLogicId());
        cPhysicalID.setText(mvo.getPhyId());
        certificateName.setText(mvo.getEmployeeName().trim());
        certificateCode.setText(mvo.getEmployeeId().trim());
        certificateSex.setText(PubUtil.getMapString(AppConstant.CERTIFICATE_SEX,mvo.getGender()));
        employeeClass.setText(mvo.getEmployeeClassTxt());
        certificateDepartment.setText(mvo.getEmployeeDepartmentTxt());
        certificatePositions.setText(mvo.getEmployeePositionsTxt());
    }
    
    /*
     * 退卡条件验证
     */
    private boolean checkReturnParam(){
        if(mvo.getUseState()!=null && mvo.getUseState().equals(AppConstant.ET_STATE_ISSUE)
                && mvo.getEmployeeId()!=null && !mvo.getEmployeeId().isEmpty()
                && mvo.getLogicId()!=null && !mvo.getLogicId().isEmpty()){
            return true;
        }else if(makeCardService.isCardReturned(mvo)){
            MessageShowUtil.errorOpMsg( "该卡已经退卡，无需重复退卡！");
            MessageShowUtil.alertErrorMsg( "该卡已经退卡，无需重复退卡！");
            return false;
        }else{
            MessageShowUtil.errorOpMsg( "该卡未发行或无相关信息！");
            MessageShowUtil.alertErrorMsg( "该卡未发行或无相关信息！");
            return false;
        }
    }

    private void returnCard() {
        logger.info("检查票卡是否正确放置到读卡器......");
        if(!doReadQuiet()){
            MessageShowUtil.errorOpMsg( "没有检测到任何票卡，请正确放置卡片！");
            MessageShowUtil.alertErrorMsg( "没有检测到任何票卡，请正确放置卡片！");
            return;
        }
        logger.info("检查待退卡信息是否符合条件......");
        if(checkReturnParam()){
            if(JOptionPane.showConfirmDialog(null, "是否对员工号" + mvo.getEmployeeId()
                    + " 逻辑卡号:"+mvo.getLogicId() +" 进行退卡？", null, JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION){
                doReturn();
                doReadQuiet();
            }
        }
    }

    private void forceReturn() {
        
        if(checkReturnParam()){
            if(JOptionPane.showConfirmDialog(null, "是否对员工号" + mvo.getEmployeeId()
                    + " 逻辑卡号:"+mvo.getLogicId() +" 进行强制退卡？", null, JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION){
                insertReturn();
                query();
            }
        }
    }

    /*
     * 插入数据库记录
     */
    private void insertReturn() {
        mvo.setReturnOper(BaseConstant.user.getUsername());
        //判断数据库连接
        //退卡写入数据库
        if(makeCardService.writeReturnCard(mvo)){
            MessageShowUtil.alertInfoMsg( "员工退卡成功！" );
            //日志
            logVo.setOprtContent("更新数据库退卡操作，工号"+mvo.getEmployeeId()+"更新数据库成功");
            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
            operateLogService.insertOperaterLogs(logVo);//插入操作
        }else{
            //插入数据库异常时，写到本地文件
            try {
                File file = makeCardService.writeLocalFile(mvo);
                if(file.exists()){
                    MessageShowUtil.alertInfoMsg( "员工退卡成功！数据写入本地文件！");
                }else{
                    MessageShowUtil.errorOpMsg( "员工退卡失败！请重新退卡！");
                    MessageShowUtil.alertErrorMsg( "员工退卡失败！请重新退卡！");
                }
            } catch (IOException ex) {
                logger.error(ex);
            }
            //日志
            logVo.setOprtContent("更新数据库退卡操作，工号"+mvo.getEmployeeId()+"更新数据库失败");
            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
            operateLogService.insertOperaterLogs(logVo);//插入操作
        }
    }
    
    /*
     * 退卡操作
     */
    private void doReturn() {
        mvo.setReturnOper(BaseConstant.user.getUsername());//取登录用户信息
        mvo.setReturnTime(DateHelper.curDateToStr19yyyy_MM_dd_HH_mm_ss());//设置当前时间
        //判断是否需要蜂鸣
        if(jCheckBox1.isSelected()){
            com.goldsign.rwcommu.connection.RWSerialConnection.MES_PARAM_BEE = AppConstant.RW_BUZZING_TIME_1;
        }
        logger.info("检查数据库连接及是否是重复退卡......");
        if(AppConstant.dbcpHelper.checkDBConnect()){//检测数据库连接
            //判断该卡是否已退卡
            if(makeCardService.isCardReturned(mvo)){
                MessageShowUtil.errorOpMsg( "该卡已经退卡，无需重复退卡！");
                MessageShowUtil.alertErrorMsg( "该卡已经退卡，无需重复退卡！");
                return;
            }
            
            if(makeCardService.getMakeCardsByEmployeeId(mvo).getEmployeeId()!=null){
                logVo.setOprtContent("退卡检验操作，检验数据库存在工号"+mvo.getEmployeeId()+"发卡信息");
                logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
                operateLogService.insertOperaterLogs(logVo);//插入操作

                mvo.setUseState(AppConstant.ET_STATE_RETURN);
                logger.info("进行退卡操作......");
                if(destroyPhyCard(mvo)){//读写器退卡是否成功
                    logVo.setOprtContent("读写器退卡操作，工号"+mvo.getEmployeeId()+"退卡成功");
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
                    operateLogService.insertOperaterLogs(logVo);//插入操作

                    insertReturn();
                }else{
                    //日志
                    logger.error("读写器退卡操作，工号"+mvo.getEmployeeId()+"退卡失败");
                    logVo.setOprtContent("读写器退卡操作，工号"+mvo.getEmployeeId()+"退卡失败");
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);//插入操作
                }
            }else{
                MessageShowUtil.errorOpMsg("员工卡未发行，不允许退卡！");
                MessageShowUtil.alertErrorMsg("员工卡未发行，不允许退卡！");
                //日志
                logVo.setOprtContent("退卡检验操作，检验数据库不存在工号"+mvo.getEmployeeId()+"发卡信息");
                logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                operateLogService.insertOperaterLogs(logVo);//插入操作
            }
        }else{
            MessageShowUtil.errorOpMsg( "网络异常，请联系管理员！");
            MessageShowUtil.alertErrorMsg( "网络异常，请联系管理员！");
        }  
    }
    
    /*
     * 串口退卡
     */
    private boolean destroyPhyCard(MakeCardVo vo){
    
        CallResult callResult = rwDeviceService.destroy(vo);
        logger.info("退卡串口返回结果： " + callResult.isSuccess());
        if (!callResult.isSuccess()) {
            MessageShowUtil.infoOpMsg(callResult.getMsg());
        }else{
            AnalyzeVo aVo = (AnalyzeVo) callResult.getObj();
            vo.setLogicId(aVo.getcLogicalID());
            vo.setPhyId(aVo.getcPhysicalID());
        }

        return callResult.isSuccess();
    }
}
