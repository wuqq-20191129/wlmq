
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GenIssueRequestPanel.java
 *
 * Created on 2011-8-3, 8:31:03
 */

package com.goldsign.etmcs.ui.panel;

import com.goldsign.csfrm.env.BaseConstant;
import com.goldsign.csfrm.ui.common.LengthLimitDocument;
import com.goldsign.csfrm.util.DateHelper;
import com.goldsign.csfrm.util.MessageShowUtil;
import com.goldsign.csfrm.util.StringUtil;
import com.goldsign.csfrm.util.UIUtil;
import com.goldsign.csfrm.vo.CallResult;
import com.goldsign.csfrm.vo.SelectOptionVo;
import com.goldsign.etmcs.application.Application;
import com.goldsign.etmcs.env.AppConstant;
import com.goldsign.etmcs.exception.CommuException;
import com.goldsign.etmcs.service.IMakeCardService;
import com.goldsign.etmcs.service.IOperateLogService;
import com.goldsign.etmcs.service.IRwDeviceService;
import com.goldsign.etmcs.service.impl.MakeCardService;
import com.goldsign.etmcs.service.impl.OperateLogService;
import com.goldsign.etmcs.util.CurrentConnectionStatusUtil;
import com.goldsign.etmcs.vo.AnalyzeVo;
import com.goldsign.etmcs.vo.MakeCardParam;
import com.goldsign.etmcs.vo.MakeCardVo;
import com.goldsign.etmcs.vo.OperateLogVo;
import com.goldsign.etmcs.vo.SignCardParam;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import org.apache.log4j.Logger;
/**
 * 员工卡制作
 * @author Administrator
 */
public class MadeCardPanel extends javax.swing.JPanel {
    
    private static Logger logger = Logger.getLogger(MadeCardPanel.class.getName());
    
    private IMakeCardService makeCardService;
    
    private IRwDeviceService rwDeviceService;
    
    private IOperateLogService operateLogService;
    
    private JTable resultSetTableMain;
    private OperateLogVo logVo;
    private String cLogicNoTemp="";
    
    /** Creates new form GenIssueRequestPanel */
    public MadeCardPanel() {
        initComponents();
        makeCardService = new MakeCardService();
        rwDeviceService = ((Application)AppConstant.application).getRwDeviceService();
        operateLogService = new OperateLogService();
        logVo = new OperateLogVo();
        logVo.setOperId(BaseConstant.user.getUsername());
        initCon();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        mainSPn = new javax.swing.JScrollPane();
        jTextField5 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btQuery = new javax.swing.JButton();
        employeeIdQry = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        employeeNameQry = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        employeeIdTxt = new javax.swing.JTextField();
        employeeNameTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        genderCB = new javax.swing.JComboBox();
        employeeDepartment = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        employeePosition = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        employeeClass = new javax.swing.JComboBox();
        btCancel = new javax.swing.JButton();
        btWriteCard = new javax.swing.JButton();
        jLabelMadeInfo01 = new javax.swing.JLabel();
        jLabelMadeInfo02 = new javax.swing.JLabel();
        jLabelMadeInfo03 = new javax.swing.JLabel();
        jLabelMadeInfo04 = new javax.swing.JLabel();
        jLabelMadeInfo05 = new javax.swing.JLabel();
        isBeeCB = new javax.swing.JCheckBox();
        btExport = new javax.swing.JButton();
        btConfirm = new javax.swing.JButton();

        setBackground(new java.awt.Color(254, 254, 254));
        setPreferredSize(new java.awt.Dimension(845, 589));

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(807, 74));

        jTextField5.setEditable(false);
        jTextField5.setBackground(new java.awt.Color(185, 227, 241));
        jTextField5.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jTextField5.setForeground(new java.awt.Color(94, 55, 16));
        jTextField5.setText("   结果列表");
        jTextField5.setAlignmentX(0.0F);
        jTextField5.setAlignmentY(0.0F);
        jTextField5.setBorder(null);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTextField5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
            .add(mainSPn)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainSPn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(237, 247, 249));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(792, 105));

        btQuery.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btQuery.setForeground(new java.awt.Color(0, 39, 80));
        btQuery.setText("查询");
        btQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btQueryActionPerformed(evt);
            }
        });

        employeeIdQry.setDocument(new LengthLimitDocument(8,true,true));
        employeeIdQry.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        employeeIdQry.setForeground(new java.awt.Color(0, 39, 80));
        employeeIdQry.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        employeeIdQry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeIdQryActionPerformed(evt);
            }
        });

        jTextField4.setEditable(false);
        jTextField4.setBackground(new java.awt.Color(185, 227, 241));
        jTextField4.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(94, 55, 16));
        jTextField4.setText("   查询条件");
        jTextField4.setAlignmentX(0.0F);
        jTextField4.setAlignmentY(0.0F);
        jTextField4.setBorder(null);

        employeeNameQry.setDocument(new LengthLimitDocument(15));
        employeeNameQry.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        employeeNameQry.setForeground(new java.awt.Color(0, 39, 80));
        employeeNameQry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeNameQryActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 39, 80));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("工号：");

        jLabel5.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 39, 80));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("姓名：");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 788, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(60, 60, 60)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(employeeIdQry, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(37, 37, 37)
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(employeeNameQry, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 249, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(employeeIdQry, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(btQuery)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(employeeNameQry, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(237, 247, 249));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setForeground(new java.awt.Color(70, 95, 125));

        jLabel3.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 39, 80));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("姓名：");

        employeeIdTxt.setDocument(new LengthLimitDocument(8,true,true));
        employeeIdTxt.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        employeeIdTxt.setForeground(new java.awt.Color(0, 39, 80));
        employeeIdTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        employeeIdTxt.setEnabled(false);
        employeeIdTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeIdTxtActionPerformed(evt);
            }
        });

        employeeNameTxt.setDocument(new LengthLimitDocument(15));
        employeeNameTxt.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        employeeNameTxt.setForeground(new java.awt.Color(0, 39, 80));
        employeeNameTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        employeeNameTxt.setEnabled(false);

        jLabel9.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 39, 80));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("工号：");

        jTextField6.setEditable(false);
        jTextField6.setBackground(new java.awt.Color(185, 227, 241));
        jTextField6.setDocument(new LengthLimitDocument(15));
        jTextField6.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jTextField6.setForeground(new java.awt.Color(94, 55, 16));
        jTextField6.setText("   表单信息");
        jTextField6.setAlignmentX(0.0F);
        jTextField6.setAlignmentY(0.0F);

        jLabel6.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 39, 80));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("性别：");

        genderCB.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        genderCB.setForeground(new java.awt.Color(0, 39, 80));
        genderCB.setEnabled(false);
        genderCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderCBActionPerformed(evt);
            }
        });

        employeeDepartment.setBackground(new java.awt.Color(240, 240, 240));
        employeeDepartment.setEditable(true);
        employeeDepartment.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        employeeDepartment.setForeground(new java.awt.Color(0, 39, 80));
        employeeDepartment.setAutoscrolls(true);
        employeeDepartment.setEnabled(false);
        employeeDepartment.setRequestFocusEnabled(true);
        employeeDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeDepartmentActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 39, 80));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("单位：");

        jLabel8.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 39, 80));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("  职务：");

        employeePosition.setEditable(true);
        employeePosition.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        employeePosition.setForeground(new java.awt.Color(0, 39, 80));
        employeePosition.setAutoscrolls(true);
        employeePosition.setEnabled(false);
        employeePosition.setRequestFocusEnabled(true);

        jLabel1.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 39, 80));
        jLabel1.setText("员工级别：");

        employeeClass.setBackground(new java.awt.Color(240, 240, 240));
        employeeClass.setEditable(true);
        employeeClass.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        employeeClass.setForeground(new java.awt.Color(0, 39, 80));
        employeeClass.setAutoscrolls(true);
        employeeClass.setEnabled(false);
        employeeClass.setRequestFocusEnabled(true);
        employeeClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeClassActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(9, 9, 9)
                                .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(genderCB, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(employeeIdTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(employeeDepartment, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(employeeNameTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 272, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(12, 12, 12)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel1)
                            .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(employeeClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(employeePosition, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jTextField6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 788, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jTextField6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 18, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(employeeNameTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(employeeIdTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(employeeClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(employeeDepartment, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(employeePosition, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(genderCB, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(13, 13, 13))
        );

        btCancel.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btCancel.setForeground(new java.awt.Color(0, 39, 80));
        btCancel.setText("取消");
        btCancel.setEnabled(false);
        btCancel.setName(""); // NOI18N
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        btWriteCard.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btWriteCard.setForeground(new java.awt.Color(0, 39, 80));
        btWriteCard.setText("发卡");
        btWriteCard.setName("btWriteCard"); // NOI18N
        btWriteCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btWriteCardActionPerformed(evt);
            }
        });

        jLabelMadeInfo01.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabelMadeInfo01.setForeground(new java.awt.Color(70, 95, 125));
        jLabelMadeInfo01.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLabelMadeInfo02.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabelMadeInfo02.setForeground(new java.awt.Color(255, 93, 2));
        jLabelMadeInfo02.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelMadeInfo03.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabelMadeInfo03.setForeground(new java.awt.Color(70, 95, 125));

        jLabelMadeInfo04.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabelMadeInfo04.setForeground(new java.awt.Color(255, 93, 2));
        jLabelMadeInfo04.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelMadeInfo05.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabelMadeInfo05.setForeground(new java.awt.Color(70, 95, 125));
        jLabelMadeInfo05.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        isBeeCB.setBackground(new java.awt.Color(254, 254, 254));
        isBeeCB.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        isBeeCB.setForeground(new java.awt.Color(0, 39, 80));
        isBeeCB.setSelected(true);
        isBeeCB.setText("是否蜂鸣");
        isBeeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isBeeCBActionPerformed(evt);
            }
        });

        btExport.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btExport.setForeground(new java.awt.Color(0, 39, 80));
        btExport.setText("退卡");
        btExport.setEnabled(false);
        btExport.setName("btMadeCard"); // NOI18N
        btExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExportActionPerformed(evt);
            }
        });

        btConfirm.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btConfirm.setForeground(new java.awt.Color(0, 39, 80));
        btConfirm.setText("确定");
        btConfirm.setEnabled(false);
        btConfirm.setName("btMadeCard"); // NOI18N
        btConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 792, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 792, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(147, 147, 147)
                        .add(jLabelMadeInfo01, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, 0)
                        .add(jLabelMadeInfo02, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(409, 409, 409)
                        .add(jLabelMadeInfo03, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 146, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabelMadeInfo04, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabelMadeInfo05, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(btWriteCard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(33, 33, 33)
                        .add(btConfirm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(96, 96, 96)
                        .add(btExport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(isBeeCB)
                        .add(209, 209, 209)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 226, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(btWriteCard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(btCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(btConfirm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(btExport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(isBeeCB)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabelMadeInfo04, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabelMadeInfo05, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabelMadeInfo02, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabelMadeInfo01, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabelMadeInfo03, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btQueryActionPerformed
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        
        doQuery();
        
        setButtonEnable(btExport,true);
//        setButtonEnable(btExport,true);
    }//GEN-LAST:event_btQueryActionPerformed

    //发卡操作 
    private void btWriteCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btWriteCardActionPerformed
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        
        setEditEnable(true);
        
        setButtonEnable(btWriteCard,false);
//        setButtonEnable(btWriteCard,false);
        setButtonEnable(btConfirm,true);
//        btConfirm.setEnabled(true);
        setButtonEnable(btCancel,true);
        
    }//GEN-LAST:event_btWriteCardActionPerformed

    //发卡后取消操作
    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        
        setEditEnable(false);
        
        setButtonEnable(btWriteCard,true);
        setButtonEnable(btConfirm,false);
        setButtonEnable(btCancel,false);
        
    }//GEN-LAST:event_btCancelActionPerformed

    //退卡操作
    private void btExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExportActionPerformed
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        if(doReturn()){
            setEditEnable(false);

            setButtonEnable(btWriteCard,true);
            setButtonEnable(btConfirm,false);
            setButtonEnable(btCancel,false);
            setButtonEnable(btExport,false);
            
            doQuery();
        }
    }//GEN-LAST:event_btExportActionPerformed

    //发卡后确认操作 
    private void btConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmActionPerformed
        //清空提示信息
        MessageShowUtil.infoOpMsg("");
        boolean flag = false;        
        try {
            flag = doWrite(rwDeviceService);
        } catch (CommuException ex) {
            java.util.logging.Logger.getLogger(MadeCardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(flag){//制止成功后设置按键状态
            setEditEnable(false);

            setButtonEnable(btWriteCard,true);
            setButtonEnable(btConfirm,false);
            setButtonEnable(btCancel,false);
            
            doQuery();
            //清空提示信息
            MessageShowUtil.infoOpMsg("");
        }
    }//GEN-LAST:event_btConfirmActionPerformed

    private void employeeIdTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeIdTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeIdTxtActionPerformed

    private void employeeDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeDepartmentActionPerformed

    private void employeeIdQryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeIdQryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeIdQryActionPerformed

    private void employeeNameQryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeNameQryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeNameQryActionPerformed

    private void isBeeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isBeeCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isBeeCBActionPerformed

    private void genderCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderCBActionPerformed

    private void employeeClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeClassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeClassActionPerformed

    //重置制卡表单
    private void setEditEnable(boolean enable){
        //添加单位下拉内容
        addItemDepartment();
        //添职务下拉内容
        addItemPosition();
        //添加级别下拉内容
        addItemClass();
        employeeIdTxt.setEnabled(enable);
        employeeNameTxt.setEnabled(enable);
        genderCB.setEnabled(enable);
        employeeDepartment.setEnabled(enable);
        employeePosition.setEnabled(enable);
        employeeClass.setEnabled(enable);
        
        employeeIdTxt.setText("");
        employeeNameTxt.setText("");
        genderCB.setSelectedIndex(0);
        if(AppConstant.EMPLOYEE_DEPARTMENT.size()>0){
            employeeDepartment.setSelectedIndex(0);
        }
        if(AppConstant.EMPLOYEE_POSITION.size()>0){
            employeePosition.setSelectedIndex(0);
        }
        if(AppConstant.EMPLOYEE_CLASS.size()>0){
            employeeClass.setSelectedIndex(0);
        }
    }
    
    /**
     * 取得查询条件
     *
     * @return
     */
    private MakeCardParam getCallParam(){
        
        MakeCardParam makeCardParam =  new MakeCardParam();
        makeCardParam.setEmployeeId(employeeIdQry.getText().trim());
        makeCardParam.setEmployeeName(employeeNameQry.getText().trim());
        makeCardParam.setType(AppConstant.ET_STATE_ISSUE);
        
        return makeCardParam;
    }
    
    /**
     * 查询
     * 
     */
    private void doQuery(){
        
        MakeCardParam callParam = getCallParam();
        
        //查询
        List<Object[]> cards = makeCardService.getMakeCards(callParam);
        
        //生成列表
        genMainResultSetTable(cards);
        
        MessageShowUtil.infoOpMsg("成功查询"+cards.size()+"条记录！");
    }
    
    /**
     * 根据结果集，生成列表
     *
     * @param result
     */
    private void genMainResultSetTable(List<Object[]> result) {
        //列名称
        String[] columnNames = {"工号", "姓名", "性别", "逻辑卡号", "受理人", "受理时间", "类型", "单位", "职务", "级别"};
        //列宽度
        int[] columnSize = {80, 200, 40, 160, 80, 140, 50, 160, 160, 60};
        
        //生成列表
        resultSetTableMain = UIUtil.genResultSetTable(this.mainSPn, result, columnNames, columnSize);
        resultSetTableMain.updateUI();
        //添加单击事件
        resultSetTableMain.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e) {
                    if(e.getClickCount()==1){//点击几次，这里是单击事件
                        setFormValuesOnclick();        
                    }
            }
        });
    }
    
    /*
     * 点击列表记录后回填表单jPanel3
     */
    private void setFormValuesOnclick(){
        int row=resultSetTableMain.getSelectedRow();    
        
        employeeIdTxt.setText(resultSetTableMain.getValueAt(row,0).toString());//得到所在行的第一个列的值，作为下面事件传递的参数
        employeeNameTxt.setText(resultSetTableMain.getValueAt(row,1).toString());//姓名
        String genderStr = resultSetTableMain.getValueAt(row,2).toString();//性别
        String departmentStr = resultSetTableMain.getValueAt(row,7).toString();//单位
        String positionStr = resultSetTableMain.getValueAt(row,8).toString();//职位
        String classStr = resultSetTableMain.getValueAt(row,9).toString();//级别
        setSelectedItemByName(genderStr,genderCB);//性别
        setSelectedItemByName(positionStr,employeePosition);//职位
        setSelectedItemByName(departmentStr,employeeDepartment);//单位
        setSelectedItemByName(classStr,employeeClass);//单位
        
        cLogicNoTemp = resultSetTableMain.getValueAt(row,3).toString();//点击后的逻辑卡号
        
        employeeIdTxt.setEnabled(false);
        employeeNameTxt.setEnabled(false);
        genderCB.setEnabled(false);
        employeeDepartment.setEnabled(false);
        employeePosition.setEnabled(false);
        
        setButtonEnable(btExport,true);
        setButtonEnable(btWriteCard,true);
        setButtonEnable(btConfirm,false);
        setButtonEnable(btCancel,false);
       
    }
    
    /*
     * 根据值设置下拉选项
     */
     private void setSelectedItemByName(String genderStr, javax.swing.JComboBox genderCB) {
        for(int i=0;i<genderCB.getItemCount();i++){
            SelectOptionVo selectOptionVo = (SelectOptionVo)genderCB.getItemAt(i);
            if(selectOptionVo.getText().equals(genderStr)){
                genderCB.setSelectedItem(genderCB.getItemAt(i));
            }
        }
    }
    
     private String isWrongEmployeeInfo(MakeCardVo vo){
          String reString = "rightCheck";
          MakeCardVo reVo = makeCardService.getEmployeeInfoService(vo);
          if(reVo!=null){
              if(!vo.getEmployeeName().equals(reVo.getEmployeeName())){
                  reString = reVo.getEmployeeName();
              }
          }
          return reString;
     }
     
     private boolean isExistsMakeCard(MakeCardVo vo){
         boolean result = false;
         result = makeCardService.isExistsMakeCard(vo)==0;
         if(!result && MessageShowUtil.confirmInfoMsgYesOrNo("该员工号已经发行，是否继续发行？") == MessageShowUtil.YES_OPTION){
             result = true;
         }
         
         return result;
     }
     
     
    /*
     * 发卡操作
     */
    private boolean doWrite(IRwDeviceService rwDeviceService) throws CommuException {
        MakeCardVo vo = getWriteCardParam();//读取输入内容
        vo.setMakeOper(BaseConstant.user.getUsername());//取登录用户信息
        vo.setMakeTime(DateHelper.curDateToStr19yyyy_MM_dd_HH_mm_ss());//设置当前时间
        
        if(checkParam(vo)){//检验表单数据
            if(CurrentConnectionStatusUtil.isDatabaseConnected()){//检测数据库连接
                boolean connectFlag = false;
                //检测ES通讯状态
                connectFlag = CurrentConnectionStatusUtil.isEsCommuConnected();
                if(!connectFlag){
                    MessageShowUtil.errorOpMsg( "Es通讯SOCKET端口连接异常，请联系管理员！");
                    MessageShowUtil.alertErrorMsg( "Es通讯SOCKET端口连接异常，请联系管理员！");
                    return false;
                }
                //检测KMS通讯状态
                connectFlag = CurrentConnectionStatusUtil.isKmsConnected();
                if(!connectFlag){
                    MessageShowUtil.errorOpMsg( "加密机连接异常，请联系管理员！");
                    MessageShowUtil.alertErrorMsg( "加密机连接异常，请联系管理员！");
                    return false;
                }
                //检测读写器状态
                connectFlag = CurrentConnectionStatusUtil.isRwConnected(rwDeviceService);
                if(!connectFlag){
                    MessageShowUtil.errorOpMsg( "读写器连接异常，请联系管理员！");
                    MessageShowUtil.alertErrorMsg( "读写器连接异常，请联系管理员！");
                    return false;
                }
                //检测读写器是否放在卡票
                connectFlag = CurrentConnectionStatusUtil.isCardOnRW(rwDeviceService);
                if(!connectFlag){
                    MessageShowUtil.errorOpMsg( "没有检测到任何票卡，请正确放置卡片！");
                    MessageShowUtil.alertErrorMsg( "没有检测到任何票卡，请正确放置卡片！");
                    return false;
                }
                //判断是否需要蜂鸣
                if(isBeeCB.isSelected()){
                    com.goldsign.rwcommu.connection.RWSerialConnection.MES_PARAM_BEE = AppConstant.RW_BUZZING_TIME_1;
                }
                //检验录入员工信息是否与数据库中冲突（同一员工号，员工名不同）
                String conflictResult = isWrongEmployeeInfo(vo);
                if(!"rightCheck".equals(conflictResult)){
                    MessageShowUtil.errorOpMsg("员工号["+vo.getEmployeeId()+"]已经被占用，对应员工名为["+conflictResult+"]，禁止发卡！");
                    MessageShowUtil.alertErrorMsg("员工号["+vo.getEmployeeId()+"]已经被占用，对应员工名为["+conflictResult+"]，禁止发卡！");
                    return false;
                }
                //检验数据库是否已经发卡信息,如已经发行过，是否继续发行
                boolean isExistContinue = false;
                isExistContinue = this.isExistsMakeCard(vo);
                if(isExistContinue){
                    logVo.setOprtContent("发卡检验操作，检验数据库未有工号"+vo.getEmployeeId()+"发卡信息");
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
                    operateLogService.insertOperaterLogs(logVo);//插入操作
                    vo.setUseState(AppConstant.ET_STATE_ISSUE);

                    if(isssuePhyCard(vo)){//判断是否已经写卡信息
                        logVo.setOprtContent("读写器发卡操作，工号"+vo.getEmployeeId()+"发卡成功");
                        logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
                        operateLogService.insertOperaterLogs(logVo);//插入操作

                        //判断数据库连接
                        //插入数据库
                        if(makeCardService.writeMakeCard(vo)){
                            MessageShowUtil.alertInfoMsg("员工发卡成功！");
                            //日志
                            logVo.setOprtContent("插入数据库发卡操作，工号"+vo.getEmployeeId()+"插入数据库成功");
                            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
                            operateLogService.insertOperaterLogs(logVo);//插入操作

                            return true;
                        }else{
                            //MessageShowUtil.alertInfoMsg( "员工发卡成功！数据未插入数据库！");
                            //插入数据库异常时，写到本地文件
                            try {
                                File file = makeCardService.writeLocalFile(vo);
                                if(file.exists()){
                                    MessageShowUtil.alertInfoMsg( "员工发卡成功！数据写入本地文件！");
                                }else{
                                    MessageShowUtil.errorOpMsg( "员工发卡失败！请重新发卡！");
                                    MessageShowUtil.alertErrorMsg( "员工发卡失败！请重新发卡！");
                                }
                            } catch (IOException ex) {
                                logger.error(ex);
                            }
                            //日志
                            logVo.setOprtContent("插入数据库发卡操作，工号"+vo.getEmployeeId()+"插入数据库失败");
                            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                            operateLogService.insertOperaterLogs(logVo);//插入操作

                            return true;
                        }
                    }else{
//                        MessageShowUtil.alertErrorMsg("发卡错误，请联系管理员！" );
                        //日志
                        logVo.setOprtContent("读写器发卡操作，工号"+vo.getEmployeeId()+"发卡失败");
                        logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                        operateLogService.insertOperaterLogs(logVo);//插入操作
                    }
                }else{
                    MessageShowUtil.infoOpMsg( "员工号已经发卡，取消发卡！");
                    //日志
                    logVo.setOprtContent("发卡检验操作，检验数据库已经存在工号"+vo.getEmployeeId()+"发卡信息，取消发卡。");
                    logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                    operateLogService.insertOperaterLogs(logVo);//插入操作
                }
            }else{
                MessageShowUtil.errorOpMsg( "数据库网络异常，请联系管理员！");
                MessageShowUtil.alertErrorMsg( "数据库网络异常，请联系管理员！");
            }
        }
        return false;
    }
    /*
    * 退卡操作 检查卡是否放置
    */
    
    /*
     * 退卡操作
     */
    private boolean doReturn() {
        MakeCardVo vo = getWriteCardParam();//读取输入内容
        vo.setReturnOper(BaseConstant.user.getUsername());//取登录用户信息
        vo.setReturnTime(DateHelper.curDateToStr19yyyy_MM_dd_HH_mm_ss());//设置当前时间
        vo.setUseState(AppConstant.ET_STATE_ISSUE);
        String logicId = vo.getLogicId();
        
        if(AppConstant.dbcpHelper.checkDBConnect()){//检测数据库连接
            
            boolean connectFlag = false;
            //检测读写器状态
            connectFlag = CurrentConnectionStatusUtil.isRwConnected(rwDeviceService);
            if(!connectFlag){
                MessageShowUtil.errorOpMsg( "读写器连接异常，请联系管理员！");
                MessageShowUtil.alertErrorMsg( "读写器连接异常，请联系管理员！");
                return false;
            }
            //检测读写器是否放在卡票
            connectFlag = CurrentConnectionStatusUtil.isCardOnRW(rwDeviceService);
            if(!connectFlag){
                MessageShowUtil.errorOpMsg( "没有检测到任何票卡，请正确放置卡片！");
                MessageShowUtil.alertErrorMsg( "没有检测到任何票卡，请正确放置卡片！");
                return false;
            }
            //判断该卡是否已退卡
            if(makeCardService.isCardReturned(vo)){
                MessageShowUtil.errorOpMsg( "该卡已经退卡，无需重复退卡！");
                MessageShowUtil.alertErrorMsg( "该卡已经退卡，无需重复退卡！");
                return false;
            }
            
            CallResult callResult = rwDeviceService.analyze();
            AnalyzeVo analyzeVo = (AnalyzeVo) callResult.getObj();
            String logicNo = analyzeVo.getcLogicalID();
            if(!logicId.equals(logicNo)){
                MessageShowUtil.errorOpMsg( "读写器上放置的员工卡逻辑卡号为："+logicNo+"，与待退卡不一致，请放置正确的员工卡再退卡！");
                MessageShowUtil.alertErrorMsg(  "读写器上放置的员工卡逻辑卡号为："+logicNo+"，与待退卡不一致，请放置正确的员工卡再退卡！");
                return false;
            }
            
            if(makeCardService.getMakeCardsByEmployeeId(vo).getEmployeeId()!=null){
                logVo.setOprtContent("退卡检验操作，检验数据库存在工号"+vo.getEmployeeId()+"发卡信息");
                logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
                operateLogService.insertOperaterLogs(logVo);//插入操作

                vo.setUseState(AppConstant.ET_STATE_RETURN);
                //判断是否需要蜂鸣
                if(isBeeCB.isSelected()){
                    com.goldsign.rwcommu.connection.RWSerialConnection.MES_PARAM_BEE = AppConstant.RW_BUZZING_TIME_1;
                }
                if(JOptionPane.showConfirmDialog(null, "是否对员工号" + vo.getEmployeeId()
                    + " 逻辑卡号:"+vo.getLogicId() +" 进行退卡？", null, JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION){
                    if(destroyPhyCard(vo)){//读写器退卡是否成功
                        logVo.setOprtContent("读写器退卡操作，工号"+vo.getEmployeeId()+"退卡成功");
                        logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
                        operateLogService.insertOperaterLogs(logVo);//插入操作

                        //判断数据库连接
                        //退卡写入数据库
                        if(makeCardService.writeReturnCard(vo)){
                            MessageShowUtil.alertInfoMsg( "员工退卡成功！" );
                            //日志
                            logVo.setOprtContent("更新数据库退卡操作，工号"+vo.getEmployeeId()+"更新数据库成功");
                            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_SUC);
                            operateLogService.insertOperaterLogs(logVo);//插入操作

                            return true;
                        }else{
                            //MessageShowUtil.alertInfoMsg("员工退卡成功！数据未插入数据库！");
                            //插入数据库异常时，写到本地文件
                            try {
                                File file = makeCardService.writeLocalFile(vo);
                                if(file.exists()){
                                    MessageShowUtil.alertInfoMsg( "员工退卡成功！数据写入本地文件！");
                                }else{
                                    MessageShowUtil.errorOpMsg( "员工退卡失败！请重新退卡！");
                                    MessageShowUtil.alertErrorMsg( "员工退卡失败！请重新退卡！");
                                }
                            } catch (IOException ex) {
                                logger.error(ex);
                            }
                            //日志
                            logVo.setOprtContent("更新数据库退卡操作，工号"+vo.getEmployeeId()+"更新数据库失败");
                            logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                            operateLogService.insertOperaterLogs(logVo);//插入操作

                            return true;
                        }
                    }else{
    //                    MessageShowUtil.alertErrorMsg("退卡错误，请联系管理员！");
                        //日志
                        logVo.setOprtContent("读写器退卡操作，工号"+vo.getEmployeeId()+"退卡失败");
                        logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                        operateLogService.insertOperaterLogs(logVo);//插入操作
                    }
                }
                
            }else{
                MessageShowUtil.errorOpMsg("员工未发卡，不允许退卡！");
                MessageShowUtil.alertErrorMsg("员工未发卡，不允许退卡！");
                //日志
                logVo.setOprtContent("退卡检验操作，检验数据库不存在工号"+vo.getEmployeeId()+"发卡信息");
                logVo.setOprtResult(AppConstant.OPRT_LOG_RESULT_FAIL);
                operateLogService.insertOperaterLogs(logVo);//插入操作
            }
        }else{
            MessageShowUtil.errorOpMsg( "网络异常，请联系管理员！");
            MessageShowUtil.alertErrorMsg( "网络异常，请联系管理员！");
        }  
        return false;
    }
    
    /*
     * 读取表单内容
     */
    private MakeCardVo getWriteCardParam(){
        MakeCardVo makeCardVo =  new MakeCardVo();
        makeCardVo.setEmployeeId(employeeIdTxt.getText().trim());
        makeCardVo.setEmployeeName(employeeNameTxt.getText().trim());
        SelectOptionVo selectOptionVo = (SelectOptionVo)genderCB.getSelectedItem();
        makeCardVo.setGender(selectOptionVo.getValue());
        //检测是否手动输入值
        setVoDepartment(makeCardVo);
        //检测是否手动输入值
        setVoPosition(makeCardVo);
        //检测是否手动输入值
        setVoClass(makeCardVo);
        
        if(isBeeCB.isSelected()){//是否蜂鸣
            makeCardVo.setIsBeeCBValue(AppConstant.IS_BEE_CB_TURE);
        }else{
            makeCardVo.setIsBeeCBValue(AppConstant.IS_BEE_CB_FALSE);
        }
        
        makeCardVo.setLogicId(cLogicNoTemp);
        return makeCardVo;
    }
    
    /*
     * 串口发卡
     */
    private boolean isssuePhyCard(MakeCardVo vo){
        
        SignCardParam param = new SignCardParam();
        param.setEmployeeNo(vo.getEmployeeId());
        param.setEmployeeName(vo.getEmployeeName());
        param.setSex(vo.getGender());
        
        CallResult callResult = rwDeviceService.signCard(param);
        String code = callResult.getCode();
        if(!callResult.isSuccess()){
            MessageShowUtil.errorOpMsg("读卡器写入失败！"+callResult.getMsg());
            MessageShowUtil.alertErrorMsg("读卡器写入失败！"+callResult.getMsg());
        }else{
            AnalyzeVo aVo = (AnalyzeVo) callResult.getObj();
            vo.setLogicId(aVo.getcLogicalID());
            vo.setPhyId(aVo.getcPhysicalID());
        }
        
        return callResult.isSuccess();
    }
    
    /*
     * 串口退卡
     */
    private boolean destroyPhyCard(MakeCardVo vo){
    
        CallResult callResult = rwDeviceService.destroy(vo);
        if (!callResult.isSuccess()) {
            MessageShowUtil.errorOpMsg(callResult.getMsg());
            MessageShowUtil.alertErrorMsg(callResult.getMsg());
            
        }else{
            AnalyzeVo aVo = (AnalyzeVo) callResult.getObj();
            vo.setLogicId(aVo.getcLogicalID());
            vo.setPhyId(aVo.getcPhysicalID());
        }

        return callResult.isSuccess();
    }
    
    /*
     * 表单检验提示
     */
    public boolean checkParam(MakeCardVo makeCardVo) {
        boolean result = true;
        String message = "";
        try {
            if(StringUtil.isEmpty(makeCardVo.getEmployeeId())){
                message += "工号不能为空！\n";
                result = false;
            }
            if(makeCardVo.getEmployeeId().getBytes("GBK").length>8){
                message += "工号长度必须小于等于8位！\n";
                result = false;
            }else{
                Pattern pattern = Pattern.compile("^[A-Za-z0-9]+$"); //输入格式限制
                Matcher matcher = pattern.matcher(makeCardVo.getEmployeeId()); 
                if(!matcher.matches()){
                    message += "请输入工号为数字与字母组成！\n";
                    result = false;
                }
            }
            if(StringUtil.isEmpty(makeCardVo.getEmployeeName())){
                message += "姓名不能为空！\n";
                result = false;
            }else{
                if(isEnglishDot(makeCardVo.getEmployeeName())){
                    message += "姓名中存在英文点号，请输入中文点号！\n";
                    result = false;
                }
            }
            if(makeCardVo.getEmployeeName().getBytes("UTF-8").length>45){
                message += "姓名长度必须小于等于15个汉字！\n";
                result = false;
            }
            if(StringUtil.isEmpty(makeCardVo.getGender())){
                message += "请选择性别！\n";
                result = false;
            }
            if(StringUtil.isEmpty(makeCardVo.getEmployeeDepartment()) && StringUtil.isEmpty(makeCardVo.getEmployeeDepartmentTxt())){
                message += "请选择单位或手工填写单位！\n";
                result = false;
            }
            if(makeCardVo.getEmployeeDepartmentTxt().getBytes("UTF-8").length>75){
                message += "员工单位太长，不能超过25个汉字！\n";
                result = false;
            }
            if(makeCardVo.getEmployeePositionsTxt().getBytes("UTF-8").length>75){
                message += "职务长度太长，不能超过25个汉字！\n";
                result = false;
            }
            String ec = makeCardVo.getEmployeeClassTxt();
            if(makeCardVo.getEmployeeClassTxt().getBytes("GBK").length>1){
                message += "级别长度仅1位，并且只能为A、或者B、或者C！\n";
                result = false;
            }else{
                Pattern pattern = Pattern.compile("^[A-C]+$"); //输入格式限制
                Matcher matcher = pattern.matcher(makeCardVo.getEmployeeClassTxt()); 
                if(!matcher.matches()){
                    message += "级别有三个等级，只能为A、或者B、或者C！\n";
                    result = false;
                }
            }
//            if(makeCardVo.getEmployeeClassTxt().getBytes("UTF-8").length>6){
//                message += "级别长度太长，不能超过2个汉字！\n";
//                result = false;
//            }
//            if(StringUtil.isEmpty(makeCardVo.getEmployeePositions()) && StringUtil.isEmpty(makeCardVo.getEmployeePositionsTxt())){
//                MessageShowUtil.alertErrorMsg("请选择职务或手工填写职务！");
//                return false;
//            }
        } catch (UnsupportedEncodingException ex) {
            logger.error(ex);
        }
        if(!result){
            MessageShowUtil.alertErrorMsg(message);
        }
        
        return result;
    }
    
    /**
     * 判断姓名中是否有英文点号
     * @param text
     * @return 
     */
    private static boolean isEnglishDot(String text){
        boolean flag = false;
        String dotReg = "\\.";//英文点号，错误
        String dotRegCN = "\\·";//中文点号（正常使用）
        for(int i=0;i<text.length();i++){
           String b=Character.toString(text.charAt(i));
           if(b.matches(dotReg)){
               flag=true;
               break;
           }
        }
        return flag;
    }
    /**
     * 初始化下拉
     *
     */
    private void initCon() {
 
        this.genderCB.removeAllItems();
        this.genderCB.addItem(new SelectOptionVo(AppConstant.GNEDER_MAN, AppConstant.GNEDER_MAN_NAME));
        this.genderCB.addItem(new SelectOptionVo(AppConstant.GNEDER_WOMAN, AppConstant.GNEDER_WOMAN_NAME));
        
        setEditEnable(false);  
        setButtonEnable(btWriteCard,true);
        setButtonEnable(btConfirm,false);
        setButtonEnable(btCancel,false);
        setButtonEnable(btExport,false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btConfirm;
    private javax.swing.JButton btExport;
    private javax.swing.JButton btQuery;
    private javax.swing.JButton btWriteCard;
    private javax.swing.JComboBox employeeClass;
    private javax.swing.JComboBox employeeDepartment;
    private javax.swing.JTextField employeeIdQry;
    private javax.swing.JTextField employeeIdTxt;
    private javax.swing.JTextField employeeNameQry;
    private javax.swing.JTextField employeeNameTxt;
    private javax.swing.JComboBox employeePosition;
    private javax.swing.JComboBox genderCB;
    private javax.swing.JCheckBox isBeeCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelMadeInfo01;
    private javax.swing.JLabel jLabelMadeInfo02;
    private javax.swing.JLabel jLabelMadeInfo03;
    private javax.swing.JLabel jLabelMadeInfo04;
    private javax.swing.JLabel jLabelMadeInfo05;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JScrollPane mainSPn;
    // End of variables declaration//GEN-END:variables

    //校验工号
    private void employeeIdCheck() {
        int maxLength = 8;//限制长度
        Pattern pattern = Pattern.compile("^[A-Za-z0-9]+$"); //输入格式限制
        String employeeId = employeeIdTxt.getText().toString();
        
        Matcher matcher = pattern.matcher(employeeId); 
        if(!matcher.matches()){
            MessageShowUtil.alertErrorMsg("请输入工号为数字与字母组成！");
        }
        try {
            if(employeeId.getBytes("GBK").length>6){
                employeeIdTxt.setText(employeeId.substring(0, maxLength));
            }
        } catch (Exception e) {
            logger.error(e);
        }
    }
    
    
    //添职务下拉内容
    private void addItemPosition() {
        this.employeePosition.removeAllItems();
        Set<String> pkey = AppConstant.EMPLOYEE_POSITION.keySet();
        for (Iterator it = pkey.iterator(); it.hasNext();) {
            String s = (String) it.next();
            this.employeePosition.addItem(new SelectOptionVo(s, String.valueOf(AppConstant.EMPLOYEE_POSITION.get(s))));
        }
        //下拉数据超过30个时，屏蔽下拉可编辑
        if(AppConstant.EMPLOYEE_POSITION.size() >= AppConstant.DEPART_POSITION_CLASS_COUNT){
            employeePosition.setEditable(false);
        }
    }
    //添加级别下拉内容
    private void addItemClass() {
        this.employeeClass.removeAllItems();
        Set<String> pkey = AppConstant.EMPLOYEE_CLASS.keySet();
        for (Iterator it = pkey.iterator(); it.hasNext();) {
            String s = (String) it.next();
            this.employeeClass.addItem(new SelectOptionVo(s, String.valueOf(AppConstant.EMPLOYEE_CLASS.get(s))));
        }
        //下拉数据超过30个时，屏蔽下拉可编辑
        if(AppConstant.EMPLOYEE_CLASS.size() >= AppConstant.DEPART_POSITION_CLASS_COUNT){
            employeeClass.setEditable(false);
        }
    }
    //添加单位下拉内容
    private void addItemDepartment() {
        this.employeeDepartment.removeAllItems();
        Set<String> dkey = AppConstant.EMPLOYEE_DEPARTMENT.keySet();
        for (Iterator it = dkey.iterator(); it.hasNext();) {
            String s = (String) it.next();
            this.employeeDepartment.addItem(new SelectOptionVo(s, String.valueOf(AppConstant.EMPLOYEE_DEPARTMENT.get(s))));
        }
        //下拉数据超过30个时，屏蔽下拉可编辑
        if(AppConstant.EMPLOYEE_DEPARTMENT.size() >= AppConstant.DEPART_POSITION_CLASS_COUNT){
            employeeDepartment.setEditable(false);
        }
    }

    /**
     * 取单位
     * @param makeCardVo 
     */
    private void setVoDepartment(MakeCardVo makeCardVo) {
        if(employeeDepartment.getEditor().getItem() != null){
            if(employeeDepartment.isEditable()){
                makeCardVo.setEmployeeDepartmentTxt(employeeDepartment.getEditor().getItem().toString().trim());
                setSelectedItemByName(makeCardVo.getEmployeeDepartmentTxt(), employeeDepartment);
            }
            if(employeeDepartment.getItemCount() > 0){
                if(!(employeeDepartment.getSelectedItem() instanceof java.lang.String)){
                    SelectOptionVo dSVo = (SelectOptionVo)employeeDepartment.getSelectedItem();
                    makeCardVo.setEmployeeDepartmentTxt(dSVo.getText());
                    makeCardVo.setEmployeeDepartment(dSVo.getValue());
                }
            }
        }
    }
    
    /**
     * 取级别
     * @param makeCardVo 
     */
    private void setVoClass(MakeCardVo makeCardVo) {
        if(employeeClass.getEditor().getItem() != null){
            if(employeeClass.isEditable()){
                makeCardVo.setEmployeeClassTxt(employeeClass.getEditor().getItem().toString().trim());
                setSelectedItemByName(makeCardVo.getEmployeeClassTxt(), employeeClass);
            }
            if(employeeClass.getItemCount() > 0){
                if(!(employeeClass.getSelectedItem() instanceof java.lang.String)){
                    SelectOptionVo dSVo = (SelectOptionVo)employeeClass.getSelectedItem();
                    makeCardVo.setEmployeeClassTxt(dSVo.getText());
                    makeCardVo.setEmployeeClass(dSVo.getValue());
                }
            }
        }
    }
    
    /**
     * 取职务
     * @param makeCardVo 
     */
    private void setVoPosition(MakeCardVo makeCardVo) {
        if(employeePosition.getEditor().getItem() != null){
            if(employeePosition.isEditable()){
                makeCardVo.setEmployeePositionsTxt(employeePosition.getEditor().getItem().toString().trim());
                setSelectedItemByName(makeCardVo.getEmployeePositionsTxt(), employeePosition);
            }
            if(employeePosition.getItemCount() > 0){
                if(!(employeePosition.getSelectedItem() instanceof java.lang.String)){
                    SelectOptionVo pSVo = (SelectOptionVo)employeePosition.getSelectedItem();
                    makeCardVo.setEmployeePositionsTxt(pSVo.getText());
                    makeCardVo.setEmployeePositions(pSVo.getValue());
                }
            }
        }
    }

    /**
     * 设置按钮（字体颜色）
     * @param btWriteCard
     * @param b 
     */
    private void setButtonEnable(JButton button, boolean b) {
        button.setEnabled(b);
        if(b){
            button.setForeground(new Color(0,39,80));
        }else{
            button.setForeground(Color.gray);
        }
    }
    /**
     * 设置数据库状态 状态栏
     * @param DatabaseStatus 
     */
    private void setDatabaseStatus(boolean databaseStatus) {
        String[] vars = new String[]{AppConstant.STATUS_BAR_BATABASE_STATUS};
        AppConstant.DATABASE_STATUS = databaseStatus;
        boolean[] statuses = new boolean[]{AppConstant.DATABASE_STATUS};
        //更新连接状态栏
        setSBarStatus(vars,statuses);
    }
    
    
    /**
     * 设置状态栏状态
     * 正常、警告
     * @param vars
     * @param statuses 
     */
    private void setSBarStatus(String[] vars, boolean[] statuses) {
        int len = vars.length;
        for (int i = 0; i < len; i++) {
            if (statuses[i]) {
                BaseConstant.publicPanel.setOpLink(vars[i], BaseConstant.STATUS_BAR_STATUS_COLOR_ON);
            } else {
                BaseConstant.publicPanel.setOpLinkError(vars[i], BaseConstant.STATUS_BAR_STATUS_COLOR_OFF);
            }
        }
    }
    
}
