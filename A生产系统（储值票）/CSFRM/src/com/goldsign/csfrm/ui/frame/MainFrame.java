package com.goldsign.csfrm.ui.frame;
import com.goldsign.csfrm.env.BaseConstant;
import com.goldsign.csfrm.ui.common.ImagePanel;
import com.goldsign.csfrm.ui.panel.BasePanel;
import com.goldsign.csfrm.ui.panel.IBaseWindow;
import com.goldsign.csfrm.util.MessageShowUtil;
import com.goldsign.csfrm.util.UIUtil;
import com.goldsign.csfrm.vo.CallParam;
import com.goldsign.csfrm.vo.CallResult;
import com.goldsign.csfrm.vo.SBarStatusVo;
import com.goldsign.csfrm.vo.SysModuleVo;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.Border;
/**
 *
 * @author  Administrator
 * 
 * 系统主界面
 * 
 */
public class MainFrame extends javax.swing.JFrame implements java.awt.event.ActionListener{
    
    private static final Logger logger = Logger.getLogger(MainFrame.class.getName());
    
    public static Vector<SysModuleVo> availableTopMenus = new Vector<SysModuleVo>();      //一级菜单
    public static Vector<SysModuleVo> availableSecondMenus = new Vector<SysModuleVo>();   //二级菜单
    private Vector<String> topMenusNames = new Vector<String>();                //主菜单按钮的名字
    private Vector<String> secondMenusNames = new Vector<String>();             //二级菜单按钮的名字
    public static HashMap<String, Vector<String>> modulePriviledges = new HashMap<String, Vector<String>>();    //各模块的可用按钮名称
    private JLabel statusOpResultLable =null;
    private JLabel statusOpResult=null;                     //结果状态栏
    private Hashtable<String, JLabel> statusOps = new Hashtable<String, JLabel>();  //连接状态栏
    
    /** Creates new form MainFrame */
    public MainFrame() {
        this.getContentPane().setBackground(new Color(255,255,255));
        initComponents();
    }

    /**
     * 初始化主窗体
     * 
     */
    public void initFrame() {
    
        this.getAvailableMenus();   //获得所有菜单
        this.maxWindow();           //最大化窗口
        this.genMainMenu();         //生成一级菜单
        this.genFirstSubMenuByMainMenu();   //生成初始二级菜单
        
        this.addLogo();             //添加LOGO
        Font font = new Font("微软雅黑",Font.BOLD,20);
        this.logoLabel.setFont(font);
        this.logoLabel.setText(BaseConstant.APP_NAME_SELF_ADAPTION+"                                                                                                            ");
        this.logoLabel.setHorizontalTextPosition(JLabel.CENTER);
        this.logoLabel.setVerticalTextPosition(JLabel.CENTER);
        this.logoLabel.setForeground(Color.WHITE);
        
        this.addWorkArea();         //生成工作域
        this.genStatusBar();        //生成状态栏
        
        this.setGlobalObject();     //保存当前主窗体

    }
    
    /**
     * 保存当前主窗体
     * 
     */
    private void setGlobalObject(){
        BaseConstant.mainFrame = this;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logoPanel = new javax.swing.JPanel();
        logoLabel = new javax.swing.JLabel();
        mainMenuPanel = new ImagePanel(new ImageIcon(BaseConstant.appWorkDir+"/images/up_background.jpg").getImage());
        welcomeLabel = new javax.swing.JLabel();
        welcomeLongLabel = new javax.swing.JLabel();
        opStatusPanel = new ImagePanel(new ImageIcon(BaseConstant.appWorkDir+"/images/down_background.jpg").getImage());
        subMenuPanel = new ImagePanel(new ImageIcon(BaseConstant.appWorkDir+"/images/left_menu.jpg").getImage());
        workScrollPane = new javax.swing.JScrollPane();
        workPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        logoPanel.setBackground(new java.awt.Color(204, 255, 255));
        logoPanel.setName("logoPanel"); // NOI18N

        org.jdesktop.layout.GroupLayout logoPanelLayout = new org.jdesktop.layout.GroupLayout(logoPanel);
        logoPanel.setLayout(logoPanelLayout);
        logoPanelLayout.setHorizontalGroup(
            logoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, logoLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        logoPanelLayout.setVerticalGroup(
            logoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(logoLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );

        mainMenuPanel.setBackground(new java.awt.Color(0, 153, 204));

        welcomeLabel.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        welcomeLabel.setForeground(java.awt.Color.white);
        welcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        welcomeLongLabel.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        welcomeLongLabel.setForeground(new java.awt.Color(255, 255, 255));
        welcomeLongLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        org.jdesktop.layout.GroupLayout mainMenuPanelLayout = new org.jdesktop.layout.GroupLayout(mainMenuPanel);
        mainMenuPanel.setLayout(mainMenuPanelLayout);
        mainMenuPanelLayout.setHorizontalGroup(
            mainMenuPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainMenuPanelLayout.createSequentialGroup()
                .add(welcomeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(welcomeLongLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 356, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(74, 74, 74))
        );
        mainMenuPanelLayout.setVerticalGroup(
            mainMenuPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(welcomeLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, welcomeLongLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        opStatusPanel.setBackground(new java.awt.Color(255, 255, 255));

        org.jdesktop.layout.GroupLayout opStatusPanelLayout = new org.jdesktop.layout.GroupLayout(opStatusPanel);
        opStatusPanel.setLayout(opStatusPanelLayout);
        opStatusPanelLayout.setHorizontalGroup(
            opStatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        opStatusPanelLayout.setVerticalGroup(
            opStatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 79, Short.MAX_VALUE)
        );

        subMenuPanel.setBackground(new java.awt.Color(102, 153, 255));

        org.jdesktop.layout.GroupLayout subMenuPanelLayout = new org.jdesktop.layout.GroupLayout(subMenuPanel);
        subMenuPanel.setLayout(subMenuPanelLayout);
        subMenuPanelLayout.setHorizontalGroup(
            subMenuPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 200, Short.MAX_VALUE)
        );
        subMenuPanelLayout.setVerticalGroup(
            subMenuPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        workPanel.setBackground(new java.awt.Color(237, 247, 249));

        org.jdesktop.layout.GroupLayout workPanelLayout = new org.jdesktop.layout.GroupLayout(workPanel);
        workPanel.setLayout(workPanelLayout);
        workPanelLayout.setHorizontalGroup(
            workPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 815, Short.MAX_VALUE)
        );
        workPanelLayout.setVerticalGroup(
            workPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 388, Short.MAX_VALUE)
        );

        workScrollPane.setViewportView(workPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainMenuPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(subMenuPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(workScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE))
            .add(logoPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(opStatusPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(logoPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(mainMenuPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(subMenuPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(workScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(opStatusPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * 添加LOGO
     * 
     */
    private void addLogo(){
        
        ImageIcon icon = new ImageIcon(BaseConstant.appWorkDir+"/images/logo.jpg");
        int  width =0;
        int  height =0;
        
        Image img =icon.getImage();
        width =logoLabel.getWidth();
        height = logoLabel.getHeight();
        
        img = img.getScaledInstance(width,height,Image.SCALE_DEFAULT);
        
        icon.setImage(img);
        logoLabel.setIcon(icon);
    }
    
    /**
     * 生成工作域
     * 
     */
    private void addWorkArea(){
        this.initWorkArea();
    }
    
    /**
     * 初始化工作域
     * 
     */
    private void initWorkArea(){
        
        this.workPanel.removeAll();
        JLabel label = new JLabel();
        label.setSize(this.workPanel.getSize());
        this.workPanel.add(label);
        this.addImageForLabel(label,"content.jpg");
    
    }
    
    /**
     * 添加label图片
     * 
     * @param lable
     * @param imagName 
     */
    private void addImageForLabel(JLabel lable,String imagName){
        
        ImageIcon icon = new ImageIcon(BaseConstant.appWorkDir+"/images/"+imagName);
        int  width =0;
        int  height =0;
        
        Image img =icon.getImage();
        width =lable.getWidth();
        height = lable.getHeight();
        
        img = img.getScaledInstance(width,height,Image.SCALE_DEFAULT);
        
        icon.setImage(img);
        
        lable.setIcon(icon);
        
    }

    /**
     * 生成一级菜单
     * 
     */
    private void genMainMenu(){
        
        JButton bt = null;
        int x =0;
        int y =0;
        int width =80;
        int height = 35;
        int gap =5;
        
        x += this.subMenuPanel.getWidth();
        this.welcomeLabel.setText("※系统菜单");
        String s = BaseConstant.user.getUsername();
        this.welcomeLongLabel.setText("欢迎你！"+BaseConstant.user.getUsername());
        
        //一级菜单
        for(int i=0;i<this.availableTopMenus.size();i++){
            
            SysModuleVo moduleVo = (SysModuleVo)this.availableTopMenus.get(i);
            String moduleId = moduleVo.getModuleId();
            String name = moduleVo.getName();
            bt = this.addButton(moduleId,name,mainMenuPanel,x,y,width,height,JButton.LEFT_ALIGNMENT
                    ,moduleVo.getModuleId());
            bt.setBorder(null);
            bt.addActionListener(this);
            if(i==0){
                bt.setEnabled(false);
            }
            bt.setFocusPainted(false);
            x+=width+gap;
            
        }
        
        Dimension d =Toolkit.getDefaultToolkit().getScreenSize();
        int screenW = (int)d.getWidth();
        int screenH = (int)d.getHeight();
        
        x = screenW -gap-width;

        //添加退出按钮
        bt=this.addButton(BaseConstant.TOP_MODULE_LAST,BaseConstant.TOP_MODULE_LAST_TEXT,
                mainMenuPanel,x,y,width,height,JButton.LEFT_ALIGNMENT,BaseConstant.TOP_MODULE_LAST);
        bt.setBorder(null);
        bt.addActionListener(this);
        
        mainMenuPanel.updateUI();
         
    }
    
    /**
     * 生成状态栏
     * 
     * 
     */
    private void genStatusBar(){
       
        JLabel jl = new JLabel();
        //int opStatusW = this.opStatusPanel.getWidth();
        int opStatusH = this.opStatusPanel.getHeight();
        Dimension d =Toolkit.getDefaultToolkit().getScreenSize();
        Border border = BorderFactory.createLoweredBevelBorder();
        
        int screenW = (int)d.getWidth()-10;
        //int screenH = (int)d.getHeight();
        
        //回调状态栏生成方法，取得状态栏元素
        CallParam callParam = new CallParam();
        callParam.setParam(this.opStatusPanel);
        CallResult callResult = BaseConstant.application.genStatusBarEventCallBack(callParam);
        if(!callResult.isSuccess()){
            logger.log(Level.SEVERE, callResult.getMsg());
            return;
        }
        //生成状态栏
        java.util.List<SBarStatusVo> sBarStatusVos = callResult.getObjs();
        int partLen = sBarStatusVos.size();
        int[] partWs = new int[partLen]; 
        for(int i=0; i<partLen; i++){
            float percent = sBarStatusVos.get(i).getPercent();
            partWs[i] = (int)(screenW*percent);
        }
        int[] part1Ws = new int[partLen];
        int[] part2Ws = new int[partLen];
        for(int i=0; i<partLen; i++){
            String partLabelText = sBarStatusVos.get(i).getText();
            part1Ws[i] = this.getPreferredWidthForLabel(jl,partLabelText, new java.awt.Font("宋体", 1, 14));
            part2Ws[i] = partWs[i]-part1Ws[i];
        }
        
        int x = 0;
        int y1 = 7;//0;
        int width =0;

        String tipMsg = "  提示信息:";
        int part11W = this.getPreferredWidthForLabel(jl,tipMsg,new java.awt.Font("宋体", 1, 14));
        
        int height =(int)jl.getPreferredSize().getHeight()+10;//opStatusH/2;
        
        this.statusOpResultLable = this.addLabel("opResultLabel",tipMsg,this.opStatusPanel,x,y1,0,height,JLabel.LEFT_ALIGNMENT,
                null, new java.awt.Font("宋体", 1, 14),new Color(0,0,0));
        x+=part11W;
        this.statusOpResult = this.addLabel("statusOpResult","",this.opStatusPanel,x,y1,screenW-part11W-3,height,JLabel.LEFT_ALIGNMENT, border,
                new java.awt.Font("宋体", 0, 14),new Color(70,95,125));
        //保存状态结果栏
        BaseConstant.publicPanel.setStatusOpResultComp(this.statusOpResult);
        
        x=0;        
        int y = y1+opStatusH/2-2;     
        for(int i=0; i<partLen; i++){
            String partLabelText = sBarStatusVos.get(i).getText();
            String partLabelName = sBarStatusVos.get(i).getName();
            
            JLabel statusLabel = this.addLabel("_"+partLabelName,partLabelText,this.opStatusPanel,x,y,part1Ws[i],height,JLabel.LEFT_ALIGNMENT,
                null, new java.awt.Font("宋体", 1, 14),new Color(0,0,0));
            statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            x+=part1Ws[i];
            
            JLabel status = this.addLabel(partLabelName,"",this.opStatusPanel,x,y,part2Ws[i],height,JLabel.LEFT_ALIGNMENT,border,
                new java.awt.Font("宋体", 0, 14),new Color(70,95,125));
            status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            x+=part2Ws[i];
            
            this.statusOps.put(partLabelName, status);
            
        }
        //保存连接结果栏
        BaseConstant.publicPanel.setStatusOpLinkComp(this.statusOps);
        
        this.opStatusPanel.updateUI();
        
    }
    
    /**
     * 取Label的宽度
     * 
     * @param jl
     * @param text
     * @return 
     */
    private int getPreferredWidthForLabel(JLabel jl,String text){
        jl.setText(text);
        return (int)jl.getPreferredSize().getWidth();
        
    }
    
    /**
     * 取某字体Label的宽度
     * 
     * @param jl
     * @param text
     * @param font
     * @return 
     */
    private int getPreferredWidthForLabel(JLabel jl,String text,Font font){
        jl.setText(text);
        jl.setFont(font);
        return (int)jl.getPreferredSize().getWidth();

    }
 
    /**
     * 取得所有菜单
     * 
     * 
     */
    private void getAvailableMenus(){
        
        if(!this.availableTopMenus.isEmpty())
            return;
        
        this.topMenusNames.removeAllElements();
        this.secondMenusNames.removeAllElements();
        
        Vector moduleVector = BaseConstant.availableMenus;      //所有菜单
        for(Object moduleObject :moduleVector){
            SysModuleVo moduleVo = (SysModuleVo) moduleObject;
            String level = moduleVo.getModuleLevel();
            String moduleId = moduleVo.getModuleId();
            String parentId = moduleVo.getParentId();
            
            //一级菜单
            if(BaseConstant.MODULE_LEVEL_FIRST.equals(level)){
                this.availableTopMenus.add(moduleVo);
                this.topMenusNames.add(moduleId);
            }
            //二级菜单
            if(BaseConstant.MODULE_LEVEL_SECOND.equals(level)){
                this.availableSecondMenus.add(moduleVo);
                this.secondMenusNames.add(moduleId);
            }
            //三级菜单（按钮）
            if(BaseConstant.MODULE_LEVEL_THIRD.equals(level)){
                Vector buttons = null;
                if(this.modulePriviledges.containsKey(parentId)){
                    buttons = (Vector) modulePriviledges.get(parentId);
                }else{
                    buttons = new Vector();
                }
                buttons.add(moduleVo.getName());
                this.modulePriviledges.put(parentId, buttons);
            }
        }        
    }
    
    /**
     * 根据模块ID取得处理类
     * 
     * @param moduleID
     * @return 
     */
    private String getClassNameByModuleID(String moduleID){
        
        String className = "";
        if(this.availableSecondMenus.isEmpty())
            return "";
        SysModuleVo moduleVo = null;
        String md = null;
        for(int i=0;i<this.availableSecondMenus.size();i++){
            moduleVo = (SysModuleVo)this.availableSecondMenus.get(i);
            md = moduleVo.getModuleId();
            if(md.equals(moduleID)){
                className = moduleVo.getHandleClassName();
                return className;
            }
        }
        return className;
        
    }
    
    /**
     *生成初始二级菜单
     * 
     */
    private void genFirstSubMenuByMainMenu(){
        
        if(this.availableTopMenus.isEmpty())
            return ;
        SysModuleVo firstTopMenu =  (SysModuleVo)this.availableTopMenus.get(0);
        String moduleId = firstTopMenu.getModuleId();
        this.genSubMenuByMainMenu(moduleId);
    }
    
    /**
     * 根据一级菜单生成二级菜单
     * 
     * @param moduleId 
     */
    private void genSubMenuByMainMenu(String moduleId){
        
        subMenuPanel.removeAll();
        Vector subMenus = this.getAllSubMenusByMainMenu(moduleId);
        int x =0;
        int y =40;
        int width =120;
        int height =25;
        int gap =5;
        
        int paneW = subMenuPanel.getWidth();
        x = (paneW-width)/2;
        
        for(int i=0;i<subMenus.size();i++){
            SysModuleVo moduleVo = (SysModuleVo)subMenus.get(i);
            String name = moduleVo.getModuleId();
            String text = moduleVo.getName();
            JButton jb =this.addButton(name,text,this.subMenuPanel,x,y,width,height,JButton.CENTER_ALIGNMENT,
                    moduleVo.getModuleId());
            jb.setBorder(null);
            jb.addActionListener(this);
            y +=height+gap;
            
        }

        this.initWorkArea();
        subMenuPanel.updateUI();
            
    }
   
    /**
     * 根据模块ID获得所有子菜单
     * 
     * @param moduleId
     * @return 
     */
    private Vector getAllSubMenusByMainMenu(String moduleId){
        
        Vector moduleVos = new Vector();
        for(Object moduleObject: this.availableSecondMenus){
            SysModuleVo moduleVo = (SysModuleVo)moduleObject;
            if(moduleVo.getParentId().equals(moduleId)){
                moduleVos.add(moduleVo);
            }
        }
        return moduleVos;
    }
    
    /**
     * 添加按钮
     * 
     * @param name
     * @param text
     * @param c
     * @param x
     * @param y
     * @param width
     * @param height
     * @param alignment
     * @return 
     */
    private JButton addButton(String name,String text,Container c,int x,int y,
            int width,int height,float alignment){
        
        JButton button = new JButton();
        Insets is = new Insets(0,0,0,0);
        button.setText(text);
        button.setSize(width,height);
        button.setLocation(x,y);
        button.setMargin(is);
        button.setName(name);
 
        c.add(button);
        
        return button;
        
    }
    
    /**
     * 添加按钮
     * 
     * @param name
     * @param text
     * @param c
     * @param x
     * @param y
     * @param width
     * @param height
     * @param alignment
     * @param font
     * @return 
     */
    private JButton addButton(String name,String text,Container c,int x,int y,
            int width,int height,float alignment,Font font){
        
        JButton button = new JButton();
        Insets is = new Insets(0,0,0,0);
        button.setText(text);
        button.setSize(width,height);
        button.setLocation(x,y);
        button.setMargin(is);
        button.setName(name);
        button.setFont(font);
        //  button.setAlignmentX(alignment);
        c.add(button);
        
        return button;
        
    }	
	
    /**
     * 添加按钮
     * 
     * @param name
     * @param text
     * @param c
     * @param x
     * @param y
     * @param width
     * @param height
     * @param alignment
     * @param menu_icon
     * @return 
     */
    private JButton addButton(String name,String text,Container c,int x,int y,
            int width,int height,float alignment, String menu_icon){
        
        JButton button = new JButton();
        Insets is = new Insets(0,0,0,0);
        button.setSize(width,height);
        button.setLocation(x,y);
        button.setMargin(is);
        button.setName(name);
        
        if(menu_icon!=null&&menu_icon.trim().length()>0){
            File f;
            File sf;
            String icon_name = "";
            if(menu_icon.trim().length()==2||"shift".equals(menu_icon.trim())){
                f = new File(BaseConstant.appWorkDir+"/images/menu/"+"main_icon"+".png");
                sf = new File(BaseConstant.appWorkDir+"/images/menu/"+"selected_main_icon"+".png");
                if(f.exists()){
                    icon_name = "main_icon";
                    ImageIcon icon = setButtonIcon(icon_name, width, height);
                    button.setIcon(icon);
                }
                if(sf.exists()){
                    icon_name = "selected_main_icon";
                    ImageIcon selectedIcon = setButtonIconSelected(icon_name, width, height);
                    button.setDisabledIcon(selectedIcon);
                }
            }else{
                f = new File(BaseConstant.appWorkDir+"/images/menu/"+"sub_icon"+".png");
                sf = new File(BaseConstant.appWorkDir+"/images/menu/"+"selected_sub_icon"+".png");
                if(f.exists()){
                    icon_name = "sub_icon";
                    ImageIcon icon = setButtonIcon(icon_name, width, height);
                    button.setIcon(icon);
                }
                if(sf.exists()){
                    icon_name = "selected_sub_icon";
                    ImageIcon selectedIcon = setButtonIconSelected(icon_name, width, height);
                    button.setDisabledIcon(selectedIcon);
                }
            }
        }
        button.setText(text);
        button.setHorizontalTextPosition(JButton.CENTER);
        button.setVerticalTextPosition(JButton.CENTER);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        //  button.setAlignmentX(alignment);
        c.add(button);
        return button;

    }
    /*
    * 生成未选中时按钮icon
    *@param icon_name
    *@param width
    *@param height
    *@return icon
    */
    private ImageIcon setButtonIcon(String icon_name, int width,int height){
        ImageIcon icon = new ImageIcon(BaseConstant.appWorkDir+"/images/menu/"+icon_name+".png");
        Image img =icon.getImage();
        img = img.getScaledInstance(width,height,Image.SCALE_DEFAULT);
        icon.setImage(img);
        return icon;
    }
    
    /*
    * 生成选中时按钮icon
    *@param icon_name
    *@param width
    *@param height
    *@return selectedIcon
    */
    private ImageIcon setButtonIconSelected(String icon_name, int width,int height){
        ImageIcon selectedIcon = new ImageIcon(BaseConstant.appWorkDir+"/images/menu/"+icon_name+".png");
        Image img =selectedIcon.getImage();
        img = img.getScaledInstance(width,height,Image.SCALE_DEFAULT);
        selectedIcon.setImage(img);
        return selectedIcon;
    }
    /**
     * 添加标签
     * 
     * @param name
     * @param text
     * @param c
     * @param x
     * @param y
     * @param width
     * @param height
     * @param alignment
     * @param border
     * @return 
     */
    private JLabel addLabel(String name,String text,Container c,int x,int y,
            int width,int height,float alignment,Border border){
        
        int preWidth =0;
        JLabel label = new JLabel();
        Insets is = new Insets(0,0,0,0);
        label.setText(text);
        
        label.setLocation(x,y);
        //label.setMargin(is);
        label.setName(name);
        label.setBorder(border);
        //  button.setAlignmentX(alignment);
        if(width==0){
            preWidth = (int)label.getPreferredSize().getWidth();
            width = preWidth;
        }
        label.setSize(width,height);
        
        //logger.debug("name="+name+" Width="+width);
        c.add(label);
        
        return label;
        
    }
    
    /**
     * 添加标签
     * 
     * @param name
     * @param text
     * @param c
     * @param x
     * @param y
     * @param width
     * @param height
     * @param alignment
     * @param border
     * @param font
     * @param color
     * @return 
     */
    private JLabel addLabel(String name,String text,Container c,int x,int y,
            int width,int height,float alignment,Border border,Font font,Color color){
        
        int preWidth =0;
        int preHeigth=0;
        JLabel label = new JLabel();
        Insets is = new Insets(0,0,0,0);
        label.setText(text);

        label.setLocation(x,y);
        //label.setMargin(is);
        label.setName(name);
        label.setBorder(border);
        if(color!=null){
            label.setForeground(color);
        }
        if(font!=null){
            label.setFont(font);
        }

        //  button.setAlignmentX(alignment);
        if(width==0){
            preWidth = (int)label.getPreferredSize().getWidth();
            width = preWidth;
        }
        if(height==0){
            preHeigth = (int)label.getPreferredSize().getHeight();
            height = preHeigth;
        }

        label.setSize(width,height);

        //logger.debug("name="+name+" Width="+width);
        c.add(label);

        return label;

    }
    
    /**
     * 最大化窗口
     * 
     */
    private void maxWindow(){
        
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice  gd = ge.getDefaultScreenDevice();
//        //这个代码有问题，在弹出对话框后，移动对话框，会出现对话框看不见的情况
//        //gd.setFullScreenWindow(this);
        DisplayMode dm = gd.getDisplayMode();
        this.setBounds(0,0,dm.getWidth(),dm.getHeight());
        this.setVisible(true);
        this.toFront();
    }
    
    /**
     * 按钮点击后的事件方法
     * 
     * @param e 
     */
    public void actionPerformed(ActionEvent e) {
        
        CallParam callParam = new CallParam();
        callParam.setParam(e);
        CallResult callResult = null;
        //回调菜单点击事件
        callResult = BaseConstant.application.menuClickEventCallBack(callParam);
        if(!callResult.isSuccess()){
            logger.log(Level.SEVERE, callResult.getMsg());
            return;
        }
        //回调窗口离开事件
        if(BaseConstant.baseMainWindow != null){
            callResult = BaseConstant.baseMainWindow.closingEventCallBack(null);
            if(!callResult.isSuccess()){
                MessageShowUtil.alertWarnMsg(callResult.getMsg());
                return;
            }
            BaseConstant.baseMainWindow = null;
        }
        
        JButton jb = (JButton)e.getSource();
        String name = jb.getName();
        
        if(name.equals(BaseConstant.TOP_MODULE_LAST)){
            logger.info("用户:"+BaseConstant.user.getAccount());
            logger.info("点击退出系统按钮");
//            //回调退出事件
//            callResult = BaseConstant.application.exitEventCallBack(callParam);
//            if(!callResult.isSuccess()){
//                logger.log(Level.SEVERE, callResult.getMsg());
//                return;
//            }
//  modify by lijia 2017/11/28
            //回调退出事件
            try{
                callResult = BaseConstant.application.exitEventCallBack(callParam);
                if(!callResult.isSuccess()){
                    logger.log(Level.SEVERE, callResult.getMsg());
                    //return;
                }
            }catch(Exception ex){
                logger.log(Level.SEVERE, ex.getMessage());
            }
            System.exit(0);
            logger.info("退出系统");
        }
        if(this.topMenusNames.contains(name)){
            this.genSubMenuByMainMenu(name);
            this.setMainMenuBackground(jb);//设置主菜单按钮的背景
        }
        
        if(this.secondMenusNames.contains(name)){
            this.statusOpResult.setText("");//欢迎使用本系统！
            this.handleSubMenuBusiness(name);
            BaseConstant.SECOND_CUR_MODULE_ID = name;
            BaseConstant.SECOND_CUR_MODULE_NAME = jb.getText();
            this.setSubMenuBackground(jb);//设置子菜单按钮的背景
        }
    }
    
    /**
     * 设置主菜单按钮的背景
     * 设置当前被选中的按钮为选中标志，其它按钮设置为正常颜色
     * 
     * @param jbutton 当前被选中的按钮
     */
    public void setMainMenuBackground(JButton jbutton){
        JPanel jpanel = (JPanel)jbutton.getParent();
        Component[] component = jpanel.getComponents();
        
        for(int i =0;i <component.length;i++){
            //非按钮
            if(!( component[i] instanceof JButton))
                continue;
            //非主菜单按钮
            if(!topMenusNames.contains(component[i].getName())){
                continue;
            }
            ((JButton) component[i] ).setEnabled(true);
            ((JButton) component[i] ).setFocusPainted(false);
            //  ((JButton) component[i] ).setSelected(false);
            // component[i].setBackground(new Color(238,238,238));
            
        }
        jbutton.setEnabled(false);
        jbutton.setFocusPainted(false);
        // jbutton.setSelected(true);
    }
    
    /**
     * 设置子菜单按钮的背景
     * 设置当前被选中的按钮为选中标志，其它按钮设置为正常颜色
     * 
     * @param jbutton 当前被选中的按钮 
     */
    public void setSubMenuBackground(JButton jbutton){
        JPanel jpanel = (JPanel)jbutton.getParent();
        if(null == jpanel){
            return;
        }
        Component[] component = jpanel.getComponents();
        
        for(int i =0;i <component.length;i++){
            //非按钮
            if(!( component[i] instanceof JButton))
                continue;
            //非主菜单按钮
            if(!secondMenusNames.contains(component[i].getName())){
                continue;
            }
            ((JButton) component[i] ).setEnabled(true);
            ((JButton) component[i] ).setFocusPainted(false);
            //  ((JButton) component[i] ).setSelected(false);
            // component[i].setBackground(new Color(238,238,238));
            
        }
        jbutton.setEnabled(false);
        jbutton.setFocusPainted(false);
    }
    
    /**
     * 菜单的业务处理方法
     * 
     * @param moduleID 
     */
    public void handleSubMenuBusiness(String moduleID){
     
        String className = this.getClassNameByModuleID(moduleID);
        if(className ==null || className.length()==0) {
            this.initWorkArea();
            MessageShowUtil.warnOpMsg("增加模块"+moduleID+"的处理类信息");
            return;
        }

        try {
            Object object = Class.forName(className).newInstance();

            Component com = (Component)object;
            
            //回调方法，窗口打开事件
            if(com instanceof IBaseWindow){
                CallResult callResult = ((BasePanel)com).openingEventCallBack(null);
                if(!callResult.isSuccess()){
                    MessageShowUtil.alertWarnMsg(callResult.getMsg());
                    return;
                }
                //保存主窗口
                BaseConstant.baseMainWindow = (IBaseWindow) com;
            }
            
            //是否检查模块按钮
            if(isCheckPriviledge(moduleID)){
                this.applyPriviledge(moduleID,com);
            }
            
            Dimension dim = com.getSize();
            Dimension wDim =this.workPanel.getSize();
  
            if(dim.getWidth()>wDim.getWidth())
                wDim.setSize(dim.getWidth(),wDim.getHeight());
            if(dim.getHeight()>wDim.getHeight()){
                wDim.setSize(wDim.getWidth(),dim.getHeight());

            }
            wDim.setSize(wDim.getWidth(),wDim.getHeight()+100);

            com.setSize(wDim);
            this.workPanel.removeAll();
            this.workPanel.setSize(wDim);
            
            //是否是弹出窗口，如果弹出窗口，则全屏模态显示
            if(com instanceof JDialog){
                JDialog dialog = (JDialog)com;
                UIUtil.maxWindow(dialog);
                dialog.setModal(true);
                dialog.setVisible(true);
                
                this.genFirstSubMenuByMainMenu();
            }else{
                this.workPanel.add(com);
                //必须在add(com)之后
                com.requestFocus();
                this.workScrollPane.setViewportView(this.workPanel);
                this.workScrollPane.updateUI();
            }
        } catch (InstantiationException ex) {
            logger.log(Level.SEVERE, ex.getMessage(),ex);
        } catch (IllegalAccessException ex) {
            logger.log(Level.SEVERE, ex.getMessage(),ex);
        } catch (ClassNotFoundException ex) {
            MessageShowUtil.errorOpMsg("处理业务类没有定义，请添加业务处理类"+className);
            logger.log(Level.SEVERE, ex.getMessage(),ex);
        }
        
    }
    
    /**
     * 是否检查模块按钮
     * 
     * @param moduleId
     * @return 
     */
    private boolean isCheckPriviledge(String moduleId){
        
        for(Object moduleObj: this.availableSecondMenus){
            SysModuleVo moduleVo = (SysModuleVo)moduleObj;
            if(moduleVo.getModuleId().equals(moduleId)){
                return moduleVo.isCheckNext();
            }
        }
        
        return true;
    }
    
    /**
     * 设置模块的元素（按钮）的激活状态
     * 
     * @param moduleId
     * @param com 
     */
    private void applyPriviledge(String moduleId ,Component com){
        
        String buttonName;
        Vector buttonNames = (Vector)this.modulePriviledges.get(moduleId);
        if(!(com instanceof JPanel))
            return ;
        Vector buttons = new Vector();
        this.findButtons(com,buttons);
        JButton button ;
        for(int i=0;i<buttons.size();i++){
            button = (JButton)buttons.get(i);
            
            buttonName = button.getName();
            //    logger.debug("button Name="+buttonName);
            if(!this.isValidButton(buttonName,buttonNames)){
                logger.log(Level.INFO, "disabled button name is:"+button.getName());
                button.setEnabled(false);
            }

        }
        
    }
    
    /**
     * 添加元素（按钮）到集合（递归）
     * 
     * @param com
     * @param buttons 
     */
    private void findButtons(Component com,Vector buttons){
        
        if(com instanceof JButton){
            buttons.add(com);
            return;
        }
        if(!(com instanceof Container))
            return;
        Container ct =(Container)com;
        Component component;
        for(int i=0;i<ct.getComponentCount();i++){
            component = ct.getComponent(i);
            this.findButtons(component,buttons);    //递归
           
        }
        
    }
    
    /**
     * 是否有效按钮
     * 
     * @param buttonName
     * @param buttonNames
     * @return 
     */
    private boolean isValidButton(String buttonName,Vector buttonNames){
        if(buttonNames == null || buttonNames.isEmpty())
            return true;
        if(buttonName ==null || buttonName.length() ==0)
            return true;
        if(buttonNames.contains(buttonName))
            return true;
        return false;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel logoLabel;
    private javax.swing.JPanel logoPanel;
    private javax.swing.JPanel mainMenuPanel;
    private javax.swing.JPanel opStatusPanel;
    private javax.swing.JPanel subMenuPanel;
    private javax.swing.JLabel welcomeLabel;
    private javax.swing.JLabel welcomeLongLabel;
    private javax.swing.JPanel workPanel;
    private javax.swing.JScrollPane workScrollPane;
    // End of variables declaration//GEN-END:variables
    
}
