/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.goldsign.esmcs.test;

import com.goldsign.esmcs.dll.library.EsPkBoxDll;
import com.goldsign.esmcs.dll.library.EsPkChanelDll;
import com.goldsign.esmcs.dll.structure.AlermInf;
import com.goldsign.esmcs.dll.structure.BoxInf;
import com.goldsign.esmcs.dll.structure.CardInf;
import com.goldsign.rwcommu.exception.SerialException;
import com.goldsign.rwcommu.test.TestSerial;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author lenovo
 */
public class TestPkFrame extends javax.swing.JFrame {

    /**
     * Creates new form TestPkFrame
     */
    public final static Object SYN_WRITE_CARD_LOCK = new Object();
    public TestPkFrame() {
       
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        openBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        setBoxBtn = new javax.swing.JButton();
        runBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        openBtn.setText("打开");
        openBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBtnActionPerformed(evt);
            }
        });

        closeBtn.setText("关闭");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        setBoxBtn.setText("设置");
        setBoxBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBoxBtnActionPerformed(evt);
            }
        });

        runBtn.setText("运行");
        runBtn.setFocusPainted(false);
        runBtn.setFocusable(false);
        runBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBtnActionPerformed(evt);
            }
        });

        jButton1.setText("启动/暂停");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(openBtn)
                .addGap(18, 18, 18)
                .addComponent(closeBtn)
                .addGap(18, 18, 18)
                .addComponent(setBoxBtn)
                .addGap(18, 18, 18)
                .addComponent(runBtn)
                .addGap(30, 30, 30)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(259, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openBtn)
                    .addComponent(closeBtn)
                    .addComponent(setBoxBtn)
                    .addComponent(runBtn)
                    .addComponent(jButton1))
                .addContainerGap(534, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(66, 66, 66))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static CardInf[] cardInfs = (CardInf[]) new CardInf().toArray(15);
    private boolean initChannel(){
        short port = 2;
        int result = EsPkChanelDll.INSTANCE.ACCAPI_Open(port);
        if(result != 0){
            JOptionPane.showMessageDialog(this,"打开通道端口失败", "结果", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        result = EsPkChanelDll.INSTANCE.ACCAPI_Init();
        
        if(result != 0){
            JOptionPane.showMessageDialog(this,"初始化通道失败", "结果", JOptionPane.ERROR_MESSAGE);
            EsPkChanelDll.INSTANCE.ACCAPI_Close();
            return false;
        }
        result = EsPkChanelDll.INSTANCE.ACCAPI_ResetACC(cardInfs, null);
        //result = EsPkChanelDll.INSTANCE.ACCAPI_MADAToZero();
        if(result != 0){
            result = EsPkChanelDll.INSTANCE.ACCAPI_MADAToZero();
            if(result != 0){
                EsPkChanelDll.INSTANCE.ACCAPI_Close();
                return false;
            }
            result = EsPkChanelDll.INSTANCE.ACCAPI_ResetACC(cardInfs, null);
            if(result != 0){
                EsPkChanelDll.INSTANCE.ACCAPI_Close();
                return false;
            }
        }
        
        return true;
    }
    
    private boolean initBox(){
        short port = 3;
        boolean result = EsPkBoxDll.INSTANCE.ESBoxAPI_InitCom(port);
        if(!result){
            JOptionPane.showMessageDialog(this,"初始化票箱失败", "结果", JOptionPane.ERROR_MESSAGE);
        }
        
        return result;
    }
    
    private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBtnActionPerformed
        // TODO add your handling code here:
        boolean result = false;
        result = initChannel();
        if(result){
            result = initBox();
        } 
        
        if(result){
            JOptionPane.showMessageDialog(this,"打开端口成功", "结果", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_openBtnActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        // TODO add your handling code here:
        closePort();
    }//GEN-LAST:event_closeBtnActionPerformed

    private void setBoxBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setBoxBtnActionPerformed
        // TODO add your handling code here:
        boolean result = false;
        result = checkBox();
        if(result){
            result = setBox();
        }
        
        if(result){
            JOptionPane.showMessageDialog(this,"设置票箱成功", "结果", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_setBoxBtnActionPerformed

    private void runBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBtnActionPerformed
       
         synchronized(SYN_WRITE_CARD_LOCK){
            try{
                SYN_WRITE_CARD_LOCK.notifyAll();
               // SYN_WRITE_CARD_LOCK.wait();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
                
        // TODO add your handling code here:
    }//GEN-LAST:event_runBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        stopOrContinue();
    }//GEN-LAST:event_jButton1ActionPerformed
    
     byte st = 1;
    private void stopOrContinue(){
        int result = 0;
        if(st==1){
            st = 0;
            result = EsPkChanelDll.INSTANCE.ACCAPI_PauseOrContinue(st);
        }else{
            st = 1;
            result = EsPkChanelDll.INSTANCE.ACCAPI_PauseOrContinue(st);
        }
    }
    int cardNo = 1000000;
    byte curRecBox = 3;
      private  void runn()  throws Exception {
        synchronized(SYN_WRITE_CARD_LOCK){
                 SYN_WRITE_CARD_LOCK.wait();
         }  
        
        while (true) {
           
            if(st == 0){
                try{
                    Thread.sleep(100);
                    continue;
                }catch(InterruptedException e){
                    e.printStackTrace();
                }
                
            }
            boolean oneHaveCard = false;
            for (int i = 0; i < 15; i++) {
                if (cardInfs[i].CurrSite == 1) {
                    oneHaveCard = true;
                    break;
                }
            }
            int result = 0;
            if (!oneHaveCard) {
                result = EsPkChanelDll.INSTANCE.ACCAPI_SendCard(cardNo++, cardInfs, new short[100]);
                if (result != 0) {
                    JOptionPane.showMessageDialog(this, "发卡失败:" + result, "结果", JOptionPane.ERROR_MESSAGE);
                    result = EsPkChanelDll.INSTANCE.ACCAPI_MoveCard(cardInfs, new short[100]);
                    return;
                }
            }else{
                result = EsPkChanelDll.INSTANCE.ACCAPI_MoveCard(cardInfs, new short[100]);
                if(result != 0){
                    JOptionPane.showMessageDialog(this, "走卡失败:" + result, "结果", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                for(int i=0; i<15; i++){
                    if(cardInfs[i].CurrSite == 2 && cardInfs[i].TagSite == 2){
                        System.out.println("---------------写卡"+cardInfs[i].CardNo+"----------------");
                        writeCard();
                    }
                    if(cardInfs[i].State == 2){
                        //---------------------
                    }
                    if(curRecBox<6){
                        
                    cardInfs[i].TagSite = curRecBox;
                    curRecBox++;
                    }else if(curRecBox==6){
                        curRecBox = 3;
                     cardInfs[i].TagSite = curRecBox;
                     curRecBox++;
                    }
                }
            }
        }
    }
  
    
    private void writeCard(){
        try {
            new TestSerial().main(null);
        } catch (Exception ex) {
            Logger.getLogger(TestPkFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    static BoxInf[] boxInfs = (BoxInf[]) new BoxInf().toArray(13);
    static AlermInf.ByReference alermInf = new AlermInf.ByReference();  
    
    private boolean checkBox(){
        int result = EsPkBoxDll.INSTANCE.ESBoxAPI_GetCardBoxState(boxInfs, alermInf);
        if(result != 0){
            JOptionPane.showMessageDialog(this,"取票箱状态失败："+result, "结果", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        for(int i=0; i<5; i++){
            if(boxInfs[i].Box_Run_State==4 || boxInfs[i].Box_Run_State==5){
                if(boxInfs[i].Box_Full_State == 2){
                    JOptionPane.showMessageDialog(this,"票箱："+(i+1)+" 已满，请更换！", "结果", JOptionPane.INFORMATION_MESSAGE);
                    return false;
                }else if(boxInfs[i].Box_Full_State == 1){
                    JOptionPane.showMessageDialog(this,"票箱："+(i+1)+" 将满，请更换！", "结果", JOptionPane.INFORMATION_MESSAGE);
                    return false;
                }
            }else{
                JOptionPane.showMessageDialog(this,"票箱："+(i+1)+" 有问题，请检查！", "结果", JOptionPane.ERROR_MESSAGE);
                
                return false;
            }
        }
        
        return true;
    }
    
    boolean[] boxs = new boolean[5];
    private boolean setBox(){
    
        boxs[0] = false;
        boxs[1] = true;
        boxs[2] = true;
        boxs[3] = true;
        boxs[4] = true;
        
        return true;
    }
    
    private void closePort(){
       int result =  EsPkChanelDll.INSTANCE.ACCAPI_Close();
       result = EsPkBoxDll.INSTANCE.ESBoxAPI_ExitCom();
        JOptionPane.showMessageDialog(this,"关闭成功", "结果", JOptionPane.INFORMATION_MESSAGE);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestPkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestPkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestPkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestPkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
       final TestPkFrame a =  new TestPkFrame();
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {       
                 a.setVisible(true);
                }
             });
              try{
              a.runn();
              }catch(Exception e){
               e.printStackTrace();
            }
        
         
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton openBtn;
    private javax.swing.JButton runBtn;
    private javax.swing.JButton setBoxBtn;
    // End of variables declaration//GEN-END:variables
}
